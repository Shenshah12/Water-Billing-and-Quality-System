
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b08  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb8  08011c40  08011c40  00021c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012af8  08012af8  0003e5d8  2**0
                  CONTENTS
  4 .ARM          00000008  08012af8  08012af8  00022af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b00  08012b00  0003e5d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012b00  08012b00  00022b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012b08  08012b08  00022b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000118  20000000  08012b10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000ee0  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00001348  20000118  20000118  00040118  2**2
                  ALLOC
 12 RAM1_region   00000000  20001460  20001460  0003e5d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001460  20001460  00040118  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY
 16 .comment      00000043  00000000  00000000  0003e602  2**0
                  CONTENTS, READONLY
 17 .debug_info   00056d84  00000000  00000000  0003e645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000ba95  00000000  00000000  000953c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00016889  00000000  00000000  000a0e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00002c80  00000000  00000000  000b76e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 000023f1  00000000  00000000  000ba368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002b8dc  00000000  00000000  000bc759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0004d2ed  00000000  00000000  000e8035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000e05f1  00000000  00000000  00135322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  00007b08  00000000  00000000  00215914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000084  00000000  00000000  0021d41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000118 	.word	0x20000118
 8000154:	00000000 	.word	0x00000000
 8000158:	08011c28 	.word	0x08011c28

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000011c 	.word	0x2000011c
 8000174:	08011c28 	.word	0x08011c28

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_f2iz>:
 800087c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000880:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000884:	d30f      	bcc.n	80008a6 <__aeabi_f2iz+0x2a>
 8000886:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800088a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800088e:	d90d      	bls.n	80008ac <__aeabi_f2iz+0x30>
 8000890:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000898:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800089c:	fa23 f002 	lsr.w	r0, r3, r2
 80008a0:	bf18      	it	ne
 80008a2:	4240      	negne	r0, r0
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr
 80008ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80008b0:	d101      	bne.n	80008b6 <__aeabi_f2iz+0x3a>
 80008b2:	0242      	lsls	r2, r0, #9
 80008b4:	d105      	bne.n	80008c2 <__aeabi_f2iz+0x46>
 80008b6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80008ba:	bf08      	it	eq
 80008bc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008c0:	4770      	bx	lr
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_uldivmod>:
 80008c8:	b953      	cbnz	r3, 80008e0 <__aeabi_uldivmod+0x18>
 80008ca:	b94a      	cbnz	r2, 80008e0 <__aeabi_uldivmod+0x18>
 80008cc:	2900      	cmp	r1, #0
 80008ce:	bf08      	it	eq
 80008d0:	2800      	cmpeq	r0, #0
 80008d2:	bf1c      	itt	ne
 80008d4:	f04f 31ff 	movne.w	r1, #4294967295
 80008d8:	f04f 30ff 	movne.w	r0, #4294967295
 80008dc:	f000 b970 	b.w	8000bc0 <__aeabi_idiv0>
 80008e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008e8:	f000 f806 	bl	80008f8 <__udivmoddi4>
 80008ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f4:	b004      	add	sp, #16
 80008f6:	4770      	bx	lr

080008f8 <__udivmoddi4>:
 80008f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008fc:	9e08      	ldr	r6, [sp, #32]
 80008fe:	460d      	mov	r5, r1
 8000900:	4604      	mov	r4, r0
 8000902:	460f      	mov	r7, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14a      	bne.n	800099e <__udivmoddi4+0xa6>
 8000908:	428a      	cmp	r2, r1
 800090a:	4694      	mov	ip, r2
 800090c:	d965      	bls.n	80009da <__udivmoddi4+0xe2>
 800090e:	fab2 f382 	clz	r3, r2
 8000912:	b143      	cbz	r3, 8000926 <__udivmoddi4+0x2e>
 8000914:	fa02 fc03 	lsl.w	ip, r2, r3
 8000918:	f1c3 0220 	rsb	r2, r3, #32
 800091c:	409f      	lsls	r7, r3
 800091e:	fa20 f202 	lsr.w	r2, r0, r2
 8000922:	4317      	orrs	r7, r2
 8000924:	409c      	lsls	r4, r3
 8000926:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800092a:	fa1f f58c 	uxth.w	r5, ip
 800092e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000932:	0c22      	lsrs	r2, r4, #16
 8000934:	fb0e 7711 	mls	r7, lr, r1, r7
 8000938:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800093c:	fb01 f005 	mul.w	r0, r1, r5
 8000940:	4290      	cmp	r0, r2
 8000942:	d90a      	bls.n	800095a <__udivmoddi4+0x62>
 8000944:	eb1c 0202 	adds.w	r2, ip, r2
 8000948:	f101 37ff 	add.w	r7, r1, #4294967295
 800094c:	f080 811b 	bcs.w	8000b86 <__udivmoddi4+0x28e>
 8000950:	4290      	cmp	r0, r2
 8000952:	f240 8118 	bls.w	8000b86 <__udivmoddi4+0x28e>
 8000956:	3902      	subs	r1, #2
 8000958:	4462      	add	r2, ip
 800095a:	1a12      	subs	r2, r2, r0
 800095c:	b2a4      	uxth	r4, r4
 800095e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000962:	fb0e 2210 	mls	r2, lr, r0, r2
 8000966:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800096a:	fb00 f505 	mul.w	r5, r0, r5
 800096e:	42a5      	cmp	r5, r4
 8000970:	d90a      	bls.n	8000988 <__udivmoddi4+0x90>
 8000972:	eb1c 0404 	adds.w	r4, ip, r4
 8000976:	f100 32ff 	add.w	r2, r0, #4294967295
 800097a:	f080 8106 	bcs.w	8000b8a <__udivmoddi4+0x292>
 800097e:	42a5      	cmp	r5, r4
 8000980:	f240 8103 	bls.w	8000b8a <__udivmoddi4+0x292>
 8000984:	4464      	add	r4, ip
 8000986:	3802      	subs	r0, #2
 8000988:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800098c:	1b64      	subs	r4, r4, r5
 800098e:	2100      	movs	r1, #0
 8000990:	b11e      	cbz	r6, 800099a <__udivmoddi4+0xa2>
 8000992:	40dc      	lsrs	r4, r3
 8000994:	2300      	movs	r3, #0
 8000996:	e9c6 4300 	strd	r4, r3, [r6]
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	428b      	cmp	r3, r1
 80009a0:	d908      	bls.n	80009b4 <__udivmoddi4+0xbc>
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	f000 80ec 	beq.w	8000b80 <__udivmoddi4+0x288>
 80009a8:	2100      	movs	r1, #0
 80009aa:	e9c6 0500 	strd	r0, r5, [r6]
 80009ae:	4608      	mov	r0, r1
 80009b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b4:	fab3 f183 	clz	r1, r3
 80009b8:	2900      	cmp	r1, #0
 80009ba:	d149      	bne.n	8000a50 <__udivmoddi4+0x158>
 80009bc:	42ab      	cmp	r3, r5
 80009be:	d302      	bcc.n	80009c6 <__udivmoddi4+0xce>
 80009c0:	4282      	cmp	r2, r0
 80009c2:	f200 80f7 	bhi.w	8000bb4 <__udivmoddi4+0x2bc>
 80009c6:	1a84      	subs	r4, r0, r2
 80009c8:	eb65 0203 	sbc.w	r2, r5, r3
 80009cc:	2001      	movs	r0, #1
 80009ce:	4617      	mov	r7, r2
 80009d0:	2e00      	cmp	r6, #0
 80009d2:	d0e2      	beq.n	800099a <__udivmoddi4+0xa2>
 80009d4:	e9c6 4700 	strd	r4, r7, [r6]
 80009d8:	e7df      	b.n	800099a <__udivmoddi4+0xa2>
 80009da:	b902      	cbnz	r2, 80009de <__udivmoddi4+0xe6>
 80009dc:	deff      	udf	#255	; 0xff
 80009de:	fab2 f382 	clz	r3, r2
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	f040 808f 	bne.w	8000b06 <__udivmoddi4+0x20e>
 80009e8:	1a8a      	subs	r2, r1, r2
 80009ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ee:	fa1f fe8c 	uxth.w	lr, ip
 80009f2:	2101      	movs	r1, #1
 80009f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80009f8:	fb07 2015 	mls	r0, r7, r5, r2
 80009fc:	0c22      	lsrs	r2, r4, #16
 80009fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a02:	fb0e f005 	mul.w	r0, lr, r5
 8000a06:	4290      	cmp	r0, r2
 8000a08:	d908      	bls.n	8000a1c <__udivmoddi4+0x124>
 8000a0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000a0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a12:	d202      	bcs.n	8000a1a <__udivmoddi4+0x122>
 8000a14:	4290      	cmp	r0, r2
 8000a16:	f200 80ca 	bhi.w	8000bae <__udivmoddi4+0x2b6>
 8000a1a:	4645      	mov	r5, r8
 8000a1c:	1a12      	subs	r2, r2, r0
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a24:	fb07 2210 	mls	r2, r7, r0, r2
 8000a28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000a30:	45a6      	cmp	lr, r4
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x14e>
 8000a34:	eb1c 0404 	adds.w	r4, ip, r4
 8000a38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a3c:	d202      	bcs.n	8000a44 <__udivmoddi4+0x14c>
 8000a3e:	45a6      	cmp	lr, r4
 8000a40:	f200 80ba 	bhi.w	8000bb8 <__udivmoddi4+0x2c0>
 8000a44:	4610      	mov	r0, r2
 8000a46:	eba4 040e 	sub.w	r4, r4, lr
 8000a4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a4e:	e79f      	b.n	8000990 <__udivmoddi4+0x98>
 8000a50:	f1c1 0720 	rsb	r7, r1, #32
 8000a54:	408b      	lsls	r3, r1
 8000a56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000a62:	fa20 f307 	lsr.w	r3, r0, r7
 8000a66:	40fd      	lsrs	r5, r7
 8000a68:	4323      	orrs	r3, r4
 8000a6a:	fa00 f901 	lsl.w	r9, r0, r1
 8000a6e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000a72:	fa1f fe8c 	uxth.w	lr, ip
 8000a76:	fbb5 f8f0 	udiv	r8, r5, r0
 8000a7a:	0c1c      	lsrs	r4, r3, #16
 8000a7c:	fb00 5518 	mls	r5, r0, r8, r5
 8000a80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a84:	fb08 f50e 	mul.w	r5, r8, lr
 8000a88:	42a5      	cmp	r5, r4
 8000a8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8e:	d90b      	bls.n	8000aa8 <__udivmoddi4+0x1b0>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a98:	f080 8087 	bcs.w	8000baa <__udivmoddi4+0x2b2>
 8000a9c:	42a5      	cmp	r5, r4
 8000a9e:	f240 8084 	bls.w	8000baa <__udivmoddi4+0x2b2>
 8000aa2:	f1a8 0802 	sub.w	r8, r8, #2
 8000aa6:	4464      	add	r4, ip
 8000aa8:	1b64      	subs	r4, r4, r5
 8000aaa:	b29d      	uxth	r5, r3
 8000aac:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ab0:	fb00 4413 	mls	r4, r0, r3, r4
 8000ab4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ab8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000abc:	45a6      	cmp	lr, r4
 8000abe:	d908      	bls.n	8000ad2 <__udivmoddi4+0x1da>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ac8:	d26b      	bcs.n	8000ba2 <__udivmoddi4+0x2aa>
 8000aca:	45a6      	cmp	lr, r4
 8000acc:	d969      	bls.n	8000ba2 <__udivmoddi4+0x2aa>
 8000ace:	3b02      	subs	r3, #2
 8000ad0:	4464      	add	r4, ip
 8000ad2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000ad6:	fba0 8302 	umull	r8, r3, r0, r2
 8000ada:	eba4 040e 	sub.w	r4, r4, lr
 8000ade:	429c      	cmp	r4, r3
 8000ae0:	46c6      	mov	lr, r8
 8000ae2:	461d      	mov	r5, r3
 8000ae4:	d355      	bcc.n	8000b92 <__udivmoddi4+0x29a>
 8000ae6:	d052      	beq.n	8000b8e <__udivmoddi4+0x296>
 8000ae8:	b156      	cbz	r6, 8000b00 <__udivmoddi4+0x208>
 8000aea:	ebb9 030e 	subs.w	r3, r9, lr
 8000aee:	eb64 0405 	sbc.w	r4, r4, r5
 8000af2:	fa04 f707 	lsl.w	r7, r4, r7
 8000af6:	40cb      	lsrs	r3, r1
 8000af8:	40cc      	lsrs	r4, r1
 8000afa:	431f      	orrs	r7, r3
 8000afc:	e9c6 7400 	strd	r7, r4, [r6]
 8000b00:	2100      	movs	r1, #0
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	f1c3 0120 	rsb	r1, r3, #32
 8000b0a:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b0e:	fa20 f201 	lsr.w	r2, r0, r1
 8000b12:	fa25 f101 	lsr.w	r1, r5, r1
 8000b16:	409d      	lsls	r5, r3
 8000b18:	432a      	orrs	r2, r5
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f fe8c 	uxth.w	lr, ip
 8000b22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b26:	fb07 1510 	mls	r5, r7, r0, r1
 8000b2a:	0c11      	lsrs	r1, r2, #16
 8000b2c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b30:	fb00 f50e 	mul.w	r5, r0, lr
 8000b34:	428d      	cmp	r5, r1
 8000b36:	fa04 f403 	lsl.w	r4, r4, r3
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x256>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b44:	d22f      	bcs.n	8000ba6 <__udivmoddi4+0x2ae>
 8000b46:	428d      	cmp	r5, r1
 8000b48:	d92d      	bls.n	8000ba6 <__udivmoddi4+0x2ae>
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	4461      	add	r1, ip
 8000b4e:	1b49      	subs	r1, r1, r5
 8000b50:	b292      	uxth	r2, r2
 8000b52:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b56:	fb07 1115 	mls	r1, r7, r5, r1
 8000b5a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b5e:	fb05 f10e 	mul.w	r1, r5, lr
 8000b62:	4291      	cmp	r1, r2
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x280>
 8000b66:	eb1c 0202 	adds.w	r2, ip, r2
 8000b6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b6e:	d216      	bcs.n	8000b9e <__udivmoddi4+0x2a6>
 8000b70:	4291      	cmp	r1, r2
 8000b72:	d914      	bls.n	8000b9e <__udivmoddi4+0x2a6>
 8000b74:	3d02      	subs	r5, #2
 8000b76:	4462      	add	r2, ip
 8000b78:	1a52      	subs	r2, r2, r1
 8000b7a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b7e:	e739      	b.n	80009f4 <__udivmoddi4+0xfc>
 8000b80:	4631      	mov	r1, r6
 8000b82:	4630      	mov	r0, r6
 8000b84:	e709      	b.n	800099a <__udivmoddi4+0xa2>
 8000b86:	4639      	mov	r1, r7
 8000b88:	e6e7      	b.n	800095a <__udivmoddi4+0x62>
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	e6fc      	b.n	8000988 <__udivmoddi4+0x90>
 8000b8e:	45c1      	cmp	r9, r8
 8000b90:	d2aa      	bcs.n	8000ae8 <__udivmoddi4+0x1f0>
 8000b92:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b96:	eb63 050c 	sbc.w	r5, r3, ip
 8000b9a:	3801      	subs	r0, #1
 8000b9c:	e7a4      	b.n	8000ae8 <__udivmoddi4+0x1f0>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	e7ea      	b.n	8000b78 <__udivmoddi4+0x280>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	e795      	b.n	8000ad2 <__udivmoddi4+0x1da>
 8000ba6:	4640      	mov	r0, r8
 8000ba8:	e7d1      	b.n	8000b4e <__udivmoddi4+0x256>
 8000baa:	46d0      	mov	r8, sl
 8000bac:	e77c      	b.n	8000aa8 <__udivmoddi4+0x1b0>
 8000bae:	3d02      	subs	r5, #2
 8000bb0:	4462      	add	r2, ip
 8000bb2:	e733      	b.n	8000a1c <__udivmoddi4+0x124>
 8000bb4:	4608      	mov	r0, r1
 8000bb6:	e70b      	b.n	80009d0 <__udivmoddi4+0xd8>
 8000bb8:	4464      	add	r4, ip
 8000bba:	3802      	subs	r0, #2
 8000bbc:	e743      	b.n	8000a46 <__udivmoddi4+0x14e>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_idiv0>:
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000bc4:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000bc6:	4813      	ldr	r0, [pc, #76]	; (8000c14 <MX_ADC_Init+0x50>)
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_ADC_Init+0x54>)
 8000bca:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000bd0:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd6:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bd8:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bda:	2204      	movs	r2, #4
 8000bdc:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000bde:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000be0:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000be2:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000be4:	2201      	movs	r2, #1
 8000be6:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000be8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bec:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bee:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000bf0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000bf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bf8:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000bfe:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000c00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c04:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c06:	f001 fdf7 	bl	80027f8 <HAL_ADC_Init>
 8000c0a:	b900      	cbnz	r0, 8000c0e <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c0c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c0e:	f000 fb37 	bl	8001280 <Error_Handler>
}
 8000c12:	e7fb      	b.n	8000c0c <MX_ADC_Init+0x48>
 8000c14:	20000134 	.word	0x20000134
 8000c18:	40012400 	.word	0x40012400

08000c1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000c1c:	6802      	ldr	r2, [r0, #0]
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <HAL_ADC_MspInit+0x28>)
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d000      	beq.n	8000c26 <HAL_ADC_MspInit+0xa>
 8000c24:	4770      	bx	lr
{
 8000c26:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c32:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c3a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000c3c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000c3e:	b002      	add	sp, #8
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40012400 	.word	0x40012400

08000c48 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000c48:	6802      	ldr	r2, [r0, #0]
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_ADC_MspDeInit+0x18>)
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d000      	beq.n	8000c52 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000c50:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c56:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c5e:	e7f7      	b.n	8000c50 <HAL_ADC_MspDeInit+0x8>
 8000c60:	40012400 	.word	0x40012400

08000c64 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000c64:	b530      	push	{r4, r5, lr}
 8000c66:	b085      	sub	sp, #20
 8000c68:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000c72:	f7ff ffa7 	bl	8000bc4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000c76:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <ADC_ReadChannels+0x6c>)
 8000c78:	f002 f9f6 	bl	8003068 <HAL_ADCEx_Calibration_Start>
 8000c7c:	b9f8      	cbnz	r0, 8000cbe <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000c7e:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000c84:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c86:	a901      	add	r1, sp, #4
 8000c88:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <ADC_ReadChannels+0x6c>)
 8000c8a:	f001 ff2f 	bl	8002aec <HAL_ADC_ConfigChannel>
 8000c8e:	b9c8      	cbnz	r0, 8000cc4 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000c90:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <ADC_ReadChannels+0x6c>)
 8000c92:	f002 f8ed 	bl	8002e70 <HAL_ADC_Start>
 8000c96:	b9c0      	cbnz	r0, 8000cca <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000c98:	4c0d      	ldr	r4, [pc, #52]	; (8000cd0 <ADC_ReadChannels+0x6c>)
 8000c9a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f001 fec2 	bl	8002a28 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f002 f9bf 	bl	8003028 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000caa:	4620      	mov	r0, r4
 8000cac:	f001 ff1b 	bl	8002ae6 <HAL_ADC_GetValue>
 8000cb0:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f002 f958 	bl	8002f68 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000cb8:	4628      	mov	r0, r5
 8000cba:	b005      	add	sp, #20
 8000cbc:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000cbe:	f000 fadf 	bl	8001280 <Error_Handler>
 8000cc2:	e7dc      	b.n	8000c7e <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000cc4:	f000 fadc 	bl	8001280 <Error_Handler>
 8000cc8:	e7e2      	b.n	8000c90 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000cca:	f000 fad9 	bl	8001280 <Error_Handler>
 8000cce:	e7e3      	b.n	8000c98 <ADC_ReadChannels+0x34>
 8000cd0:	20000134 	.word	0x20000134

08000cd4 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000cd4:	4b01      	ldr	r3, [pc, #4]	; (8000cdc <SYS_InitMeasurement+0x8>)
 8000cd6:	4a02      	ldr	r2, [pc, #8]	; (8000ce0 <SYS_InitMeasurement+0xc>)
 8000cd8:	601a      	str	r2, [r3, #0]
}
 8000cda:	4770      	bx	lr
 8000cdc:	20000134 	.word	0x20000134
 8000ce0:	40012400 	.word	0x40012400

08000ce4 <SYS_GetBatteryLevel>:
{
 8000ce4:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <SYS_GetBatteryLevel+0x38>)
 8000ce8:	f7ff ffbc 	bl	8000c64 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000cec:	b1a0      	cbz	r0, 8000d18 <SYS_GetBatteryLevel+0x34>
 8000cee:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <SYS_GetBatteryLevel+0x3c>)
 8000cf2:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	; 0xaa
 8000cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d007      	beq.n	8000d0e <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000cfe:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000d02:	fb02 f000 	mul.w	r0, r2, r0
 8000d06:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d0a:	b280      	uxth	r0, r0
 8000d0c:	e005      	b.n	8000d1a <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <SYS_GetBatteryLevel+0x40>)
 8000d10:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d14:	b280      	uxth	r0, r0
 8000d16:	e000      	b.n	8000d1a <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8000d18:	2000      	movs	r0, #0
}
 8000d1a:	bd08      	pop	{r3, pc}
 8000d1c:	b4002000 	.word	0xb4002000
 8000d20:	1fff7500 	.word	0x1fff7500
 8000d24:	004c08d8 	.word	0x004c08d8

08000d28 <SYS_GetTemperatureLevel>:
{
 8000d28:	b510      	push	{r4, lr}
 8000d2a:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000d32:	f7ff ffd7 	bl	8000ce4 <SYS_GetBatteryLevel>
 8000d36:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000d38:	4821      	ldr	r0, [pc, #132]	; (8000dc0 <SYS_GetTemperatureLevel+0x98>)
 8000d3a:	f7ff ff93 	bl	8000c64 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <SYS_GetTemperatureLevel+0x9c>)
 8000d40:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8000d44:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	d01d      	beq.n	8000d88 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000d4c:	fb00 f304 	mul.w	r3, r0, r4
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	481d      	ldr	r0, [pc, #116]	; (8000dc8 <SYS_GetTemperatureLevel+0xa0>)
 8000d54:	fba0 0303 	umull	r0, r3, r0, r3
 8000d58:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8000d5c:	2064      	movs	r0, #100	; 0x64
 8000d5e:	fb00 f303 	mul.w	r3, r0, r3
 8000d62:	1a52      	subs	r2, r2, r1
 8000d64:	fb93 f3f2 	sdiv	r3, r3, r2
 8000d68:	331e      	adds	r3, #30
 8000d6a:	b21b      	sxth	r3, r3
 8000d6c:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8000d70:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8000d7e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8000d82:	b200      	sxth	r0, r0
 8000d84:	b002      	add	sp, #8
 8000d86:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000d88:	fb04 f000 	mul.w	r0, r4, r0
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <SYS_GetTemperatureLevel+0xa4>)
 8000d8e:	fba3 2300 	umull	r2, r3, r3, r0
 8000d92:	1ac4      	subs	r4, r0, r3
 8000d94:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8000d98:	0adb      	lsrs	r3, r3, #11
 8000d9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d9e:	fb02 f303 	mul.w	r3, r2, r3
 8000da2:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8000da6:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8000daa:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <SYS_GetTemperatureLevel+0xa8>)
 8000dac:	fb82 1203 	smull	r1, r2, r2, r3
 8000db0:	17db      	asrs	r3, r3, #31
 8000db2:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 8000db6:	331e      	adds	r3, #30
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	f8ad 3006 	strh.w	r3, [sp, #6]
 8000dbe:	e7d7      	b.n	8000d70 <SYS_GetTemperatureLevel+0x48>
 8000dc0:	b0001000 	.word	0xb0001000
 8000dc4:	1fff7500 	.word	0x1fff7500
 8000dc8:	09ee009f 	.word	0x09ee009f
 8000dcc:	00100101 	.word	0x00100101
 8000dd0:	68db8bad 	.word	0x68db8bad

08000dd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dd4:	b500      	push	{lr}
 8000dd6:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000dde:	f042 0204 	orr.w	r2, r2, #4
 8000de2:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000de4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000de6:	f002 0204 	and.w	r2, r2, #4
 8000dea:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000dec:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000dee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000df0:	f042 0201 	orr.w	r2, r2, #1
 8000df4:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000dfe:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2102      	movs	r1, #2
 8000e04:	200f      	movs	r0, #15
 8000e06:	f002 f9e1 	bl	80031cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f002 fa16 	bl	800323c <HAL_NVIC_EnableIRQ>

}
 8000e10:	b003      	add	sp, #12
 8000e12:	f85d fb04 	ldr.w	pc, [sp], #4

08000e16 <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8000e16:	2300      	movs	r3, #0
 8000e18:	e001      	b.n	8000e1e <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8000e1a:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8000e1c:	3308      	adds	r3, #8
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d20a      	bcs.n	8000e38 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 8000e22:	6842      	ldr	r2, [r0, #4]
 8000e24:	f8d0 c000 	ldr.w	ip, [r0]
 8000e28:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000e2c:	bf08      	it	eq
 8000e2e:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 8000e32:	d0f2      	beq.n	8000e1a <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 8000e34:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 8000e36:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 8000e38:	2000      	movs	r0, #0
 8000e3a:	4770      	bx	lr

08000e3c <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 8000e3c:	b130      	cbz	r0, 8000e4c <FLASH_IF_INT_Read+0x10>
{
 8000e3e:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 8000e40:	b139      	cbz	r1, 8000e52 <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8000e42:	b292      	uxth	r2, r2
 8000e44:	f010 f9a6 	bl	8011194 <UTIL_MEM_cpy_8>
  return ret_status;
 8000e48:	2000      	movs	r0, #0
}
 8000e4a:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8000e4c:	f06f 0005 	mvn.w	r0, #5
}
 8000e50:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 8000e52:	f06f 0005 	mvn.w	r0, #5
 8000e56:	e7f8      	b.n	8000e4a <FLASH_IF_INT_Read+0xe>

08000e58 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8000e58:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8000e5a:	f002 fcbf 	bl	80037dc <HAL_FLASH_Unlock>
 8000e5e:	b978      	cbnz	r0, 8000e80 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <FLASH_IF_INT_Clear_Error+0x30>)
 8000e62:	699a      	ldr	r2, [r3, #24]
 8000e64:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8000e68:	619a      	str	r2, [r3, #24]
 8000e6a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8000e6e:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8000e70:	f002 fccc 	bl	800380c <HAL_FLASH_Lock>
 8000e74:	b908      	cbnz	r0, 8000e7a <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 8000e76:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8000e78:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8000e7a:	f06f 0004 	mvn.w	r0, #4
 8000e7e:	e7fb      	b.n	8000e78 <FLASH_IF_INT_Clear_Error+0x20>
 8000e80:	f06f 0004 	mvn.w	r0, #4
 8000e84:	e7f8      	b.n	8000e78 <FLASH_IF_INT_Clear_Error+0x20>
 8000e86:	bf00      	nop
 8000e88:	58004000 	.word	0x58004000

08000e8c <FLASH_IF_INT_Erase>:
{
 8000e8c:	b570      	push	{r4, r5, r6, lr}
 8000e8e:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 8000e94:	2800      	cmp	r0, #0
 8000e96:	d039      	beq.n	8000f0c <FLASH_IF_INT_Erase+0x80>
 8000e98:	460e      	mov	r6, r1
 8000e9a:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8000e9c:	f7ff ffdc 	bl	8000e58 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8000ea0:	4605      	mov	r5, r0
 8000ea2:	b110      	cbz	r0, 8000eaa <FLASH_IF_INT_Erase+0x1e>
}
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	b004      	add	sp, #16
 8000ea8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8000eaa:	f002 fc97 	bl	80037dc <HAL_FLASH_Unlock>
 8000eae:	bb80      	cbnz	r0, 8000f12 <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 8000eb4:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8000eb8:	4817      	ldr	r0, [pc, #92]	; (8000f18 <FLASH_IF_INT_Erase+0x8c>)
 8000eba:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 8000ebe:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <FLASH_IF_INT_Erase+0x90>)
 8000ec0:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 8000ec4:	fbb3 fcf1 	udiv	ip, r3, r1
 8000ec8:	fb01 331c 	mls	r3, r1, ip, r3
 8000ecc:	0adb      	lsrs	r3, r3, #11
 8000ece:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8000ed0:	19a1      	adds	r1, r4, r6
 8000ed2:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 8000ed6:	3901      	subs	r1, #1
 8000ed8:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	; 0x5e0
 8000edc:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 8000ee0:	fbb1 f0f2 	udiv	r0, r1, r2
 8000ee4:	fb02 1110 	mls	r1, r2, r0, r1
 8000ee8:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 8000eec:	3301      	adds	r3, #1
 8000eee:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8000ef0:	a903      	add	r1, sp, #12
 8000ef2:	4668      	mov	r0, sp
 8000ef4:	f002 fd56 	bl	80039a4 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 8000ef8:	b118      	cbz	r0, 8000f02 <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8000efa:	2802      	cmp	r0, #2
 8000efc:	d004      	beq.n	8000f08 <FLASH_IF_INT_Erase+0x7c>
 8000efe:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 8000f02:	f002 fc83 	bl	800380c <HAL_FLASH_Lock>
 8000f06:	e7cd      	b.n	8000ea4 <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8000f08:	2501      	movs	r5, #1
 8000f0a:	e7fa      	b.n	8000f02 <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 8000f0c:	f06f 0505 	mvn.w	r5, #5
 8000f10:	e7c8      	b.n	8000ea4 <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 8000f12:	f06f 0504 	mvn.w	r5, #4
 8000f16:	e7c5      	b.n	8000ea4 <FLASH_IF_INT_Erase+0x18>
 8000f18:	1fff7000 	.word	0x1fff7000
 8000f1c:	03fffc00 	.word	0x03fffc00

08000f20 <FLASH_IF_INT_Write>:
{
 8000f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f24:	b089      	sub	sp, #36	; 0x24
 8000f26:	9003      	str	r0, [sp, #12]
 8000f28:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 8000f2a:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	f000 80a9 	beq.w	8001084 <FLASH_IF_INT_Write+0x164>
 8000f32:	4683      	mov	fp, r0
 8000f34:	2900      	cmp	r1, #0
 8000f36:	f000 80a9 	beq.w	800108c <FLASH_IF_INT_Write+0x16c>
 8000f3a:	f012 0f07 	tst.w	r2, #7
 8000f3e:	f040 80a9 	bne.w	8001094 <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8000f42:	f010 0307 	ands.w	r3, r0, #7
 8000f46:	9305      	str	r3, [sp, #20]
 8000f48:	f040 80a8 	bne.w	800109c <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 8000f4c:	f7ff ff84 	bl	8000e58 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8000f50:	9002      	str	r0, [sp, #8]
 8000f52:	b118      	cbz	r0, 8000f5c <FLASH_IF_INT_Write+0x3c>
}
 8000f54:	9802      	ldr	r0, [sp, #8]
 8000f56:	b009      	add	sp, #36	; 0x24
 8000f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8000f5c:	f002 fc3e 	bl	80037dc <HAL_FLASH_Unlock>
 8000f60:	2800      	cmp	r0, #0
 8000f62:	f040 809f 	bne.w	80010a4 <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 8000f66:	9c03      	ldr	r4, [sp, #12]
 8000f68:	f104 4278 	add.w	r2, r4, #4160749568	; 0xf8000000
 8000f6c:	4b4f      	ldr	r3, [pc, #316]	; (80010ac <FLASH_IF_INT_Write+0x18c>)
 8000f6e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8000f72:	494f      	ldr	r1, [pc, #316]	; (80010b0 <FLASH_IF_INT_Write+0x190>)
 8000f74:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 8000f78:	fbb2 f3f1 	udiv	r3, r2, r1
 8000f7c:	fb01 2213 	mls	r2, r1, r3, r2
 8000f80:	0ad3      	lsrs	r3, r2, #11
 8000f82:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8000f84:	9b04      	ldr	r3, [sp, #16]
 8000f86:	18e3      	adds	r3, r4, r3
 8000f88:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	fbb3 f0f1 	udiv	r0, r3, r1
 8000f92:	fb01 3310 	mls	r3, r1, r0, r3
 8000f96:	0adb      	lsrs	r3, r3, #11
 8000f98:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d906      	bls.n	8000fb2 <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8000fa4:	f3c4 090a 	ubfx	r9, r4, #0, #11
 8000fa8:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 8000fac:	f8dd a018 	ldr.w	sl, [sp, #24]
 8000fb0:	e02f      	b.n	8001012 <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 8000fb2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8000fb6:	e7f9      	b.n	8000fac <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 8000fb8:	46c8      	mov	r8, r9
          current_source = uSource;
 8000fba:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 8000fbc:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8000fbe:	9d05      	ldr	r5, [sp, #20]
 8000fc0:	4545      	cmp	r5, r8
 8000fc2:	d215      	bcs.n	8000ff0 <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8000fc4:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8000fc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8000fca:	4621      	mov	r1, r4
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f002 fc61 	bl	8003894 <HAL_FLASH_Program>
 8000fd2:	b950      	cbnz	r0, 8000fea <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8000fd4:	6820      	ldr	r0, [r4, #0]
 8000fd6:	6862      	ldr	r2, [r4, #4]
 8000fd8:	59e9      	ldr	r1, [r5, r7]
 8000fda:	6873      	ldr	r3, [r6, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	bf08      	it	eq
 8000fe0:	4288      	cmpeq	r0, r1
 8000fe2:	d141      	bne.n	8001068 <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 8000fe4:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8000fe6:	3508      	adds	r5, #8
 8000fe8:	e7ea      	b.n	8000fc0 <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 8000fea:	f06f 0303 	mvn.w	r3, #3
 8000fee:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 8000ff0:	9b02      	ldr	r3, [sp, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d13f      	bne.n	8001076 <FLASH_IF_INT_Write+0x156>
        uDest += length;
 8000ff6:	44cb      	add	fp, r9
        uSource += length;
 8000ff8:	9b01      	ldr	r3, [sp, #4]
 8000ffa:	444b      	add	r3, r9
 8000ffc:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8000ffe:	9b04      	ldr	r3, [sp, #16]
 8001000:	eba3 0909 	sub.w	r9, r3, r9
 8001004:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 8001008:	bf28      	it	cs
 800100a:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800100e:	f10a 0a01 	add.w	sl, sl, #1
 8001012:	9b06      	ldr	r3, [sp, #24]
 8001014:	9a07      	ldr	r2, [sp, #28]
 8001016:	4413      	add	r3, r2
 8001018:	4553      	cmp	r3, sl
 800101a:	d92c      	bls.n	8001076 <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 800101c:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 8001020:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001022:	4649      	mov	r1, r9
 8001024:	9803      	ldr	r0, [sp, #12]
 8001026:	f7ff fef6 	bl	8000e16 <FLASH_IF_INT_IsEmpty>
 800102a:	2800      	cmp	r0, #0
 800102c:	d0c4      	beq.n	8000fb8 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <FLASH_IF_INT_Write+0x194>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	b1e8      	cbz	r0, 8001070 <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001038:	4621      	mov	r1, r4
 800103a:	f7ff feff 	bl	8000e3c <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <FLASH_IF_INT_Write+0x194>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f3cb 000a 	ubfx	r0, fp, #0, #11
 8001046:	fa1f f289 	uxth.w	r2, r9
 800104a:	9901      	ldr	r1, [sp, #4]
 800104c:	4418      	add	r0, r3
 800104e:	f010 f8a1 	bl	8011194 <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001052:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001056:	4620      	mov	r0, r4
 8001058:	f7ff ff18 	bl	8000e8c <FLASH_IF_INT_Erase>
 800105c:	b970      	cbnz	r0, 800107c <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <FLASH_IF_INT_Write+0x194>)
 8001060:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 8001062:	f44f 6800 	mov.w	r8, #2048	; 0x800
 8001066:	e7aa      	b.n	8000fbe <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 8001068:	f06f 0303 	mvn.w	r3, #3
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	e7bf      	b.n	8000ff0 <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001070:	f06f 0305 	mvn.w	r3, #5
 8001074:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 8001076:	f002 fbc9 	bl	800380c <HAL_FLASH_Lock>
 800107a:	e76b      	b.n	8000f54 <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 800107c:	f06f 0301 	mvn.w	r3, #1
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	e7f8      	b.n	8001076 <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 8001084:	f06f 0305 	mvn.w	r3, #5
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	e763      	b.n	8000f54 <FLASH_IF_INT_Write+0x34>
 800108c:	f06f 0305 	mvn.w	r3, #5
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	e75f      	b.n	8000f54 <FLASH_IF_INT_Write+0x34>
 8001094:	f06f 0305 	mvn.w	r3, #5
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	e75b      	b.n	8000f54 <FLASH_IF_INT_Write+0x34>
 800109c:	f06f 0305 	mvn.w	r3, #5
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	e757      	b.n	8000f54 <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 80010a4:	f06f 0304 	mvn.w	r3, #4
 80010a8:	9302      	str	r3, [sp, #8]
 80010aa:	e753      	b.n	8000f54 <FLASH_IF_INT_Write+0x34>
 80010ac:	1fff7000 	.word	0x1fff7000
 80010b0:	03fffc00 	.word	0x03fffc00
 80010b4:	20000198 	.word	0x20000198

080010b8 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 80010b8:	4b01      	ldr	r3, [pc, #4]	; (80010c0 <FLASH_IF_Init+0x8>)
 80010ba:	6018      	str	r0, [r3, #0]
}
 80010bc:	2000      	movs	r0, #0
 80010be:	4770      	bx	lr
 80010c0:	20000198 	.word	0x20000198

080010c4 <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80010c4:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80010c8:	d30e      	bcc.n	80010e8 <FLASH_IF_Write+0x24>
{
 80010ca:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <FLASH_IF_Write+0x30>)
 80010ce:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <FLASH_IF_Write+0x34>)
 80010d4:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80010d8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010dc:	3b01      	subs	r3, #1
 80010de:	4298      	cmp	r0, r3
 80010e0:	d805      	bhi.n	80010ee <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80010e2:	f7ff ff1d 	bl	8000f20 <FLASH_IF_INT_Write>
}
 80010e6:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80010ec:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	e7f8      	b.n	80010e6 <FLASH_IF_Write+0x22>
 80010f4:	1fff7000 	.word	0x1fff7000
 80010f8:	03fffc00 	.word	0x03fffc00

080010fc <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80010fc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001100:	d30e      	bcc.n	8001120 <FLASH_IF_Read+0x24>
{
 8001102:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <FLASH_IF_Read+0x30>)
 8001106:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <FLASH_IF_Read+0x34>)
 800110c:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001110:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001114:	3b01      	subs	r3, #1
 8001116:	4299      	cmp	r1, r3
 8001118:	d805      	bhi.n	8001126 <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800111a:	f7ff fe8f 	bl	8000e3c <FLASH_IF_INT_Read>
}
 800111e:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001124:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001126:	f04f 30ff 	mov.w	r0, #4294967295
 800112a:	e7f8      	b.n	800111e <FLASH_IF_Read+0x22>
 800112c:	1fff7000 	.word	0x1fff7000
 8001130:	03fffc00 	.word	0x03fffc00

08001134 <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001134:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001138:	d30e      	bcc.n	8001158 <FLASH_IF_Erase+0x24>
{
 800113a:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <FLASH_IF_Erase+0x30>)
 800113e:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <FLASH_IF_Erase+0x34>)
 8001144:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001148:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800114c:	3b01      	subs	r3, #1
 800114e:	4298      	cmp	r0, r3
 8001150:	d805      	bhi.n	800115e <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001152:	f7ff fe9b 	bl	8000e8c <FLASH_IF_INT_Erase>
}
 8001156:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
}
 800115c:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800115e:	f04f 30ff 	mov.w	r0, #4294967295
 8001162:	e7f8      	b.n	8001156 <FLASH_IF_Erase+0x22>
 8001164:	1fff7000 	.word	0x1fff7000
 8001168:	03fffc00 	.word	0x03fffc00

0800116c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800116c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001170:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	2400      	movs	r4, #0
 8001174:	9403      	str	r4, [sp, #12]
 8001176:	9404      	str	r4, [sp, #16]
 8001178:	9405      	str	r4, [sp, #20]
 800117a:	9406      	str	r4, [sp, #24]
 800117c:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800117e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001184:	f042 0202 	orr.w	r2, r2, #2
 8001188:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800118a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800118c:	f002 0202 	and.w	r2, r2, #2
 8001190:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001192:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001196:	f042 0204 	orr.w	r2, r2, #4
 800119a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800119c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800119e:	f002 0204 	and.w	r2, r2, #4
 80011a2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80011a4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011a8:	f042 0201 	orr.w	r2, r2, #1
 80011ac:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80011b6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80011b8:	4e2f      	ldr	r6, [pc, #188]	; (8001278 <MX_GPIO_Init+0x10c>)
 80011ba:	4622      	mov	r2, r4
 80011bc:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80011c0:	4630      	mov	r0, r6
 80011c2:	f002 fd7f 	bl	8003cc4 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80011c6:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80011ca:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2501      	movs	r5, #1
 80011ce:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d2:	2302      	movs	r3, #2
 80011d4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	a903      	add	r1, sp, #12
 80011d8:	4630      	mov	r0, r6
 80011da:	f002 fc23 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80011de:	f04f 0803 	mov.w	r8, #3
 80011e2:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e6:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80011ea:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ec:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	a903      	add	r1, sp, #12
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f4:	f002 fc16 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80011f8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011fc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	a903      	add	r1, sp, #12
 8001208:	4630      	mov	r0, r6
 800120a:	f002 fc0b 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800120e:	2304      	movs	r3, #4
 8001210:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001212:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001216:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	a903      	add	r1, sp, #12
 800121c:	4630      	mov	r0, r6
 800121e:	f002 fc01 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8001222:	2340      	movs	r3, #64	; 0x40
 8001224:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001226:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001228:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 800122a:	a903      	add	r1, sp, #12
 800122c:	4813      	ldr	r0, [pc, #76]	; (800127c <MX_GPIO_Init+0x110>)
 800122e:	f002 fbf9 	bl	8003a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001232:	4622      	mov	r2, r4
 8001234:	4621      	mov	r1, r4
 8001236:	2006      	movs	r0, #6
 8001238:	f001 ffc8 	bl	80031cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800123c:	2006      	movs	r0, #6
 800123e:	f001 fffd 	bl	800323c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001242:	4622      	mov	r2, r4
 8001244:	4621      	mov	r1, r4
 8001246:	2007      	movs	r0, #7
 8001248:	f001 ffc0 	bl	80031cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800124c:	2007      	movs	r0, #7
 800124e:	f001 fff5 	bl	800323c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001252:	4622      	mov	r2, r4
 8001254:	4621      	mov	r1, r4
 8001256:	2008      	movs	r0, #8
 8001258:	f001 ffb8 	bl	80031cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800125c:	2008      	movs	r0, #8
 800125e:	f001 ffed 	bl	800323c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001262:	4622      	mov	r2, r4
 8001264:	4621      	mov	r1, r4
 8001266:	2016      	movs	r0, #22
 8001268:	f001 ffb0 	bl	80031cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800126c:	2016      	movs	r0, #22
 800126e:	f001 ffe5 	bl	800323c <HAL_NVIC_EnableIRQ>

}
 8001272:	b008      	add	sp, #32
 8001274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001278:	48000400 	.word	0x48000400
 800127c:	48000800 	.word	0x48000800

08001280 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001282:	e7fe      	b.n	8001282 <Error_Handler+0x2>

08001284 <SystemClock_Config>:
{
 8001284:	b510      	push	{r4, lr}
 8001286:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001288:	2248      	movs	r2, #72	; 0x48
 800128a:	2100      	movs	r1, #0
 800128c:	a808      	add	r0, sp, #32
 800128e:	f010 fc1f 	bl	8011ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001292:	2400      	movs	r4, #0
 8001294:	9401      	str	r4, [sp, #4]
 8001296:	9402      	str	r4, [sp, #8]
 8001298:	9403      	str	r4, [sp, #12]
 800129a:	9404      	str	r4, [sp, #16]
 800129c:	9405      	str	r4, [sp, #20]
 800129e:	9406      	str	r4, [sp, #24]
 80012a0:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 80012a2:	f002 fd2b 	bl	8003cfc <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80012a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80012ae:	f023 0318 	bic.w	r3, r3, #24
 80012b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012ba:	6813      	ldr	r3, [r2, #0]
 80012bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80012d0:	2324      	movs	r3, #36	; 0x24
 80012d2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012d4:	2381      	movs	r3, #129	; 0x81
 80012d6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012d8:	2301      	movs	r3, #1
 80012da:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80012dc:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80012de:	23b0      	movs	r3, #176	; 0xb0
 80012e0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012e2:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e4:	a808      	add	r0, sp, #32
 80012e6:	f002 fea3 	bl	8004030 <HAL_RCC_OscConfig>
 80012ea:	b970      	cbnz	r0, 800130a <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80012ec:	234f      	movs	r3, #79	; 0x4f
 80012ee:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012f0:	2300      	movs	r3, #0
 80012f2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80012fa:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012fc:	2102      	movs	r1, #2
 80012fe:	a801      	add	r0, sp, #4
 8001300:	f003 f9c8 	bl	8004694 <HAL_RCC_ClockConfig>
 8001304:	b918      	cbnz	r0, 800130e <SystemClock_Config+0x8a>
}
 8001306:	b01a      	add	sp, #104	; 0x68
 8001308:	bd10      	pop	{r4, pc}
    Error_Handler();
 800130a:	f7ff ffb9 	bl	8001280 <Error_Handler>
    Error_Handler();
 800130e:	f7ff ffb7 	bl	8001280 <Error_Handler>

08001312 <main>:
{
 8001312:	b508      	push	{r3, lr}
  HAL_Init();
 8001314:	f001 fa22 	bl	800275c <HAL_Init>
  SystemClock_Config();
 8001318:	f7ff ffb4 	bl	8001284 <SystemClock_Config>
  MX_GPIO_Init();
 800131c:	f7ff ff26 	bl	800116c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001320:	f000 fd0a 	bl	8001d38 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 8001324:	f000 fd0e 	bl	8001d44 <MX_LoRaWAN_Process>
  while (1)
 8001328:	e7fc      	b.n	8001324 <main+0x12>
	...

0800132c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800132c:	b500      	push	{lr}
 800132e:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001330:	222c      	movs	r2, #44	; 0x2c
 8001332:	2100      	movs	r1, #0
 8001334:	a801      	add	r0, sp, #4
 8001336:	f010 fbcb 	bl	8011ad0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800133a:	4819      	ldr	r0, [pc, #100]	; (80013a0 <MX_RTC_Init+0x74>)
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <MX_RTC_Init+0x78>)
 800133e:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001340:	231f      	movs	r3, #31
 8001342:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001348:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800134a:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800134c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001350:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001352:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001358:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800135a:	f003 fcff 	bl	8004d5c <HAL_RTC_Init>
 800135e:	b9a8      	cbnz	r0, 800138c <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001360:	480f      	ldr	r0, [pc, #60]	; (80013a0 <MX_RTC_Init+0x74>)
 8001362:	f003 fe3d 	bl	8004fe0 <HAL_RTCEx_SetSSRU_IT>
 8001366:	b9a0      	cbnz	r0, 8001392 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001368:	2200      	movs	r2, #0
 800136a:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800136c:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800136e:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001370:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001374:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800137c:	a901      	add	r1, sp, #4
 800137e:	4808      	ldr	r0, [pc, #32]	; (80013a0 <MX_RTC_Init+0x74>)
 8001380:	f003 fd52 	bl	8004e28 <HAL_RTC_SetAlarm_IT>
 8001384:	b940      	cbnz	r0, 8001398 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001386:	b00d      	add	sp, #52	; 0x34
 8001388:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800138c:	f7ff ff78 	bl	8001280 <Error_Handler>
 8001390:	e7e6      	b.n	8001360 <MX_RTC_Init+0x34>
    Error_Handler();
 8001392:	f7ff ff75 	bl	8001280 <Error_Handler>
 8001396:	e7e7      	b.n	8001368 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001398:	f7ff ff72 	bl	8001280 <Error_Handler>
}
 800139c:	e7f3      	b.n	8001386 <MX_RTC_Init+0x5a>
 800139e:	bf00      	nop
 80013a0:	2000019c 	.word	0x2000019c
 80013a4:	40002800 	.word	0x40002800

080013a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80013a8:	b510      	push	{r4, lr}
 80013aa:	b090      	sub	sp, #64	; 0x40
 80013ac:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ae:	2238      	movs	r2, #56	; 0x38
 80013b0:	2100      	movs	r1, #0
 80013b2:	a802      	add	r0, sp, #8
 80013b4:	f010 fb8c 	bl	8011ad0 <memset>
  if(rtcHandle->Instance==RTC)
 80013b8:	6822      	ldr	r2, [r4, #0]
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <HAL_RTC_MspInit+0x7c>)
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80013c0:	b010      	add	sp, #64	; 0x40
 80013c2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c8:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80013ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ce:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d0:	a802      	add	r0, sp, #8
 80013d2:	f003 fab3 	bl	800493c <HAL_RCCEx_PeriphCLKConfig>
 80013d6:	bb08      	cbnz	r0, 800141c <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80013d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013dc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80013e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80013f8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	4611      	mov	r1, r2
 80013fe:	2002      	movs	r0, #2
 8001400:	f001 fee4 	bl	80031cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001404:	2002      	movs	r0, #2
 8001406:	f001 ff19 	bl	800323c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	4611      	mov	r1, r2
 800140e:	202a      	movs	r0, #42	; 0x2a
 8001410:	f001 fedc 	bl	80031cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001414:	202a      	movs	r0, #42	; 0x2a
 8001416:	f001 ff11 	bl	800323c <HAL_NVIC_EnableIRQ>
}
 800141a:	e7d1      	b.n	80013c0 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 800141c:	f7ff ff30 	bl	8001280 <Error_Handler>
 8001420:	e7da      	b.n	80013d8 <HAL_RTC_MspInit+0x30>
 8001422:	bf00      	nop
 8001424:	40002800 	.word	0x40002800

08001428 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001428:	4770      	bx	lr

0800142a <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800142a:	4770      	bx	lr

0800142c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 800142c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800142e:	f001 f9ab 	bl	8002788 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001432:	2001      	movs	r0, #1
 8001434:	4b02      	ldr	r3, [pc, #8]	; (8001440 <PWR_EnterStopMode+0x14>)
 8001436:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800143a:	f002 fcc3 	bl	8003dc4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800143e:	bd08      	pop	{r3, pc}
 8001440:	58000400 	.word	0x58000400

08001444 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001444:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001446:	f001 f9a6 	bl	8002796 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800144a:	bd08      	pop	{r3, pc}

0800144c <PWR_ExitStopMode>:
{
 800144c:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 800144e:	f001 f9a2 	bl	8002796 <HAL_ResumeTick>
  vcom_Resume();
 8001452:	f000 fc31 	bl	8001cb8 <vcom_Resume>
}
 8001456:	bd08      	pop	{r3, pc}

08001458 <PWR_EnterSleepMode>:
{
 8001458:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800145a:	f001 f995 	bl	8002788 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800145e:	2101      	movs	r1, #1
 8001460:	2000      	movs	r0, #0
 8001462:	f002 fc53 	bl	8003d0c <HAL_PWR_EnterSLEEPMode>
}
 8001466:	bd08      	pop	{r3, pc}

08001468 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001468:	4770      	bx	lr

0800146a <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146a:	e7fe      	b.n	800146a <NMI_Handler>

0800146c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <HardFault_Handler>

0800146e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <MemManage_Handler>

08001470 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <BusFault_Handler>

08001472 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <UsageFault_Handler>

08001474 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001474:	4770      	bx	lr

08001476 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001476:	4770      	bx	lr

08001478 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001478:	4770      	bx	lr

0800147a <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147a:	4770      	bx	lr

0800147c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800147c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800147e:	4802      	ldr	r0, [pc, #8]	; (8001488 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001480:	f003 fdda 	bl	8005038 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001484:	bd08      	pop	{r3, pc}
 8001486:	bf00      	nop
 8001488:	2000019c 	.word	0x2000019c

0800148c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800148c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 800148e:	2001      	movs	r0, #1
 8001490:	f002 fc26 	bl	8003ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001494:	bd08      	pop	{r3, pc}

08001496 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001496:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001498:	2002      	movs	r0, #2
 800149a:	f002 fc21 	bl	8003ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800149e:	bd08      	pop	{r3, pc}

080014a0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line 2 Interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80014a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80014a2:	2004      	movs	r0, #4
 80014a4:	f002 fc1c 	bl	8003ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80014a8:	bd08      	pop	{r3, pc}
	...

080014ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80014ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80014ae:	4802      	ldr	r0, [pc, #8]	; (80014b8 <DMA1_Channel5_IRQHandler+0xc>)
 80014b0:	f002 f8e2 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014b4:	bd08      	pop	{r3, pc}
 80014b6:	bf00      	nop
 80014b8:	200001e8 	.word	0x200001e8

080014bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 80014bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 80014be:	2040      	movs	r0, #64	; 0x40
 80014c0:	f002 fc0e 	bl	8003ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014c4:	bd08      	pop	{r3, pc}
	...

080014c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80014c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014ca:	4802      	ldr	r0, [pc, #8]	; (80014d4 <USART2_IRQHandler+0xc>)
 80014cc:	f004 fa72 	bl	80059b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014d0:	bd08      	pop	{r3, pc}
 80014d2:	bf00      	nop
 80014d4:	20000248 	.word	0x20000248

080014d8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80014d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80014da:	4802      	ldr	r0, [pc, #8]	; (80014e4 <RTC_Alarm_IRQHandler+0xc>)
 80014dc:	f003 fbb8 	bl	8004c50 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80014e0:	bd08      	pop	{r3, pc}
 80014e2:	bf00      	nop
 80014e4:	2000019c 	.word	0x2000019c

080014e8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80014e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80014ea:	4802      	ldr	r0, [pc, #8]	; (80014f4 <SUBGHZ_Radio_IRQHandler+0xc>)
 80014ec:	f004 f858 	bl	80055a0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80014f0:	bd08      	pop	{r3, pc}
 80014f2:	bf00      	nop
 80014f4:	200001d4 	.word	0x200001d4

080014f8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80014f8:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_SUBGHZ_Init+0x18>)
 80014fc:	2308      	movs	r3, #8
 80014fe:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001500:	f003 fdd0 	bl	80050a4 <HAL_SUBGHZ_Init>
 8001504:	b900      	cbnz	r0, 8001508 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001506:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001508:	f7ff feba 	bl	8001280 <Error_Handler>
}
 800150c:	e7fb      	b.n	8001506 <MX_SUBGHZ_Init+0xe>
 800150e:	bf00      	nop
 8001510:	200001d4 	.word	0x200001d4

08001514 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001514:	b500      	push	{lr}
 8001516:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800151e:	f042 0201 	orr.w	r2, r2, #1
 8001522:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800152c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	4611      	mov	r1, r2
 8001532:	2032      	movs	r0, #50	; 0x32
 8001534:	f001 fe4a 	bl	80031cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001538:	2032      	movs	r0, #50	; 0x32
 800153a:	f001 fe7f 	bl	800323c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800153e:	b003      	add	sp, #12
 8001540:	f85d fb04 	ldr.w	pc, [sp], #4

08001544 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001544:	b40c      	push	{r2, r3}
 8001546:	b500      	push	{lr}
 8001548:	b083      	sub	sp, #12
 800154a:	ab04      	add	r3, sp, #16
 800154c:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001550:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001552:	f010 f9f9 	bl	8011948 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001556:	b003      	add	sp, #12
 8001558:	f85d eb04 	ldr.w	lr, [sp], #4
 800155c:	b002      	add	sp, #8
 800155e:	4770      	bx	lr

08001560 <TimestampNow>:
{
 8001560:	b530      	push	{r4, r5, lr}
 8001562:	b085      	sub	sp, #20
 8001564:	4604      	mov	r4, r0
 8001566:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001568:	a802      	add	r0, sp, #8
 800156a:	f00f ff61 	bl	8011430 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800156e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	9b02      	ldr	r3, [sp, #8]
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <TimestampNow+0x2c>)
 8001578:	2110      	movs	r1, #16
 800157a:	4620      	mov	r0, r4
 800157c:	f7ff ffe2 	bl	8001544 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001580:	4620      	mov	r0, r4
 8001582:	f7fe fdf9 	bl	8000178 <strlen>
 8001586:	8028      	strh	r0, [r5, #0]
}
 8001588:	b005      	add	sp, #20
 800158a:	bd30      	pop	{r4, r5, pc}
 800158c:	08011ccc 	.word	0x08011ccc

08001590 <SystemApp_Init>:
{
 8001590:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001596:	6893      	ldr	r3, [r2, #8]
 8001598:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800159c:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800159e:	f00f ffcb 	bl	8011538 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80015a2:	2401      	movs	r4, #1
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <SystemApp_Init+0x4c>)
 80015a6:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 80015a8:	f000 f8bc 	bl	8001724 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 80015ac:	f00f fc68 	bl	8010e80 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <SystemApp_Init+0x50>)
 80015b2:	f00f fc7f 	bl	8010eb4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <SystemApp_Init+0x54>)
 80015b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015bc:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80015be:	2002      	movs	r0, #2
 80015c0:	f00f fc7e 	bl	8010ec0 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 80015c4:	f7ff fb86 	bl	8000cd4 <SYS_InitMeasurement>
  EnvSensors_Init();
 80015c8:	f000 f914 	bl	80017f4 <EnvSensors_Init>
  UTIL_LPM_Init();
 80015cc:	f00f fd88 	bl	80110e0 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80015d0:	4621      	mov	r1, r4
 80015d2:	4620      	mov	r0, r4
 80015d4:	f00f fda4 	bl	8011120 <UTIL_LPM_SetOffMode>
}
 80015d8:	bd10      	pop	{r4, pc}
 80015da:	bf00      	nop
 80015dc:	200001e0 	.word	0x200001e0
 80015e0:	08001561 	.word	0x08001561
 80015e4:	58004000 	.word	0x58004000

080015e8 <UTIL_SEQ_Idle>:
{
 80015e8:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80015ea:	f00f fdaf 	bl	801114c <UTIL_LPM_EnterLowPower>
}
 80015ee:	bd08      	pop	{r3, pc}

080015f0 <GetBatteryLevel>:
{
 80015f0:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80015f2:	f7ff fb77 	bl	8000ce4 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80015f6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80015fa:	4298      	cmp	r0, r3
 80015fc:	d80d      	bhi.n	800161a <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80015fe:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001602:	d30c      	bcc.n	800161e <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001604:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001608:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 800160c:	0040      	lsls	r0, r0, #1
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <GetBatteryLevel+0x34>)
 8001610:	fba3 3000 	umull	r3, r0, r3, r0
 8001614:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001618:	e000      	b.n	800161c <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 800161a:	20fe      	movs	r0, #254	; 0xfe
}
 800161c:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 800161e:	2000      	movs	r0, #0
 8001620:	e7fc      	b.n	800161c <GetBatteryLevel+0x2c>
 8001622:	bf00      	nop
 8001624:	1b4e81b5 	.word	0x1b4e81b5

08001628 <GetTemperatureLevel>:
{
 8001628:	b500      	push	{lr}
 800162a:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 800162c:	4668      	mov	r0, sp
 800162e:	f000 f8c5 	bl	80017bc <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001632:	9801      	ldr	r0, [sp, #4]
 8001634:	f7ff f922 	bl	800087c <__aeabi_f2iz>
}
 8001638:	b200      	sxth	r0, r0
 800163a:	b007      	add	sp, #28
 800163c:	f85d fb04 	ldr.w	pc, [sp], #4

08001640 <GetUniqueId>:
{
 8001640:	b538      	push	{r3, r4, r5, lr}
 8001642:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <GetUniqueId+0x68>)
 8001646:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800164a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164e:	d013      	beq.n	8001678 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001650:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001652:	0a1a      	lsrs	r2, r3, #8
 8001654:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001656:	0c1a      	lsrs	r2, r3, #16
 8001658:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 800165a:	0e1b      	lsrs	r3, r3, #24
 800165c:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <GetUniqueId+0x68>)
 8001660:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001664:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001666:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 800166a:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 800166c:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 800166e:	0c1a      	lsrs	r2, r3, #16
 8001670:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001672:	0e1b      	lsrs	r3, r3, #24
 8001674:	7003      	strb	r3, [r0, #0]
}
 8001676:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001678:	f001 f894 	bl	80027a4 <HAL_GetUIDw0>
 800167c:	4605      	mov	r5, r0
 800167e:	f001 f89d 	bl	80027bc <HAL_GetUIDw2>
 8001682:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001684:	f001 f894 	bl	80027b0 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001688:	0e2b      	lsrs	r3, r5, #24
 800168a:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 800168c:	0c2b      	lsrs	r3, r5, #16
 800168e:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001690:	0a2b      	lsrs	r3, r5, #8
 8001692:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001694:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001696:	0e03      	lsrs	r3, r0, #24
 8001698:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 800169a:	0c03      	lsrs	r3, r0, #16
 800169c:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 800169e:	0a03      	lsrs	r3, r0, #8
 80016a0:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 80016a2:	7020      	strb	r0, [r4, #0]
 80016a4:	e7e7      	b.n	8001676 <GetUniqueId+0x36>
 80016a6:	bf00      	nop
 80016a8:	1fff7000 	.word	0x1fff7000

080016ac <GetDevAddr>:
{
 80016ac:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <GetDevAddr+0x2c>)
 80016b0:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 80016b4:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 80016b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ba:	d000      	beq.n	80016be <GetDevAddr+0x12>
}
 80016bc:	bd38      	pop	{r3, r4, r5, pc}
 80016be:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80016c0:	f001 f870 	bl	80027a4 <HAL_GetUIDw0>
 80016c4:	4605      	mov	r5, r0
 80016c6:	f001 f873 	bl	80027b0 <HAL_GetUIDw1>
 80016ca:	4045      	eors	r5, r0
 80016cc:	f001 f876 	bl	80027bc <HAL_GetUIDw2>
 80016d0:	4045      	eors	r5, r0
 80016d2:	6025      	str	r5, [r4, #0]
}
 80016d4:	e7f2      	b.n	80016bc <GetDevAddr+0x10>
 80016d6:	bf00      	nop
 80016d8:	1fff7000 	.word	0x1fff7000

080016dc <UTIL_ADV_TRACE_PreSendHook>:
{
 80016dc:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80016de:	2101      	movs	r1, #1
 80016e0:	2002      	movs	r0, #2
 80016e2:	f00f fd07 	bl	80110f4 <UTIL_LPM_SetStopMode>
}
 80016e6:	bd08      	pop	{r3, pc}

080016e8 <UTIL_ADV_TRACE_PostSendHook>:
{
 80016e8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80016ea:	2100      	movs	r1, #0
 80016ec:	2002      	movs	r0, #2
 80016ee:	f00f fd01 	bl	80110f4 <UTIL_LPM_SetStopMode>
}
 80016f2:	bd08      	pop	{r3, pc}

080016f4 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80016f4:	2000      	movs	r0, #0
 80016f6:	4770      	bx	lr

080016f8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80016f8:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <HAL_GetTick+0x14>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b90b      	cbnz	r3, 8001704 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001700:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001702:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001704:	f000 f8a2 	bl	800184c <TIMER_IF_GetTimerValue>
 8001708:	e7fb      	b.n	8001702 <HAL_GetTick+0xa>
 800170a:	bf00      	nop
 800170c:	200001e0 	.word	0x200001e0

08001710 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001710:	b500      	push	{lr}
 8001712:	b083      	sub	sp, #12
 8001714:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001716:	9801      	ldr	r0, [sp, #4]
 8001718:	f000 f97e 	bl	8001a18 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800171c:	b003      	add	sp, #12
 800171e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001724 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001726:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001728:	4a22      	ldr	r2, [pc, #136]	; (80017b4 <DBG_Init+0x90>)
 800172a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800172e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001736:	f001 f847 	bl	80027c8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800173a:	f001 f84d 	bl	80027d8 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 800173e:	f001 f853 	bl	80027e8 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001742:	2400      	movs	r4, #0
 8001744:	9403      	str	r4, [sp, #12]
 8001746:	9404      	str	r4, [sp, #16]
 8001748:	9405      	str	r4, [sp, #20]
 800174a:	9406      	str	r4, [sp, #24]
 800174c:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800175c:	f042 0202 	orr.w	r2, r2, #2
 8001760:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001762:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001764:	f002 0202 	and.w	r2, r2, #2
 8001768:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800176a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800176c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800176e:	f042 0202 	orr.w	r2, r2, #2
 8001772:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800177c:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 800177e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001782:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001784:	4d0c      	ldr	r5, [pc, #48]	; (80017b8 <DBG_Init+0x94>)
 8001786:	a903      	add	r1, sp, #12
 8001788:	4628      	mov	r0, r5
 800178a:	f002 f94b 	bl	8003a24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 800178e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001792:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001794:	a903      	add	r1, sp, #12
 8001796:	4628      	mov	r0, r5
 8001798:	f002 f944 	bl	8003a24 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 800179c:	4622      	mov	r2, r4
 800179e:	4639      	mov	r1, r7
 80017a0:	4628      	mov	r0, r5
 80017a2:	f002 fa8f 	bl	8003cc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80017a6:	4622      	mov	r2, r4
 80017a8:	4631      	mov	r1, r6
 80017aa:	4628      	mov	r0, r5
 80017ac:	f002 fa8a 	bl	8003cc4 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80017b0:	b009      	add	sp, #36	; 0x24
 80017b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b4:	58000800 	.word	0x58000800
 80017b8:	48000400 	.word	0x48000400

080017bc <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80017bc:	b510      	push	{r4, lr}
 80017be:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 80017c0:	f7ff fab2 	bl	8000d28 <SYS_GetTemperatureLevel>
 80017c4:	f340 200f 	sbfx	r0, r0, #8, #16
 80017c8:	f7ff f804 	bl	80007d4 <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <EnvSensors_Read+0x28>)
 80017ce:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80017d0:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <EnvSensors_Read+0x2c>)
 80017d4:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <EnvSensors_Read+0x30>)
 80017d8:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <EnvSensors_Read+0x34>)
 80017dc:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 80017de:	2000      	movs	r0, #0
 80017e0:	bd10      	pop	{r4, pc}
 80017e2:	bf00      	nop
 80017e4:	42480000 	.word	0x42480000
 80017e8:	447a0000 	.word	0x447a0000
 80017ec:	003e090d 	.word	0x003e090d
 80017f0:	000503ab 	.word	0x000503ab

080017f4 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80017f4:	2000      	movs	r0, #0
 80017f6:	4770      	bx	lr

080017f8 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <TIMER_IF_SetTimerContext+0x1c>)
 80017fa:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80017fc:	e001      	b.n	8001802 <TIMER_IF_SetTimerContext+0xa>
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <TIMER_IF_SetTimerContext+0x1c>)
 8001800:	6898      	ldr	r0, [r3, #8]
 8001802:	4b04      	ldr	r3, [pc, #16]	; (8001814 <TIMER_IF_SetTimerContext+0x1c>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	4283      	cmp	r3, r0
 8001808:	d1f9      	bne.n	80017fe <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 800180a:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 800180c:	4b02      	ldr	r3, [pc, #8]	; (8001818 <TIMER_IF_SetTimerContext+0x20>)
 800180e:	6018      	str	r0, [r3, #0]
}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40002800 	.word	0x40002800
 8001818:	200001e4 	.word	0x200001e4

0800181c <TIMER_IF_GetTimerContext>:
}
 800181c:	4b01      	ldr	r3, [pc, #4]	; (8001824 <TIMER_IF_GetTimerContext+0x8>)
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	200001e4 	.word	0x200001e4

08001828 <TIMER_IF_GetTimerElapsedTime>:
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 800182a:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800182c:	e001      	b.n	8001832 <TIMER_IF_GetTimerElapsedTime+0xa>
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001830:	6898      	ldr	r0, [r3, #8]
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	4283      	cmp	r3, r0
 8001838:	d1f9      	bne.n	800182e <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 800183a:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <TIMER_IF_GetTimerElapsedTime+0x20>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	1ac0      	subs	r0, r0, r3
 8001842:	4770      	bx	lr
 8001844:	40002800 	.word	0x40002800
 8001848:	200001e4 	.word	0x200001e4

0800184c <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <TIMER_IF_GetTimerValue+0x20>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b153      	cbz	r3, 8001868 <TIMER_IF_GetTimerValue+0x1c>
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <TIMER_IF_GetTimerValue+0x24>)
 8001854:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001856:	e001      	b.n	800185c <TIMER_IF_GetTimerValue+0x10>
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <TIMER_IF_GetTimerValue+0x24>)
 800185a:	6898      	ldr	r0, [r3, #8]
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <TIMER_IF_GetTimerValue+0x24>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4283      	cmp	r3, r0
 8001862:	d1f9      	bne.n	8001858 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001864:	43c0      	mvns	r0, r0
 8001866:	4770      	bx	lr
  uint32_t ret = 0;
 8001868:	2000      	movs	r0, #0
}
 800186a:	4770      	bx	lr
 800186c:	200001e1 	.word	0x200001e1
 8001870:	40002800 	.word	0x40002800

08001874 <TIMER_IF_GetMinimumTimeout>:
}
 8001874:	2003      	movs	r0, #3
 8001876:	4770      	bx	lr

08001878 <TIMER_IF_Convert_ms2Tick>:
{
 8001878:	b508      	push	{r3, lr}
 800187a:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800187c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001880:	2300      	movs	r3, #0
 8001882:	0280      	lsls	r0, r0, #10
 8001884:	0d89      	lsrs	r1, r1, #22
 8001886:	f7ff f81f 	bl	80008c8 <__aeabi_uldivmod>
}
 800188a:	bd08      	pop	{r3, pc}

0800188c <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800188c:	0ec2      	lsrs	r2, r0, #27
 800188e:	0143      	lsls	r3, r0, #5
 8001890:	1a1b      	subs	r3, r3, r0
 8001892:	f162 0200 	sbc.w	r2, r2, #0
 8001896:	0092      	lsls	r2, r2, #2
 8001898:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	181b      	adds	r3, r3, r0
 80018a0:	f142 0000 	adc.w	r0, r2, #0
 80018a4:	00c0      	lsls	r0, r0, #3
 80018a6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80018aa:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 80018ae:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 80018b2:	4770      	bx	lr

080018b4 <TIMER_IF_StopTimer>:
{
 80018b4:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <TIMER_IF_StopTimer+0x20>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80018bc:	4c06      	ldr	r4, [pc, #24]	; (80018d8 <TIMER_IF_StopTimer+0x24>)
 80018be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c2:	4620      	mov	r0, r4
 80018c4:	f003 f984 	bl	8004bd0 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
 80018cc:	6323      	str	r3, [r4, #48]	; 0x30
}
 80018ce:	2000      	movs	r0, #0
 80018d0:	bd10      	pop	{r4, pc}
 80018d2:	bf00      	nop
 80018d4:	40002800 	.word	0x40002800
 80018d8:	2000019c 	.word	0x2000019c

080018dc <TIMER_IF_BkUp_Write_MSBticks>:
{
 80018dc:	b508      	push	{r3, lr}
 80018de:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80018e0:	2102      	movs	r1, #2
 80018e2:	4802      	ldr	r0, [pc, #8]	; (80018ec <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 80018e4:	f003 fbbd 	bl	8005062 <HAL_RTCEx_BKUPWrite>
}
 80018e8:	bd08      	pop	{r3, pc}
 80018ea:	bf00      	nop
 80018ec:	2000019c 	.word	0x2000019c

080018f0 <TIMER_IF_Init>:
{
 80018f0:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <TIMER_IF_Init+0x40>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b10b      	cbz	r3, 80018fc <TIMER_IF_Init+0xc>
}
 80018f8:	2000      	movs	r0, #0
 80018fa:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80018fc:	4c0d      	ldr	r4, [pc, #52]	; (8001934 <TIMER_IF_Init+0x44>)
 80018fe:	f04f 35ff 	mov.w	r5, #4294967295
 8001902:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001904:	f7ff fd12 	bl	800132c <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001908:	f7ff ffd4 	bl	80018b4 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800190c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001910:	4620      	mov	r0, r4
 8001912:	f003 f95d 	bl	8004bd0 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001916:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001918:	4620      	mov	r0, r4
 800191a:	f003 fb41 	bl	8004fa0 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff ffdc 	bl	80018dc <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001924:	f7ff ff68 	bl	80017f8 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001928:	4b01      	ldr	r3, [pc, #4]	; (8001930 <TIMER_IF_Init+0x40>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	e7e3      	b.n	80018f8 <TIMER_IF_Init+0x8>
 8001930:	200001e1 	.word	0x200001e1
 8001934:	2000019c 	.word	0x2000019c

08001938 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001938:	b508      	push	{r3, lr}
 800193a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800193c:	2100      	movs	r1, #0
 800193e:	4802      	ldr	r0, [pc, #8]	; (8001948 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001940:	f003 fb8f 	bl	8005062 <HAL_RTCEx_BKUPWrite>
}
 8001944:	bd08      	pop	{r3, pc}
 8001946:	bf00      	nop
 8001948:	2000019c 	.word	0x2000019c

0800194c <TIMER_IF_BkUp_Write_SubSeconds>:
{
 800194c:	b508      	push	{r3, lr}
 800194e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001950:	2101      	movs	r1, #1
 8001952:	4802      	ldr	r0, [pc, #8]	; (800195c <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001954:	f003 fb85 	bl	8005062 <HAL_RTCEx_BKUPWrite>
}
 8001958:	bd08      	pop	{r3, pc}
 800195a:	bf00      	nop
 800195c:	2000019c 	.word	0x2000019c

08001960 <TIMER_IF_StartTimer>:
{
 8001960:	b510      	push	{r4, lr}
 8001962:	b08c      	sub	sp, #48	; 0x30
 8001964:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001966:	222c      	movs	r2, #44	; 0x2c
 8001968:	2100      	movs	r1, #0
 800196a:	a801      	add	r0, sp, #4
 800196c:	f010 f8b0 	bl	8011ad0 <memset>
  TIMER_IF_StopTimer();
 8001970:	f7ff ffa0 	bl	80018b4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <TIMER_IF_StartTimer+0x48>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800197a:	2300      	movs	r3, #0
 800197c:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800197e:	43e4      	mvns	r4, r4
 8001980:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001982:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001984:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001988:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800198a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800198e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001990:	2201      	movs	r2, #1
 8001992:	a901      	add	r1, sp, #4
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <TIMER_IF_StartTimer+0x4c>)
 8001996:	f003 fa47 	bl	8004e28 <HAL_RTC_SetAlarm_IT>
 800199a:	b910      	cbnz	r0, 80019a2 <TIMER_IF_StartTimer+0x42>
}
 800199c:	2000      	movs	r0, #0
 800199e:	b00c      	add	sp, #48	; 0x30
 80019a0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80019a2:	f7ff fc6d 	bl	8001280 <Error_Handler>
 80019a6:	e7f9      	b.n	800199c <TIMER_IF_StartTimer+0x3c>
 80019a8:	200001e4 	.word	0x200001e4
 80019ac:	2000019c 	.word	0x2000019c

080019b0 <TIMER_IF_BkUp_Read_MSBticks>:
{
 80019b0:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80019b2:	2102      	movs	r1, #2
 80019b4:	4801      	ldr	r0, [pc, #4]	; (80019bc <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 80019b6:	f003 fb5b 	bl	8005070 <HAL_RTCEx_BKUPRead>
}
 80019ba:	bd08      	pop	{r3, pc}
 80019bc:	2000019c 	.word	0x2000019c

080019c0 <TIMER_IF_GetTime>:
{
 80019c0:	b538      	push	{r3, r4, r5, lr}
 80019c2:	4605      	mov	r5, r0
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <TIMER_IF_GetTime+0x34>)
 80019c6:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80019c8:	e001      	b.n	80019ce <TIMER_IF_GetTime+0xe>
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <TIMER_IF_GetTime+0x34>)
 80019cc:	689c      	ldr	r4, [r3, #8]
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <TIMER_IF_GetTime+0x34>)
 80019d0:	6892      	ldr	r2, [r2, #8]
 80019d2:	42a2      	cmp	r2, r4
 80019d4:	d1f9      	bne.n	80019ca <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 80019d6:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80019d8:	f7ff ffea 	bl	80019b0 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80019dc:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80019de:	0aa4      	lsrs	r4, r4, #10
 80019e0:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80019e4:	f3c3 0009 	ubfx	r0, r3, #0, #10
 80019e8:	f7ff ff50 	bl	800188c <TIMER_IF_Convert_Tick2ms>
 80019ec:	8028      	strh	r0, [r5, #0]
}
 80019ee:	4620      	mov	r0, r4
 80019f0:	bd38      	pop	{r3, r4, r5, pc}
 80019f2:	bf00      	nop
 80019f4:	40002800 	.word	0x40002800

080019f8 <TIMER_IF_BkUp_Read_Seconds>:
{
 80019f8:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80019fa:	2100      	movs	r1, #0
 80019fc:	4801      	ldr	r0, [pc, #4]	; (8001a04 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 80019fe:	f003 fb37 	bl	8005070 <HAL_RTCEx_BKUPRead>
}
 8001a02:	bd08      	pop	{r3, pc}
 8001a04:	2000019c 	.word	0x2000019c

08001a08 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001a08:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	4801      	ldr	r0, [pc, #4]	; (8001a14 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001a0e:	f003 fb2f 	bl	8005070 <HAL_RTCEx_BKUPRead>
}
 8001a12:	bd08      	pop	{r3, pc}
 8001a14:	2000019c 	.word	0x2000019c

08001a18 <TIMER_IF_DelayMs>:
{
 8001a18:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001a1a:	f7ff ff2d 	bl	8001878 <TIMER_IF_Convert_ms2Tick>
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <TIMER_IF_DelayMs+0x3c>)
 8001a20:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001a22:	e001      	b.n	8001a28 <TIMER_IF_DelayMs+0x10>
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <TIMER_IF_DelayMs+0x3c>)
 8001a26:	6899      	ldr	r1, [r3, #8]
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <TIMER_IF_DelayMs+0x3c>)
 8001a2a:	6892      	ldr	r2, [r2, #8]
 8001a2c:	428a      	cmp	r2, r1
 8001a2e:	d1f9      	bne.n	8001a24 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001a30:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001a32:	e00a      	b.n	8001a4a <TIMER_IF_DelayMs+0x32>
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <TIMER_IF_DelayMs+0x3c>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <TIMER_IF_DelayMs+0x3c>)
 8001a3a:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d1f9      	bne.n	8001a34 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001a40:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001a42:	1a5b      	subs	r3, r3, r1
 8001a44:	4283      	cmp	r3, r0
 8001a46:	d203      	bcs.n	8001a50 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001a48:	bf00      	nop
 8001a4a:	4b02      	ldr	r3, [pc, #8]	; (8001a54 <TIMER_IF_DelayMs+0x3c>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001a4e:	e7f3      	b.n	8001a38 <TIMER_IF_DelayMs+0x20>
}
 8001a50:	bd08      	pop	{r3, pc}
 8001a52:	bf00      	nop
 8001a54:	40002800 	.word	0x40002800

08001a58 <HAL_RTC_AlarmAEventCallback>:
{
 8001a58:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001a5a:	f00f fe91 	bl	8011780 <UTIL_TIMER_IRQ_Handler>
}
 8001a5e:	bd08      	pop	{r3, pc}

08001a60 <HAL_RTCEx_SSRUEventCallback>:
{
 8001a60:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001a62:	f7ff ffa5 	bl	80019b0 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001a66:	3001      	adds	r0, #1
 8001a68:	f7ff ff38 	bl	80018dc <TIMER_IF_BkUp_Write_MSBticks>
}
 8001a6c:	bd08      	pop	{r3, pc}
	...

08001a70 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a70:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a72:	4817      	ldr	r0, [pc, #92]	; (8001ad0 <MX_USART2_UART_Init+0x60>)
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_USART2_UART_Init+0x64>)
 8001a76:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001a78:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001a7c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a82:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a84:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a86:	220c      	movs	r2, #12
 8001a88:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8e:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a90:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a92:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a94:	f004 fe48 	bl	8006728 <HAL_UART_Init>
 8001a98:	b970      	cbnz	r0, 8001ab8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <MX_USART2_UART_Init+0x60>)
 8001a9e:	f004 fff8 	bl	8006a92 <HAL_UARTEx_SetTxFifoThreshold>
 8001aa2:	b960      	cbnz	r0, 8001abe <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	480a      	ldr	r0, [pc, #40]	; (8001ad0 <MX_USART2_UART_Init+0x60>)
 8001aa8:	f005 f818 	bl	8006adc <HAL_UARTEx_SetRxFifoThreshold>
 8001aac:	b950      	cbnz	r0, 8001ac4 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001aae:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <MX_USART2_UART_Init+0x60>)
 8001ab0:	f004 ffcb 	bl	8006a4a <HAL_UARTEx_EnableFifoMode>
 8001ab4:	b948      	cbnz	r0, 8001aca <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ab6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001ab8:	f7ff fbe2 	bl	8001280 <Error_Handler>
 8001abc:	e7ed      	b.n	8001a9a <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001abe:	f7ff fbdf 	bl	8001280 <Error_Handler>
 8001ac2:	e7ef      	b.n	8001aa4 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001ac4:	f7ff fbdc 	bl	8001280 <Error_Handler>
 8001ac8:	e7f1      	b.n	8001aae <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001aca:	f7ff fbd9 	bl	8001280 <Error_Handler>
}
 8001ace:	e7f2      	b.n	8001ab6 <MX_USART2_UART_Init+0x46>
 8001ad0:	20000248 	.word	0x20000248
 8001ad4:	40004400 	.word	0x40004400

08001ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad8:	b530      	push	{r4, r5, lr}
 8001ada:	b097      	sub	sp, #92	; 0x5c
 8001adc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ade:	2100      	movs	r1, #0
 8001ae0:	9111      	str	r1, [sp, #68]	; 0x44
 8001ae2:	9112      	str	r1, [sp, #72]	; 0x48
 8001ae4:	9113      	str	r1, [sp, #76]	; 0x4c
 8001ae6:	9114      	str	r1, [sp, #80]	; 0x50
 8001ae8:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aea:	2238      	movs	r2, #56	; 0x38
 8001aec:	a803      	add	r0, sp, #12
 8001aee:	f00f ffef 	bl	8011ad0 <memset>
  if(uartHandle->Instance==USART2)
 8001af2:	6822      	ldr	r2, [r4, #0]
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <HAL_UART_MspInit+0xd4>)
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001afa:	b017      	add	sp, #92	; 0x5c
 8001afc:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001afe:	2302      	movs	r3, #2
 8001b00:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_UART_MspInit+0xd8>)
 8001b04:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b06:	a803      	add	r0, sp, #12
 8001b08:	f002 ff18 	bl	800493c <HAL_RCCEx_PeriphCLKConfig>
 8001b0c:	2800      	cmp	r0, #0
 8001b0e:	d144      	bne.n	8001b9a <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b16:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b1a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b1e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b22:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001b24:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b36:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001b38:	230c      	movs	r3, #12
 8001b3a:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2500      	movs	r5, #0
 8001b42:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b48:	2307      	movs	r3, #7
 8001b4a:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	a911      	add	r1, sp, #68	; 0x44
 8001b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b52:	f001 ff67 	bl	8003a24 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001b56:	4817      	ldr	r0, [pc, #92]	; (8001bb4 <HAL_UART_MspInit+0xdc>)
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_UART_MspInit+0xe0>)
 8001b5a:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001b5c:	2314      	movs	r3, #20
 8001b5e:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b60:	2310      	movs	r3, #16
 8001b62:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b64:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b6a:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b6c:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b6e:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b70:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b72:	f001 fbf3 	bl	800335c <HAL_DMA_Init>
 8001b76:	b998      	cbnz	r0, 8001ba0 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b78:	2110      	movs	r1, #16
 8001b7a:	480e      	ldr	r0, [pc, #56]	; (8001bb4 <HAL_UART_MspInit+0xdc>)
 8001b7c:	f001 fdf0 	bl	8003760 <HAL_DMA_ConfigChannelAttributes>
 8001b80:	b988      	cbnz	r0, 8001ba6 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_UART_MspInit+0xdc>)
 8001b84:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001b86:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	2025      	movs	r0, #37	; 0x25
 8001b8e:	f001 fb1d 	bl	80031cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b92:	2025      	movs	r0, #37	; 0x25
 8001b94:	f001 fb52 	bl	800323c <HAL_NVIC_EnableIRQ>
}
 8001b98:	e7af      	b.n	8001afa <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001b9a:	f7ff fb71 	bl	8001280 <Error_Handler>
 8001b9e:	e7b7      	b.n	8001b10 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001ba0:	f7ff fb6e 	bl	8001280 <Error_Handler>
 8001ba4:	e7e8      	b.n	8001b78 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001ba6:	f7ff fb6b 	bl	8001280 <Error_Handler>
 8001baa:	e7ea      	b.n	8001b82 <HAL_UART_MspInit+0xaa>
 8001bac:	40004400 	.word	0x40004400
 8001bb0:	000c0004 	.word	0x000c0004
 8001bb4:	200001e8 	.word	0x200001e8
 8001bb8:	40020058 	.word	0x40020058

08001bbc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001bbc:	6802      	ldr	r2, [r0, #0]
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_UART_MspDeInit+0x34>)
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d000      	beq.n	8001bc6 <HAL_UART_MspDeInit+0xa>
 8001bc4:	4770      	bx	lr
{
 8001bc6:	b510      	push	{r4, lr}
 8001bc8:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001bd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001bd4:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001bd6:	210c      	movs	r1, #12
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bdc:	f001 fff4 	bl	8003bc8 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001be0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001be2:	f001 fc2d 	bl	8003440 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001be6:	2025      	movs	r0, #37	; 0x25
 8001be8:	f001 fb36 	bl	8003258 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001bec:	bd10      	pop	{r4, pc}
 8001bee:	bf00      	nop
 8001bf0:	40004400 	.word	0x40004400

08001bf4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001bf4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <vcom_Init+0x20>)
 8001bf8:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001bfa:	f7ff f8eb 	bl	8000dd4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001bfe:	f7ff ff37 	bl	8001a70 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001c02:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <vcom_Init+0x24>)
 8001c04:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001c08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001c10:	2000      	movs	r0, #0
 8001c12:	bd08      	pop	{r3, pc}
 8001c14:	200002e0 	.word	0x200002e0
 8001c18:	58000800 	.word	0x58000800

08001c1c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001c1c:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c24:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c2c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c30:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001c32:	4804      	ldr	r0, [pc, #16]	; (8001c44 <vcom_DeInit+0x28>)
 8001c34:	f7ff ffc2 	bl	8001bbc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001c38:	200f      	movs	r0, #15
 8001c3a:	f001 fb0d 	bl	8003258 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001c3e:	2000      	movs	r0, #0
 8001c40:	bd08      	pop	{r3, pc}
 8001c42:	bf00      	nop
 8001c44:	20000248 	.word	0x20000248

08001c48 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001c48:	b508      	push	{r3, lr}
 8001c4a:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001c4c:	4601      	mov	r1, r0
 8001c4e:	4802      	ldr	r0, [pc, #8]	; (8001c58 <vcom_Trace_DMA+0x10>)
 8001c50:	f003 fdec 	bl	800582c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001c54:	2000      	movs	r0, #0
 8001c56:	bd08      	pop	{r3, pc}
 8001c58:	20000248 	.word	0x20000248

08001c5c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001c5c:	b510      	push	{r4, lr}
 8001c5e:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <vcom_ReceiveInit+0x50>)
 8001c62:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001c64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c68:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001c6a:	ab02      	add	r3, sp, #8
 8001c6c:	e913 0006 	ldmdb	r3, {r1, r2}
 8001c70:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <vcom_ReceiveInit+0x54>)
 8001c72:	f004 fe92 	bl	800699a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <vcom_ReceiveInit+0x54>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001c80:	d1f9      	bne.n	8001c76 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001c82:	69da      	ldr	r2, [r3, #28]
 8001c84:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001c88:	d0fb      	beq.n	8001c82 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c90:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001c92:	4c07      	ldr	r4, [pc, #28]	; (8001cb0 <vcom_ReceiveInit+0x54>)
 8001c94:	4620      	mov	r0, r4
 8001c96:	f004 fec1 	bl	8006a1c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4905      	ldr	r1, [pc, #20]	; (8001cb4 <vcom_ReceiveInit+0x58>)
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f004 fe14 	bl	80068cc <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd10      	pop	{r4, pc}
 8001caa:	bf00      	nop
 8001cac:	200002dc 	.word	0x200002dc
 8001cb0:	20000248 	.word	0x20000248
 8001cb4:	200002e4 	.word	0x200002e4

08001cb8 <vcom_Resume>:

void vcom_Resume(void)
{
 8001cb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cba:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <vcom_Resume+0x20>)
 8001cbc:	f004 fd34 	bl	8006728 <HAL_UART_Init>
 8001cc0:	b920      	cbnz	r0, 8001ccc <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001cc2:	4806      	ldr	r0, [pc, #24]	; (8001cdc <vcom_Resume+0x24>)
 8001cc4:	f001 fb4a 	bl	800335c <HAL_DMA_Init>
 8001cc8:	b918      	cbnz	r0, 8001cd2 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001cca:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001ccc:	f7ff fad8 	bl	8001280 <Error_Handler>
 8001cd0:	e7f7      	b.n	8001cc2 <vcom_Resume+0xa>
    Error_Handler();
 8001cd2:	f7ff fad5 	bl	8001280 <Error_Handler>
}
 8001cd6:	e7f8      	b.n	8001cca <vcom_Resume+0x12>
 8001cd8:	20000248 	.word	0x20000248
 8001cdc:	200001e8 	.word	0x200001e8

08001ce0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ce0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001ce2:	6802      	ldr	r2, [r0, #0]
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <HAL_UART_TxCpltCallback+0x18>)
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d000      	beq.n	8001cec <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001cea:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_UART_TxCpltCallback+0x1c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	4798      	blx	r3
}
 8001cf4:	e7f9      	b.n	8001cea <HAL_UART_TxCpltCallback+0xa>
 8001cf6:	bf00      	nop
 8001cf8:	40004400 	.word	0x40004400
 8001cfc:	200002e0 	.word	0x200002e0

08001d00 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001d00:	6802      	ldr	r2, [r0, #0]
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_UART_RxCpltCallback+0x2c>)
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d000      	beq.n	8001d0a <HAL_UART_RxCpltCallback+0xa>
 8001d08:	4770      	bx	lr
{
 8001d0a:	b510      	push	{r4, lr}
 8001d0c:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_UART_RxCpltCallback+0x30>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b12b      	cbz	r3, 8001d20 <HAL_UART_RxCpltCallback+0x20>
 8001d14:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001d18:	b912      	cbnz	r2, 8001d20 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <HAL_UART_RxCpltCallback+0x34>)
 8001d1e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001d20:	2201      	movs	r2, #1
 8001d22:	4904      	ldr	r1, [pc, #16]	; (8001d34 <HAL_UART_RxCpltCallback+0x34>)
 8001d24:	4620      	mov	r0, r4
 8001d26:	f004 fdd1 	bl	80068cc <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001d2a:	bd10      	pop	{r4, pc}
 8001d2c:	40004400 	.word	0x40004400
 8001d30:	200002dc 	.word	0x200002dc
 8001d34:	200002e4 	.word	0x200002e4

08001d38 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001d38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001d3a:	f7ff fc29 	bl	8001590 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001d3e:	f000 fb23 	bl	8002388 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001d42:	bd08      	pop	{r3, pc}

08001d44 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8001d44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001d46:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4a:	f00f fa6b 	bl	8011224 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8001d4e:	bd08      	pop	{r3, pc}

08001d50 <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8001d50:	4770      	bx	lr
	...

08001d54 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8001d54:	4b01      	ldr	r3, [pc, #4]	; (8001d5c <OnTxFrameCtrlChanged+0x8>)
 8001d56:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000058 	.word	0x20000058

08001d60 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8001d60:	4b01      	ldr	r3, [pc, #4]	; (8001d68 <OnPingSlotPeriodicityChanged+0x8>)
 8001d62:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000058 	.word	0x20000058

08001d6c <OnBeaconStatusChange>:
  if (params != NULL)
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	d03f      	beq.n	8001df0 <OnBeaconStatusChange+0x84>
{
 8001d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d74:	b08c      	sub	sp, #48	; 0x30
 8001d76:	4603      	mov	r3, r0
    switch (params->State)
 8001d78:	7842      	ldrb	r2, [r0, #1]
 8001d7a:	2a02      	cmp	r2, #2
 8001d7c:	d00a      	beq.n	8001d94 <OnBeaconStatusChange+0x28>
 8001d7e:	2a03      	cmp	r2, #3
 8001d80:	d02f      	beq.n	8001de2 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <OnBeaconStatusChange+0x88>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	4611      	mov	r1, r2
 8001d88:	2002      	movs	r0, #2
 8001d8a:	f00f f8ed 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 8001d8e:	b00c      	add	sp, #48	; 0x30
 8001d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8001d94:	7c02      	ldrb	r2, [r0, #16]
 8001d96:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8001d9a:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8001d9e:	7d5c      	ldrb	r4, [r3, #21]
 8001da0:	7d9d      	ldrb	r5, [r3, #22]
 8001da2:	7dde      	ldrb	r6, [r3, #23]
 8001da4:	7e1f      	ldrb	r7, [r3, #24]
 8001da6:	f893 c019 	ldrb.w	ip, [r3, #25]
 8001daa:	f893 e01a 	ldrb.w	lr, [r3, #26]
 8001dae:	f893 801b 	ldrb.w	r8, [r3, #27]
 8001db2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8001db6:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8001dba:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8001dbe:	9708      	str	r7, [sp, #32]
 8001dc0:	9607      	str	r6, [sp, #28]
 8001dc2:	9506      	str	r5, [sp, #24]
 8001dc4:	9405      	str	r4, [sp, #20]
 8001dc6:	685c      	ldr	r4, [r3, #4]
 8001dc8:	9404      	str	r4, [sp, #16]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	9303      	str	r3, [sp, #12]
 8001dce:	9002      	str	r0, [sp, #8]
 8001dd0:	9101      	str	r1, [sp, #4]
 8001dd2:	9200      	str	r2, [sp, #0]
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <OnBeaconStatusChange+0x8c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4611      	mov	r1, r2
 8001dda:	2002      	movs	r0, #2
 8001ddc:	f00f f8c4 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8001de0:	e7d5      	b.n	8001d8e <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <OnBeaconStatusChange+0x90>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	4611      	mov	r1, r2
 8001de8:	2002      	movs	r0, #2
 8001dea:	f00f f8bd 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 8001dee:	e7ce      	b.n	8001d8e <OnBeaconStatusChange+0x22>
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	08011d28 	.word	0x08011d28
 8001df8:	08011d40 	.word	0x08011d40
 8001dfc:	08011db4 	.word	0x08011db4

08001e00 <OnClassChange>:
{
 8001e00:	b500      	push	{lr}
 8001e02:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <OnClassChange+0x1c>)
 8001e06:	5c1b      	ldrb	r3, [r3, r0]
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <OnClassChange+0x20>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4611      	mov	r1, r2
 8001e10:	2002      	movs	r0, #2
 8001e12:	f00f f8a9 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 8001e16:	b003      	add	sp, #12
 8001e18:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e1c:	08011df0 	.word	0x08011df0
 8001e20:	08011dd4 	.word	0x08011dd4

08001e24 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8001e24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8001e26:	2801      	cmp	r0, #1
 8001e28:	d006      	beq.n	8001e38 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <OnNvmDataChange+0x24>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4611      	mov	r1, r2
 8001e30:	2002      	movs	r0, #2
 8001e32:	f00f f899 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8001e36:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <OnNvmDataChange+0x28>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	2002      	movs	r0, #2
 8001e40:	f00f f892 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
 8001e44:	e7f7      	b.n	8001e36 <OnNvmDataChange+0x12>
 8001e46:	bf00      	nop
 8001e48:	08011e08 	.word	0x08011e08
 8001e4c:	08011df4 	.word	0x08011df4

08001e50 <OnTxTimerEvent>:
{
 8001e50:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8001e52:	2100      	movs	r1, #0
 8001e54:	2002      	movs	r0, #2
 8001e56:	f00f f9b1 	bl	80111bc <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8001e5a:	4802      	ldr	r0, [pc, #8]	; (8001e64 <OnTxTimerEvent+0x14>)
 8001e5c:	f00f fc30 	bl	80116c0 <UTIL_TIMER_Start>
}
 8001e60:	bd08      	pop	{r3, pc}
 8001e62:	bf00      	nop
 8001e64:	20000440 	.word	0x20000440

08001e68 <OnMacProcessNotify>:
{
 8001e68:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f00f f9a5 	bl	80111bc <UTIL_SEQ_SetTask>
}
 8001e72:	bd08      	pop	{r3, pc}

08001e74 <OnSystemReset>:
{
 8001e74:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8001e76:	f005 faf5 	bl	8007464 <LmHandlerHalt>
 8001e7a:	b100      	cbz	r0, 8001e7e <OnSystemReset+0xa>
}
 8001e7c:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8001e7e:	f004 ff4f 	bl	8006d20 <LmHandlerJoinStatus>
 8001e82:	2801      	cmp	r0, #1
 8001e84:	d1fa      	bne.n	8001e7c <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e86:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001e8a:	4905      	ldr	r1, [pc, #20]	; (8001ea0 <OnSystemReset+0x2c>)
 8001e8c:	68ca      	ldr	r2, [r1, #12]
 8001e8e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <OnSystemReset+0x30>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60cb      	str	r3, [r1, #12]
 8001e98:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001e9c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001e9e:	e7fd      	b.n	8001e9c <OnSystemReset+0x28>
 8001ea0:	e000ed00 	.word	0xe000ed00
 8001ea4:	05fa0004 	.word	0x05fa0004

08001ea8 <OnTxPeriodicityChanged>:
{
 8001ea8:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <OnTxPeriodicityChanged+0x28>)
 8001eac:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8001eae:	b910      	cbnz	r0, 8001eb6 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8001eb0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001eb4:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8001eb6:	4c07      	ldr	r4, [pc, #28]	; (8001ed4 <OnTxPeriodicityChanged+0x2c>)
 8001eb8:	4620      	mov	r0, r4
 8001eba:	f00f fba7 	bl	801160c <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <OnTxPeriodicityChanged+0x28>)
 8001ec0:	6819      	ldr	r1, [r3, #0]
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f00f fc42 	bl	801174c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f00f fbf9 	bl	80116c0 <UTIL_TIMER_Start>
}
 8001ece:	bd10      	pop	{r4, pc}
 8001ed0:	20000070 	.word	0x20000070
 8001ed4:	20000440 	.word	0x20000440

08001ed8 <OnTxData>:
  if ((params != NULL))
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d042      	beq.n	8001f62 <OnTxData+0x8a>
{
 8001edc:	b510      	push	{r4, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 8001ee2:	7803      	ldrb	r3, [r0, #0]
 8001ee4:	b90b      	cbnz	r3, 8001eea <OnTxData+0x12>
}
 8001ee6:	b004      	add	sp, #16
 8001ee8:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef0:	481c      	ldr	r0, [pc, #112]	; (8001f64 <OnTxData+0x8c>)
 8001ef2:	f001 fee7 	bl	8003cc4 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 8001ef6:	481c      	ldr	r0, [pc, #112]	; (8001f68 <OnTxData+0x90>)
 8001ef8:	f00f fbe2 	bl	80116c0 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <OnTxData+0x94>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	4611      	mov	r1, r2
 8001f02:	2002      	movs	r0, #2
 8001f04:	f00f f830 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8001f08:	7c23      	ldrb	r3, [r4, #16]
 8001f0a:	f994 200a 	ldrsb.w	r2, [r4, #10]
 8001f0e:	f994 1018 	ldrsb.w	r1, [r4, #24]
 8001f12:	9103      	str	r1, [sp, #12]
 8001f14:	9202      	str	r2, [sp, #8]
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	68e3      	ldr	r3, [r4, #12]
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <OnTxData+0x98>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4611      	mov	r1, r2
 8001f22:	2003      	movs	r0, #3
 8001f24:	f00f f820 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <OnTxData+0x9c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	2003      	movs	r0, #3
 8001f30:	f00f f81a 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8001f34:	7a23      	ldrb	r3, [r4, #8]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d10c      	bne.n	8001f54 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8001f3a:	7a63      	ldrb	r3, [r4, #9]
 8001f3c:	b143      	cbz	r3, 8001f50 <OnTxData+0x78>
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <OnTxData+0xa0>)
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <OnTxData+0xa4>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	4611      	mov	r1, r2
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f00f f80d 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
 8001f4e:	e7ca      	b.n	8001ee6 <OnTxData+0xe>
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <OnTxData+0xa8>)
 8001f52:	e7f5      	b.n	8001f40 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <OnTxData+0xac>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	4611      	mov	r1, r2
 8001f5a:	2003      	movs	r0, #3
 8001f5c:	f00f f804 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 8001f60:	e7c1      	b.n	8001ee6 <OnTxData+0xe>
 8001f62:	4770      	bx	lr
 8001f64:	48000400 	.word	0x48000400
 8001f68:	20000428 	.word	0x20000428
 8001f6c:	08011e28 	.word	0x08011e28
 8001f70:	08011e5c 	.word	0x08011e5c
 8001f74:	08011e90 	.word	0x08011e90
 8001f78:	08011e1c 	.word	0x08011e1c
 8001f7c:	08011ea0 	.word	0x08011ea0
 8001f80:	08011e20 	.word	0x08011e20
 8001f84:	08011eb4 	.word	0x08011eb4

08001f88 <OnJoinRequest>:
  if (joinParams != NULL)
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	d039      	beq.n	8002000 <OnJoinRequest+0x78>
{
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8001f92:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8001f96:	b9fb      	cbnz	r3, 8001fd8 <OnJoinRequest+0x50>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8001f98:	481a      	ldr	r0, [pc, #104]	; (8002004 <OnJoinRequest+0x7c>)
 8001f9a:	f00f fb37 	bl	801160c <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa4:	4818      	ldr	r0, [pc, #96]	; (8002008 <OnJoinRequest+0x80>)
 8001fa6:	f001 fe8d 	bl	8003cc4 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8001faa:	4b18      	ldr	r3, [pc, #96]	; (800200c <OnJoinRequest+0x84>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	4611      	mov	r1, r2
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f00e ffd9 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8001fb6:	79e3      	ldrb	r3, [r4, #7]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d006      	beq.n	8001fca <OnJoinRequest+0x42>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <OnJoinRequest+0x88>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	2002      	movs	r0, #2
 8001fc4:	f00e ffd0 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
 8001fc8:	e00c      	b.n	8001fe4 <OnJoinRequest+0x5c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <OnJoinRequest+0x8c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	4611      	mov	r1, r2
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	f00e ffc9 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
 8001fd6:	e005      	b.n	8001fe4 <OnJoinRequest+0x5c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <OnJoinRequest+0x90>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	4611      	mov	r1, r2
 8001fde:	2002      	movs	r0, #2
 8001fe0:	f00e ffc2 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 8001fe4:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8001fe8:	f994 2005 	ldrsb.w	r2, [r4, #5]
 8001fec:	9201      	str	r2, [sp, #4]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <OnJoinRequest+0x94>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	2003      	movs	r0, #3
 8001ff8:	f00e ffb6 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd10      	pop	{r4, pc}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	200003e0 	.word	0x200003e0
 8002008:	48000400 	.word	0x48000400
 800200c:	08011ec4 	.word	0x08011ec4
 8002010:	08011efc 	.word	0x08011efc
 8002014:	08011edc 	.word	0x08011edc
 8002018:	08011f1c 	.word	0x08011f1c
 800201c:	08011f38 	.word	0x08011f38

08002020 <OnStopJoinTimerEvent>:
{
 8002020:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <OnStopJoinTimerEvent+0x3c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d013      	beq.n	8002052 <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800202a:	4c0d      	ldr	r4, [pc, #52]	; (8002060 <OnStopJoinTimerEvent+0x40>)
 800202c:	2200      	movs	r2, #0
 800202e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002032:	4620      	mov	r0, r4
 8002034:	f001 fe46 	bl	8003cc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002038:	2200      	movs	r2, #0
 800203a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800203e:	4620      	mov	r0, r4
 8002040:	f001 fe40 	bl	8003cc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002044:	2200      	movs	r2, #0
 8002046:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800204a:	4620      	mov	r0, r4
 800204c:	f001 fe3a 	bl	8003cc4 <HAL_GPIO_WritePin>
}
 8002050:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002052:	2100      	movs	r1, #0
 8002054:	2008      	movs	r0, #8
 8002056:	f00f f8b1 	bl	80111bc <UTIL_SEQ_SetTask>
 800205a:	e7e6      	b.n	800202a <OnStopJoinTimerEvent+0xa>
 800205c:	20000000 	.word	0x20000000
 8002060:	48000400 	.word	0x48000400

08002064 <OnRxTimerLedEvent>:
{
 8002064:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800206c:	4801      	ldr	r0, [pc, #4]	; (8002074 <OnRxTimerLedEvent+0x10>)
 800206e:	f001 fe29 	bl	8003cc4 <HAL_GPIO_WritePin>
}
 8002072:	bd08      	pop	{r3, pc}
 8002074:	48000400 	.word	0x48000400

08002078 <OnTxTimerLedEvent>:
{
 8002078:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800207a:	2200      	movs	r2, #0
 800207c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002080:	4801      	ldr	r0, [pc, #4]	; (8002088 <OnTxTimerLedEvent+0x10>)
 8002082:	f001 fe1f 	bl	8003cc4 <HAL_GPIO_WritePin>
}
 8002086:	bd08      	pop	{r3, pc}
 8002088:	48000400 	.word	0x48000400

0800208c <OnRxData>:
  if (params != NULL)
 800208c:	2900      	cmp	r1, #0
 800208e:	d06e      	beq.n	800216e <OnRxData+0xe2>
{
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	4604      	mov	r4, r0
 8002096:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002098:	2201      	movs	r2, #1
 800209a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800209e:	4834      	ldr	r0, [pc, #208]	; (8002170 <OnRxData+0xe4>)
 80020a0:	f001 fe10 	bl	8003cc4 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 80020a4:	4833      	ldr	r0, [pc, #204]	; (8002174 <OnRxData+0xe8>)
 80020a6:	f00f fb0b 	bl	80116c0 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 80020aa:	782e      	ldrb	r6, [r5, #0]
 80020ac:	2e00      	cmp	r6, #0
 80020ae:	d042      	beq.n	8002136 <OnRxData+0xaa>
      if (appData != NULL)
 80020b0:	2c00      	cmp	r4, #0
 80020b2:	d03f      	beq.n	8002134 <OnRxData+0xa8>
        RxPort = appData->Port;
 80020b4:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 80020b6:	6863      	ldr	r3, [r4, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d03c      	beq.n	8002136 <OnRxData+0xaa>
          switch (appData->Port)
 80020bc:	2e02      	cmp	r6, #2
 80020be:	d016      	beq.n	80020ee <OnRxData+0x62>
 80020c0:	2e03      	cmp	r6, #3
 80020c2:	d138      	bne.n	8002136 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 80020c4:	7862      	ldrb	r2, [r4, #1]
 80020c6:	2a01      	cmp	r2, #1
 80020c8:	d135      	bne.n	8002136 <OnRxData+0xaa>
                switch (appData->Buffer[0])
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d006      	beq.n	80020de <OnRxData+0x52>
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d008      	beq.n	80020e6 <OnRxData+0x5a>
 80020d4:	bb7b      	cbnz	r3, 8002136 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f004 fe34 	bl	8006d44 <LmHandlerRequestClass>
                    break;
 80020dc:	e02b      	b.n	8002136 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 80020de:	2001      	movs	r0, #1
 80020e0:	f004 fe30 	bl	8006d44 <LmHandlerRequestClass>
                    break;
 80020e4:	e027      	b.n	8002136 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 80020e6:	2002      	movs	r0, #2
 80020e8:	f004 fe2c 	bl	8006d44 <LmHandlerRequestClass>
                    break;
 80020ec:	e023      	b.n	8002136 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 80020ee:	7862      	ldrb	r2, [r4, #1]
 80020f0:	2a01      	cmp	r2, #1
 80020f2:	d120      	bne.n	8002136 <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	4a1f      	ldr	r2, [pc, #124]	; (8002178 <OnRxData+0xec>)
 80020fc:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 80020fe:	b963      	cbnz	r3, 800211a <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002100:	4b1e      	ldr	r3, [pc, #120]	; (800217c <OnRxData+0xf0>)
 8002102:	2200      	movs	r2, #0
 8002104:	4611      	mov	r1, r2
 8002106:	2003      	movs	r0, #3
 8002108:	f00e ff2e 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800210c:	2200      	movs	r2, #0
 800210e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002112:	4817      	ldr	r0, [pc, #92]	; (8002170 <OnRxData+0xe4>)
 8002114:	f001 fdd6 	bl	8003cc4 <HAL_GPIO_WritePin>
 8002118:	e00d      	b.n	8002136 <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <OnRxData+0xf4>)
 800211c:	2200      	movs	r2, #0
 800211e:	4611      	mov	r1, r2
 8002120:	2003      	movs	r0, #3
 8002122:	f00e ff21 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002126:	2201      	movs	r2, #1
 8002128:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800212c:	4810      	ldr	r0, [pc, #64]	; (8002170 <OnRxData+0xe4>)
 800212e:	f001 fdc9 	bl	8003cc4 <HAL_GPIO_WritePin>
 8002132:	e000      	b.n	8002136 <OnRxData+0xaa>
  uint8_t RxPort = 0;
 8002134:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 8002136:	7c2b      	ldrb	r3, [r5, #16]
 8002138:	2b05      	cmp	r3, #5
 800213a:	d901      	bls.n	8002140 <OnRxData+0xb4>
}
 800213c:	b006      	add	sp, #24
 800213e:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8002140:	f995 2008 	ldrsb.w	r2, [r5, #8]
 8002144:	f995 1009 	ldrsb.w	r1, [r5, #9]
 8002148:	f995 000a 	ldrsb.w	r0, [r5, #10]
 800214c:	9005      	str	r0, [sp, #20]
 800214e:	9104      	str	r1, [sp, #16]
 8002150:	490c      	ldr	r1, [pc, #48]	; (8002184 <OnRxData+0xf8>)
 8002152:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002156:	9303      	str	r3, [sp, #12]
 8002158:	9202      	str	r2, [sp, #8]
 800215a:	9601      	str	r6, [sp, #4]
 800215c:	68eb      	ldr	r3, [r5, #12]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <OnRxData+0xfc>)
 8002162:	2200      	movs	r2, #0
 8002164:	4611      	mov	r1, r2
 8002166:	2003      	movs	r0, #3
 8002168:	f00e fefe 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 800216c:	e7e6      	b.n	800213c <OnRxData+0xb0>
 800216e:	4770      	bx	lr
 8002170:	48000400 	.word	0x48000400
 8002174:	200003f8 	.word	0x200003f8
 8002178:	200003da 	.word	0x200003da
 800217c:	08011f64 	.word	0x08011f64
 8002180:	08011f70 	.word	0x08011f70
 8002184:	0801214c 	.word	0x0801214c
 8002188:	08011f7c 	.word	0x08011f7c

0800218c <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800218c:	b538      	push	{r3, r4, r5, lr}
 800218e:	4604      	mov	r4, r0
 8002190:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 8002192:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002196:	4805      	ldr	r0, [pc, #20]	; (80021ac <OnStoreContextRequest+0x20>)
 8002198:	f7fe ffcc 	bl	8001134 <FLASH_IF_Erase>
 800219c:	b100      	cbz	r0, 80021a0 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800219e:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 80021a0:	462a      	mov	r2, r5
 80021a2:	4621      	mov	r1, r4
 80021a4:	4801      	ldr	r0, [pc, #4]	; (80021ac <OnStoreContextRequest+0x20>)
 80021a6:	f7fe ff8d 	bl	80010c4 <FLASH_IF_Write>
}
 80021aa:	e7f8      	b.n	800219e <OnStoreContextRequest+0x12>
 80021ac:	0803f000 	.word	0x0803f000

080021b0 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 80021b0:	b508      	push	{r3, lr}
 80021b2:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 80021b4:	4901      	ldr	r1, [pc, #4]	; (80021bc <OnRestoreContextRequest+0xc>)
 80021b6:	f7fe ffa1 	bl	80010fc <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 80021ba:	bd08      	pop	{r3, pc}
 80021bc:	0803f000 	.word	0x0803f000

080021c0 <StopJoin>:
{
 80021c0:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 80021c2:	4c1e      	ldr	r4, [pc, #120]	; (800223c <StopJoin+0x7c>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ca:	4620      	mov	r0, r4
 80021cc:	f001 fd7a 	bl	8003cc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80021d0:	2201      	movs	r2, #1
 80021d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021d6:	4620      	mov	r0, r4
 80021d8:	f001 fd74 	bl	8003cc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80021dc:	2201      	movs	r2, #1
 80021de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e2:	4620      	mov	r0, r4
 80021e4:	f001 fd6e 	bl	8003cc4 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 80021e8:	4815      	ldr	r0, [pc, #84]	; (8002240 <StopJoin+0x80>)
 80021ea:	f00f fa0f 	bl	801160c <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 80021ee:	f005 f931 	bl	8007454 <LmHandlerStop>
 80021f2:	b148      	cbz	r0, 8002208 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <StopJoin+0x84>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	4611      	mov	r1, r2
 80021fa:	2002      	movs	r0, #2
 80021fc:	f00e feb4 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8002200:	4811      	ldr	r0, [pc, #68]	; (8002248 <StopJoin+0x88>)
 8002202:	f00f fa5d 	bl	80116c0 <UTIL_TIMER_Start>
}
 8002206:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <StopJoin+0x8c>)
 800220a:	2200      	movs	r2, #0
 800220c:	4611      	mov	r1, r2
 800220e:	2002      	movs	r0, #2
 8002210:	f00e feaa 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 8002214:	4c0e      	ldr	r4, [pc, #56]	; (8002250 <StopJoin+0x90>)
 8002216:	2501      	movs	r5, #1
 8002218:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <StopJoin+0x94>)
 800221c:	2200      	movs	r2, #0
 800221e:	4611      	mov	r1, r2
 8002220:	2002      	movs	r0, #2
 8002222:	f00e fea1 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 8002226:	480c      	ldr	r0, [pc, #48]	; (8002258 <StopJoin+0x98>)
 8002228:	f004 ff9c 	bl	8007164 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800222c:	4629      	mov	r1, r5
 800222e:	7820      	ldrb	r0, [r4, #0]
 8002230:	f004 fde2 	bl	8006df8 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <StopJoin+0x80>)
 8002236:	f00f fa43 	bl	80116c0 <UTIL_TIMER_Start>
 800223a:	e7e1      	b.n	8002200 <StopJoin+0x40>
 800223c:	48000400 	.word	0x48000400
 8002240:	20000440 	.word	0x20000440
 8002244:	08011fc4 	.word	0x08011fc4
 8002248:	20000410 	.word	0x20000410
 800224c:	08011fe4 	.word	0x08011fe4
 8002250:	20000000 	.word	0x20000000
 8002254:	08011ff8 	.word	0x08011ff8
 8002258:	20000058 	.word	0x20000058

0800225c <StoreContext>:
{
 800225c:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 800225e:	f005 f98b 	bl	8007578 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8002262:	f110 0f08 	cmn.w	r0, #8
 8002266:	d003      	beq.n	8002270 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002268:	f1b0 3fff 	cmp.w	r0, #4294967295
 800226c:	d007      	beq.n	800227e <StoreContext+0x22>
}
 800226e:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <StoreContext+0x30>)
 8002272:	2200      	movs	r2, #0
 8002274:	4611      	mov	r1, r2
 8002276:	2002      	movs	r0, #2
 8002278:	f00e fe76 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
 800227c:	e7f7      	b.n	800226e <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <StoreContext+0x34>)
 8002280:	2200      	movs	r2, #0
 8002282:	4611      	mov	r1, r2
 8002284:	2002      	movs	r0, #2
 8002286:	f00e fe6f 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 800228a:	e7f0      	b.n	800226e <StoreContext+0x12>
 800228c:	08012018 	.word	0x08012018
 8002290:	08012030 	.word	0x08012030

08002294 <SendTxData>:
 {
 8002294:	b530      	push	{r4, r5, lr}
 8002296:	b083      	sub	sp, #12
     if (LmHandlerIsBusy() == false)
 8002298:	f004 fe28 	bl	8006eec <LmHandlerIsBusy>
 800229c:	2800      	cmp	r0, #0
 800229e:	d144      	bne.n	800232a <SendTxData+0x96>
    	 AppData.Port = LORAWAN_USER_APP_PORT;
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <SendTxData+0xbc>)
 80022a2:	2202      	movs	r2, #2
 80022a4:	701a      	strb	r2, [r3, #0]
    	         AppData.Buffer[i++] = (uint8_t)((Count >> 24) & 0xFF);
 80022a6:	4a2b      	ldr	r2, [pc, #172]	; (8002354 <SendTxData+0xc0>)
 80022a8:	f992 0003 	ldrsb.w	r0, [r2, #3]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	7008      	strb	r0, [r1, #0]
    	         AppData.Buffer[i++] = (uint8_t)((Count >> 16) & 0xFF);
 80022b0:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	7048      	strb	r0, [r1, #1]
    	         AppData.Buffer[i++] = (uint8_t)((Count >> 8) & 0xFF);
 80022b8:	6859      	ldr	r1, [r3, #4]
 80022ba:	7850      	ldrb	r0, [r2, #1]
 80022bc:	7088      	strb	r0, [r1, #2]
    	         AppData.Buffer[i++] = (uint8_t)(Count & 0xFF);
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	7812      	ldrb	r2, [r2, #0]
 80022c2:	70ca      	strb	r2, [r1, #3]
    	         AppData.BufferSize = i;
 80022c4:	2204      	movs	r2, #4
 80022c6:	705a      	strb	r2, [r3, #1]
       if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80022c8:	4b23      	ldr	r3, [pc, #140]	; (8002358 <SendTxData+0xc4>)
 80022ca:	7a5b      	ldrb	r3, [r3, #9]
 80022cc:	b95b      	cbnz	r3, 80022e6 <SendTxData+0x52>
       status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 80022ce:	2200      	movs	r2, #0
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <SendTxData+0xc8>)
 80022d2:	78d9      	ldrb	r1, [r3, #3]
 80022d4:	481e      	ldr	r0, [pc, #120]	; (8002350 <SendTxData+0xbc>)
 80022d6:	f004 fe27 	bl	8006f28 <LmHandlerSend>
       if (LORAMAC_HANDLER_SUCCESS == status)
 80022da:	b160      	cbz	r0, 80022f6 <SendTxData+0x62>
       else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 80022dc:	f110 0f06 	cmn.w	r0, #6
 80022e0:	d013      	beq.n	800230a <SendTxData+0x76>
     UTIL_TIMER_Time_t nextTxIn = 0;
 80022e2:	2500      	movs	r5, #0
 80022e4:	e022      	b.n	800232c <SendTxData+0x98>
       if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80022e6:	f004 fd1b 	bl	8006d20 <LmHandlerJoinStatus>
 80022ea:	2801      	cmp	r0, #1
 80022ec:	d1ef      	bne.n	80022ce <SendTxData+0x3a>
         UTIL_TIMER_Stop(&JoinLedTimer);
 80022ee:	481a      	ldr	r0, [pc, #104]	; (8002358 <SendTxData+0xc4>)
 80022f0:	f00f f98c 	bl	801160c <UTIL_TIMER_Stop>
 80022f4:	e7eb      	b.n	80022ce <SendTxData+0x3a>
       {Count = 0;
 80022f6:	2500      	movs	r5, #0
 80022f8:	4b16      	ldr	r3, [pc, #88]	; (8002354 <SendTxData+0xc0>)
 80022fa:	601d      	str	r5, [r3, #0]
         APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <SendTxData+0xcc>)
 80022fe:	2201      	movs	r2, #1
 8002300:	4629      	mov	r1, r5
 8002302:	4610      	mov	r0, r2
 8002304:	f00e fe30 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
 8002308:	e010      	b.n	800232c <SendTxData+0x98>
         nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800230a:	f004 fd03 	bl	8006d14 <LmHandlerGetDutyCycleWaitTime>
         if (nextTxIn > 0)
 800230e:	4605      	mov	r5, r0
 8002310:	b160      	cbz	r0, 800232c <SendTxData+0x98>
           APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <SendTxData+0xd0>)
 8002314:	fba3 2300 	umull	r2, r3, r3, r0
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <SendTxData+0xd4>)
 800231e:	2201      	movs	r2, #1
 8002320:	2100      	movs	r1, #0
 8002322:	4610      	mov	r0, r2
 8002324:	f00e fe20 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
 8002328:	e000      	b.n	800232c <SendTxData+0x98>
     UTIL_TIMER_Time_t nextTxIn = 0;
 800232a:	2500      	movs	r5, #0
       UTIL_TIMER_Stop(&TxTimer);
 800232c:	4c0f      	ldr	r4, [pc, #60]	; (800236c <SendTxData+0xd8>)
 800232e:	4620      	mov	r0, r4
 8002330:	f00f f96c 	bl	801160c <UTIL_TIMER_Stop>
       UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002334:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <SendTxData+0xdc>)
 8002336:	6819      	ldr	r1, [r3, #0]
 8002338:	42a9      	cmp	r1, r5
 800233a:	bf38      	it	cc
 800233c:	4629      	movcc	r1, r5
 800233e:	4620      	mov	r0, r4
 8002340:	f00f fa04 	bl	801174c <UTIL_TIMER_SetPeriod>
       UTIL_TIMER_Start(&TxTimer);
 8002344:	4620      	mov	r0, r4
 8002346:	f00f f9bb 	bl	80116c0 <UTIL_TIMER_Start>
   }
 800234a:	b003      	add	sp, #12
 800234c:	bd30      	pop	{r4, r5, pc}
 800234e:	bf00      	nop
 8002350:	20000004 	.word	0x20000004
 8002354:	200003dc 	.word	0x200003dc
 8002358:	200003e0 	.word	0x200003e0
 800235c:	20000058 	.word	0x20000058
 8002360:	08012048 	.word	0x08012048
 8002364:	10624dd3 	.word	0x10624dd3
 8002368:	08012058 	.word	0x08012058
 800236c:	20000440 	.word	0x20000440
 8002370:	20000070 	.word	0x20000070

08002374 <OnJoinTimerLedEvent>:
{
 8002374:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002376:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800237a:	4802      	ldr	r0, [pc, #8]	; (8002384 <OnJoinTimerLedEvent+0x10>)
 800237c:	f001 fca7 	bl	8003cce <HAL_GPIO_TogglePin>
}
 8002380:	bd08      	pop	{r3, pc}
 8002382:	bf00      	nop
 8002384:	48000400 	.word	0x48000400

08002388 <LoRaWAN_Init>:
{
 8002388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238a:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 800238c:	2400      	movs	r4, #0
 800238e:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002390:	9402      	str	r4, [sp, #8]
 8002392:	2703      	movs	r7, #3
 8002394:	9701      	str	r7, [sp, #4]
 8002396:	2601      	movs	r6, #1
 8002398:	9600      	str	r6, [sp, #0]
 800239a:	4b4f      	ldr	r3, [pc, #316]	; (80024d8 <LoRaWAN_Init+0x150>)
 800239c:	4622      	mov	r2, r4
 800239e:	4621      	mov	r1, r4
 80023a0:	2002      	movs	r0, #2
 80023a2:	f00e fde1 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 80023a6:	9402      	str	r4, [sp, #8]
 80023a8:	2305      	movs	r3, #5
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	2502      	movs	r5, #2
 80023ae:	9500      	str	r5, [sp, #0]
 80023b0:	4b4a      	ldr	r3, [pc, #296]	; (80024dc <LoRaWAN_Init+0x154>)
 80023b2:	4622      	mov	r2, r4
 80023b4:	4621      	mov	r1, r4
 80023b6:	4628      	mov	r0, r5
 80023b8:	f00e fdd6 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 80023bc:	9402      	str	r4, [sp, #8]
 80023be:	9701      	str	r7, [sp, #4]
 80023c0:	9600      	str	r6, [sp, #0]
 80023c2:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <LoRaWAN_Init+0x158>)
 80023c4:	4622      	mov	r2, r4
 80023c6:	4621      	mov	r1, r4
 80023c8:	4628      	mov	r0, r5
 80023ca:	f00e fdcd 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 80023ce:	a905      	add	r1, sp, #20
 80023d0:	4620      	mov	r0, r4
 80023d2:	f005 f829 	bl	8007428 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 80023d6:	9b05      	ldr	r3, [sp, #20]
 80023d8:	0e1a      	lsrs	r2, r3, #24
 80023da:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80023de:	9102      	str	r1, [sp, #8]
 80023e0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	9200      	str	r2, [sp, #0]
 80023e8:	4b3e      	ldr	r3, [pc, #248]	; (80024e4 <LoRaWAN_Init+0x15c>)
 80023ea:	4622      	mov	r2, r4
 80023ec:	4621      	mov	r1, r4
 80023ee:	4628      	mov	r0, r5
 80023f0:	f00e fdba 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 80023f4:	a905      	add	r1, sp, #20
 80023f6:	4630      	mov	r0, r6
 80023f8:	f005 f816 	bl	8007428 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 80023fc:	9b05      	ldr	r3, [sp, #20]
 80023fe:	0e1a      	lsrs	r2, r3, #24
 8002400:	b2d9      	uxtb	r1, r3
 8002402:	9103      	str	r1, [sp, #12]
 8002404:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002408:	9102      	str	r1, [sp, #8]
 800240a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	9200      	str	r2, [sp, #0]
 8002412:	4b35      	ldr	r3, [pc, #212]	; (80024e8 <LoRaWAN_Init+0x160>)
 8002414:	4622      	mov	r2, r4
 8002416:	4621      	mov	r1, r4
 8002418:	4628      	mov	r0, r5
 800241a:	f00e fda5 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800241e:	9400      	str	r4, [sp, #0]
 8002420:	4b32      	ldr	r3, [pc, #200]	; (80024ec <LoRaWAN_Init+0x164>)
 8002422:	4622      	mov	r2, r4
 8002424:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002428:	4831      	ldr	r0, [pc, #196]	; (80024f0 <LoRaWAN_Init+0x168>)
 800242a:	f00f f891 	bl	8011550 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800242e:	9400      	str	r4, [sp, #0]
 8002430:	4b30      	ldr	r3, [pc, #192]	; (80024f4 <LoRaWAN_Init+0x16c>)
 8002432:	4622      	mov	r2, r4
 8002434:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002438:	482f      	ldr	r0, [pc, #188]	; (80024f8 <LoRaWAN_Init+0x170>)
 800243a:	f00f f889 	bl	8011550 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800243e:	9400      	str	r4, [sp, #0]
 8002440:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <LoRaWAN_Init+0x174>)
 8002442:	4632      	mov	r2, r6
 8002444:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002448:	482d      	ldr	r0, [pc, #180]	; (8002500 <LoRaWAN_Init+0x178>)
 800244a:	f00f f881 	bl	8011550 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 800244e:	4620      	mov	r0, r4
 8002450:	f7fe fe32 	bl	80010b8 <FLASH_IF_Init>
 8002454:	2800      	cmp	r0, #0
 8002456:	d13b      	bne.n	80024d0 <LoRaWAN_Init+0x148>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002458:	2400      	movs	r4, #0
 800245a:	9400      	str	r4, [sp, #0]
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <LoRaWAN_Init+0x17c>)
 800245e:	4622      	mov	r2, r4
 8002460:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002464:	4828      	ldr	r0, [pc, #160]	; (8002508 <LoRaWAN_Init+0x180>)
 8002466:	f00f f873 	bl	8011550 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800246a:	4a28      	ldr	r2, [pc, #160]	; (800250c <LoRaWAN_Init+0x184>)
 800246c:	4621      	mov	r1, r4
 800246e:	2001      	movs	r0, #1
 8002470:	f00e ff6e 	bl	8011350 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002474:	4a26      	ldr	r2, [pc, #152]	; (8002510 <LoRaWAN_Init+0x188>)
 8002476:	4621      	mov	r1, r4
 8002478:	2002      	movs	r0, #2
 800247a:	f00e ff69 	bl	8011350 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800247e:	4a25      	ldr	r2, [pc, #148]	; (8002514 <LoRaWAN_Init+0x18c>)
 8002480:	4621      	mov	r1, r4
 8002482:	2004      	movs	r0, #4
 8002484:	f00e ff64 	bl	8011350 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8002488:	4a23      	ldr	r2, [pc, #140]	; (8002518 <LoRaWAN_Init+0x190>)
 800248a:	4621      	mov	r1, r4
 800248c:	2008      	movs	r0, #8
 800248e:	f00e ff5f 	bl	8011350 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002492:	f000 f873 	bl	800257c <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002496:	4921      	ldr	r1, [pc, #132]	; (800251c <LoRaWAN_Init+0x194>)
 8002498:	4821      	ldr	r0, [pc, #132]	; (8002520 <LoRaWAN_Init+0x198>)
 800249a:	f004 ff85 	bl	80073a8 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 800249e:	4821      	ldr	r0, [pc, #132]	; (8002524 <LoRaWAN_Init+0x19c>)
 80024a0:	f004 fe60 	bl	8007164 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 80024a4:	4816      	ldr	r0, [pc, #88]	; (8002500 <LoRaWAN_Init+0x178>)
 80024a6:	f00f f90b 	bl	80116c0 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 80024aa:	4621      	mov	r1, r4
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <LoRaWAN_Init+0x1a0>)
 80024ae:	7818      	ldrb	r0, [r3, #0]
 80024b0:	f004 fca2 	bl	8006df8 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80024b4:	4d1d      	ldr	r5, [pc, #116]	; (800252c <LoRaWAN_Init+0x1a4>)
 80024b6:	9400      	str	r4, [sp, #0]
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <LoRaWAN_Init+0x1a8>)
 80024ba:	4622      	mov	r2, r4
 80024bc:	491d      	ldr	r1, [pc, #116]	; (8002534 <LoRaWAN_Init+0x1ac>)
 80024be:	6809      	ldr	r1, [r1, #0]
 80024c0:	4628      	mov	r0, r5
 80024c2:	f00f f845 	bl	8011550 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 80024c6:	4628      	mov	r0, r5
 80024c8:	f00f f8fa 	bl	80116c0 <UTIL_TIMER_Start>
}
 80024cc:	b007      	add	sp, #28
 80024ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 80024d0:	f7fe fed6 	bl	8001280 <Error_Handler>
 80024d4:	e7c0      	b.n	8002458 <LoRaWAN_Init+0xd0>
 80024d6:	bf00      	nop
 80024d8:	08012078 	.word	0x08012078
 80024dc:	0801209c 	.word	0x0801209c
 80024e0:	080120c0 	.word	0x080120c0
 80024e4:	080120e4 	.word	0x080120e4
 80024e8:	08012108 	.word	0x08012108
 80024ec:	08002079 	.word	0x08002079
 80024f0:	20000428 	.word	0x20000428
 80024f4:	08002065 	.word	0x08002065
 80024f8:	200003f8 	.word	0x200003f8
 80024fc:	08002375 	.word	0x08002375
 8002500:	200003e0 	.word	0x200003e0
 8002504:	08002021 	.word	0x08002021
 8002508:	20000410 	.word	0x20000410
 800250c:	08006d05 	.word	0x08006d05
 8002510:	08002295 	.word	0x08002295
 8002514:	0800225d 	.word	0x0800225d
 8002518:	080021c1 	.word	0x080021c1
 800251c:	01030000 	.word	0x01030000
 8002520:	2000000c 	.word	0x2000000c
 8002524:	20000058 	.word	0x20000058
 8002528:	20000000 	.word	0x20000000
 800252c:	20000440 	.word	0x20000440
 8002530:	08001e51 	.word	0x08001e51
 8002534:	20000070 	.word	0x20000070

08002538 <HAL_GPIO_EXTI_Callback>:
{if (GPIO_Pin == GPIO_PIN_2)
 8002538:	b510      	push	{r4, lr}
 800253a:	4604      	mov	r4, r0
 800253c:	2804      	cmp	r0, #4
 800253e:	d004      	beq.n	800254a <HAL_GPIO_EXTI_Callback+0x12>
  switch (GPIO_Pin)
 8002540:	2c02      	cmp	r4, #2
 8002542:	d00c      	beq.n	800255e <HAL_GPIO_EXTI_Callback+0x26>
 8002544:	2c40      	cmp	r4, #64	; 0x40
 8002546:	d00f      	beq.n	8002568 <HAL_GPIO_EXTI_Callback+0x30>
}
 8002548:	bd10      	pop	{r4, pc}
		        HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 800254a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800254e:	4809      	ldr	r0, [pc, #36]	; (8002574 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002550:	f001 fbbd 	bl	8003cce <HAL_GPIO_TogglePin>
		        Count++;
 8002554:	4a08      	ldr	r2, [pc, #32]	; (8002578 <HAL_GPIO_EXTI_Callback+0x40>)
 8002556:	6813      	ldr	r3, [r2, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e7f0      	b.n	8002540 <HAL_GPIO_EXTI_Callback+0x8>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800255e:	2100      	movs	r1, #0
 8002560:	2008      	movs	r0, #8
 8002562:	f00e fe2b 	bl	80111bc <UTIL_SEQ_SetTask>
      break;
 8002566:	e7ef      	b.n	8002548 <HAL_GPIO_EXTI_Callback+0x10>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 8002568:	2100      	movs	r1, #0
 800256a:	2004      	movs	r0, #4
 800256c:	f00e fe26 	bl	80111bc <UTIL_SEQ_SetTask>
}
 8002570:	e7ea      	b.n	8002548 <HAL_GPIO_EXTI_Callback+0x10>
 8002572:	bf00      	nop
 8002574:	48000400 	.word	0x48000400
 8002578:	200003dc 	.word	0x200003dc

0800257c <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <LoraInfo_Init+0x18>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002582:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002584:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002586:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 8002588:	2201      	movs	r2, #1
 800258a:	605a      	str	r2, [r3, #4]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800258c:	2121      	movs	r1, #33	; 0x21
 800258e:	6059      	str	r1, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8002590:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002592:	4770      	bx	lr
 8002594:	20000458 	.word	0x20000458

08002598 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002598:	4800      	ldr	r0, [pc, #0]	; (800259c <LoraInfo_GetPtr+0x4>)
 800259a:	4770      	bx	lr
 800259c:	20000458 	.word	0x20000458

080025a0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80025a0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80025a2:	f000 f83f 	bl	8002624 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80025a6:	bd08      	pop	{r3, pc}

080025a8 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80025a8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80025aa:	f000 f87d 	bl	80026a8 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80025ae:	bd08      	pop	{r3, pc}

080025b0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80025b0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80025b2:	f000 f8c7 	bl	8002744 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80025b6:	bd08      	pop	{r3, pc}

080025b8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80025b8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80025ba:	f000 f8c5 	bl	8002748 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80025be:	bd08      	pop	{r3, pc}

080025c0 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80025c0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80025c2:	f000 f8c3 	bl	800274c <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80025c6:	bd08      	pop	{r3, pc}

080025c8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80025c8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80025ca:	f000 f8c1 	bl	8002750 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80025ce:	bd08      	pop	{r3, pc}

080025d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025d0:	480d      	ldr	r0, [pc, #52]	; (8002608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025d4:	f000 f8c1 	bl	800275a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d8:	480c      	ldr	r0, [pc, #48]	; (800260c <LoopForever+0x6>)
  ldr r1, =_edata
 80025da:	490d      	ldr	r1, [pc, #52]	; (8002610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025dc:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <LoopForever+0xe>)
  movs r3, #0
 80025de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e0:	e002      	b.n	80025e8 <LoopCopyDataInit>

080025e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e6:	3304      	adds	r3, #4

080025e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ec:	d3f9      	bcc.n	80025e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ee:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025f0:	4c0a      	ldr	r4, [pc, #40]	; (800261c <LoopForever+0x16>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f4:	e001      	b.n	80025fa <LoopFillZerobss>

080025f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f8:	3204      	adds	r2, #4

080025fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025fc:	d3fb      	bcc.n	80025f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025fe:	f00f fa6f 	bl	8011ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002602:	f7fe fe86 	bl	8001312 <main>

08002606 <LoopForever>:

LoopForever:
    b LoopForever
 8002606:	e7fe      	b.n	8002606 <LoopForever>
  ldr   r0, =_estack
 8002608:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800260c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002610:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8002614:	08012b10 	.word	0x08012b10
  ldr r2, =_sbss
 8002618:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 800261c:	20001460 	.word	0x20001460

08002620 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002620:	e7fe      	b.n	8002620 <ADC_IRQHandler>
	...

08002624 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002628:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800262a:	2400      	movs	r4, #0
 800262c:	9401      	str	r4, [sp, #4]
 800262e:	9402      	str	r4, [sp, #8]
 8002630:	9403      	str	r4, [sp, #12]
 8002632:	9404      	str	r4, [sp, #16]
 8002634:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800263c:	f042 0204 	orr.w	r2, r2, #4
 8002640:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800264a:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800264c:	2710      	movs	r7, #16
 800264e:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002650:	2301      	movs	r3, #1
 8002652:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002654:	2303      	movs	r3, #3
 8002656:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002658:	4d12      	ldr	r5, [pc, #72]	; (80026a4 <BSP_RADIO_Init+0x80>)
 800265a:	a901      	add	r1, sp, #4
 800265c:	4628      	mov	r0, r5
 800265e:	f001 f9e1 	bl	8003a24 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002662:	f04f 0820 	mov.w	r8, #32
 8002666:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800266a:	a901      	add	r1, sp, #4
 800266c:	4628      	mov	r0, r5
 800266e:	f001 f9d9 	bl	8003a24 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8002672:	2608      	movs	r6, #8
 8002674:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002676:	a901      	add	r1, sp, #4
 8002678:	4628      	mov	r0, r5
 800267a:	f001 f9d3 	bl	8003a24 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800267e:	4622      	mov	r2, r4
 8002680:	4641      	mov	r1, r8
 8002682:	4628      	mov	r0, r5
 8002684:	f001 fb1e 	bl	8003cc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002688:	4622      	mov	r2, r4
 800268a:	4639      	mov	r1, r7
 800268c:	4628      	mov	r0, r5
 800268e:	f001 fb19 	bl	8003cc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002692:	4622      	mov	r2, r4
 8002694:	4631      	mov	r1, r6
 8002696:	4628      	mov	r0, r5
 8002698:	f001 fb14 	bl	8003cc4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 800269c:	4620      	mov	r0, r4
 800269e:	b006      	add	sp, #24
 80026a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026a4:	48000800 	.word	0x48000800

080026a8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80026a8:	b510      	push	{r4, lr}
  switch (Config)
 80026aa:	2803      	cmp	r0, #3
 80026ac:	d813      	bhi.n	80026d6 <BSP_RADIO_ConfigRFSwitch+0x2e>
 80026ae:	e8df f000 	tbb	[pc, r0]
 80026b2:	1402      	.short	0x1402
 80026b4:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80026b6:	4c22      	ldr	r4, [pc, #136]	; (8002740 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	2108      	movs	r1, #8
 80026bc:	4620      	mov	r0, r4
 80026be:	f001 fb01 	bl	8003cc4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2110      	movs	r1, #16
 80026c6:	4620      	mov	r0, r4
 80026c8:	f001 fafc 	bl	8003cc4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80026cc:	2200      	movs	r2, #0
 80026ce:	2120      	movs	r1, #32
 80026d0:	4620      	mov	r0, r4
 80026d2:	f001 faf7 	bl	8003cc4 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 80026d6:	2000      	movs	r0, #0
 80026d8:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80026da:	4c19      	ldr	r4, [pc, #100]	; (8002740 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80026dc:	2201      	movs	r2, #1
 80026de:	2108      	movs	r1, #8
 80026e0:	4620      	mov	r0, r4
 80026e2:	f001 faef 	bl	8003cc4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80026e6:	2201      	movs	r2, #1
 80026e8:	2110      	movs	r1, #16
 80026ea:	4620      	mov	r0, r4
 80026ec:	f001 faea 	bl	8003cc4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80026f0:	2200      	movs	r2, #0
 80026f2:	2120      	movs	r1, #32
 80026f4:	4620      	mov	r0, r4
 80026f6:	f001 fae5 	bl	8003cc4 <HAL_GPIO_WritePin>
      break;
 80026fa:	e7ec      	b.n	80026d6 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80026fc:	4c10      	ldr	r4, [pc, #64]	; (8002740 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80026fe:	2201      	movs	r2, #1
 8002700:	2108      	movs	r1, #8
 8002702:	4620      	mov	r0, r4
 8002704:	f001 fade 	bl	8003cc4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002708:	2201      	movs	r2, #1
 800270a:	2110      	movs	r1, #16
 800270c:	4620      	mov	r0, r4
 800270e:	f001 fad9 	bl	8003cc4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002712:	2201      	movs	r2, #1
 8002714:	2120      	movs	r1, #32
 8002716:	4620      	mov	r0, r4
 8002718:	f001 fad4 	bl	8003cc4 <HAL_GPIO_WritePin>
      break;
 800271c:	e7db      	b.n	80026d6 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800271e:	4c08      	ldr	r4, [pc, #32]	; (8002740 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002720:	2201      	movs	r2, #1
 8002722:	2108      	movs	r1, #8
 8002724:	4620      	mov	r0, r4
 8002726:	f001 facd 	bl	8003cc4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800272a:	2200      	movs	r2, #0
 800272c:	2110      	movs	r1, #16
 800272e:	4620      	mov	r0, r4
 8002730:	f001 fac8 	bl	8003cc4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002734:	2201      	movs	r2, #1
 8002736:	2120      	movs	r1, #32
 8002738:	4620      	mov	r0, r4
 800273a:	f001 fac3 	bl	8003cc4 <HAL_GPIO_WritePin>
      break;
 800273e:	e7ca      	b.n	80026d6 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002740:	48000800 	.word	0x48000800

08002744 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8002744:	2000      	movs	r0, #0
 8002746:	4770      	bx	lr

08002748 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002748:	2001      	movs	r0, #1
 800274a:	4770      	bx	lr

0800274c <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 800274c:	2001      	movs	r0, #1
 800274e:	4770      	bx	lr

08002750 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002750:	b908      	cbnz	r0, 8002756 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002752:	200f      	movs	r0, #15
 8002754:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002756:	2016      	movs	r0, #22
  }

  return ret;
}
 8002758:	4770      	bx	lr

0800275a <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800275a:	4770      	bx	lr

0800275c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800275c:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275e:	2003      	movs	r0, #3
 8002760:	f000 fd22 	bl	80031a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002764:	f001 fc54 	bl	8004010 <HAL_RCC_GetHCLKFreq>
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_Init+0x28>)
 800276a:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800276c:	200f      	movs	r0, #15
 800276e:	f7fe ffc1 	bl	80016f4 <HAL_InitTick>
 8002772:	b110      	cbz	r0, 800277a <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002774:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002776:	4620      	mov	r0, r4
 8002778:	bd10      	pop	{r4, pc}
 800277a:	4604      	mov	r4, r0
    HAL_MspInit();
 800277c:	f7fe fe74 	bl	8001468 <HAL_MspInit>
 8002780:	e7f9      	b.n	8002776 <HAL_Init+0x1a>
 8002782:	bf00      	nop
 8002784:	20000074 	.word	0x20000074

08002788 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002788:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800278c:	6913      	ldr	r3, [r2, #16]
 800278e:	f023 0302 	bic.w	r3, r3, #2
 8002792:	6113      	str	r3, [r2, #16]
}
 8002794:	4770      	bx	lr

08002796 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002796:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800279a:	6913      	ldr	r3, [r2, #16]
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	6113      	str	r3, [r2, #16]
}
 80027a2:	4770      	bx	lr

080027a4 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 80027a4:	4b01      	ldr	r3, [pc, #4]	; (80027ac <HAL_GetUIDw0+0x8>)
 80027a6:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 80027aa:	4770      	bx	lr
 80027ac:	1fff7000 	.word	0x1fff7000

080027b0 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 80027b0:	4b01      	ldr	r3, [pc, #4]	; (80027b8 <HAL_GetUIDw1+0x8>)
 80027b2:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 80027b6:	4770      	bx	lr
 80027b8:	1fff7000 	.word	0x1fff7000

080027bc <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 80027bc:	4b01      	ldr	r3, [pc, #4]	; (80027c4 <HAL_GetUIDw2+0x8>)
 80027be:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 80027c2:	4770      	bx	lr
 80027c4:	1fff7000 	.word	0x1fff7000

080027c8 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80027c8:	4a02      	ldr	r2, [pc, #8]	; (80027d4 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80027ca:	6853      	ldr	r3, [r2, #4]
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 80027d2:	4770      	bx	lr
 80027d4:	e0042000 	.word	0xe0042000

080027d8 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80027d8:	4a02      	ldr	r2, [pc, #8]	; (80027e4 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80027da:	6853      	ldr	r3, [r2, #4]
 80027dc:	f043 0302 	orr.w	r3, r3, #2
 80027e0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 80027e2:	4770      	bx	lr
 80027e4:	e0042000 	.word	0xe0042000

080027e8 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80027e8:	4a02      	ldr	r2, [pc, #8]	; (80027f4 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80027ea:	6853      	ldr	r3, [r2, #4]
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 80027f2:	4770      	bx	lr
 80027f4:	e0042000 	.word	0xe0042000

080027f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027f8:	b530      	push	{r4, r5, lr}
 80027fa:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002800:	2800      	cmp	r0, #0
 8002802:	f000 8106 	beq.w	8002a12 <HAL_ADC_Init+0x21a>
 8002806:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002808:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800280a:	b1bb      	cbz	r3, 800283c <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800280c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800280e:	6893      	ldr	r3, [r2, #8]
 8002810:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002814:	d11f      	bne.n	8002856 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8002816:	6893      	ldr	r3, [r2, #8]
 8002818:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800281c:	f023 0317 	bic.w	r3, r3, #23
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002824:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002826:	4b7c      	ldr	r3, [pc, #496]	; (8002a18 <HAL_ADC_Init+0x220>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	099b      	lsrs	r3, r3, #6
 800282c:	4a7b      	ldr	r2, [pc, #492]	; (8002a1c <HAL_ADC_Init+0x224>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	099b      	lsrs	r3, r3, #6
 8002834:	3301      	adds	r3, #1
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800283a:	e009      	b.n	8002850 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 800283c:	f7fe f9ee 	bl	8000c1c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002840:	2300      	movs	r3, #0
 8002842:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002844:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002848:	e7e0      	b.n	800280c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800284a:	9b01      	ldr	r3, [sp, #4]
 800284c:	3b01      	subs	r3, #1
 800284e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002850:	9b01      	ldr	r3, [sp, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f9      	bne.n	800284a <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002856:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002858:	6893      	ldr	r3, [r2, #8]
 800285a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800285e:	f040 809a 	bne.w	8002996 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002862:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002864:	f043 0310 	orr.w	r3, r3, #16
 8002868:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002872:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002874:	6893      	ldr	r3, [r2, #8]
 8002876:	f013 0304 	ands.w	r3, r3, #4
 800287a:	d000      	beq.n	800287e <HAL_ADC_Init+0x86>
 800287c:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800287e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002880:	f011 0f10 	tst.w	r1, #16
 8002884:	f040 80be 	bne.w	8002a04 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002888:	2b00      	cmp	r3, #0
 800288a:	f040 80bb 	bne.w	8002a04 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800288e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002890:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800289a:	6893      	ldr	r3, [r2, #8]
 800289c:	f013 0f01 	tst.w	r3, #1
 80028a0:	d14f      	bne.n	8002942 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80028a2:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80028a4:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80028a6:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80028aa:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80028ac:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80028b0:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80028b2:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80028b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80028b8:	b109      	cbz	r1, 80028be <HAL_ADC_Init+0xc6>
 80028ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80028be:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 80028c0:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80028c2:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80028c4:	6921      	ldr	r1, [r4, #16]
 80028c6:	2900      	cmp	r1, #0
 80028c8:	db67      	blt.n	800299a <HAL_ADC_Init+0x1a2>
 80028ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80028ce:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028d0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80028d4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028d8:	f894 1020 	ldrb.w	r1, [r4, #32]
 80028dc:	2901      	cmp	r1, #1
 80028de:	d05f      	beq.n	80029a0 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80028e2:	b121      	cbz	r1, 80028ee <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80028e4:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80028e8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80028ea:	4329      	orrs	r1, r5
 80028ec:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80028ee:	68d1      	ldr	r1, [r2, #12]
 80028f0:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 80028f4:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 80028f8:	4319      	orrs	r1, r3
 80028fa:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028fc:	6863      	ldr	r3, [r4, #4]
 80028fe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002902:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002904:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002906:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800290a:	2901      	cmp	r1, #1
 800290c:	d055      	beq.n	80029ba <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800290e:	6821      	ldr	r1, [r4, #0]
 8002910:	690d      	ldr	r5, [r1, #16]
 8002912:	4b43      	ldr	r3, [pc, #268]	; (8002a20 <HAL_ADC_Init+0x228>)
 8002914:	402b      	ands	r3, r5
 8002916:	4313      	orrs	r3, r2
 8002918:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800291a:	6863      	ldr	r3, [r4, #4]
 800291c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002920:	d00f      	beq.n	8002942 <HAL_ADC_Init+0x14a>
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002926:	d00c      	beq.n	8002942 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800292c:	d009      	beq.n	8002942 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800292e:	493d      	ldr	r1, [pc, #244]	; (8002a24 <HAL_ADC_Init+0x22c>)
 8002930:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8002934:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8002938:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002942:	6821      	ldr	r1, [r4, #0]
 8002944:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8002946:	694a      	ldr	r2, [r1, #20]
 8002948:	f022 0207 	bic.w	r2, r2, #7
 800294c:	4313      	orrs	r3, r2
 800294e:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002950:	6822      	ldr	r2, [r4, #0]
 8002952:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002954:	6953      	ldr	r3, [r2, #20]
 8002956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800295e:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002960:	6923      	ldr	r3, [r4, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d133      	bne.n	80029ce <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002966:	6822      	ldr	r2, [r4, #0]
 8002968:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800296a:	f063 030f 	orn	r3, r3, #15
 800296e:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002970:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8002978:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800297a:	429a      	cmp	r2, r3
 800297c:	d039      	beq.n	80029f2 <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800297e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002980:	f023 0312 	bic.w	r3, r3, #18
 8002984:	f043 0310 	orr.w	r3, r3, #16
 8002988:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002992:	2001      	movs	r0, #1
 8002994:	e03b      	b.n	8002a0e <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002996:	2000      	movs	r0, #0
 8002998:	e76c      	b.n	8002874 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800299a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800299e:	e796      	b.n	80028ce <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80029a0:	b915      	cbnz	r5, 80029a8 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80029a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a6:	e79b      	b.n	80028e0 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80029aa:	f041 0120 	orr.w	r1, r1, #32
 80029ae:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80029b2:	f041 0101 	orr.w	r1, r1, #1
 80029b6:	65e1      	str	r1, [r4, #92]	; 0x5c
 80029b8:	e792      	b.n	80028e0 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 80029ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029bc:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 80029be:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80029c0:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 80029c2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80029c4:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80029c6:	431a      	orrs	r2, r3
 80029c8:	f042 0201 	orr.w	r2, r2, #1
 80029cc:	e79f      	b.n	800290e <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029d2:	d1cd      	bne.n	8002970 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 80029d4:	6821      	ldr	r1, [r4, #0]
 80029d6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80029d8:	69e3      	ldr	r3, [r4, #28]
 80029da:	3b01      	subs	r3, #1
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	f003 031c 	and.w	r3, r3, #28
 80029e2:	f06f 020f 	mvn.w	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80029ec:	4313      	orrs	r3, r2
 80029ee:	628b      	str	r3, [r1, #40]	; 0x28
 80029f0:	e7be      	b.n	8002970 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 80029f2:	2300      	movs	r3, #0
 80029f4:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80029f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029f8:	f023 0303 	bic.w	r3, r3, #3
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	65a3      	str	r3, [r4, #88]	; 0x58
 8002a02:	e004      	b.n	8002a0e <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a06:	f043 0310 	orr.w	r3, r3, #16
 8002a0a:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a0c:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002a0e:	b003      	add	sp, #12
 8002a10:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002a12:	2001      	movs	r0, #1
 8002a14:	e7fb      	b.n	8002a0e <HAL_ADC_Init+0x216>
 8002a16:	bf00      	nop
 8002a18:	20000074 	.word	0x20000074
 8002a1c:	053e2d63 	.word	0x053e2d63
 8002a20:	1ffffc02 	.word	0x1ffffc02
 8002a24:	40012000 	.word	0x40012000

08002a28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2a:	4604      	mov	r4, r0
 8002a2c:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a2e:	6946      	ldr	r6, [r0, #20]
 8002a30:	2e08      	cmp	r6, #8
 8002a32:	d005      	beq.n	8002a40 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002a34:	6803      	ldr	r3, [r0, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f013 0f01 	tst.w	r3, #1
 8002a3c:	d11e      	bne.n	8002a7c <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002a3e:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a40:	f7fe fe5a 	bl	80016f8 <HAL_GetTick>
 8002a44:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4232      	tst	r2, r6
 8002a4c:	d11c      	bne.n	8002a88 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a4e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002a52:	d0f8      	beq.n	8002a46 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a54:	f7fe fe50 	bl	80016f8 <HAL_GetTick>
 8002a58:	1bc3      	subs	r3, r0, r7
 8002a5a:	42ab      	cmp	r3, r5
 8002a5c:	d801      	bhi.n	8002a62 <HAL_ADC_PollForConversion+0x3a>
 8002a5e:	2d00      	cmp	r5, #0
 8002a60:	d1f1      	bne.n	8002a46 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4233      	tst	r3, r6
 8002a68:	d1ed      	bne.n	8002a46 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002a72:	2300      	movs	r3, #0
 8002a74:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8002a78:	2003      	movs	r0, #3
 8002a7a:	e028      	b.n	8002ace <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a7c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002a7e:	f043 0320 	orr.w	r3, r3, #32
 8002a82:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002a84:	2001      	movs	r0, #1
 8002a86:	e022      	b.n	8002ace <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a88:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8e:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002a96:	d115      	bne.n	8002ac4 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a98:	7ea2      	ldrb	r2, [r4, #26]
 8002a9a:	b99a      	cbnz	r2, 8002ac4 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	f012 0f08 	tst.w	r2, #8
 8002aa2:	d00f      	beq.n	8002ac4 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	f012 0f04 	tst.w	r2, #4
 8002aaa:	d111      	bne.n	8002ad0 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	f022 020c 	bic.w	r2, r2, #12
 8002ab2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002ab4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002ac4:	7e20      	ldrb	r0, [r4, #24]
 8002ac6:	b960      	cbnz	r0, 8002ae2 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ac8:	6823      	ldr	r3, [r4, #0]
 8002aca:	220c      	movs	r2, #12
 8002acc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ad2:	f043 0320 	orr.w	r3, r3, #32
 8002ad6:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002ae0:	e7f0      	b.n	8002ac4 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	e7f3      	b.n	8002ace <HAL_ADC_PollForConversion+0xa6>

08002ae6 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ae6:	6803      	ldr	r3, [r0, #0]
 8002ae8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002aea:	4770      	bx	lr

08002aec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002aec:	b470      	push	{r4, r5, r6}
 8002aee:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002af0:	2200      	movs	r2, #0
 8002af2:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002af4:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002af6:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8002afa:	2a01      	cmp	r2, #1
 8002afc:	f000 8103 	beq.w	8002d06 <HAL_ADC_ConfigChannel+0x21a>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2201      	movs	r2, #1
 8002b04:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b08:	6802      	ldr	r2, [r0, #0]
 8002b0a:	6890      	ldr	r0, [r2, #8]
 8002b0c:	f010 0f04 	tst.w	r0, #4
 8002b10:	d00a      	beq.n	8002b28 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b14:	f042 0220 	orr.w	r2, r2, #32
 8002b18:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b1a:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8002b22:	b003      	add	sp, #12
 8002b24:	bc70      	pop	{r4, r5, r6}
 8002b26:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8002b28:	6848      	ldr	r0, [r1, #4]
 8002b2a:	2802      	cmp	r0, #2
 8002b2c:	f000 809c 	beq.w	8002c68 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b30:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002b34:	d027      	beq.n	8002b86 <HAL_ADC_ConfigChannel+0x9a>
 8002b36:	4d75      	ldr	r5, [pc, #468]	; (8002d0c <HAL_ADC_ConfigChannel+0x220>)
 8002b38:	42ac      	cmp	r4, r5
 8002b3a:	d024      	beq.n	8002b86 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002b3c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002b3e:	f000 001f 	and.w	r0, r0, #31
 8002b42:	250f      	movs	r5, #15
 8002b44:	4085      	lsls	r5, r0
 8002b46:	ea24 0505 	bic.w	r5, r4, r5
 8002b4a:	680c      	ldr	r4, [r1, #0]
 8002b4c:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8002b50:	2e00      	cmp	r6, #0
 8002b52:	d131      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0xcc>
 8002b54:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002b58:	4084      	lsls	r4, r0
 8002b5a:	432c      	orrs	r4, r5
 8002b5c:	661c      	str	r4, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002b5e:	684c      	ldr	r4, [r1, #4]
 8002b60:	08a0      	lsrs	r0, r4, #2
 8002b62:	3001      	adds	r0, #1
 8002b64:	69dd      	ldr	r5, [r3, #28]
 8002b66:	42a8      	cmp	r0, r5
 8002b68:	d813      	bhi.n	8002b92 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b6a:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8002b6c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002b6e:	f004 041f 	and.w	r4, r4, #31
 8002b72:	260f      	movs	r6, #15
 8002b74:	40a6      	lsls	r6, r4
 8002b76:	ea20 0006 	bic.w	r0, r0, r6
 8002b7a:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8002b7e:	40a5      	lsls	r5, r4
 8002b80:	4328      	orrs	r0, r5
 8002b82:	6290      	str	r0, [r2, #40]	; 0x28
}
 8002b84:	e005      	b.n	8002b92 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002b86:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b88:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002b8a:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002b8e:	4320      	orrs	r0, r4
 8002b90:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b92:	681c      	ldr	r4, [r3, #0]
 8002b94:	680d      	ldr	r5, [r1, #0]
 8002b96:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8002b98:	6960      	ldr	r0, [r4, #20]
 8002b9a:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8002b9e:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8002ba2:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8002ba6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002baa:	4302      	orrs	r2, r0
 8002bac:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bae:	680a      	ldr	r2, [r1, #0]
 8002bb0:	2a00      	cmp	r2, #0
 8002bb2:	db09      	blt.n	8002bc8 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	e7b1      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bbc:	b114      	cbz	r4, 8002bc4 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002bbe:	fab4 f484 	clz	r4, r4
 8002bc2:	e7c9      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8002bc4:	2420      	movs	r4, #32
 8002bc6:	e7c7      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002bc8:	4951      	ldr	r1, [pc, #324]	; (8002d10 <HAL_ADC_ConfigChannel+0x224>)
 8002bca:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8002bce:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bd2:	4c50      	ldr	r4, [pc, #320]	; (8002d14 <HAL_ADC_ConfigChannel+0x228>)
 8002bd4:	42a2      	cmp	r2, r4
 8002bd6:	d007      	beq.n	8002be8 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bd8:	4c4f      	ldr	r4, [pc, #316]	; (8002d18 <HAL_ADC_ConfigChannel+0x22c>)
 8002bda:	42a2      	cmp	r2, r4
 8002bdc:	d026      	beq.n	8002c2c <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002bde:	4c4f      	ldr	r4, [pc, #316]	; (8002d1c <HAL_ADC_ConfigChannel+0x230>)
 8002be0:	42a2      	cmp	r2, r4
 8002be2:	d032      	beq.n	8002c4a <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be4:	2000      	movs	r0, #0
 8002be6:	e799      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002be8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002bec:	d1f4      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002bf2:	4847      	ldr	r0, [pc, #284]	; (8002d10 <HAL_ADC_ConfigChannel+0x224>)
 8002bf4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002bf8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002bfc:	4311      	orrs	r1, r2
 8002bfe:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c02:	4a47      	ldr	r2, [pc, #284]	; (8002d20 <HAL_ADC_ConfigChannel+0x234>)
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	0992      	lsrs	r2, r2, #6
 8002c08:	4946      	ldr	r1, [pc, #280]	; (8002d24 <HAL_ADC_ConfigChannel+0x238>)
 8002c0a:	fba1 1202 	umull	r1, r2, r1, r2
 8002c0e:	0992      	lsrs	r2, r2, #6
 8002c10:	3201      	adds	r2, #1
 8002c12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002c16:	0092      	lsls	r2, r2, #2
 8002c18:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002c1a:	e002      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 8002c1c:	9a01      	ldr	r2, [sp, #4]
 8002c1e:	3a01      	subs	r2, #1
 8002c20:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002c22:	9a01      	ldr	r2, [sp, #4]
 8002c24:	2a00      	cmp	r2, #0
 8002c26:	d1f9      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c28:	2000      	movs	r0, #0
 8002c2a:	e777      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c2c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002c30:	d1d5      	bne.n	8002bde <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c32:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002c36:	4836      	ldr	r0, [pc, #216]	; (8002d10 <HAL_ADC_ConfigChannel+0x224>)
 8002c38:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002c3c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002c40:	4311      	orrs	r1, r2
 8002c42:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c46:	2000      	movs	r0, #0
}
 8002c48:	e768      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c4a:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002c4e:	d158      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c50:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c54:	482e      	ldr	r0, [pc, #184]	; (8002d10 <HAL_ADC_ConfigChannel+0x224>)
 8002c56:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8002c5a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c64:	2000      	movs	r0, #0
}
 8002c66:	e759      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c68:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002c6c:	d002      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x188>
 8002c6e:	4827      	ldr	r0, [pc, #156]	; (8002d0c <HAL_ADC_ConfigChannel+0x220>)
 8002c70:	4284      	cmp	r4, r0
 8002c72:	d106      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002c74:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c76:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002c78:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002c7c:	ea20 0004 	bic.w	r0, r0, r4
 8002c80:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c82:	680a      	ldr	r2, [r1, #0]
 8002c84:	2a00      	cmp	r2, #0
 8002c86:	db01      	blt.n	8002c8c <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c88:	2000      	movs	r0, #0
 8002c8a:	e747      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c8c:	4920      	ldr	r1, [pc, #128]	; (8002d10 <HAL_ADC_ConfigChannel+0x224>)
 8002c8e:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c92:	4820      	ldr	r0, [pc, #128]	; (8002d14 <HAL_ADC_ConfigChannel+0x228>)
 8002c94:	4282      	cmp	r2, r0
 8002c96:	d007      	beq.n	8002ca8 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c98:	481f      	ldr	r0, [pc, #124]	; (8002d18 <HAL_ADC_ConfigChannel+0x22c>)
 8002c9a:	4282      	cmp	r2, r0
 8002c9c:	d013      	beq.n	8002cc6 <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c9e:	481f      	ldr	r0, [pc, #124]	; (8002d1c <HAL_ADC_ConfigChannel+0x230>)
 8002ca0:	4282      	cmp	r2, r0
 8002ca2:	d01f      	beq.n	8002ce4 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	e739      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ca8:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cac:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8002cb0:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8002cb4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002cb8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002cbc:	4311      	orrs	r1, r2
 8002cbe:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc2:	2000      	movs	r0, #0
}
 8002cc4:	e72a      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cc6:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cca:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8002cce:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8002cd2:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8002cd6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce0:	2000      	movs	r0, #0
}
 8002ce2:	e71b      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce4:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ce8:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8002cec:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8002cf0:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8002cf4:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cfe:	2000      	movs	r0, #0
}
 8002d00:	e70c      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x30>
 8002d02:	2000      	movs	r0, #0
 8002d04:	e70a      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8002d06:	2002      	movs	r0, #2
 8002d08:	e70b      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x36>
 8002d0a:	bf00      	nop
 8002d0c:	80000004 	.word	0x80000004
 8002d10:	40012000 	.word	0x40012000
 8002d14:	b0001000 	.word	0xb0001000
 8002d18:	b8004000 	.word	0xb8004000
 8002d1c:	b4002000 	.word	0xb4002000
 8002d20:	20000074 	.word	0x20000074
 8002d24:	053e2d63 	.word	0x053e2d63

08002d28 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002d28:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d2a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	f012 0f04 	tst.w	r2, #4
 8002d32:	d02a      	beq.n	8002d8a <ADC_ConversionStop+0x62>
 8002d34:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	f012 0f02 	tst.w	r2, #2
 8002d3c:	d107      	bne.n	8002d4e <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d44:	f022 0217 	bic.w	r2, r2, #23
 8002d48:	f042 0210 	orr.w	r2, r2, #16
 8002d4c:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d4e:	f7fe fcd3 	bl	80016f8 <HAL_GetTick>
 8002d52:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f013 0f04 	tst.w	r3, #4
 8002d5c:	d013      	beq.n	8002d86 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d5e:	f7fe fccb 	bl	80016f8 <HAL_GetTick>
 8002d62:	1b43      	subs	r3, r0, r5
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d9f5      	bls.n	8002d54 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f013 0f04 	tst.w	r3, #4
 8002d70:	d0f0      	beq.n	8002d54 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d74:	f043 0310 	orr.w	r3, r3, #16
 8002d78:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8002d82:	2001      	movs	r0, #1
 8002d84:	e002      	b.n	8002d8c <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002d86:	2000      	movs	r0, #0
 8002d88:	e000      	b.n	8002d8c <ADC_ConversionStop+0x64>
 8002d8a:	2000      	movs	r0, #0
}
 8002d8c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002d90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d90:	b530      	push	{r4, r5, lr}
 8002d92:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d98:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	f012 0f01 	tst.w	r2, #1
 8002da0:	d15b      	bne.n	8002e5a <ADC_Enable+0xca>
 8002da2:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002da4:	6899      	ldr	r1, [r3, #8]
 8002da6:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <ADC_Enable+0xd0>)
 8002da8:	4211      	tst	r1, r2
 8002daa:	d117      	bne.n	8002ddc <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002db2:	f022 0217 	bic.w	r2, r2, #23
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002dbc:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <ADC_Enable+0xd4>)
 8002dbe:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002dc2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002dc6:	d019      	beq.n	8002dfc <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <ADC_Enable+0xd8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	099b      	lsrs	r3, r3, #6
 8002dce:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <ADC_Enable+0xdc>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002dd8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002dda:	e00c      	b.n	8002df6 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ddc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002dde:	f043 0310 	orr.w	r3, r3, #16
 8002de2:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8002dec:	2001      	movs	r0, #1
 8002dee:	e035      	b.n	8002e5c <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8002df0:	9b01      	ldr	r3, [sp, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002df6:	9b01      	ldr	r3, [sp, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f9      	bne.n	8002df0 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002dfc:	7e63      	ldrb	r3, [r4, #25]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e02:	2000      	movs	r0, #0
 8002e04:	e02a      	b.n	8002e5c <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8002e06:	f7fe fc77 	bl	80016f8 <HAL_GetTick>
 8002e0a:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	f012 0f01 	tst.w	r2, #1
 8002e14:	d11f      	bne.n	8002e56 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	f012 0f01 	tst.w	r2, #1
 8002e1c:	d107      	bne.n	8002e2e <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e24:	f022 0217 	bic.w	r2, r2, #23
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e2e:	f7fe fc63 	bl	80016f8 <HAL_GetTick>
 8002e32:	1b40      	subs	r0, r0, r5
 8002e34:	2802      	cmp	r0, #2
 8002e36:	d9e9      	bls.n	8002e0c <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f013 0f01 	tst.w	r3, #1
 8002e40:	d1e4      	bne.n	8002e0c <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e44:	f043 0310 	orr.w	r3, r3, #16
 8002e48:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8002e52:	2001      	movs	r0, #1
 8002e54:	e002      	b.n	8002e5c <ADC_Enable+0xcc>
  return HAL_OK;
 8002e56:	2000      	movs	r0, #0
 8002e58:	e000      	b.n	8002e5c <ADC_Enable+0xcc>
 8002e5a:	2000      	movs	r0, #0
}
 8002e5c:	b003      	add	sp, #12
 8002e5e:	bd30      	pop	{r4, r5, pc}
 8002e60:	80000017 	.word	0x80000017
 8002e64:	40012000 	.word	0x40012000
 8002e68:	20000074 	.word	0x20000074
 8002e6c:	053e2d63 	.word	0x053e2d63

08002e70 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e70:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f013 0f04 	tst.w	r3, #4
 8002e78:	d128      	bne.n	8002ecc <HAL_ADC_Start+0x5c>
{
 8002e7a:	b510      	push	{r4, lr}
 8002e7c:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8002e7e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d024      	beq.n	8002ed0 <HAL_ADC_Start+0x60>
 8002e86:	2301      	movs	r3, #1
 8002e88:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8002e8c:	f7ff ff80 	bl	8002d90 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002e90:	b9c0      	cbnz	r0, 8002ec4 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8002e92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea0:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ea6:	6822      	ldr	r2, [r4, #0]
 8002ea8:	211c      	movs	r1, #28
 8002eaa:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8002eac:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002eb0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002eb2:	6893      	ldr	r3, [r2, #8]
 8002eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002eb8:	f023 0317 	bic.w	r3, r3, #23
 8002ebc:	f043 0304 	orr.w	r3, r3, #4
 8002ec0:	6093      	str	r3, [r2, #8]
}
 8002ec2:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002eca:	e7fa      	b.n	8002ec2 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8002ecc:	2002      	movs	r0, #2
}
 8002ece:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8002ed0:	2002      	movs	r0, #2
 8002ed2:	e7f6      	b.n	8002ec2 <HAL_ADC_Start+0x52>

08002ed4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ed4:	b538      	push	{r3, r4, r5, lr}
 8002ed6:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ed8:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002eda:	6893      	ldr	r3, [r2, #8]
 8002edc:	f013 0302 	ands.w	r3, r3, #2
 8002ee0:	d000      	beq.n	8002ee4 <ADC_Disable+0x10>
 8002ee2:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ee4:	6891      	ldr	r1, [r2, #8]
 8002ee6:	f011 0f01 	tst.w	r1, #1
 8002eea:	d039      	beq.n	8002f60 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d139      	bne.n	8002f64 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ef0:	6893      	ldr	r3, [r2, #8]
 8002ef2:	f003 0305 	and.w	r3, r3, #5
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d009      	beq.n	8002f0e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002efc:	f043 0310 	orr.w	r3, r3, #16
 8002f00:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	e029      	b.n	8002f62 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8002f0e:	6893      	ldr	r3, [r2, #8]
 8002f10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f14:	f023 0317 	bic.w	r3, r3, #23
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	2203      	movs	r2, #3
 8002f22:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f24:	f7fe fbe8 	bl	80016f8 <HAL_GetTick>
 8002f28:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f013 0f01 	tst.w	r3, #1
 8002f32:	d013      	beq.n	8002f5c <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f34:	f7fe fbe0 	bl	80016f8 <HAL_GetTick>
 8002f38:	1b40      	subs	r0, r0, r5
 8002f3a:	2802      	cmp	r0, #2
 8002f3c:	d9f5      	bls.n	8002f2a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f013 0f01 	tst.w	r3, #1
 8002f46:	d0f0      	beq.n	8002f2a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f4a:	f043 0310 	orr.w	r3, r3, #16
 8002f4e:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f50:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8002f58:	2001      	movs	r0, #1
 8002f5a:	e002      	b.n	8002f62 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	e000      	b.n	8002f62 <ADC_Disable+0x8e>
 8002f60:	2000      	movs	r0, #0
}
 8002f62:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002f64:	2000      	movs	r0, #0
 8002f66:	e7fc      	b.n	8002f62 <ADC_Disable+0x8e>

08002f68 <HAL_ADC_DeInit>:
{
 8002f68:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d056      	beq.n	800301c <HAL_ADC_DeInit+0xb4>
 8002f6e:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002f70:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002f78:	f7ff fed6 	bl	8002d28 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002f7c:	4606      	mov	r6, r0
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d03d      	beq.n	8002ffe <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002f82:	6822      	ldr	r2, [r4, #0]
 8002f84:	6853      	ldr	r3, [r2, #4]
 8002f86:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8002f8a:	f023 0303 	bic.w	r3, r3, #3
 8002f8e:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	f240 329f 	movw	r2, #927	; 0x39f
 8002f96:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002f98:	6822      	ldr	r2, [r4, #0]
 8002f9a:	68d1      	ldr	r1, [r2, #12]
 8002f9c:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_ADC_DeInit+0xb8>)
 8002f9e:	400b      	ands	r3, r1
 8002fa0:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002fa2:	6822      	ldr	r2, [r4, #0]
 8002fa4:	6913      	ldr	r3, [r2, #16]
 8002fa6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002faa:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002fac:	6822      	ldr	r2, [r4, #0]
 8002fae:	6953      	ldr	r3, [r2, #20]
 8002fb0:	f023 0307 	bic.w	r3, r3, #7
 8002fb4:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8002fb6:	6822      	ldr	r2, [r4, #0]
 8002fb8:	6a13      	ldr	r3, [r2, #32]
 8002fba:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8002fbe:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8002fc0:	6822      	ldr	r2, [r4, #0]
 8002fc2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002fc4:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8002fc8:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8002fca:	6822      	ldr	r2, [r4, #0]
 8002fcc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002fce:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8002fd2:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fd8:	2500      	movs	r5, #0
 8002fda:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002fdc:	4a11      	ldr	r2, [pc, #68]	; (8003024 <HAL_ADC_DeInit+0xbc>)
 8002fde:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 8002fe2:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8002fe6:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8002fea:	4620      	mov	r0, r4
 8002fec:	f7fd fe2c 	bl	8000c48 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002ff0:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8002ff2:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8002ff4:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8002ff6:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002ffe:	4620      	mov	r0, r4
 8003000:	f7ff ff68 	bl	8002ed4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003004:	4606      	mov	r6, r0
 8003006:	b908      	cbnz	r0, 800300c <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 8003008:	2301      	movs	r3, #1
 800300a:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800300c:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800300e:	6893      	ldr	r3, [r2, #8]
 8003010:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003014:	f023 0317 	bic.w	r3, r3, #23
 8003018:	6093      	str	r3, [r2, #8]
}
 800301a:	e7b2      	b.n	8002f82 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 800301c:	2601      	movs	r6, #1
 800301e:	e7ec      	b.n	8002ffa <HAL_ADC_DeInit+0x92>
 8003020:	833e0200 	.word	0x833e0200
 8003024:	40012000 	.word	0x40012000

08003028 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003028:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800302c:	2b01      	cmp	r3, #1
 800302e:	d019      	beq.n	8003064 <HAL_ADC_Stop+0x3c>
{
 8003030:	b510      	push	{r4, lr}
 8003032:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003034:	2301      	movs	r3, #1
 8003036:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800303a:	f7ff fe75 	bl	8002d28 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800303e:	b118      	cbz	r0, 8003048 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8003040:	2300      	movs	r3, #0
 8003042:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8003046:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003048:	4620      	mov	r0, r4
 800304a:	f7ff ff43 	bl	8002ed4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800304e:	2800      	cmp	r0, #0
 8003050:	d1f6      	bne.n	8003040 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8003052:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	65a3      	str	r3, [r4, #88]	; 0x58
 8003062:	e7ed      	b.n	8003040 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8003064:	2002      	movs	r0, #2
}
 8003066:	4770      	bx	lr

08003068 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800306c:	2300      	movs	r3, #0
 800306e:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003070:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003074:	2b01      	cmp	r3, #1
 8003076:	f000 8094 	beq.w	80031a2 <HAL_ADCEx_Calibration_Start+0x13a>
 800307a:	4604      	mov	r4, r0
 800307c:	2301      	movs	r3, #1
 800307e:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003082:	f7ff ff27 	bl	8002ed4 <ADC_Disable>
 8003086:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003088:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	f012 0201 	ands.w	r2, r2, #1
 8003090:	d009      	beq.n	80030a6 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003092:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003094:	f043 0310 	orr.w	r3, r3, #16
 8003098:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800309a:	2300      	movs	r3, #0
 800309c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 80030a0:	4628      	mov	r0, r5
 80030a2:	b003      	add	sp, #12
 80030a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80030a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80030a8:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80030ac:	f041 0102 	orr.w	r1, r1, #2
 80030b0:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80030b2:	68de      	ldr	r6, [r3, #12]
 80030b4:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 80030b8:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 80030bc:	0436      	lsls	r6, r6, #16
 80030be:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80030c0:	68d9      	ldr	r1, [r3, #12]
 80030c2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80030c6:	f021 0103 	bic.w	r1, r1, #3
 80030ca:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 80030cc:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80030ce:	e005      	b.n	80030dc <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80030d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80030d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80030d8:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80030da:	3201      	adds	r2, #1
 80030dc:	2a07      	cmp	r2, #7
 80030de:	d81e      	bhi.n	800311e <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 80030e0:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80030e2:	688b      	ldr	r3, [r1, #8]
 80030e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030e8:	f023 0317 	bic.w	r3, r3, #23
 80030ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030f0:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030f2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80030f4:	6899      	ldr	r1, [r3, #8]
 80030f6:	2900      	cmp	r1, #0
 80030f8:	daea      	bge.n	80030d0 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 80030fa:	9b01      	ldr	r3, [sp, #4]
 80030fc:	3301      	adds	r3, #1
 80030fe:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003100:	9b01      	ldr	r3, [sp, #4]
 8003102:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003106:	d3f4      	bcc.n	80030f2 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800310a:	f023 0312 	bic.w	r3, r3, #18
 800310e:	f043 0310 	orr.w	r3, r3, #16
 8003112:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8003114:	2300      	movs	r3, #0
 8003116:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 800311a:	2501      	movs	r5, #1
 800311c:	e7c0      	b.n	80030a0 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 800311e:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8003122:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003124:	6893      	ldr	r3, [r2, #8]
 8003126:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800312a:	f023 0317 	bic.w	r3, r3, #23
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003134:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003136:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 800313a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800313e:	4318      	orrs	r0, r3
 8003140:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003144:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003146:	6893      	ldr	r3, [r2, #8]
 8003148:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800314c:	f023 0317 	bic.w	r3, r3, #23
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003156:	f7fe facf 	bl	80016f8 <HAL_GetTick>
 800315a:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800315c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	f012 0f01 	tst.w	r2, #1
 8003164:	d109      	bne.n	800317a <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	4332      	orrs	r2, r6
 800316a:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800316c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800316e:	f023 0303 	bic.w	r3, r3, #3
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	65a3      	str	r3, [r4, #88]	; 0x58
 8003178:	e78f      	b.n	800309a <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800317a:	f7fe fabd 	bl	80016f8 <HAL_GetTick>
 800317e:	1bc3      	subs	r3, r0, r7
 8003180:	2b02      	cmp	r3, #2
 8003182:	d9eb      	bls.n	800315c <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f013 0f01 	tst.w	r3, #1
 800318c:	d0e6      	beq.n	800315c <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800318e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003190:	f043 0310 	orr.w	r3, r3, #16
 8003194:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003196:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800319e:	2501      	movs	r5, #1
 80031a0:	e77e      	b.n	80030a0 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 80031a2:	2502      	movs	r5, #2
 80031a4:	e77c      	b.n	80030a0 <HAL_ADCEx_Calibration_Start+0x38>
	...

080031a8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a8:	4a07      	ldr	r2, [pc, #28]	; (80031c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80031aa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031b0:	041b      	lsls	r3, r3, #16
 80031b2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b4:	0200      	lsls	r0, r0, #8
 80031b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ba:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80031bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80031c4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80031c6:	4770      	bx	lr
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031cc:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031ce:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_NVIC_SetPriority+0x68>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d6:	f1c3 0c07 	rsb	ip, r3, #7
 80031da:	f1bc 0f04 	cmp.w	ip, #4
 80031de:	bf28      	it	cs
 80031e0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e4:	f103 0e04 	add.w	lr, r3, #4
 80031e8:	f1be 0f06 	cmp.w	lr, #6
 80031ec:	d918      	bls.n	8003220 <HAL_NVIC_SetPriority+0x54>
 80031ee:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f0:	f04f 3eff 	mov.w	lr, #4294967295
 80031f4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80031f8:	ea21 010c 	bic.w	r1, r1, ip
 80031fc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031fe:	fa0e fe03 	lsl.w	lr, lr, r3
 8003202:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003206:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8003208:	2800      	cmp	r0, #0
 800320a:	db0b      	blt.n	8003224 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320c:	0112      	lsls	r2, r2, #4
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003214:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003218:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800321c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003220:	2300      	movs	r3, #0
 8003222:	e7e5      	b.n	80031f0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003224:	f000 000f 	and.w	r0, r0, #15
 8003228:	0112      	lsls	r2, r2, #4
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	4b02      	ldr	r3, [pc, #8]	; (8003238 <HAL_NVIC_SetPriority+0x6c>)
 800322e:	541a      	strb	r2, [r3, r0]
 8003230:	e7f4      	b.n	800321c <HAL_NVIC_SetPriority+0x50>
 8003232:	bf00      	nop
 8003234:	e000ed00 	.word	0xe000ed00
 8003238:	e000ed14 	.word	0xe000ed14

0800323c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800323c:	2800      	cmp	r0, #0
 800323e:	db07      	blt.n	8003250 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003240:	f000 021f 	and.w	r2, r0, #31
 8003244:	0940      	lsrs	r0, r0, #5
 8003246:	2301      	movs	r3, #1
 8003248:	4093      	lsls	r3, r2
 800324a:	4a02      	ldr	r2, [pc, #8]	; (8003254 <HAL_NVIC_EnableIRQ+0x18>)
 800324c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000e100 	.word	0xe000e100

08003258 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003258:	2800      	cmp	r0, #0
 800325a:	db0c      	blt.n	8003276 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325c:	f000 021f 	and.w	r2, r0, #31
 8003260:	0940      	lsrs	r0, r0, #5
 8003262:	2301      	movs	r3, #1
 8003264:	4093      	lsls	r3, r2
 8003266:	3020      	adds	r0, #32
 8003268:	4a03      	ldr	r2, [pc, #12]	; (8003278 <HAL_NVIC_DisableIRQ+0x20>)
 800326a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800326e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003272:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003276:	4770      	bx	lr
 8003278:	e000e100 	.word	0xe000e100

0800327c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800327c:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800327e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003280:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8003284:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003288:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800328a:	b124      	cbz	r4, 8003296 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800328c:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800328e:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8003292:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003296:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003298:	f004 0c1c 	and.w	ip, r4, #28
 800329c:	2401      	movs	r4, #1
 800329e:	fa04 f40c 	lsl.w	r4, r4, ip
 80032a2:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 80032a6:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032aa:	6804      	ldr	r4, [r0, #0]
 80032ac:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032ae:	6883      	ldr	r3, [r0, #8]
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d005      	beq.n	80032c0 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80032b4:	6803      	ldr	r3, [r0, #0]
 80032b6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80032b8:	6803      	ldr	r3, [r0, #0]
 80032ba:	60da      	str	r2, [r3, #12]
  }
}
 80032bc:	bc10      	pop	{r4}
 80032be:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80032c0:	6803      	ldr	r3, [r0, #0]
 80032c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80032c4:	6803      	ldr	r3, [r0, #0]
 80032c6:	60d9      	str	r1, [r3, #12]
 80032c8:	e7f8      	b.n	80032bc <DMA_SetConfig+0x40>
	...

080032cc <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032cc:	6803      	ldr	r3, [r0, #0]
 80032ce:	4a14      	ldr	r2, [pc, #80]	; (8003320 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d816      	bhi.n	8003302 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80032d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80032d6:	f022 0203 	bic.w	r2, r2, #3
 80032da:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80032de:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 80032e2:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	3b08      	subs	r3, #8
 80032e8:	4a0e      	ldr	r2, [pc, #56]	; (8003324 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032f0:	4a0d      	ldr	r2, [pc, #52]	; (8003328 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80032f2:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2201      	movs	r2, #1
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003300:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003302:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003304:	f022 0103 	bic.w	r1, r2, #3
 8003308:	4a08      	ldr	r2, [pc, #32]	; (800332c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 800330a:	440a      	add	r2, r1
 800330c:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800330e:	b2db      	uxtb	r3, r3
 8003310:	3b08      	subs	r3, #8
 8003312:	4a04      	ldr	r2, [pc, #16]	; (8003324 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	3307      	adds	r3, #7
 800331c:	e7e8      	b.n	80032f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 800331e:	bf00      	nop
 8003320:	40020407 	.word	0x40020407
 8003324:	cccccccd 	.word	0xcccccccd
 8003328:	40020880 	.word	0x40020880
 800332c:	4002081c 	.word	0x4002081c

08003330 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003330:	6843      	ldr	r3, [r0, #4]
 8003332:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003336:	4a07      	ldr	r2, [pc, #28]	; (8003354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003338:	441a      	add	r2, r3
 800333a:	0092      	lsls	r2, r2, #2
 800333c:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800333e:	4a06      	ldr	r2, [pc, #24]	; (8003358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8003340:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003342:	3b01      	subs	r3, #1
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	2201      	movs	r2, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	1000823f 	.word	0x1000823f
 8003358:	40020940 	.word	0x40020940

0800335c <HAL_DMA_Init>:
  if (hdma == NULL)
 800335c:	2800      	cmp	r0, #0
 800335e:	d060      	beq.n	8003422 <HAL_DMA_Init+0xc6>
{
 8003360:	b510      	push	{r4, lr}
 8003362:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003364:	6802      	ldr	r2, [r0, #0]
 8003366:	4b30      	ldr	r3, [pc, #192]	; (8003428 <HAL_DMA_Init+0xcc>)
 8003368:	429a      	cmp	r2, r3
 800336a:	d842      	bhi.n	80033f2 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800336c:	4b2f      	ldr	r3, [pc, #188]	; (800342c <HAL_DMA_Init+0xd0>)
 800336e:	4413      	add	r3, r2
 8003370:	492f      	ldr	r1, [pc, #188]	; (8003430 <HAL_DMA_Init+0xd4>)
 8003372:	fba1 1303 	umull	r1, r3, r1, r3
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800337c:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <HAL_DMA_Init+0xd8>)
 800337e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003380:	2302      	movs	r3, #2
 8003382:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003386:	6813      	ldr	r3, [r2, #0]
 8003388:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800338c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003390:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003392:	6821      	ldr	r1, [r4, #0]
 8003394:	680a      	ldr	r2, [r1, #0]
 8003396:	68a3      	ldr	r3, [r4, #8]
 8003398:	68e0      	ldr	r0, [r4, #12]
 800339a:	4303      	orrs	r3, r0
 800339c:	6920      	ldr	r0, [r4, #16]
 800339e:	4303      	orrs	r3, r0
 80033a0:	6960      	ldr	r0, [r4, #20]
 80033a2:	4303      	orrs	r3, r0
 80033a4:	69a0      	ldr	r0, [r4, #24]
 80033a6:	4303      	orrs	r3, r0
 80033a8:	69e0      	ldr	r0, [r4, #28]
 80033aa:	4303      	orrs	r3, r0
 80033ac:	6a20      	ldr	r0, [r4, #32]
 80033ae:	4303      	orrs	r3, r0
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033b4:	4620      	mov	r0, r4
 80033b6:	f7ff ff89 	bl	80032cc <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033ba:	68a3      	ldr	r3, [r4, #8]
 80033bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c0:	d022      	beq.n	8003408 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033c2:	6863      	ldr	r3, [r4, #4]
 80033c4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80033c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ca:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033cc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80033ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80033d0:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033d2:	6863      	ldr	r3, [r4, #4]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d919      	bls.n	800340e <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80033de:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80033e0:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e2:	2000      	movs	r0, #0
 80033e4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80033ec:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80033f0:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033f2:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HAL_DMA_Init+0xdc>)
 80033f4:	4413      	add	r3, r2
 80033f6:	490e      	ldr	r1, [pc, #56]	; (8003430 <HAL_DMA_Init+0xd4>)
 80033f8:	fba1 1303 	umull	r1, r3, r1, r3
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003402:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HAL_DMA_Init+0xe0>)
 8003404:	6403      	str	r3, [r0, #64]	; 0x40
 8003406:	e7bb      	b.n	8003380 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003408:	2300      	movs	r3, #0
 800340a:	6063      	str	r3, [r4, #4]
 800340c:	e7d9      	b.n	80033c2 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800340e:	4620      	mov	r0, r4
 8003410:	f7ff ff8e 	bl	8003330 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003414:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800341a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800341c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	e7df      	b.n	80033e2 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8003422:	2001      	movs	r0, #1
}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40020407 	.word	0x40020407
 800342c:	bffdfff8 	.word	0xbffdfff8
 8003430:	cccccccd 	.word	0xcccccccd
 8003434:	40020000 	.word	0x40020000
 8003438:	bffdfbf8 	.word	0xbffdfbf8
 800343c:	40020400 	.word	0x40020400

08003440 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8003440:	2800      	cmp	r0, #0
 8003442:	d04b      	beq.n	80034dc <HAL_DMA_DeInit+0x9c>
{
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003448:	6802      	ldr	r2, [r0, #0]
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003452:	6802      	ldr	r2, [r0, #0]
 8003454:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_DMA_DeInit+0xa0>)
 8003456:	429a      	cmp	r2, r3
 8003458:	d82c      	bhi.n	80034b4 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800345a:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <HAL_DMA_DeInit+0xa4>)
 800345c:	4413      	add	r3, r2
 800345e:	4922      	ldr	r1, [pc, #136]	; (80034e8 <HAL_DMA_DeInit+0xa8>)
 8003460:	fba1 1303 	umull	r1, r3, r1, r3
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800346a:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_DMA_DeInit+0xac>)
 800346c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 800346e:	2500      	movs	r5, #0
 8003470:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003472:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003474:	f003 021c 	and.w	r2, r3, #28
 8003478:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800347a:	2301      	movs	r3, #1
 800347c:	4093      	lsls	r3, r2
 800347e:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003480:	4620      	mov	r0, r4
 8003482:	f7ff ff23 	bl	80032cc <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8003486:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003488:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800348a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800348c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800348e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003490:	6863      	ldr	r3, [r4, #4]
 8003492:	3b01      	subs	r3, #1
 8003494:	2b03      	cmp	r3, #3
 8003496:	d918      	bls.n	80034ca <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8003498:	2000      	movs	r0, #0
 800349a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800349c:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800349e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80034a0:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80034a2:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80034a4:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80034a6:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a8:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80034aa:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80034ae:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <HAL_DMA_DeInit+0xb0>)
 80034b6:	4413      	add	r3, r2
 80034b8:	490b      	ldr	r1, [pc, #44]	; (80034e8 <HAL_DMA_DeInit+0xa8>)
 80034ba:	fba1 1303 	umull	r1, r3, r1, r3
 80034be:	091b      	lsrs	r3, r3, #4
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_DMA_DeInit+0xb4>)
 80034c6:	6403      	str	r3, [r0, #64]	; 0x40
 80034c8:	e7d1      	b.n	800346e <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034ca:	4620      	mov	r0, r4
 80034cc:	f7ff ff30 	bl	8003330 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80034d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034d2:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034d6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	e7dd      	b.n	8003498 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80034dc:	2001      	movs	r0, #1
}
 80034de:	4770      	bx	lr
 80034e0:	40020407 	.word	0x40020407
 80034e4:	bffdfff8 	.word	0xbffdfff8
 80034e8:	cccccccd 	.word	0xcccccccd
 80034ec:	40020000 	.word	0x40020000
 80034f0:	bffdfbf8 	.word	0xbffdfbf8
 80034f4:	40020400 	.word	0x40020400

080034f8 <HAL_DMA_Start_IT>:
{
 80034f8:	b538      	push	{r3, r4, r5, lr}
 80034fa:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80034fc:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8003500:	2801      	cmp	r0, #1
 8003502:	d043      	beq.n	800358c <HAL_DMA_Start_IT+0x94>
 8003504:	2001      	movs	r0, #1
 8003506:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 800350a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800350e:	b2c0      	uxtb	r0, r0
 8003510:	2801      	cmp	r0, #1
 8003512:	d006      	beq.n	8003522 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003518:	2300      	movs	r3, #0
 800351a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 800351e:	2001      	movs	r0, #1
}
 8003520:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003522:	2002      	movs	r0, #2
 8003524:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003528:	2000      	movs	r0, #0
 800352a:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800352c:	6825      	ldr	r5, [r4, #0]
 800352e:	6828      	ldr	r0, [r5, #0]
 8003530:	f020 0001 	bic.w	r0, r0, #1
 8003534:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003536:	4620      	mov	r0, r4
 8003538:	f7ff fea0 	bl	800327c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800353c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800353e:	b1d3      	cbz	r3, 8003576 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003540:	6822      	ldr	r2, [r4, #0]
 8003542:	6813      	ldr	r3, [r2, #0]
 8003544:	f043 030e 	orr.w	r3, r3, #14
 8003548:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800354a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003552:	d003      	beq.n	800355c <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800355a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 800355c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800355e:	b11b      	cbz	r3, 8003568 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003566:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003568:	6822      	ldr	r2, [r4, #0]
 800356a:	6813      	ldr	r3, [r2, #0]
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003572:	2000      	movs	r0, #0
 8003574:	e7d4      	b.n	8003520 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	6813      	ldr	r3, [r2, #0]
 800357a:	f023 0304 	bic.w	r3, r3, #4
 800357e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003580:	6822      	ldr	r2, [r4, #0]
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	f043 030a 	orr.w	r3, r3, #10
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e7de      	b.n	800354a <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 800358c:	2002      	movs	r0, #2
 800358e:	e7c7      	b.n	8003520 <HAL_DMA_Start_IT+0x28>

08003590 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003590:	4603      	mov	r3, r0
 8003592:	2800      	cmp	r0, #0
 8003594:	d034      	beq.n	8003600 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003596:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	2a02      	cmp	r2, #2
 800359e:	d006      	beq.n	80035ae <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035a0:	2204      	movs	r2, #4
 80035a2:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80035a4:	2200      	movs	r2, #0
 80035a6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 80035aa:	2001      	movs	r0, #1
 80035ac:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ae:	6801      	ldr	r1, [r0, #0]
 80035b0:	680a      	ldr	r2, [r1, #0]
 80035b2:	f022 020e 	bic.w	r2, r2, #14
 80035b6:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035b8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80035ba:	680a      	ldr	r2, [r1, #0]
 80035bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c0:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80035c2:	6801      	ldr	r1, [r0, #0]
 80035c4:	680a      	ldr	r2, [r1, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80035ce:	f002 011c 	and.w	r1, r2, #28
 80035d2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80035d4:	2201      	movs	r2, #1
 80035d6:	408a      	lsls	r2, r1
 80035d8:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80035de:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 80035e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035e2:	b132      	cbz	r2, 80035f2 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035e4:	6811      	ldr	r1, [r2, #0]
 80035e6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80035ea:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80035f0:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80035f8:	2000      	movs	r0, #0
 80035fa:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 80035fe:	4770      	bx	lr
    return HAL_ERROR;
 8003600:	2001      	movs	r0, #1
}
 8003602:	4770      	bx	lr

08003604 <HAL_DMA_Abort_IT>:
{
 8003604:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003606:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d003      	beq.n	8003618 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003610:	2304      	movs	r3, #4
 8003612:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003614:	2001      	movs	r0, #1
}
 8003616:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003618:	6802      	ldr	r2, [r0, #0]
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	f023 030e 	bic.w	r3, r3, #14
 8003620:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003622:	6802      	ldr	r2, [r0, #0]
 8003624:	6813      	ldr	r3, [r2, #0]
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800362c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800362e:	6813      	ldr	r3, [r2, #0]
 8003630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003634:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003636:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003638:	f003 021c 	and.w	r2, r3, #28
 800363c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800363e:	2301      	movs	r3, #1
 8003640:	4093      	lsls	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003644:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003646:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003648:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 800364a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800364c:	b133      	cbz	r3, 800365c <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003654:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003656:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003658:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800365a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800365c:	2301      	movs	r3, #1
 800365e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003662:	2300      	movs	r3, #0
 8003664:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003668:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800366a:	b113      	cbz	r3, 8003672 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 800366c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2000      	movs	r0, #0
 8003670:	e7d1      	b.n	8003616 <HAL_DMA_Abort_IT+0x12>
 8003672:	2000      	movs	r0, #0
 8003674:	e7cf      	b.n	8003616 <HAL_DMA_Abort_IT+0x12>
	...

08003678 <HAL_DMA_IRQHandler>:
{
 8003678:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800367a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800367c:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800367e:	6804      	ldr	r4, [r0, #0]
 8003680:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003682:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003684:	f003 031c 	and.w	r3, r3, #28
 8003688:	2204      	movs	r2, #4
 800368a:	409a      	lsls	r2, r3
 800368c:	420a      	tst	r2, r1
 800368e:	d015      	beq.n	80036bc <HAL_DMA_IRQHandler+0x44>
 8003690:	f015 0f04 	tst.w	r5, #4
 8003694:	d012      	beq.n	80036bc <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	f013 0f20 	tst.w	r3, #32
 800369c:	d103      	bne.n	80036a6 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	f023 0304 	bic.w	r3, r3, #4
 80036a4:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80036a6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80036a8:	f003 021c 	and.w	r2, r3, #28
 80036ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80036ae:	2304      	movs	r3, #4
 80036b0:	4093      	lsls	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80036b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80036b6:	b103      	cbz	r3, 80036ba <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80036b8:	4798      	blx	r3
}
 80036ba:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80036bc:	2202      	movs	r2, #2
 80036be:	409a      	lsls	r2, r3
 80036c0:	420a      	tst	r2, r1
 80036c2:	d028      	beq.n	8003716 <HAL_DMA_IRQHandler+0x9e>
 80036c4:	f015 0f02 	tst.w	r5, #2
 80036c8:	d025      	beq.n	8003716 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	f013 0f20 	tst.w	r3, #32
 80036d0:	d106      	bne.n	80036e0 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	f023 030a 	bic.w	r3, r3, #10
 80036d8:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80036da:	2301      	movs	r3, #1
 80036dc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80036e0:	6802      	ldr	r2, [r0, #0]
 80036e2:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <HAL_DMA_IRQHandler+0xdc>)
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d90e      	bls.n	8003706 <HAL_DMA_IRQHandler+0x8e>
 80036e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80036ea:	f003 021c 	and.w	r2, r3, #28
 80036ee:	2302      	movs	r3, #2
 80036f0:	4093      	lsls	r3, r2
 80036f2:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_DMA_IRQHandler+0xe0>)
 80036f4:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 80036f6:	2300      	movs	r3, #0
 80036f8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 80036fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0db      	beq.n	80036ba <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003702:	4798      	blx	r3
 8003704:	e7d9      	b.n	80036ba <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003706:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003708:	f003 021c 	and.w	r2, r3, #28
 800370c:	2302      	movs	r3, #2
 800370e:	4093      	lsls	r3, r2
 8003710:	4a12      	ldr	r2, [pc, #72]	; (800375c <HAL_DMA_IRQHandler+0xe4>)
 8003712:	6053      	str	r3, [r2, #4]
 8003714:	e7ef      	b.n	80036f6 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003716:	2208      	movs	r2, #8
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	420b      	tst	r3, r1
 800371e:	d0cc      	beq.n	80036ba <HAL_DMA_IRQHandler+0x42>
 8003720:	f015 0f08 	tst.w	r5, #8
 8003724:	d0c9      	beq.n	80036ba <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	f023 030e 	bic.w	r3, r3, #14
 800372c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800372e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003730:	f003 031c 	and.w	r3, r3, #28
 8003734:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003736:	2201      	movs	r2, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800373e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003740:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003744:	2300      	movs	r3, #0
 8003746:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800374a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0b4      	beq.n	80036ba <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003750:	4798      	blx	r3
  return;
 8003752:	e7b2      	b.n	80036ba <HAL_DMA_IRQHandler+0x42>
 8003754:	40020080 	.word	0x40020080
 8003758:	40020400 	.word	0x40020400
 800375c:	40020000 	.word	0x40020000

08003760 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003760:	b178      	cbz	r0, 8003782 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8003762:	6803      	ldr	r3, [r0, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003766:	f011 0f10 	tst.w	r1, #16
 800376a:	d004      	beq.n	8003776 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800376c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003770:	d004      	beq.n	800377c <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003772:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003776:	601a      	str	r2, [r3, #0]
  return status;
 8003778:	2000      	movs	r0, #0
 800377a:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800377c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003780:	e7f9      	b.n	8003776 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8003782:	2001      	movs	r0, #1
}
 8003784:	4770      	bx	lr
	...

08003788 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003788:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800378a:	4c05      	ldr	r4, [pc, #20]	; (80037a0 <FLASH_Program_DoubleWord+0x18>)
 800378c:	6961      	ldr	r1, [r4, #20]
 800378e:	f041 0101 	orr.w	r1, r1, #1
 8003792:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003794:	6002      	str	r2, [r0, #0]
 8003796:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800379a:	6043      	str	r3, [r0, #4]
}
 800379c:	bc10      	pop	{r4}
 800379e:	4770      	bx	lr
 80037a0:	58004000 	.word	0x58004000

080037a4 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80037a4:	4a0c      	ldr	r2, [pc, #48]	; (80037d8 <FLASH_Program_Fast+0x34>)
 80037a6:	6953      	ldr	r3, [r2, #20]
 80037a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ae:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80037b2:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80037b4:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80037b6:	f851 2b04 	ldr.w	r2, [r1], #4
 80037ba:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 80037be:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 80037c0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80037c4:	d1f7      	bne.n	80037b6 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80037c6:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <FLASH_Program_Fast+0x34>)
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80037ce:	d1fa      	bne.n	80037c6 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d0:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	58004000 	.word	0x58004000

080037dc <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80037dc:	4b09      	ldr	r3, [pc, #36]	; (8003804 <HAL_FLASH_Unlock+0x28>)
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	db01      	blt.n	80037e8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80037e4:	2000      	movs	r0, #0
 80037e6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_FLASH_Unlock+0x28>)
 80037ea:	4a07      	ldr	r2, [pc, #28]	; (8003808 <HAL_FLASH_Unlock+0x2c>)
 80037ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80037ee:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80037f2:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	db01      	blt.n	80037fe <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80037fa:	2000      	movs	r0, #0
 80037fc:	4770      	bx	lr
      status = HAL_ERROR;
 80037fe:	2001      	movs	r0, #1
}
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	58004000 	.word	0x58004000
 8003808:	45670123 	.word	0x45670123

0800380c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_FLASH_Lock+0x18>)
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003814:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	2b00      	cmp	r3, #0
 800381a:	db01      	blt.n	8003820 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 800381c:	2001      	movs	r0, #1
}
 800381e:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003820:	2000      	movs	r0, #0
 8003822:	4770      	bx	lr
 8003824:	58004000 	.word	0x58004000

08003828 <FLASH_WaitForLastOperation>:
{
 8003828:	b538      	push	{r3, r4, r5, lr}
 800382a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800382c:	f7fd ff64 	bl	80016f8 <HAL_GetTick>
 8003830:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003832:	4b16      	ldr	r3, [pc, #88]	; (800388c <FLASH_WaitForLastOperation+0x64>)
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800383a:	d006      	beq.n	800384a <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800383c:	f7fd ff5c 	bl	80016f8 <HAL_GetTick>
 8003840:	1b00      	subs	r0, r0, r4
 8003842:	42a8      	cmp	r0, r5
 8003844:	d3f5      	bcc.n	8003832 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8003846:	2003      	movs	r0, #3
}
 8003848:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 800384a:	4b10      	ldr	r3, [pc, #64]	; (800388c <FLASH_WaitForLastOperation+0x64>)
 800384c:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 800384e:	f013 0f01 	tst.w	r3, #1
 8003852:	d002      	beq.n	800385a <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003854:	4a0d      	ldr	r2, [pc, #52]	; (800388c <FLASH_WaitForLastOperation+0x64>)
 8003856:	2101      	movs	r1, #1
 8003858:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 800385a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 800385e:	4013      	ands	r3, r2
 8003860:	d001      	beq.n	8003866 <FLASH_WaitForLastOperation+0x3e>
 8003862:	4a0a      	ldr	r2, [pc, #40]	; (800388c <FLASH_WaitForLastOperation+0x64>)
 8003864:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8003866:	b95b      	cbnz	r3, 8003880 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <FLASH_WaitForLastOperation+0x64>)
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003870:	d00a      	beq.n	8003888 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003872:	f7fd ff41 	bl	80016f8 <HAL_GetTick>
 8003876:	1b00      	subs	r0, r0, r4
 8003878:	42a8      	cmp	r0, r5
 800387a:	d3f5      	bcc.n	8003868 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 800387c:	2003      	movs	r0, #3
 800387e:	e7e3      	b.n	8003848 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8003880:	4a03      	ldr	r2, [pc, #12]	; (8003890 <FLASH_WaitForLastOperation+0x68>)
 8003882:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8003884:	2001      	movs	r0, #1
 8003886:	e7df      	b.n	8003848 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8003888:	2000      	movs	r0, #0
 800388a:	e7dd      	b.n	8003848 <FLASH_WaitForLastOperation+0x20>
 800388c:	58004000 	.word	0x58004000
 8003890:	20000468 	.word	0x20000468

08003894 <HAL_FLASH_Program>:
{
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <HAL_FLASH_Program+0x5c>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d025      	beq.n	80038ec <HAL_FLASH_Program+0x58>
 80038a0:	4604      	mov	r4, r0
 80038a2:	460d      	mov	r5, r1
 80038a4:	4616      	mov	r6, r2
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <HAL_FLASH_Program+0x5c>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80038ac:	2200      	movs	r2, #0
 80038ae:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038b4:	f7ff ffb8 	bl	8003828 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80038b8:	b970      	cbnz	r0, 80038d8 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80038ba:	2c01      	cmp	r4, #1
 80038bc:	d010      	beq.n	80038e0 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80038be:	4631      	mov	r1, r6
 80038c0:	4628      	mov	r0, r5
 80038c2:	f7ff ff6f 	bl	80037a4 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038ca:	f7ff ffad 	bl	8003828 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80038ce:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <HAL_FLASH_Program+0x60>)
 80038d0:	6953      	ldr	r3, [r2, #20]
 80038d2:	ea23 0304 	bic.w	r3, r3, r4
 80038d6:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_FLASH_Program+0x5c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
}
 80038de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 80038e0:	4632      	mov	r2, r6
 80038e2:	463b      	mov	r3, r7
 80038e4:	4628      	mov	r0, r5
 80038e6:	f7ff ff4f 	bl	8003788 <FLASH_Program_DoubleWord>
 80038ea:	e7ec      	b.n	80038c6 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 80038ec:	2002      	movs	r0, #2
 80038ee:	e7f6      	b.n	80038de <HAL_FLASH_Program+0x4a>
 80038f0:	20000468 	.word	0x20000468
 80038f4:	58004000 	.word	0x58004000

080038f8 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80038f8:	4a03      	ldr	r2, [pc, #12]	; (8003908 <FLASH_MassErase+0x10>)
 80038fa:	6953      	ldr	r3, [r2, #20]
 80038fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003900:	f043 0304 	orr.w	r3, r3, #4
 8003904:	6153      	str	r3, [r2, #20]
#endif
}
 8003906:	4770      	bx	lr
 8003908:	58004000 	.word	0x58004000

0800390c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800390c:	4b18      	ldr	r3, [pc, #96]	; (8003970 <FLASH_FlushCaches+0x64>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003914:	2b01      	cmp	r3, #1
 8003916:	d006      	beq.n	8003926 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8003918:	4b15      	ldr	r3, [pc, #84]	; (8003970 <FLASH_FlushCaches+0x64>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	2b01      	cmp	r3, #1
 8003922:	d012      	beq.n	800394a <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8003924:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <FLASH_FlushCaches+0x64>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800392e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800393e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	e7e6      	b.n	8003918 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <FLASH_FlushCaches+0x64>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003952:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003962:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800396a:	601a      	str	r2, [r3, #0]
}
 800396c:	e7da      	b.n	8003924 <FLASH_FlushCaches+0x18>
 800396e:	bf00      	nop
 8003970:	58004000 	.word	0x58004000

08003974 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003974:	4a03      	ldr	r2, [pc, #12]	; (8003984 <FLASH_AcknowledgePageErase+0x10>)
 8003976:	6953      	ldr	r3, [r2, #20]
 8003978:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800397c:	f023 0302 	bic.w	r3, r3, #2
 8003980:	6153      	str	r3, [r2, #20]
#endif
}
 8003982:	4770      	bx	lr
 8003984:	58004000 	.word	0x58004000

08003988 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003988:	4a05      	ldr	r2, [pc, #20]	; (80039a0 <FLASH_PageErase+0x18>)
 800398a:	6953      	ldr	r3, [r2, #20]
 800398c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003990:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8003994:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003998:	f040 0002 	orr.w	r0, r0, #2
 800399c:	6150      	str	r0, [r2, #20]
}
 800399e:	4770      	bx	lr
 80039a0:	58004000 	.word	0x58004000

080039a4 <HAL_FLASHEx_Erase>:
{
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80039a6:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <HAL_FLASHEx_Erase+0x7c>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d035      	beq.n	8003a1a <HAL_FLASHEx_Erase+0x76>
 80039ae:	4605      	mov	r5, r0
 80039b0:	460f      	mov	r7, r1
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_FLASHEx_Erase+0x7c>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039b8:	2200      	movs	r2, #0
 80039ba:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039c0:	f7ff ff32 	bl	8003828 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80039c4:	4606      	mov	r6, r0
 80039c6:	bb18      	cbnz	r0, 8003a10 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d013      	beq.n	80039f6 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 80039ce:	f04f 33ff 	mov.w	r3, #4294967295
 80039d2:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80039d4:	686c      	ldr	r4, [r5, #4]
 80039d6:	686b      	ldr	r3, [r5, #4]
 80039d8:	68aa      	ldr	r2, [r5, #8]
 80039da:	4413      	add	r3, r2
 80039dc:	42a3      	cmp	r3, r4
 80039de:	d913      	bls.n	8003a08 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 80039e0:	4620      	mov	r0, r4
 80039e2:	f7ff ffd1 	bl	8003988 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039ea:	f7ff ff1d 	bl	8003828 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 80039ee:	4606      	mov	r6, r0
 80039f0:	b948      	cbnz	r0, 8003a06 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80039f2:	3401      	adds	r4, #1
 80039f4:	e7ef      	b.n	80039d6 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 80039f6:	f7ff ff7f 	bl	80038f8 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039fe:	f7ff ff13 	bl	8003828 <FLASH_WaitForLastOperation>
 8003a02:	4606      	mov	r6, r0
 8003a04:	e002      	b.n	8003a0c <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8003a06:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8003a08:	f7ff ffb4 	bl	8003974 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8003a0c:	f7ff ff7e 	bl	800390c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_FLASHEx_Erase+0x7c>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	701a      	strb	r2, [r3, #0]
}
 8003a16:	4630      	mov	r0, r6
 8003a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8003a1a:	2602      	movs	r6, #2
 8003a1c:	e7fb      	b.n	8003a16 <HAL_FLASHEx_Erase+0x72>
 8003a1e:	bf00      	nop
 8003a20:	20000468 	.word	0x20000468

08003a24 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a24:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8003a26:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a28:	e069      	b.n	8003afe <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a2a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a2c:	005e      	lsls	r6, r3, #1
 8003a2e:	2403      	movs	r4, #3
 8003a30:	40b4      	lsls	r4, r6
 8003a32:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a36:	68cc      	ldr	r4, [r1, #12]
 8003a38:	40b4      	lsls	r4, r6
 8003a3a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003a3c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a3e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a40:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a44:	684c      	ldr	r4, [r1, #4]
 8003a46:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003a4a:	409c      	lsls	r4, r3
 8003a4c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003a4e:	6044      	str	r4, [r0, #4]
 8003a50:	e066      	b.n	8003b20 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a52:	08dd      	lsrs	r5, r3, #3
 8003a54:	3508      	adds	r5, #8
 8003a56:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a5a:	f003 0c07 	and.w	ip, r3, #7
 8003a5e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003a62:	f04f 0e0f 	mov.w	lr, #15
 8003a66:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003a6a:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a6e:	690c      	ldr	r4, [r1, #16]
 8003a70:	fa04 f40c 	lsl.w	r4, r4, ip
 8003a74:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003a78:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003a7c:	e067      	b.n	8003b4e <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a7e:	2402      	movs	r4, #2
 8003a80:	e000      	b.n	8003a84 <HAL_GPIO_Init+0x60>
 8003a82:	2400      	movs	r4, #0
 8003a84:	fa04 f40e 	lsl.w	r4, r4, lr
 8003a88:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a8a:	f10c 0c02 	add.w	ip, ip, #2
 8003a8e:	4d4b      	ldr	r5, [pc, #300]	; (8003bbc <HAL_GPIO_Init+0x198>)
 8003a90:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a94:	4c4a      	ldr	r4, [pc, #296]	; (8003bc0 <HAL_GPIO_Init+0x19c>)
 8003a96:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003a98:	43d4      	mvns	r4, r2
 8003a9a:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a9e:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003aa2:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8003aa6:	d001      	beq.n	8003aac <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003aa8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003aac:	4d44      	ldr	r5, [pc, #272]	; (8003bc0 <HAL_GPIO_Init+0x19c>)
 8003aae:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003ab0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003ab2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ab6:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003aba:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8003abe:	d001      	beq.n	8003ac4 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8003ac0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003ac4:	4d3e      	ldr	r5, [pc, #248]	; (8003bc0 <HAL_GPIO_Init+0x19c>)
 8003ac6:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003ac8:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003acc:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ad0:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003ad4:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8003ad8:	d001      	beq.n	8003ade <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8003ada:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003ade:	4d38      	ldr	r5, [pc, #224]	; (8003bc0 <HAL_GPIO_Init+0x19c>)
 8003ae0:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003ae4:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003ae8:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003aea:	684e      	ldr	r6, [r1, #4]
 8003aec:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8003af0:	d001      	beq.n	8003af6 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8003af2:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003af6:	4a32      	ldr	r2, [pc, #200]	; (8003bc0 <HAL_GPIO_Init+0x19c>)
 8003af8:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003afc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003afe:	680a      	ldr	r2, [r1, #0]
 8003b00:	fa32 f403 	lsrs.w	r4, r2, r3
 8003b04:	d058      	beq.n	8003bb8 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b06:	f04f 0c01 	mov.w	ip, #1
 8003b0a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8003b0e:	ea1c 0202 	ands.w	r2, ip, r2
 8003b12:	d0f3      	beq.n	8003afc <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b14:	684c      	ldr	r4, [r1, #4]
 8003b16:	f004 0403 	and.w	r4, r4, #3
 8003b1a:	3c01      	subs	r4, #1
 8003b1c:	2c01      	cmp	r4, #1
 8003b1e:	d984      	bls.n	8003a2a <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b20:	684c      	ldr	r4, [r1, #4]
 8003b22:	f004 0403 	and.w	r4, r4, #3
 8003b26:	2c03      	cmp	r4, #3
 8003b28:	d00c      	beq.n	8003b44 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8003b2a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b2c:	005d      	lsls	r5, r3, #1
 8003b2e:	f04f 0c03 	mov.w	ip, #3
 8003b32:	fa0c fc05 	lsl.w	ip, ip, r5
 8003b36:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b3a:	688c      	ldr	r4, [r1, #8]
 8003b3c:	40ac      	lsls	r4, r5
 8003b3e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8003b42:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b44:	684c      	ldr	r4, [r1, #4]
 8003b46:	f004 0403 	and.w	r4, r4, #3
 8003b4a:	2c02      	cmp	r4, #2
 8003b4c:	d081      	beq.n	8003a52 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8003b4e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b50:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003b54:	f04f 0c03 	mov.w	ip, #3
 8003b58:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003b5c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b60:	684c      	ldr	r4, [r1, #4]
 8003b62:	f004 0403 	and.w	r4, r4, #3
 8003b66:	fa04 f40e 	lsl.w	r4, r4, lr
 8003b6a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003b6e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b70:	684c      	ldr	r4, [r1, #4]
 8003b72:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003b76:	d0c1      	beq.n	8003afc <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003b78:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003b7c:	f10c 0502 	add.w	r5, ip, #2
 8003b80:	4c0e      	ldr	r4, [pc, #56]	; (8003bbc <HAL_GPIO_Init+0x198>)
 8003b82:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003b86:	f003 0e03 	and.w	lr, r3, #3
 8003b8a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003b8e:	2407      	movs	r4, #7
 8003b90:	fa04 f40e 	lsl.w	r4, r4, lr
 8003b94:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b98:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003b9c:	f43f af71 	beq.w	8003a82 <HAL_GPIO_Init+0x5e>
 8003ba0:	4c08      	ldr	r4, [pc, #32]	; (8003bc4 <HAL_GPIO_Init+0x1a0>)
 8003ba2:	42a0      	cmp	r0, r4
 8003ba4:	d006      	beq.n	8003bb4 <HAL_GPIO_Init+0x190>
 8003ba6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003baa:	42a0      	cmp	r0, r4
 8003bac:	f43f af67 	beq.w	8003a7e <HAL_GPIO_Init+0x5a>
 8003bb0:	2407      	movs	r4, #7
 8003bb2:	e767      	b.n	8003a84 <HAL_GPIO_Init+0x60>
 8003bb4:	2401      	movs	r4, #1
 8003bb6:	e765      	b.n	8003a84 <HAL_GPIO_Init+0x60>
  }
}
 8003bb8:	bd70      	pop	{r4, r5, r6, pc}
 8003bba:	bf00      	nop
 8003bbc:	40010000 	.word	0x40010000
 8003bc0:	58000800 	.word	0x58000800
 8003bc4:	48000400 	.word	0x48000400

08003bc8 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003bc8:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003bca:	fa31 f203 	lsrs.w	r2, r1, r3
 8003bce:	d071      	beq.n	8003cb4 <HAL_GPIO_DeInit+0xec>
{
 8003bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd2:	e02e      	b.n	8003c32 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003bd4:	2502      	movs	r5, #2
 8003bd6:	e000      	b.n	8003bda <HAL_GPIO_DeInit+0x12>
 8003bd8:	2500      	movs	r5, #0
 8003bda:	fa05 f50c 	lsl.w	r5, r5, ip
 8003bde:	42a5      	cmp	r5, r4
 8003be0:	d049      	beq.n	8003c76 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003be2:	6804      	ldr	r4, [r0, #0]
 8003be4:	005d      	lsls	r5, r3, #1
 8003be6:	f04f 0c03 	mov.w	ip, #3
 8003bea:	fa0c fc05 	lsl.w	ip, ip, r5
 8003bee:	ea44 040c 	orr.w	r4, r4, ip
 8003bf2:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003bf4:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003bf8:	f10e 0e08 	add.w	lr, lr, #8
 8003bfc:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8003c00:	f003 0607 	and.w	r6, r3, #7
 8003c04:	00b6      	lsls	r6, r6, #2
 8003c06:	250f      	movs	r5, #15
 8003c08:	40b5      	lsls	r5, r6
 8003c0a:	ea24 0405 	bic.w	r4, r4, r5
 8003c0e:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c12:	6884      	ldr	r4, [r0, #8]
 8003c14:	ea24 040c 	bic.w	r4, r4, ip
 8003c18:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c1a:	6844      	ldr	r4, [r0, #4]
 8003c1c:	ea24 0202 	bic.w	r2, r4, r2
 8003c20:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c22:	68c2      	ldr	r2, [r0, #12]
 8003c24:	ea22 020c 	bic.w	r2, r2, ip
 8003c28:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8003c2a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003c2c:	fa31 f203 	lsrs.w	r2, r1, r3
 8003c30:	d03f      	beq.n	8003cb2 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003c32:	2201      	movs	r2, #1
 8003c34:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8003c36:	ea12 0701 	ands.w	r7, r2, r1
 8003c3a:	d0f6      	beq.n	8003c2a <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003c3c:	089e      	lsrs	r6, r3, #2
 8003c3e:	1cb5      	adds	r5, r6, #2
 8003c40:	4c1d      	ldr	r4, [pc, #116]	; (8003cb8 <HAL_GPIO_DeInit+0xf0>)
 8003c42:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003c46:	f003 0c03 	and.w	ip, r3, #3
 8003c4a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003c4e:	f04f 0e07 	mov.w	lr, #7
 8003c52:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003c56:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003c5a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003c5e:	d0bb      	beq.n	8003bd8 <HAL_GPIO_DeInit+0x10>
 8003c60:	4d16      	ldr	r5, [pc, #88]	; (8003cbc <HAL_GPIO_DeInit+0xf4>)
 8003c62:	42a8      	cmp	r0, r5
 8003c64:	d005      	beq.n	8003c72 <HAL_GPIO_DeInit+0xaa>
 8003c66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c6a:	42a8      	cmp	r0, r5
 8003c6c:	d0b2      	beq.n	8003bd4 <HAL_GPIO_DeInit+0xc>
 8003c6e:	2507      	movs	r5, #7
 8003c70:	e7b3      	b.n	8003bda <HAL_GPIO_DeInit+0x12>
 8003c72:	2501      	movs	r5, #1
 8003c74:	e7b1      	b.n	8003bda <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8003c76:	4c12      	ldr	r4, [pc, #72]	; (8003cc0 <HAL_GPIO_DeInit+0xf8>)
 8003c78:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8003c7c:	ea25 0507 	bic.w	r5, r5, r7
 8003c80:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003c84:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8003c88:	ea25 0507 	bic.w	r5, r5, r7
 8003c8c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8003c90:	6825      	ldr	r5, [r4, #0]
 8003c92:	ea25 0507 	bic.w	r5, r5, r7
 8003c96:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003c98:	6865      	ldr	r5, [r4, #4]
 8003c9a:	ea25 0507 	bic.w	r5, r5, r7
 8003c9e:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003ca0:	4d05      	ldr	r5, [pc, #20]	; (8003cb8 <HAL_GPIO_DeInit+0xf0>)
 8003ca2:	3602      	adds	r6, #2
 8003ca4:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8003ca8:	ea24 040e 	bic.w	r4, r4, lr
 8003cac:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8003cb0:	e797      	b.n	8003be2 <HAL_GPIO_DeInit+0x1a>
  }
}
 8003cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	48000400 	.word	0x48000400
 8003cc0:	58000800 	.word	0x58000800

08003cc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cc4:	b10a      	cbz	r2, 8003cca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cc6:	6181      	str	r1, [r0, #24]
 8003cc8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cca:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003ccc:	4770      	bx	lr

08003cce <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cce:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cd0:	ea01 0203 	and.w	r2, r1, r3
 8003cd4:	ea21 0103 	bic.w	r1, r1, r3
 8003cd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003cdc:	6181      	str	r1, [r0, #24]
}
 8003cde:	4770      	bx	lr

08003ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ce0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4203      	tst	r3, r0
 8003ce8:	d100      	bne.n	8003cec <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8003cea:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cec:	4b02      	ldr	r3, [pc, #8]	; (8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003cee:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cf0:	f7fe fc22 	bl	8002538 <HAL_GPIO_EXTI_Callback>
}
 8003cf4:	e7f9      	b.n	8003cea <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003cf6:	bf00      	nop
 8003cf8:	58000800 	.word	0x58000800

08003cfc <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cfc:	4a02      	ldr	r2, [pc, #8]	; (8003d08 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003cfe:	6813      	ldr	r3, [r2, #0]
 8003d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d04:	6013      	str	r3, [r2, #0]
}
 8003d06:	4770      	bx	lr
 8003d08:	58000400 	.word	0x58000400

08003d0c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003d0c:	b510      	push	{r4, lr}
 8003d0e:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003d10:	b9a0      	cbnz	r0, 8003d3c <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003d12:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003d1a:	d10a      	bne.n	8003d32 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	; (8003d54 <HAL_PWR_EnterSLEEPMode+0x48>)
 8003d1e:	6913      	ldr	r3, [r2, #16]
 8003d20:	f023 0304 	bic.w	r3, r3, #4
 8003d24:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003d26:	2c01      	cmp	r4, #1
 8003d28:	d010      	beq.n	8003d4c <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003d2a:	bf40      	sev
    __WFE();
 8003d2c:	bf20      	wfe
    __WFE();
 8003d2e:	bf20      	wfe
  }
}
 8003d30:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003d32:	f000 f821 	bl	8003d78 <HAL_PWREx_DisableLowPowerRunMode>
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_PWR_EnterSLEEPMode+0x10>
 8003d3a:	e7f9      	b.n	8003d30 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003d44:	d1ea      	bne.n	8003d1c <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8003d46:	f000 f80f 	bl	8003d68 <HAL_PWREx_EnableLowPowerRunMode>
 8003d4a:	e7e7      	b.n	8003d1c <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8003d4c:	bf30      	wfi
 8003d4e:	e7ef      	b.n	8003d30 <HAL_PWR_EnterSLEEPMode+0x24>
 8003d50:	58000400 	.word	0x58000400
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8003d58:	4b02      	ldr	r3, [pc, #8]	; (8003d64 <HAL_PWREx_GetVoltageRange+0xc>)
 8003d5a:	6818      	ldr	r0, [r3, #0]
}
 8003d5c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	58000400 	.word	0x58000400

08003d68 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003d68:	4a02      	ldr	r2, [pc, #8]	; (8003d74 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8003d6a:	6813      	ldr	r3, [r2, #0]
 8003d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d70:	6013      	str	r3, [r2, #0]
}
 8003d72:	4770      	bx	lr
 8003d74:	58000400 	.word	0x58000400

08003d78 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003d78:	4a0f      	ldr	r2, [pc, #60]	; (8003db8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003d7a:	6813      	ldr	r3, [r2, #0]
 8003d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d80:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8003d82:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2232      	movs	r2, #50	; 0x32
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
 8003d8c:	4a0c      	ldr	r2, [pc, #48]	; (8003dc0 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003d94:	e000      	b.n	8003d98 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8003d96:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003d98:	4a07      	ldr	r2, [pc, #28]	; (8003db8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003d9a:	6952      	ldr	r2, [r2, #20]
 8003d9c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003da0:	d001      	beq.n	8003da6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f7      	bne.n	8003d96 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003da6:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003dae:	d101      	bne.n	8003db4 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8003db0:	2000      	movs	r0, #0
 8003db2:	4770      	bx	lr
    return HAL_TIMEOUT;
 8003db4:	2003      	movs	r0, #3
}
 8003db6:	4770      	bx	lr
 8003db8:	58000400 	.word	0x58000400
 8003dbc:	20000074 	.word	0x20000074
 8003dc0:	431bde83 	.word	0x431bde83

08003dc4 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8003dc4:	4a0c      	ldr	r2, [pc, #48]	; (8003df8 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8003dc6:	6813      	ldr	r3, [r2, #0]
 8003dc8:	f023 0307 	bic.w	r3, r3, #7
 8003dcc:	f043 0302 	orr.w	r3, r3, #2
 8003dd0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003dd2:	4a0a      	ldr	r2, [pc, #40]	; (8003dfc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8003dd4:	6913      	ldr	r3, [r2, #16]
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003ddc:	2801      	cmp	r0, #1
 8003dde:	d008      	beq.n	8003df2 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003de0:	bf40      	sev
    __WFE();
 8003de2:	bf20      	wfe
    __WFE();
 8003de4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003de6:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8003de8:	6913      	ldr	r3, [r2, #16]
 8003dea:	f023 0304 	bic.w	r3, r3, #4
 8003dee:	6113      	str	r3, [r2, #16]
}
 8003df0:	4770      	bx	lr
    __WFI();
 8003df2:	bf30      	wfi
 8003df4:	e7f7      	b.n	8003de6 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8003df6:	bf00      	nop
 8003df8:	58000400 	.word	0x58000400
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003e00:	b530      	push	{r4, r5, lr}
 8003e02:	b089      	sub	sp, #36	; 0x24
 8003e04:	4604      	mov	r4, r0
 8003e06:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003e08:	4b2a      	ldr	r3, [pc, #168]	; (8003eb4 <RCC_SetFlashLatency+0xb4>)
 8003e0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e0e:	9006      	str	r0, [sp, #24]
 8003e10:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003e14:	f103 0208 	add.w	r2, r3, #8
 8003e18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e1c:	9004      	str	r0, [sp, #16]
 8003e1e:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003e22:	ad01      	add	r5, sp, #4
 8003e24:	3310      	adds	r3, #16
 8003e26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e2a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e2e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8003e32:	d007      	beq.n	8003e44 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e34:	2300      	movs	r3, #0
 8003e36:	e014      	b.n	8003e62 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8003e38:	aa08      	add	r2, sp, #32
 8003e3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e3e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8003e42:	e01e      	b.n	8003e82 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e44:	2300      	movs	r3, #0
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d808      	bhi.n	8003e5c <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e4a:	aa08      	add	r2, sp, #32
 8003e4c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003e50:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8003e54:	42a2      	cmp	r2, r4
 8003e56:	d2ef      	bcs.n	8003e38 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e58:	3301      	adds	r3, #1
 8003e5a:	e7f4      	b.n	8003e46 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e5c:	2500      	movs	r5, #0
 8003e5e:	e010      	b.n	8003e82 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e60:	3301      	adds	r3, #1
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d80c      	bhi.n	8003e80 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003e66:	aa08      	add	r2, sp, #32
 8003e68:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003e6c:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8003e70:	42a2      	cmp	r2, r4
 8003e72:	d3f5      	bcc.n	8003e60 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e74:	aa08      	add	r2, sp, #32
 8003e76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e7a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8003e7e:	e000      	b.n	8003e82 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e80:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e82:	4a0d      	ldr	r2, [pc, #52]	; (8003eb8 <RCC_SetFlashLatency+0xb8>)
 8003e84:	6813      	ldr	r3, [r2, #0]
 8003e86:	f023 0307 	bic.w	r3, r3, #7
 8003e8a:	432b      	orrs	r3, r5
 8003e8c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e8e:	f7fd fc33 	bl	80016f8 <HAL_GetTick>
 8003e92:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e94:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <RCC_SetFlashLatency+0xb8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	42ab      	cmp	r3, r5
 8003e9e:	d006      	beq.n	8003eae <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ea0:	f7fd fc2a 	bl	80016f8 <HAL_GetTick>
 8003ea4:	1b00      	subs	r0, r0, r4
 8003ea6:	2802      	cmp	r0, #2
 8003ea8:	d9f4      	bls.n	8003e94 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8003eaa:	2003      	movs	r0, #3
 8003eac:	e000      	b.n	8003eb0 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8003eae:	2000      	movs	r0, #0
}
 8003eb0:	b009      	add	sp, #36	; 0x24
 8003eb2:	bd30      	pop	{r4, r5, pc}
 8003eb4:	08011c40 	.word	0x08011c40
 8003eb8:	58004000 	.word	0x58004000

08003ebc <RCC_SetFlashLatencyFromMSIRange>:
{
 8003ebc:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003ebe:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003ec2:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8003ec4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ecc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8003ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eda:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003ede:	f7ff ff3b 	bl	8003d58 <HAL_PWREx_GetVoltageRange>
 8003ee2:	4601      	mov	r1, r0
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8003ee6:	fba3 3404 	umull	r3, r4, r3, r4
 8003eea:	0ca0      	lsrs	r0, r4, #18
 8003eec:	f7ff ff88 	bl	8003e00 <RCC_SetFlashLatency>
}
 8003ef0:	bd10      	pop	{r4, pc}
 8003ef2:	bf00      	nop
 8003ef4:	080121c4 	.word	0x080121c4
 8003ef8:	08012164 	.word	0x08012164
 8003efc:	431bde83 	.word	0x431bde83

08003f00 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f04:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003f0c:	f011 010c 	ands.w	r1, r1, #12
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCC_GetSysClockFreq+0x28>
 8003f12:	290c      	cmp	r1, #12
 8003f14:	d006      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f16:	2904      	cmp	r1, #4
 8003f18:	d047      	beq.n	8003faa <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f1a:	2908      	cmp	r1, #8
 8003f1c:	d03b      	beq.n	8003f96 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8003f1e:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8003f20:	4610      	mov	r0, r2
 8003f22:	e026      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d1f6      	bne.n	8003f16 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f013 0308 	ands.w	r3, r3, #8
 8003f32:	d00d      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0x50>
 8003f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f013 0308 	ands.w	r3, r3, #8
 8003f3e:	d124      	bne.n	8003f8a <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f44:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003f48:	4a2e      	ldr	r2, [pc, #184]	; (8004004 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f4e:	e00e      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	f012 0f08 	tst.w	r2, #8
 8003f5a:	d112      	bne.n	8003f82 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f64:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003f68:	4a26      	ldr	r2, [pc, #152]	; (8004004 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f6e:	b1d1      	cbz	r1, 8003fa6 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8003f70:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f7c:	2b0c      	cmp	r3, #12
 8003f7e:	d01a      	beq.n	8003fb6 <HAL_RCC_GetSysClockFreq+0xb6>
}
 8003f80:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	e7ee      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x68>
 8003f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8e:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003f90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003f94:	e7d8      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8003fa0:	d106      	bne.n	8003fb0 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8003fa2:	4819      	ldr	r0, [pc, #100]	; (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa4:	e7e5      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	e7e3      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8003faa:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8003fac:	4817      	ldr	r0, [pc, #92]	; (800400c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fae:	e7e0      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8003fb0:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8003fb2:	4816      	ldr	r0, [pc, #88]	; (800400c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fb4:	e7dd      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d009      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0xd8>
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d108      	bne.n	8003fda <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003fd2:	d115      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003fd4:	4a0c      	ldr	r2, [pc, #48]	; (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8003fd8:	4a0c      	ldr	r2, [pc, #48]	; (800400c <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003fda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fde:	68cb      	ldr	r3, [r1, #12]
 8003fe0:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003fe4:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003fe8:	68cb      	ldr	r3, [r1, #12]
 8003fea:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003ff4:	68c8      	ldr	r0, [r1, #12]
 8003ff6:	0f40      	lsrs	r0, r0, #29
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8003ffe:	e7bf      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8004000:	4a02      	ldr	r2, [pc, #8]	; (800400c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004002:	e7ea      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0xda>
 8004004:	080121c4 	.word	0x080121c4
 8004008:	01e84800 	.word	0x01e84800
 800400c:	00f42400 	.word	0x00f42400

08004010 <HAL_RCC_GetHCLKFreq>:
{
 8004010:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004012:	f7ff ff75 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004020:	4a02      	ldr	r2, [pc, #8]	; (800402c <HAL_RCC_GetHCLKFreq+0x1c>)
 8004022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004026:	fbb0 f0f3 	udiv	r0, r0, r3
 800402a:	bd08      	pop	{r3, pc}
 800402c:	08012164 	.word	0x08012164

08004030 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004030:	2800      	cmp	r0, #0
 8004032:	f000 8311 	beq.w	8004658 <HAL_RCC_OscConfig+0x628>
{
 8004036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004038:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800403a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403e:	689d      	ldr	r5, [r3, #8]
 8004040:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004044:	68de      	ldr	r6, [r3, #12]
 8004046:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800404a:	6803      	ldr	r3, [r0, #0]
 800404c:	f013 0f20 	tst.w	r3, #32
 8004050:	d02a      	beq.n	80040a8 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004052:	2d00      	cmp	r5, #0
 8004054:	d065      	beq.n	8004122 <HAL_RCC_OscConfig+0xf2>
 8004056:	2d0c      	cmp	r5, #12
 8004058:	d061      	beq.n	800411e <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800405a:	6a23      	ldr	r3, [r4, #32]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 80bf 	beq.w	80041e0 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004066:	6813      	ldr	r3, [r2, #0]
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800406e:	f7fd fb43 	bl	80016f8 <HAL_GetTick>
 8004072:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f013 0f02 	tst.w	r3, #2
 800407e:	f000 80a7 	beq.w	80041d0 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	f042 0208 	orr.w	r2, r2, #8
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004094:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004096:	430a      	orrs	r2, r1
 8004098:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800409a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80040a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80040a6:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	f013 0f01 	tst.w	r3, #1
 80040ae:	f000 80b5 	beq.w	800421c <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80040b2:	2d08      	cmp	r5, #8
 80040b4:	f000 80ae 	beq.w	8004214 <HAL_RCC_OscConfig+0x1e4>
 80040b8:	2d0c      	cmp	r5, #12
 80040ba:	f000 80a8 	beq.w	800420e <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80040be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c2:	6813      	ldr	r3, [r2, #0]
 80040c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80040c8:	68a1      	ldr	r1, [r4, #8]
 80040ca:	430b      	orrs	r3, r1
 80040cc:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ce:	6863      	ldr	r3, [r4, #4]
 80040d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d4:	f000 80c4 	beq.w	8004260 <HAL_RCC_OscConfig+0x230>
 80040d8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80040dc:	f000 80c5 	beq.w	800426a <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80040e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80040ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80040f2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040f4:	6863      	ldr	r3, [r4, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80c2 	beq.w	8004280 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 80040fc:	f7fd fafc 	bl	80016f8 <HAL_GetTick>
 8004100:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800410c:	f040 8086 	bne.w	800421c <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004110:	f7fd faf2 	bl	80016f8 <HAL_GetTick>
 8004114:	1bc0      	subs	r0, r0, r7
 8004116:	2864      	cmp	r0, #100	; 0x64
 8004118:	d9f3      	bls.n	8004102 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 800411a:	2003      	movs	r0, #3
 800411c:	e2a9      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800411e:	2e01      	cmp	r6, #1
 8004120:	d19b      	bne.n	800405a <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004122:	6a23      	ldr	r3, [r4, #32]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8299 	beq.w	800465c <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800412a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800412c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f013 0f08 	tst.w	r3, #8
 8004136:	d029      	beq.n	800418c <HAL_RCC_OscConfig+0x15c>
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004142:	4298      	cmp	r0, r3
 8004144:	d92a      	bls.n	800419c <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004146:	f7ff feb9 	bl	8003ebc <RCC_SetFlashLatencyFromMSIRange>
 800414a:	2800      	cmp	r0, #0
 800414c:	f040 8288 	bne.w	8004660 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	f042 0208 	orr.w	r2, r2, #8
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004162:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004164:	430a      	orrs	r2, r1
 8004166:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004168:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004170:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004174:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004176:	f7ff ff4b 	bl	8004010 <HAL_RCC_GetHCLKFreq>
 800417a:	4bba      	ldr	r3, [pc, #744]	; (8004464 <HAL_RCC_OscConfig+0x434>)
 800417c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800417e:	4bba      	ldr	r3, [pc, #744]	; (8004468 <HAL_RCC_OscConfig+0x438>)
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	f7fd fab7 	bl	80016f4 <HAL_InitTick>
        if (status != HAL_OK)
 8004186:	2800      	cmp	r0, #0
 8004188:	d08e      	beq.n	80040a8 <HAL_RCC_OscConfig+0x78>
 800418a:	e272      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800418c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800419a:	e7d2      	b.n	8004142 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	f042 0208 	orr.w	r2, r2, #8
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80041ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80041b0:	430a      	orrs	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80041bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80041c0:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80041c4:	f7ff fe7a 	bl	8003ebc <RCC_SetFlashLatencyFromMSIRange>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d0d4      	beq.n	8004176 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 80041cc:	2001      	movs	r0, #1
 80041ce:	e250      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041d0:	f7fd fa92 	bl	80016f8 <HAL_GetTick>
 80041d4:	1bc0      	subs	r0, r0, r7
 80041d6:	2802      	cmp	r0, #2
 80041d8:	f67f af4c 	bls.w	8004074 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 80041dc:	2003      	movs	r0, #3
 80041de:	e248      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80041e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041e4:	6813      	ldr	r3, [r2, #0]
 80041e6:	f023 0301 	bic.w	r3, r3, #1
 80041ea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80041ec:	f7fd fa84 	bl	80016f8 <HAL_GetTick>
 80041f0:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80041f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f013 0f02 	tst.w	r3, #2
 80041fc:	f43f af54 	beq.w	80040a8 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004200:	f7fd fa7a 	bl	80016f8 <HAL_GetTick>
 8004204:	1bc0      	subs	r0, r0, r7
 8004206:	2802      	cmp	r0, #2
 8004208:	d9f3      	bls.n	80041f2 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 800420a:	2003      	movs	r0, #3
 800420c:	e231      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800420e:	2e03      	cmp	r6, #3
 8004210:	f47f af55 	bne.w	80040be <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004214:	6863      	ldr	r3, [r4, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8224 	beq.w	8004664 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	f013 0f02 	tst.w	r3, #2
 8004222:	d056      	beq.n	80042d2 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004224:	2d04      	cmp	r5, #4
 8004226:	d03d      	beq.n	80042a4 <HAL_RCC_OscConfig+0x274>
 8004228:	2d0c      	cmp	r5, #12
 800422a:	d039      	beq.n	80042a0 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800422c:	6923      	ldr	r3, [r4, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 808a 	beq.w	8004348 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004238:	6813      	ldr	r3, [r2, #0]
 800423a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004240:	f7fd fa5a 	bl	80016f8 <HAL_GetTick>
 8004244:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004250:	d136      	bne.n	80042c0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004252:	f7fd fa51 	bl	80016f8 <HAL_GetTick>
 8004256:	1b80      	subs	r0, r0, r6
 8004258:	2802      	cmp	r0, #2
 800425a:	d9f4      	bls.n	8004246 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 800425c:	2003      	movs	r0, #3
 800425e:	e208      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004260:	6813      	ldr	r3, [r2, #0]
 8004262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004266:	6013      	str	r3, [r2, #0]
}
 8004268:	e744      	b.n	80040f4 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800426a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004274:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800427c:	601a      	str	r2, [r3, #0]
}
 800427e:	e739      	b.n	80040f4 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8004280:	f7fd fa3a 	bl	80016f8 <HAL_GetTick>
 8004284:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004290:	d0c4      	beq.n	800421c <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004292:	f7fd fa31 	bl	80016f8 <HAL_GetTick>
 8004296:	1bc0      	subs	r0, r0, r7
 8004298:	2864      	cmp	r0, #100	; 0x64
 800429a:	d9f4      	bls.n	8004286 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 800429c:	2003      	movs	r0, #3
 800429e:	e1e8      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042a0:	2e02      	cmp	r6, #2
 80042a2:	d1c3      	bne.n	800422c <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042a4:	6923      	ldr	r3, [r4, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 81de 	beq.w	8004668 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ac:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80042ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042b2:	6853      	ldr	r3, [r2, #4]
 80042b4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80042b8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80042bc:	6053      	str	r3, [r2, #4]
}
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c0:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80042c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042c6:	6853      	ldr	r3, [r2, #4]
 80042c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80042cc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80042d0:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	f013 0f08 	tst.w	r3, #8
 80042d8:	d07e      	beq.n	80043d8 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042da:	69a3      	ldr	r3, [r4, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d062      	beq.n	80043a6 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 80042e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80042e8:	69e1      	ldr	r1, [r4, #28]
 80042ea:	f003 0210 	and.w	r2, r3, #16
 80042ee:	4291      	cmp	r1, r2
 80042f0:	d011      	beq.n	8004316 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80042f2:	f003 0203 	and.w	r2, r3, #3
 80042f6:	2a02      	cmp	r2, #2
 80042f8:	f000 81b8 	beq.w	800466c <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80042fc:	f013 0f01 	tst.w	r3, #1
 8004300:	d138      	bne.n	8004374 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004306:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800430a:	f023 0310 	bic.w	r3, r3, #16
 800430e:	69e1      	ldr	r1, [r4, #28]
 8004310:	430b      	orrs	r3, r1
 8004312:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800431a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004326:	f7fd f9e7 	bl	80016f8 <HAL_GetTick>
 800432a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800432c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004334:	f013 0f02 	tst.w	r3, #2
 8004338:	d14e      	bne.n	80043d8 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800433a:	f7fd f9dd 	bl	80016f8 <HAL_GetTick>
 800433e:	1b80      	subs	r0, r0, r6
 8004340:	2811      	cmp	r0, #17
 8004342:	d9f3      	bls.n	800432c <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8004344:	2003      	movs	r0, #3
 8004346:	e194      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800434c:	6813      	ldr	r3, [r2, #0]
 800434e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004352:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004354:	f7fd f9d0 	bl	80016f8 <HAL_GetTick>
 8004358:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800435a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004364:	d0b5      	beq.n	80042d2 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004366:	f7fd f9c7 	bl	80016f8 <HAL_GetTick>
 800436a:	1b80      	subs	r0, r0, r6
 800436c:	2802      	cmp	r0, #2
 800436e:	d9f4      	bls.n	800435a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8004370:	2003      	movs	r0, #3
 8004372:	e17e      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004378:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8004384:	f7fd f9b8 	bl	80016f8 <HAL_GetTick>
 8004388:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800438a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004392:	f013 0f02 	tst.w	r3, #2
 8004396:	d0b4      	beq.n	8004302 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004398:	f7fd f9ae 	bl	80016f8 <HAL_GetTick>
 800439c:	1b80      	subs	r0, r0, r6
 800439e:	2811      	cmp	r0, #17
 80043a0:	d9f3      	bls.n	800438a <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 80043a2:	2003      	movs	r0, #3
 80043a4:	e165      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80043a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043aa:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80043b6:	f7fd f99f 	bl	80016f8 <HAL_GetTick>
 80043ba:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80043bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c4:	f013 0f02 	tst.w	r3, #2
 80043c8:	d006      	beq.n	80043d8 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ca:	f7fd f995 	bl	80016f8 <HAL_GetTick>
 80043ce:	1b80      	subs	r0, r0, r6
 80043d0:	2811      	cmp	r0, #17
 80043d2:	d9f3      	bls.n	80043bc <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 80043d4:	2003      	movs	r0, #3
 80043d6:	e14c      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	f013 0f04 	tst.w	r3, #4
 80043de:	f000 80b8 	beq.w	8004552 <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80043e2:	4b22      	ldr	r3, [pc, #136]	; (800446c <HAL_RCC_OscConfig+0x43c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80043ea:	d110      	bne.n	800440e <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 80043ec:	f7ff fc86 	bl	8003cfc <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80043f0:	f7fd f982 	bl	80016f8 <HAL_GetTick>
 80043f4:	4606      	mov	r6, r0
 80043f6:	4b1d      	ldr	r3, [pc, #116]	; (800446c <HAL_RCC_OscConfig+0x43c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80043fe:	d106      	bne.n	800440e <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004400:	f7fd f97a 	bl	80016f8 <HAL_GetTick>
 8004404:	1b80      	subs	r0, r0, r6
 8004406:	2802      	cmp	r0, #2
 8004408:	d9f5      	bls.n	80043f6 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 800440a:	2003      	movs	r0, #3
 800440c:	e131      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800440e:	68e3      	ldr	r3, [r4, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d068      	beq.n	80044e6 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004414:	2b85      	cmp	r3, #133	; 0x85
 8004416:	d001      	beq.n	800441c <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004418:	2b05      	cmp	r3, #5
 800441a:	d107      	bne.n	800442c <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800441c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004420:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004424:	f043 0304 	orr.w	r3, r3, #4
 8004428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800442c:	f7fd f964 	bl	80016f8 <HAL_GetTick>
 8004430:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004436:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f013 0f02 	tst.w	r3, #2
 800444e:	d10f      	bne.n	8004470 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004450:	f7fd f952 	bl	80016f8 <HAL_GetTick>
 8004454:	1b80      	subs	r0, r0, r6
 8004456:	f241 3388 	movw	r3, #5000	; 0x1388
 800445a:	4298      	cmp	r0, r3
 800445c:	d9f1      	bls.n	8004442 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 800445e:	2003      	movs	r0, #3
 8004460:	e107      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
 8004462:	bf00      	nop
 8004464:	20000074 	.word	0x20000074
 8004468:	20000078 	.word	0x20000078
 800446c:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004470:	68e3      	ldr	r3, [r4, #12]
 8004472:	2b81      	cmp	r3, #129	; 0x81
 8004474:	d001      	beq.n	800447a <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004476:	2b85      	cmp	r3, #133	; 0x85
 8004478:	d11a      	bne.n	80044b0 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 800447a:	f7fd f93d 	bl	80016f8 <HAL_GetTick>
 800447e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004480:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004484:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004498:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800449c:	d159      	bne.n	8004552 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449e:	f7fd f92b 	bl	80016f8 <HAL_GetTick>
 80044a2:	1b80      	subs	r0, r0, r6
 80044a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80044a8:	4298      	cmp	r0, r3
 80044aa:	d9f1      	bls.n	8004490 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 80044ac:	2003      	movs	r0, #3
 80044ae:	e0e0      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 80044b0:	f7fd f922 	bl	80016f8 <HAL_GetTick>
 80044b4:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80044b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80044be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ce:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80044d2:	d03e      	beq.n	8004552 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fd f910 	bl	80016f8 <HAL_GetTick>
 80044d8:	1b80      	subs	r0, r0, r6
 80044da:	f241 3388 	movw	r3, #5000	; 0x1388
 80044de:	4298      	cmp	r0, r3
 80044e0:	d9f1      	bls.n	80044c6 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 80044e2:	2003      	movs	r0, #3
 80044e4:	e0c5      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80044e6:	f7fd f907 	bl	80016f8 <HAL_GetTick>
 80044ea:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80044ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80044f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004504:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004508:	d008      	beq.n	800451c <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450a:	f7fd f8f5 	bl	80016f8 <HAL_GetTick>
 800450e:	1b80      	subs	r0, r0, r6
 8004510:	f241 3388 	movw	r3, #5000	; 0x1388
 8004514:	4298      	cmp	r0, r3
 8004516:	d9f1      	bls.n	80044fc <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8004518:	2003      	movs	r0, #3
 800451a:	e0aa      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 800451c:	f7fd f8ec 	bl	80016f8 <HAL_GetTick>
 8004520:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004526:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800452a:	f023 0301 	bic.w	r3, r3, #1
 800452e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453a:	f013 0f02 	tst.w	r3, #2
 800453e:	d008      	beq.n	8004552 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fd f8da 	bl	80016f8 <HAL_GetTick>
 8004544:	1b80      	subs	r0, r0, r6
 8004546:	f241 3388 	movw	r3, #5000	; 0x1388
 800454a:	4298      	cmp	r0, r3
 800454c:	d9f1      	bls.n	8004532 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 800454e:	2003      	movs	r0, #3
 8004550:	e08f      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004552:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 808b 	beq.w	8004670 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800455a:	2d0c      	cmp	r5, #12
 800455c:	d060      	beq.n	8004620 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800455e:	2b02      	cmp	r3, #2
 8004560:	d016      	beq.n	8004590 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004566:	6813      	ldr	r3, [r2, #0]
 8004568:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800456c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800456e:	f7fd f8c3 	bl	80016f8 <HAL_GetTick>
 8004572:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800457e:	d148      	bne.n	8004612 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004584:	68d1      	ldr	r1, [r2, #12]
 8004586:	4b41      	ldr	r3, [pc, #260]	; (800468c <HAL_RCC_OscConfig+0x65c>)
 8004588:	400b      	ands	r3, r1
 800458a:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800458c:	2000      	movs	r0, #0
 800458e:	e070      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004594:	6813      	ldr	r3, [r2, #0]
 8004596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800459a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800459c:	f7fd f8ac 	bl	80016f8 <HAL_GetTick>
 80045a0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80045ac:	d12a      	bne.n	8004604 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b2:	68d3      	ldr	r3, [r2, #12]
 80045b4:	4936      	ldr	r1, [pc, #216]	; (8004690 <HAL_RCC_OscConfig+0x660>)
 80045b6:	4019      	ands	r1, r3
 80045b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80045bc:	4303      	orrs	r3, r0
 80045be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80045c0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80045c4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80045c6:	4303      	orrs	r3, r0
 80045c8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80045ca:	4303      	orrs	r3, r0
 80045cc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80045ce:	4303      	orrs	r3, r0
 80045d0:	4319      	orrs	r1, r3
 80045d2:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80045d4:	6813      	ldr	r3, [r2, #0]
 80045d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045da:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045dc:	68d3      	ldr	r3, [r2, #12]
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e2:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80045e4:	f7fd f888 	bl	80016f8 <HAL_GetTick>
 80045e8:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80045ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80045f4:	d13e      	bne.n	8004674 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f6:	f7fd f87f 	bl	80016f8 <HAL_GetTick>
 80045fa:	1b00      	subs	r0, r0, r4
 80045fc:	280a      	cmp	r0, #10
 80045fe:	d9f4      	bls.n	80045ea <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8004600:	2003      	movs	r0, #3
 8004602:	e036      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004604:	f7fd f878 	bl	80016f8 <HAL_GetTick>
 8004608:	1b40      	subs	r0, r0, r5
 800460a:	280a      	cmp	r0, #10
 800460c:	d9c9      	bls.n	80045a2 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 800460e:	2003      	movs	r0, #3
 8004610:	e02f      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004612:	f7fd f871 	bl	80016f8 <HAL_GetTick>
 8004616:	1b00      	subs	r0, r0, r4
 8004618:	280a      	cmp	r0, #10
 800461a:	d9ab      	bls.n	8004574 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 800461c:	2003      	movs	r0, #3
 800461e:	e028      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004620:	2b01      	cmp	r3, #1
 8004622:	d029      	beq.n	8004678 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8004624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004628:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800462a:	f003 0103 	and.w	r1, r3, #3
 800462e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004630:	4291      	cmp	r1, r2
 8004632:	d123      	bne.n	800467c <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004634:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800463a:	428a      	cmp	r2, r1
 800463c:	d120      	bne.n	8004680 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800463e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004642:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004644:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004648:	d11c      	bne.n	8004684 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800464a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800464e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004650:	4293      	cmp	r3, r2
 8004652:	d119      	bne.n	8004688 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8004654:	2000      	movs	r0, #0
 8004656:	e00c      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8004658:	2001      	movs	r0, #1
}
 800465a:	4770      	bx	lr
        return HAL_ERROR;
 800465c:	2001      	movs	r0, #1
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8004660:	2001      	movs	r0, #1
 8004662:	e006      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004664:	2001      	movs	r0, #1
 8004666:	e004      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004668:	2001      	movs	r0, #1
 800466a:	e002      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800466c:	2001      	movs	r0, #1
 800466e:	e000      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8004670:	2000      	movs	r0, #0
}
 8004672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8004674:	2000      	movs	r0, #0
 8004676:	e7fc      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004678:	2001      	movs	r0, #1
 800467a:	e7fa      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800467c:	2001      	movs	r0, #1
 800467e:	e7f8      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
 8004680:	2001      	movs	r0, #1
 8004682:	e7f6      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
 8004684:	2001      	movs	r0, #1
 8004686:	e7f4      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
 8004688:	2001      	movs	r0, #1
 800468a:	e7f2      	b.n	8004672 <HAL_RCC_OscConfig+0x642>
 800468c:	eefefffc 	.word	0xeefefffc
 8004690:	11c1808c 	.word	0x11c1808c

08004694 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004694:	2800      	cmp	r0, #0
 8004696:	f000 8127 	beq.w	80048e8 <HAL_RCC_ClockConfig+0x254>
{
 800469a:	b570      	push	{r4, r5, r6, lr}
 800469c:	460c      	mov	r4, r1
 800469e:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a0:	4b93      	ldr	r3, [pc, #588]	; (80048f0 <HAL_RCC_ClockConfig+0x25c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	428b      	cmp	r3, r1
 80046aa:	d32d      	bcc.n	8004708 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	f013 0f02 	tst.w	r3, #2
 80046b2:	d13f      	bne.n	8004734 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	f013 0f20 	tst.w	r3, #32
 80046ba:	d153      	bne.n	8004764 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	f013 0f40 	tst.w	r3, #64	; 0x40
 80046c2:	d16a      	bne.n	800479a <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	f013 0f04 	tst.w	r3, #4
 80046ca:	f040 8083 	bne.w	80047d4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ce:	682b      	ldr	r3, [r5, #0]
 80046d0:	f013 0f08 	tst.w	r3, #8
 80046d4:	f040 8097 	bne.w	8004806 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	f013 0f01 	tst.w	r3, #1
 80046de:	f000 80de 	beq.w	800489e <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e2:	686b      	ldr	r3, [r5, #4]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	f000 80a8 	beq.w	800483a <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	f000 80ad 	beq.w	800484a <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f040 80b2 	bne.w	800485a <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80046f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	f012 0f02 	tst.w	r2, #2
 8004700:	f040 80b1 	bne.w	8004866 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004704:	2001      	movs	r0, #1
 8004706:	e0ee      	b.n	80048e6 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004708:	4a79      	ldr	r2, [pc, #484]	; (80048f0 <HAL_RCC_ClockConfig+0x25c>)
 800470a:	6813      	ldr	r3, [r2, #0]
 800470c:	f023 0307 	bic.w	r3, r3, #7
 8004710:	430b      	orrs	r3, r1
 8004712:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004714:	f7fc fff0 	bl	80016f8 <HAL_GetTick>
 8004718:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	4b75      	ldr	r3, [pc, #468]	; (80048f0 <HAL_RCC_ClockConfig+0x25c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	42a3      	cmp	r3, r4
 8004724:	d0c2      	beq.n	80046ac <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004726:	f7fc ffe7 	bl	80016f8 <HAL_GetTick>
 800472a:	1b80      	subs	r0, r0, r6
 800472c:	2802      	cmp	r0, #2
 800472e:	d9f4      	bls.n	800471a <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8004730:	2003      	movs	r0, #3
 8004732:	e0d8      	b.n	80048e6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004734:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800473a:	688a      	ldr	r2, [r1, #8]
 800473c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004740:	4313      	orrs	r3, r2
 8004742:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004744:	f7fc ffd8 	bl	80016f8 <HAL_GetTick>
 8004748:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800474a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004754:	d1ae      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004756:	f7fc ffcf 	bl	80016f8 <HAL_GetTick>
 800475a:	1b80      	subs	r0, r0, r6
 800475c:	2802      	cmp	r0, #2
 800475e:	d9f4      	bls.n	800474a <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8004760:	2003      	movs	r0, #3
 8004762:	e0c0      	b.n	80048e6 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004764:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800476a:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 800476e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004778:	f7fc ffbe 	bl	80016f8 <HAL_GetTick>
 800477c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800477e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004782:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004786:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800478a:	d197      	bne.n	80046bc <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800478c:	f7fc ffb4 	bl	80016f8 <HAL_GetTick>
 8004790:	1b80      	subs	r0, r0, r6
 8004792:	2802      	cmp	r0, #2
 8004794:	d9f3      	bls.n	800477e <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8004796:	2003      	movs	r0, #3
 8004798:	e0a5      	b.n	80048e6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800479a:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800479c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047a0:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80047a4:	f023 030f 	bic.w	r3, r3, #15
 80047a8:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80047ac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80047b0:	f7fc ffa2 	bl	80016f8 <HAL_GetTick>
 80047b4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80047b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80047c2:	f47f af7f 	bne.w	80046c4 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047c6:	f7fc ff97 	bl	80016f8 <HAL_GetTick>
 80047ca:	1b80      	subs	r0, r0, r6
 80047cc:	2802      	cmp	r0, #2
 80047ce:	d9f2      	bls.n	80047b6 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80047d0:	2003      	movs	r0, #3
 80047d2:	e088      	b.n	80048e6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80047d4:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80047d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047da:	688a      	ldr	r2, [r1, #8]
 80047dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047e0:	4313      	orrs	r3, r2
 80047e2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80047e4:	f7fc ff88 	bl	80016f8 <HAL_GetTick>
 80047e8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80047ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80047f4:	f47f af6b 	bne.w	80046ce <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047f8:	f7fc ff7e 	bl	80016f8 <HAL_GetTick>
 80047fc:	1b80      	subs	r0, r0, r6
 80047fe:	2802      	cmp	r0, #2
 8004800:	d9f3      	bls.n	80047ea <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8004802:	2003      	movs	r0, #3
 8004804:	e06f      	b.n	80048e6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004806:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800480c:	6893      	ldr	r3, [r2, #8]
 800480e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004812:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004816:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004818:	f7fc ff6e 	bl	80016f8 <HAL_GetTick>
 800481c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800481e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004828:	f47f af56 	bne.w	80046d8 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800482c:	f7fc ff64 	bl	80016f8 <HAL_GetTick>
 8004830:	1b80      	subs	r0, r0, r6
 8004832:	2802      	cmp	r0, #2
 8004834:	d9f3      	bls.n	800481e <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8004836:	2003      	movs	r0, #3
 8004838:	e055      	b.n	80048e6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800483a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004844:	d10f      	bne.n	8004866 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004846:	2001      	movs	r0, #1
 8004848:	e04d      	b.n	80048e6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800484a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004854:	d107      	bne.n	8004866 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004856:	2001      	movs	r0, #1
 8004858:	e045      	b.n	80048e6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800485a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004864:	d042      	beq.n	80048ec <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004866:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800486a:	688a      	ldr	r2, [r1, #8]
 800486c:	f022 0203 	bic.w	r2, r2, #3
 8004870:	4313      	orrs	r3, r2
 8004872:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004874:	f7fc ff40 	bl	80016f8 <HAL_GetTick>
 8004878:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800487a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004884:	686a      	ldr	r2, [r5, #4]
 8004886:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800488a:	d008      	beq.n	800489e <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488c:	f7fc ff34 	bl	80016f8 <HAL_GetTick>
 8004890:	1b80      	subs	r0, r0, r6
 8004892:	f241 3388 	movw	r3, #5000	; 0x1388
 8004896:	4298      	cmp	r0, r3
 8004898:	d9ef      	bls.n	800487a <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 800489a:	2003      	movs	r0, #3
 800489c:	e023      	b.n	80048e6 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800489e:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <HAL_RCC_ClockConfig+0x25c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	42a3      	cmp	r3, r4
 80048a8:	d915      	bls.n	80048d6 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4a11      	ldr	r2, [pc, #68]	; (80048f0 <HAL_RCC_ClockConfig+0x25c>)
 80048ac:	6813      	ldr	r3, [r2, #0]
 80048ae:	f023 0307 	bic.w	r3, r3, #7
 80048b2:	4323      	orrs	r3, r4
 80048b4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80048b6:	f7fc ff1f 	bl	80016f8 <HAL_GetTick>
 80048ba:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <HAL_RCC_ClockConfig+0x25c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	42a3      	cmp	r3, r4
 80048c6:	d006      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80048c8:	f7fc ff16 	bl	80016f8 <HAL_GetTick>
 80048cc:	1b40      	subs	r0, r0, r5
 80048ce:	2802      	cmp	r0, #2
 80048d0:	d9f4      	bls.n	80048bc <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80048d2:	2003      	movs	r0, #3
 80048d4:	e007      	b.n	80048e6 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80048d6:	f7ff fb9b 	bl	8004010 <HAL_RCC_GetHCLKFreq>
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_RCC_ClockConfig+0x260>)
 80048dc:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80048de:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <HAL_RCC_ClockConfig+0x264>)
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	f7fc ff07 	bl	80016f4 <HAL_InitTick>
}
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80048e8:	2001      	movs	r0, #1
}
 80048ea:	4770      	bx	lr
        return HAL_ERROR;
 80048ec:	2001      	movs	r0, #1
 80048ee:	e7fa      	b.n	80048e6 <HAL_RCC_ClockConfig+0x252>
 80048f0:	58004000 	.word	0x58004000
 80048f4:	20000074 	.word	0x20000074
 80048f8:	20000078 	.word	0x20000078

080048fc <HAL_RCC_GetPCLK1Freq>:
{
 80048fc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80048fe:	f7ff fb87 	bl	8004010 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800490c:	4a02      	ldr	r2, [pc, #8]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800490e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004912:	40d8      	lsrs	r0, r3
 8004914:	bd08      	pop	{r3, pc}
 8004916:	bf00      	nop
 8004918:	080121a4 	.word	0x080121a4

0800491c <HAL_RCC_GetPCLK2Freq>:
{
 800491c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800491e:	f7ff fb77 	bl	8004010 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800492c:	4a02      	ldr	r2, [pc, #8]	; (8004938 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800492e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004932:	40d8      	lsrs	r0, r3
 8004934:	bd08      	pop	{r3, pc}
 8004936:	bf00      	nop
 8004938:	080121a4 	.word	0x080121a4

0800493c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004940:	6803      	ldr	r3, [r0, #0]
 8004942:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004946:	f040 80ab 	bne.w	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800494a:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	f013 0f01 	tst.w	r3, #1
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004954:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800495a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800495e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004962:	b292      	uxth	r2, r2
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	f013 0f02 	tst.w	r3, #2
 8004970:	d00a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004972:	68a2      	ldr	r2, [r4, #8]
 8004974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004978:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800497c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004980:	b292      	uxth	r2, r2
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	f013 0f20 	tst.w	r3, #32
 800498e:	d009      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004990:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004992:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004996:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800499a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80049aa:	d00c      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ac:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80049ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80049b6:	0c02      	lsrs	r2, r0, #16
 80049b8:	0412      	lsls	r2, r2, #16
 80049ba:	ea23 0302 	bic.w	r3, r3, r2
 80049be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80049cc:	d00c      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80049d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049d4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80049d8:	0c02      	lsrs	r2, r0, #16
 80049da:	0412      	lsls	r2, r2, #16
 80049dc:	ea23 0302 	bic.w	r3, r3, r2
 80049e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80049e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80049ee:	d00c      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80049f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80049f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80049fa:	0c02      	lsrs	r2, r0, #16
 80049fc:	0412      	lsls	r2, r2, #16
 80049fe:	ea23 0302 	bic.w	r3, r3, r2
 8004a02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a10:	f040 809e 	bne.w	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a1a:	f040 80aa 	bne.w	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a24:	f040 80b6 	bne.w	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	f013 0f10 	tst.w	r3, #16
 8004a2e:	d00e      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004a30:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a36:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004a44:	68e3      	ldr	r3, [r4, #12]
 8004a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4a:	f000 80b4 	beq.w	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004a54:	d00f      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a56:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a5c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a60:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a6c:	b91b      	cbnz	r3, 8004a76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004a6e:	68cb      	ldr	r3, [r1, #12]
 8004a70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a74:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004a7c:	d00e      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004a80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004a92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a98:	f000 8092 	beq.w	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004aa0:	f7ff f92c 	bl	8003cfc <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004aa4:	f7fc fe28 	bl	80016f8 <HAL_GetTick>
 8004aa8:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004aaa:	4b48      	ldr	r3, [pc, #288]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004ab2:	d106      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab4:	f7fc fe20 	bl	80016f8 <HAL_GetTick>
 8004ab8:	1b40      	subs	r0, r0, r5
 8004aba:	2802      	cmp	r0, #2
 8004abc:	d9f5      	bls.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8004abe:	2503      	movs	r5, #3
 8004ac0:	e000      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004ac2:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8004ac4:	2d00      	cmp	r5, #0
 8004ac6:	f47f af41 	bne.w	800494c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004ad6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d024      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004ae4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ae8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004aec:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004af0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004af4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004af8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004afc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004b00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004b04:	f012 0f02 	tst.w	r2, #2
 8004b08:	d10f      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8004b0a:	2d00      	cmp	r5, #0
 8004b0c:	f47f af1e 	bne.w	800494c <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b10:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004b12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b16:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004b24:	e712      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8004b26:	2200      	movs	r2, #0
 8004b28:	e7ec      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8004b2a:	f7fc fde5 	bl	80016f8 <HAL_GetTick>
 8004b2e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	f013 0f02 	tst.w	r3, #2
 8004b3c:	d1e5      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3e:	f7fc fddb 	bl	80016f8 <HAL_GetTick>
 8004b42:	1b80      	subs	r0, r0, r6
 8004b44:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b48:	4298      	cmp	r0, r3
 8004b4a:	d9f1      	bls.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8004b4c:	2503      	movs	r5, #3
 8004b4e:	e7dc      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b50:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004b52:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004b56:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004b5a:	0919      	lsrs	r1, r3, #4
 8004b5c:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004b60:	ea22 0201 	bic.w	r2, r2, r1
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004b70:	e750      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b72:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004b74:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004b78:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004b7c:	0919      	lsrs	r1, r3, #4
 8004b7e:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004b82:	ea22 0201 	bic.w	r2, r2, r1
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004b92:	e744      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b94:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004b96:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004b9a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004b9e:	0919      	lsrs	r1, r3, #4
 8004ba0:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004ba4:	ea22 0201 	bic.w	r2, r2, r1
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004bb4:	e738      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004bb6:	68cb      	ldr	r3, [r1, #12]
 8004bb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bbc:	60cb      	str	r3, [r1, #12]
 8004bbe:	e746      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004bc0:	68cb      	ldr	r3, [r1, #12]
 8004bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc6:	60cb      	str	r3, [r1, #12]
 8004bc8:	e768      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004bca:	bf00      	nop
 8004bcc:	58000400 	.word	0x58000400

08004bd0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004bd0:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bd2:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8004bd6:	2a01      	cmp	r2, #1
 8004bd8:	d035      	beq.n	8004c46 <HAL_RTC_DeactivateAlarm+0x76>
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004be0:	2202      	movs	r2, #2
 8004be2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004be6:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <HAL_RTC_DeactivateAlarm+0x7c>)
 8004be8:	20ca      	movs	r0, #202	; 0xca
 8004bea:	6250      	str	r0, [r2, #36]	; 0x24
 8004bec:	2053      	movs	r0, #83	; 0x53
 8004bee:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004bf0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004bf4:	d018      	beq.n	8004c28 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004bf6:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <HAL_RTC_DeactivateAlarm+0x7c>)
 8004bf8:	6991      	ldr	r1, [r2, #24]
 8004bfa:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 8004bfe:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004c00:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004c02:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004c06:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004c08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c0a:	f021 0102 	bic.w	r1, r1, #2
 8004c0e:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004c10:	2102      	movs	r1, #2
 8004c12:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c14:	4a0d      	ldr	r2, [pc, #52]	; (8004c4c <HAL_RTC_DeactivateAlarm+0x7c>)
 8004c16:	21ff      	movs	r1, #255	; 0xff
 8004c18:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c20:	2000      	movs	r0, #0
 8004c22:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 8004c26:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004c28:	6991      	ldr	r1, [r2, #24]
 8004c2a:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8004c2e:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004c30:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004c32:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004c36:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004c38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c3a:	f021 0101 	bic.w	r1, r1, #1
 8004c3e:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004c40:	2101      	movs	r1, #1
 8004c42:	65d1      	str	r1, [r2, #92]	; 0x5c
 8004c44:	e7e6      	b.n	8004c14 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 8004c46:	2002      	movs	r0, #2
}
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40002800 	.word	0x40002800

08004c50 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004c54:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004c56:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8004c58:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004c5a:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004c5c:	f015 0f01 	tst.w	r5, #1
 8004c60:	d106      	bne.n	8004c70 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004c62:	f015 0f02 	tst.w	r5, #2
 8004c66:	d109      	bne.n	8004c7c <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004c70:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004c76:	f7fc feef 	bl	8001a58 <HAL_RTC_AlarmAEventCallback>
 8004c7a:	e7f2      	b.n	8004c62 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004c7c:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004c7e:	2202      	movs	r2, #2
 8004c80:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004c82:	4620      	mov	r0, r4
 8004c84:	f000 f9ec 	bl	8005060 <HAL_RTCEx_AlarmBEventCallback>
 8004c88:	e7ee      	b.n	8004c68 <HAL_RTC_AlarmIRQHandler+0x18>
 8004c8a:	bf00      	nop
 8004c8c:	40002800 	.word	0x40002800

08004c90 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004c90:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004c92:	4a0b      	ldr	r2, [pc, #44]	; (8004cc0 <HAL_RTC_WaitForSynchro+0x30>)
 8004c94:	68d3      	ldr	r3, [r2, #12]
 8004c96:	f023 0320 	bic.w	r3, r3, #32
 8004c9a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004c9c:	f7fc fd2c 	bl	80016f8 <HAL_GetTick>
 8004ca0:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004ca2:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <HAL_RTC_WaitForSynchro+0x30>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f013 0f20 	tst.w	r3, #32
 8004caa:	d107      	bne.n	8004cbc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cac:	f7fc fd24 	bl	80016f8 <HAL_GetTick>
 8004cb0:	1b00      	subs	r0, r0, r4
 8004cb2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004cb6:	d9f4      	bls.n	8004ca2 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8004cb8:	2003      	movs	r0, #3
 8004cba:	e000      	b.n	8004cbe <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004cbc:	2000      	movs	r0, #0
}
 8004cbe:	bd10      	pop	{r4, pc}
 8004cc0:	40002800 	.word	0x40002800

08004cc4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004cc4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004cc6:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <RTC_EnterInitMode+0x48>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004cce:	d002      	beq.n	8004cd6 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8004cd0:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}
 8004cd6:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004cd8:	4a0c      	ldr	r2, [pc, #48]	; (8004d0c <RTC_EnterInitMode+0x48>)
 8004cda:	68d3      	ldr	r3, [r2, #12]
 8004cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce0:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8004ce2:	f7fc fd09 	bl	80016f8 <HAL_GetTick>
 8004ce6:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004ce8:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <RTC_EnterInitMode+0x48>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004cf2:	d1ee      	bne.n	8004cd2 <RTC_EnterInitMode+0xe>
 8004cf4:	2c03      	cmp	r4, #3
 8004cf6:	d0ec      	beq.n	8004cd2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004cf8:	f7fc fcfe 	bl	80016f8 <HAL_GetTick>
 8004cfc:	1b43      	subs	r3, r0, r5
 8004cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d02:	d9f2      	bls.n	8004cea <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d04:	2403      	movs	r4, #3
 8004d06:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8004d0a:	e7ee      	b.n	8004cea <RTC_EnterInitMode+0x26>
 8004d0c:	40002800 	.word	0x40002800

08004d10 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d10:	b510      	push	{r4, lr}
 8004d12:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004d14:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <RTC_ExitInitMode+0x48>)
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d1c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	f013 0f20 	tst.w	r3, #32
 8004d24:	d106      	bne.n	8004d34 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d26:	f7ff ffb3 	bl	8004c90 <HAL_RTC_WaitForSynchro>
 8004d2a:	b198      	cbz	r0, 8004d54 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d2c:	2003      	movs	r0, #3
 8004d2e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004d32:	e00f      	b.n	8004d54 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004d34:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <RTC_ExitInitMode+0x48>)
 8004d36:	6993      	ldr	r3, [r2, #24]
 8004d38:	f023 0320 	bic.w	r3, r3, #32
 8004d3c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d3e:	f7ff ffa7 	bl	8004c90 <HAL_RTC_WaitForSynchro>
 8004d42:	b110      	cbz	r0, 8004d4a <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d44:	2003      	movs	r0, #3
 8004d46:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004d4a:	4a03      	ldr	r2, [pc, #12]	; (8004d58 <RTC_ExitInitMode+0x48>)
 8004d4c:	6993      	ldr	r3, [r2, #24]
 8004d4e:	f043 0320 	orr.w	r3, r3, #32
 8004d52:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8004d54:	bd10      	pop	{r4, pc}
 8004d56:	bf00      	nop
 8004d58:	40002800 	.word	0x40002800

08004d5c <HAL_RTC_Init>:
  if (hrtc != NULL)
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d052      	beq.n	8004e06 <HAL_RTC_Init+0xaa>
{
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d64:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004d68:	b163      	cbz	r3, 8004d84 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004d70:	4b26      	ldr	r3, [pc, #152]	; (8004e0c <HAL_RTC_Init+0xb0>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f013 0f10 	tst.w	r3, #16
 8004d78:	d009      	beq.n	8004d8e <HAL_RTC_Init+0x32>
      status = HAL_OK;
 8004d7a:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8004d84:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8004d88:	f7fc fb0e 	bl	80013a8 <HAL_RTC_MspInit>
 8004d8c:	e7ed      	b.n	8004d6a <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d8e:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <HAL_RTC_Init+0xb0>)
 8004d90:	22ca      	movs	r2, #202	; 0xca
 8004d92:	625a      	str	r2, [r3, #36]	; 0x24
 8004d94:	2253      	movs	r2, #83	; 0x53
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f7ff ff93 	bl	8004cc4 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8004d9e:	b128      	cbz	r0, 8004dac <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004da0:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <HAL_RTC_Init+0xb0>)
 8004da2:	22ff      	movs	r2, #255	; 0xff
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d1eb      	bne.n	8004d82 <HAL_RTC_Init+0x26>
 8004daa:	e7e7      	b.n	8004d7c <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004dac:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <HAL_RTC_Init+0xb0>)
 8004dae:	699a      	ldr	r2, [r3, #24]
 8004db0:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8004db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db8:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004dba:	6999      	ldr	r1, [r3, #24]
 8004dbc:	6862      	ldr	r2, [r4, #4]
 8004dbe:	6920      	ldr	r0, [r4, #16]
 8004dc0:	4302      	orrs	r2, r0
 8004dc2:	69a0      	ldr	r0, [r4, #24]
 8004dc4:	4302      	orrs	r2, r0
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004dca:	68e2      	ldr	r2, [r4, #12]
 8004dcc:	68a1      	ldr	r1, [r4, #8]
 8004dce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004dd2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8004dda:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ddc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004dde:	4301      	orrs	r1, r0
 8004de0:	430a      	orrs	r2, r1
 8004de2:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8004de4:	4620      	mov	r0, r4
 8004de6:	f7ff ff93 	bl	8004d10 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d1d8      	bne.n	8004da0 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 8004dee:	4907      	ldr	r1, [pc, #28]	; (8004e0c <HAL_RTC_Init+0xb0>)
 8004df0:	698b      	ldr	r3, [r1, #24]
 8004df2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004df6:	6a22      	ldr	r2, [r4, #32]
 8004df8:	69e5      	ldr	r5, [r4, #28]
 8004dfa:	432a      	orrs	r2, r5
 8004dfc:	6965      	ldr	r5, [r4, #20]
 8004dfe:	432a      	orrs	r2, r5
 8004e00:	4313      	orrs	r3, r2
 8004e02:	618b      	str	r3, [r1, #24]
 8004e04:	e7cc      	b.n	8004da0 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e06:	2001      	movs	r0, #1
}
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40002800 	.word	0x40002800

08004e10 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004e10:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8004e12:	e002      	b.n	8004e1a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8004e14:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8004e16:	380a      	subs	r0, #10
 8004e18:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8004e1a:	2809      	cmp	r0, #9
 8004e1c:	d8fa      	bhi.n	8004e14 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	b2db      	uxtb	r3, r3
}
 8004e22:	4318      	orrs	r0, r3
 8004e24:	4770      	bx	lr
	...

08004e28 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8004e28:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	f000 80b0 	beq.w	8004f92 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8004e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e36:	4605      	mov	r5, r0
 8004e38:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e40:	2302      	movs	r3, #2
 8004e42:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8004e46:	4b54      	ldr	r3, [pc, #336]	; (8004f98 <HAL_RTC_SetAlarm_IT+0x170>)
 8004e48:	68de      	ldr	r6, [r3, #12]
 8004e4a:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8004e4e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004e52:	d043      	beq.n	8004edc <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8004e54:	bb12      	cbnz	r2, 8004e9c <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004e5c:	d101      	bne.n	8004e62 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8004e62:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e66:	7820      	ldrb	r0, [r4, #0]
 8004e68:	f7ff ffd2 	bl	8004e10 <RTC_ByteToBcd2>
 8004e6c:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004e6e:	7860      	ldrb	r0, [r4, #1]
 8004e70:	f7ff ffce 	bl	8004e10 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e74:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004e78:	78a0      	ldrb	r0, [r4, #2]
 8004e7a:	f7ff ffc9 	bl	8004e10 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004e7e:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004e80:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004e82:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004e86:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8004e8a:	f7ff ffc1 	bl	8004e10 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004e8e:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004e92:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004e94:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e96:	ea48 0000 	orr.w	r0, r8, r0
 8004e9a:	e020      	b.n	8004ede <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004e9c:	6948      	ldr	r0, [r1, #20]
 8004e9e:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8004ea2:	d009      	beq.n	8004eb8 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8004ea4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004ea8:	d006      	beq.n	8004eb8 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004eaa:	4b3b      	ldr	r3, [pc, #236]	; (8004f98 <HAL_RTC_SetAlarm_IT+0x170>)
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004eb8:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004eba:	7863      	ldrb	r3, [r4, #1]
 8004ebc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ec2:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ec4:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ec6:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ec8:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ecc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ed0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004ed4:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ed6:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ed8:	4318      	orrs	r0, r3
 8004eda:	e000      	b.n	8004ede <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8004edc:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ede:	4b2e      	ldr	r3, [pc, #184]	; (8004f98 <HAL_RTC_SetAlarm_IT+0x170>)
 8004ee0:	22ca      	movs	r2, #202	; 0xca
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24
 8004ee4:	2253      	movs	r2, #83	; 0x53
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004ee8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eee:	d02a      	beq.n	8004f46 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004ef0:	4b29      	ldr	r3, [pc, #164]	; (8004f98 <HAL_RTC_SetAlarm_IT+0x170>)
 8004ef2:	699a      	ldr	r2, [r3, #24]
 8004ef4:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004ef8:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004efa:	2202      	movs	r2, #2
 8004efc:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8004efe:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004f02:	d040      	beq.n	8004f86 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004f04:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <HAL_RTC_SetAlarm_IT+0x170>)
 8004f06:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004f08:	69a2      	ldr	r2, [r4, #24]
 8004f0a:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004f0c:	6862      	ldr	r2, [r4, #4]
 8004f0e:	4b22      	ldr	r3, [pc, #136]	; (8004f98 <HAL_RTC_SetAlarm_IT+0x170>)
 8004f10:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004f12:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004f14:	f042 0202 	orr.w	r2, r2, #2
 8004f18:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004f1a:	699a      	ldr	r2, [r3, #24]
 8004f1c:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8004f20:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004f22:	4a1e      	ldr	r2, [pc, #120]	; (8004f9c <HAL_RTC_SetAlarm_IT+0x174>)
 8004f24:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f30:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <HAL_RTC_SetAlarm_IT+0x170>)
 8004f32:	22ff      	movs	r2, #255	; 0xff
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8004f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004f46:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <HAL_RTC_SetAlarm_IT+0x170>)
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004f4e:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004f50:	2201      	movs	r2, #1
 8004f52:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8004f54:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004f58:	d00f      	beq.n	8004f7a <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8004f5a:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <HAL_RTC_SetAlarm_IT+0x170>)
 8004f5c:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8004f5e:	69a2      	ldr	r2, [r4, #24]
 8004f60:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004f62:	6862      	ldr	r2, [r4, #4]
 8004f64:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <HAL_RTC_SetAlarm_IT+0x170>)
 8004f66:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004f68:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8004f76:	619a      	str	r2, [r3, #24]
 8004f78:	e7d3      	b.n	8004f22 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8004f7a:	69a3      	ldr	r3, [r4, #24]
 8004f7c:	69e2      	ldr	r2, [r4, #28]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	4a05      	ldr	r2, [pc, #20]	; (8004f98 <HAL_RTC_SetAlarm_IT+0x170>)
 8004f82:	6453      	str	r3, [r2, #68]	; 0x44
 8004f84:	e7ed      	b.n	8004f62 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004f86:	69a3      	ldr	r3, [r4, #24]
 8004f88:	69e2      	ldr	r2, [r4, #28]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	4a02      	ldr	r2, [pc, #8]	; (8004f98 <HAL_RTC_SetAlarm_IT+0x170>)
 8004f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f90:	e7bc      	b.n	8004f0c <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8004f92:	2002      	movs	r0, #2
}
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40002800 	.word	0x40002800
 8004f9c:	58000800 	.word	0x58000800

08004fa0 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fa0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d017      	beq.n	8004fd8 <HAL_RTCEx_EnableBypassShadow+0x38>
 8004fa8:	2101      	movs	r1, #1
 8004faa:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fb4:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8004fb6:	22ca      	movs	r2, #202	; 0xca
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8004fba:	2253      	movs	r2, #83	; 0x53
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004fbe:	699a      	ldr	r2, [r3, #24]
 8004fc0:	f042 0220 	orr.w	r2, r2, #32
 8004fc4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fc6:	22ff      	movs	r2, #255	; 0xff
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004fca:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8004fd8:	2002      	movs	r0, #2
}
 8004fda:	4770      	bx	lr
 8004fdc:	40002800 	.word	0x40002800

08004fe0 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fe0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d020      	beq.n	800502a <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8004fe8:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8004fea:	2101      	movs	r1, #1
 8004fec:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ff6:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8004ff8:	22ca      	movs	r2, #202	; 0xca
 8004ffa:	625a      	str	r2, [r3, #36]	; 0x24
 8004ffc:	2253      	movs	r2, #83	; 0x53
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005006:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8005008:	4c0a      	ldr	r4, [pc, #40]	; (8005034 <HAL_RTCEx_SetSSRU_IT+0x54>)
 800500a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800500e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005012:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005016:	22ff      	movs	r2, #255	; 0xff
 8005018:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800501a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800501e:	2300      	movs	r3, #0
 8005020:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005024:	4618      	mov	r0, r3
}
 8005026:	bc10      	pop	{r4}
 8005028:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800502a:	2002      	movs	r0, #2
}
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40002800 	.word	0x40002800
 8005034:	58000800 	.word	0x58000800

08005038 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005038:	b510      	push	{r4, lr}
 800503a:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800503c:	4b07      	ldr	r3, [pc, #28]	; (800505c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800503e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005040:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005044:	d103      	bne.n	800504e <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005046:	2301      	movs	r3, #1
 8005048:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800504c:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 800504e:	4b03      	ldr	r3, [pc, #12]	; (800505c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005050:	2240      	movs	r2, #64	; 0x40
 8005052:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005054:	f7fc fd04 	bl	8001a60 <HAL_RTCEx_SSRUEventCallback>
 8005058:	e7f5      	b.n	8005046 <HAL_RTCEx_SSRUIRQHandler+0xe>
 800505a:	bf00      	nop
 800505c:	40002800 	.word	0x40002800

08005060 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005060:	4770      	bx	lr

08005062 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005062:	0089      	lsls	r1, r1, #2
 8005064:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005068:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800506c:	600a      	str	r2, [r1, #0]
}
 800506e:	4770      	bx	lr

08005070 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005070:	0089      	lsls	r1, r1, #2
 8005072:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005076:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800507a:	6808      	ldr	r0, [r1, #0]
}
 800507c:	4770      	bx	lr
	...

08005080 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005080:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <SUBGHZSPI_Init+0x20>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005088:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800508a:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 800508e:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005090:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005094:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800509c:	601a      	str	r2, [r3, #0]
}
 800509e:	4770      	bx	lr
 80050a0:	58010000 	.word	0x58010000

080050a4 <HAL_SUBGHZ_Init>:
{
 80050a4:	b530      	push	{r4, r5, lr}
 80050a6:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 80050a8:	2800      	cmp	r0, #0
 80050aa:	d058      	beq.n	800515e <HAL_SUBGHZ_Init+0xba>
 80050ac:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 80050ae:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80050b0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80050b4:	b10b      	cbz	r3, 80050ba <HAL_SUBGHZ_Init+0x16>
 80050b6:	2d03      	cmp	r5, #3
 80050b8:	d10b      	bne.n	80050d2 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 80050ba:	2300      	movs	r3, #0
 80050bc:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80050be:	4620      	mov	r0, r4
 80050c0:	f7fc fa28 	bl	8001514 <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 80050c4:	4a27      	ldr	r2, [pc, #156]	; (8005164 <HAL_SUBGHZ_Init+0xc0>)
 80050c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80050ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80050d2:	b185      	cbz	r5, 80050f6 <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80050d4:	4b24      	ldr	r3, [pc, #144]	; (8005168 <HAL_SUBGHZ_Init+0xc4>)
 80050d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050da:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 80050dc:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80050de:	6820      	ldr	r0, [r4, #0]
 80050e0:	f7ff ffce 	bl	8005080 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80050e4:	2301      	movs	r3, #1
 80050e6:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80050ec:	2301      	movs	r3, #1
 80050ee:	71a3      	strb	r3, [r4, #6]
}
 80050f0:	4628      	mov	r0, r5
 80050f2:	b003      	add	sp, #12
 80050f4:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80050f6:	2302      	movs	r3, #2
 80050f8:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80050fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050fe:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005102:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800510a:	4b18      	ldr	r3, [pc, #96]	; (800516c <HAL_SUBGHZ_Init+0xc8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005112:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005116:	2264      	movs	r2, #100	; 0x64
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 800511e:	9b01      	ldr	r3, [sp, #4]
 8005120:	b1d3      	cbz	r3, 8005158 <HAL_SUBGHZ_Init+0xb4>
      count--;
 8005122:	9b01      	ldr	r3, [sp, #4]
 8005124:	3b01      	subs	r3, #1
 8005126:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005130:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005134:	d1f3      	bne.n	800511e <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <HAL_SUBGHZ_Init+0xc4>)
 8005138:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800513c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005140:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800514a:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800514c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005150:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8005152:	2d00      	cmp	r5, #0
 8005154:	d1ca      	bne.n	80050ec <HAL_SUBGHZ_Init+0x48>
 8005156:	e7c2      	b.n	80050de <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005158:	2501      	movs	r5, #1
 800515a:	60a5      	str	r5, [r4, #8]
        break;
 800515c:	e7eb      	b.n	8005136 <HAL_SUBGHZ_Init+0x92>
    return status;
 800515e:	2501      	movs	r5, #1
 8005160:	e7c6      	b.n	80050f0 <HAL_SUBGHZ_Init+0x4c>
 8005162:	bf00      	nop
 8005164:	58000800 	.word	0x58000800
 8005168:	58000400 	.word	0x58000400
 800516c:	20000074 	.word	0x20000074

08005170 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005170:	b082      	sub	sp, #8
 8005172:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005174:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <SUBGHZSPI_Transmit+0x70>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800517c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005180:	2064      	movs	r0, #100	; 0x64
 8005182:	fb00 f303 	mul.w	r3, r0, r3
 8005186:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005188:	9b01      	ldr	r3, [sp, #4]
 800518a:	b14b      	cbz	r3, 80051a0 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800518c:	9b01      	ldr	r3, [sp, #4]
 800518e:	3b01      	subs	r3, #1
 8005190:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005192:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <SUBGHZSPI_Transmit+0x74>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f013 0f02 	tst.w	r3, #2
 800519a:	d0f5      	beq.n	8005188 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800519c:	2000      	movs	r0, #0
 800519e:	e001      	b.n	80051a4 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80051a0:	2001      	movs	r0, #1
 80051a2:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 80051a4:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <SUBGHZSPI_Transmit+0x74>)
 80051a6:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80051a8:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <SUBGHZSPI_Transmit+0x70>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80051b0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80051b4:	2164      	movs	r1, #100	; 0x64
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80051bc:	9b01      	ldr	r3, [sp, #4]
 80051be:	b143      	cbz	r3, 80051d2 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80051c0:	9b01      	ldr	r3, [sp, #4]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80051c6:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <SUBGHZSPI_Transmit+0x74>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f013 0f01 	tst.w	r3, #1
 80051ce:	d0f5      	beq.n	80051bc <SUBGHZSPI_Transmit+0x4c>
 80051d0:	e001      	b.n	80051d6 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80051d2:	2001      	movs	r0, #1
 80051d4:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80051d6:	4b03      	ldr	r3, [pc, #12]	; (80051e4 <SUBGHZSPI_Transmit+0x74>)
 80051d8:	68db      	ldr	r3, [r3, #12]

  return status;
}
 80051da:	b002      	add	sp, #8
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	20000074 	.word	0x20000074
 80051e4:	58010000 	.word	0x58010000

080051e8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80051e8:	b082      	sub	sp, #8
 80051ea:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80051ec:	4b1c      	ldr	r3, [pc, #112]	; (8005260 <SUBGHZSPI_Receive+0x78>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80051f4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80051f8:	2064      	movs	r0, #100	; 0x64
 80051fa:	fb00 f303 	mul.w	r3, r0, r3
 80051fe:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005200:	9b01      	ldr	r3, [sp, #4]
 8005202:	b14b      	cbz	r3, 8005218 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005204:	9b01      	ldr	r3, [sp, #4]
 8005206:	3b01      	subs	r3, #1
 8005208:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800520a:	4b16      	ldr	r3, [pc, #88]	; (8005264 <SUBGHZSPI_Receive+0x7c>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f013 0f02 	tst.w	r3, #2
 8005212:	d0f5      	beq.n	8005200 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005214:	2000      	movs	r0, #0
 8005216:	e001      	b.n	800521c <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005218:	2001      	movs	r0, #1
 800521a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <SUBGHZSPI_Receive+0x7c>)
 800521e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005222:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005226:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <SUBGHZSPI_Receive+0x78>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800522e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005232:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005236:	fb0c f303 	mul.w	r3, ip, r3
 800523a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800523c:	9b01      	ldr	r3, [sp, #4]
 800523e:	b143      	cbz	r3, 8005252 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005240:	9b01      	ldr	r3, [sp, #4]
 8005242:	3b01      	subs	r3, #1
 8005244:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005246:	4b07      	ldr	r3, [pc, #28]	; (8005264 <SUBGHZSPI_Receive+0x7c>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f013 0f01 	tst.w	r3, #1
 800524e:	d0f5      	beq.n	800523c <SUBGHZSPI_Receive+0x54>
 8005250:	e001      	b.n	8005256 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005252:	2001      	movs	r0, #1
 8005254:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005256:	4b03      	ldr	r3, [pc, #12]	; (8005264 <SUBGHZSPI_Receive+0x7c>)
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	700b      	strb	r3, [r1, #0]

  return status;
}
 800525c:	b002      	add	sp, #8
 800525e:	4770      	bx	lr
 8005260:	20000074 	.word	0x20000074
 8005264:	58010000 	.word	0x58010000

08005268 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005268:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <SUBGHZ_WaitOnBusy+0x50>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005272:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8005276:	2264      	movs	r2, #100	; 0x64
 8005278:	fb02 f303 	mul.w	r3, r2, r3
 800527c:	9301      	str	r3, [sp, #4]
 800527e:	e006      	b.n	800528e <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005280:	2302      	movs	r3, #2
 8005282:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8005284:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8005286:	b002      	add	sp, #8
 8005288:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800528a:	4213      	tst	r3, r2
 800528c:	d012      	beq.n	80052b4 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800528e:	4b0b      	ldr	r3, [pc, #44]	; (80052bc <SUBGHZ_WaitOnBusy+0x54>)
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f013 0304 	ands.w	r3, r3, #4
 8005296:	d000      	beq.n	800529a <SUBGHZ_WaitOnBusy+0x32>
 8005298:	2301      	movs	r3, #1
    if (count == 0U)
 800529a:	9a01      	ldr	r2, [sp, #4]
 800529c:	2a00      	cmp	r2, #0
 800529e:	d0ef      	beq.n	8005280 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 80052a0:	9a01      	ldr	r2, [sp, #4]
 80052a2:	3a01      	subs	r2, #1
 80052a4:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80052a6:	4a05      	ldr	r2, [pc, #20]	; (80052bc <SUBGHZ_WaitOnBusy+0x54>)
 80052a8:	6952      	ldr	r2, [r2, #20]
 80052aa:	f012 0202 	ands.w	r2, r2, #2
 80052ae:	d0ec      	beq.n	800528a <SUBGHZ_WaitOnBusy+0x22>
 80052b0:	2201      	movs	r2, #1
 80052b2:	e7ea      	b.n	800528a <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 80052b4:	2000      	movs	r0, #0
 80052b6:	e7e6      	b.n	8005286 <SUBGHZ_WaitOnBusy+0x1e>
 80052b8:	20000074 	.word	0x20000074
 80052bc:	58000400 	.word	0x58000400

080052c0 <SUBGHZ_CheckDeviceReady>:
{
 80052c0:	b500      	push	{lr}
 80052c2:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80052c4:	7903      	ldrb	r3, [r0, #4]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d004      	beq.n	80052d4 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80052ca:	f7ff ffcd 	bl	8005268 <SUBGHZ_WaitOnBusy>
}
 80052ce:	b003      	add	sp, #12
 80052d0:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 80052d4:	4b0d      	ldr	r3, [pc, #52]	; (800530c <SUBGHZ_CheckDeviceReady+0x4c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80052dc:	f3c3 334f 	ubfx	r3, r3, #13, #16
 80052e0:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80052e2:	4a0b      	ldr	r2, [pc, #44]	; (8005310 <SUBGHZ_CheckDeviceReady+0x50>)
 80052e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 80052f0:	9b01      	ldr	r3, [sp, #4]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 80052f6:	9b01      	ldr	r3, [sp, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f9      	bne.n	80052f0 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80052fc:	4a04      	ldr	r2, [pc, #16]	; (8005310 <SUBGHZ_CheckDeviceReady+0x50>)
 80052fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800530a:	e7de      	b.n	80052ca <SUBGHZ_CheckDeviceReady+0xa>
 800530c:	20000074 	.word	0x20000074
 8005310:	58000400 	.word	0x58000400

08005314 <HAL_SUBGHZ_WriteRegisters>:
{
 8005314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005318:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800531a:	7980      	ldrb	r0, [r0, #6]
 800531c:	fa5f f880 	uxtb.w	r8, r0
 8005320:	f1b8 0f01 	cmp.w	r8, #1
 8005324:	d13e      	bne.n	80053a4 <HAL_SUBGHZ_WriteRegisters+0x90>
 8005326:	460c      	mov	r4, r1
 8005328:	4617      	mov	r7, r2
 800532a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800532c:	796b      	ldrb	r3, [r5, #5]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d03b      	beq.n	80053aa <HAL_SUBGHZ_WriteRegisters+0x96>
 8005332:	2301      	movs	r3, #1
 8005334:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005336:	2302      	movs	r3, #2
 8005338:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800533a:	4628      	mov	r0, r5
 800533c:	f7ff ffc0 	bl	80052c0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005340:	4a1b      	ldr	r2, [pc, #108]	; (80053b0 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005342:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005346:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800534a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800534e:	210d      	movs	r1, #13
 8005350:	4628      	mov	r0, r5
 8005352:	f7ff ff0d 	bl	8005170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005356:	0a21      	lsrs	r1, r4, #8
 8005358:	4628      	mov	r0, r5
 800535a:	f7ff ff09 	bl	8005170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800535e:	b2e1      	uxtb	r1, r4
 8005360:	4628      	mov	r0, r5
 8005362:	f7ff ff05 	bl	8005170 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005366:	2400      	movs	r4, #0
 8005368:	e005      	b.n	8005376 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800536a:	5d39      	ldrb	r1, [r7, r4]
 800536c:	4628      	mov	r0, r5
 800536e:	f7ff feff 	bl	8005170 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005372:	3401      	adds	r4, #1
 8005374:	b2a4      	uxth	r4, r4
 8005376:	42b4      	cmp	r4, r6
 8005378:	d3f7      	bcc.n	800536a <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800537a:	4a0d      	ldr	r2, [pc, #52]	; (80053b0 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800537c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005388:	4628      	mov	r0, r5
 800538a:	f7ff ff6d 	bl	8005268 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800538e:	68ab      	ldr	r3, [r5, #8]
 8005390:	b90b      	cbnz	r3, 8005396 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8005392:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005396:	2301      	movs	r3, #1
 8005398:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800539a:	2300      	movs	r3, #0
 800539c:	716b      	strb	r3, [r5, #5]
}
 800539e:	4640      	mov	r0, r8
 80053a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80053a4:	f04f 0802 	mov.w	r8, #2
 80053a8:	e7f9      	b.n	800539e <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 80053aa:	f04f 0802 	mov.w	r8, #2
 80053ae:	e7f6      	b.n	800539e <HAL_SUBGHZ_WriteRegisters+0x8a>
 80053b0:	58000400 	.word	0x58000400

080053b4 <HAL_SUBGHZ_ReadRegisters>:
{
 80053b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053b8:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80053ba:	7980      	ldrb	r0, [r0, #6]
 80053bc:	fa5f f880 	uxtb.w	r8, r0
 80053c0:	f1b8 0f01 	cmp.w	r8, #1
 80053c4:	d141      	bne.n	800544a <HAL_SUBGHZ_ReadRegisters+0x96>
 80053c6:	460c      	mov	r4, r1
 80053c8:	4615      	mov	r5, r2
 80053ca:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80053cc:	7973      	ldrb	r3, [r6, #5]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d03e      	beq.n	8005450 <HAL_SUBGHZ_ReadRegisters+0x9c>
 80053d2:	2301      	movs	r3, #1
 80053d4:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80053d6:	4630      	mov	r0, r6
 80053d8:	f7ff ff72 	bl	80052c0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80053dc:	4a1e      	ldr	r2, [pc, #120]	; (8005458 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80053de:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80053ea:	211d      	movs	r1, #29
 80053ec:	4630      	mov	r0, r6
 80053ee:	f7ff febf 	bl	8005170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80053f2:	0a21      	lsrs	r1, r4, #8
 80053f4:	4630      	mov	r0, r6
 80053f6:	f7ff febb 	bl	8005170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80053fa:	b2e1      	uxtb	r1, r4
 80053fc:	4630      	mov	r0, r6
 80053fe:	f7ff feb7 	bl	8005170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005402:	2100      	movs	r1, #0
 8005404:	4630      	mov	r0, r6
 8005406:	f7ff feb3 	bl	8005170 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800540a:	2400      	movs	r4, #0
 800540c:	e006      	b.n	800541c <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800540e:	4629      	mov	r1, r5
 8005410:	4630      	mov	r0, r6
 8005412:	f7ff fee9 	bl	80051e8 <SUBGHZSPI_Receive>
      pData++;
 8005416:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005418:	3401      	adds	r4, #1
 800541a:	b2a4      	uxth	r4, r4
 800541c:	42bc      	cmp	r4, r7
 800541e:	d3f6      	bcc.n	800540e <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005420:	4a0d      	ldr	r2, [pc, #52]	; (8005458 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8005422:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800542e:	4630      	mov	r0, r6
 8005430:	f7ff ff1a 	bl	8005268 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005434:	68b3      	ldr	r3, [r6, #8]
 8005436:	b90b      	cbnz	r3, 800543c <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8005438:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800543c:	2301      	movs	r3, #1
 800543e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005440:	2300      	movs	r3, #0
 8005442:	7173      	strb	r3, [r6, #5]
}
 8005444:	4640      	mov	r0, r8
 8005446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800544a:	f04f 0802 	mov.w	r8, #2
 800544e:	e7f9      	b.n	8005444 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8005450:	f04f 0802 	mov.w	r8, #2
 8005454:	e7f6      	b.n	8005444 <HAL_SUBGHZ_ReadRegisters+0x90>
 8005456:	bf00      	nop
 8005458:	58000400 	.word	0x58000400

0800545c <HAL_SUBGHZ_ExecSetCmd>:
{
 800545c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005460:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005462:	7980      	ldrb	r0, [r0, #6]
 8005464:	fa5f f980 	uxtb.w	r9, r0
 8005468:	f1b9 0f01 	cmp.w	r9, #1
 800546c:	d143      	bne.n	80054f6 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 800546e:	4688      	mov	r8, r1
 8005470:	4617      	mov	r7, r2
 8005472:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005474:	796b      	ldrb	r3, [r5, #5]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d040      	beq.n	80054fc <HAL_SUBGHZ_ExecSetCmd+0xa0>
 800547a:	2301      	movs	r3, #1
 800547c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800547e:	4628      	mov	r0, r5
 8005480:	f7ff ff1e 	bl	80052c0 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005484:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005488:	d005      	beq.n	8005496 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 800548a:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 800548e:	d002      	beq.n	8005496 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005490:	2300      	movs	r3, #0
 8005492:	712b      	strb	r3, [r5, #4]
 8005494:	e001      	b.n	800549a <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005496:	2301      	movs	r3, #1
 8005498:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800549a:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800549c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80054a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80054a8:	4641      	mov	r1, r8
 80054aa:	4628      	mov	r0, r5
 80054ac:	f7ff fe60 	bl	8005170 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80054b0:	2400      	movs	r4, #0
 80054b2:	e005      	b.n	80054c0 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80054b4:	5d39      	ldrb	r1, [r7, r4]
 80054b6:	4628      	mov	r0, r5
 80054b8:	f7ff fe5a 	bl	8005170 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80054bc:	3401      	adds	r4, #1
 80054be:	b2a4      	uxth	r4, r4
 80054c0:	42b4      	cmp	r4, r6
 80054c2:	d3f7      	bcc.n	80054b4 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80054c4:	4a0f      	ldr	r2, [pc, #60]	; (8005504 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80054c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80054ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 80054d2:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 80054d6:	d10a      	bne.n	80054ee <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80054d8:	68ab      	ldr	r3, [r5, #8]
 80054da:	b90b      	cbnz	r3, 80054e0 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 80054dc:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80054e0:	2301      	movs	r3, #1
 80054e2:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80054e4:	2300      	movs	r3, #0
 80054e6:	716b      	strb	r3, [r5, #5]
}
 80054e8:	4648      	mov	r0, r9
 80054ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80054ee:	4628      	mov	r0, r5
 80054f0:	f7ff feba 	bl	8005268 <SUBGHZ_WaitOnBusy>
 80054f4:	e7f0      	b.n	80054d8 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 80054f6:	f04f 0902 	mov.w	r9, #2
 80054fa:	e7f5      	b.n	80054e8 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 80054fc:	f04f 0902 	mov.w	r9, #2
 8005500:	e7f2      	b.n	80054e8 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8005502:	bf00      	nop
 8005504:	58000400 	.word	0x58000400

08005508 <HAL_SUBGHZ_ExecGetCmd>:
{
 8005508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800550e:	7980      	ldrb	r0, [r0, #6]
 8005510:	fa5f f880 	uxtb.w	r8, r0
 8005514:	f1b8 0f01 	cmp.w	r8, #1
 8005518:	d139      	bne.n	800558e <HAL_SUBGHZ_ExecGetCmd+0x86>
 800551a:	460c      	mov	r4, r1
 800551c:	4615      	mov	r5, r2
 800551e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005520:	7973      	ldrb	r3, [r6, #5]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d036      	beq.n	8005594 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8005526:	2301      	movs	r3, #1
 8005528:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800552a:	4630      	mov	r0, r6
 800552c:	f7ff fec8 	bl	80052c0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005530:	4a1a      	ldr	r2, [pc, #104]	; (800559c <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005532:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005536:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800553a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800553e:	4621      	mov	r1, r4
 8005540:	4630      	mov	r0, r6
 8005542:	f7ff fe15 	bl	8005170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005546:	2100      	movs	r1, #0
 8005548:	4630      	mov	r0, r6
 800554a:	f7ff fe11 	bl	8005170 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800554e:	2400      	movs	r4, #0
 8005550:	e006      	b.n	8005560 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005552:	4629      	mov	r1, r5
 8005554:	4630      	mov	r0, r6
 8005556:	f7ff fe47 	bl	80051e8 <SUBGHZSPI_Receive>
      pData++;
 800555a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800555c:	3401      	adds	r4, #1
 800555e:	b2a4      	uxth	r4, r4
 8005560:	42bc      	cmp	r4, r7
 8005562:	d3f6      	bcc.n	8005552 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005564:	4a0d      	ldr	r2, [pc, #52]	; (800559c <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005566:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800556a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005572:	4630      	mov	r0, r6
 8005574:	f7ff fe78 	bl	8005268 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005578:	68b3      	ldr	r3, [r6, #8]
 800557a:	b90b      	cbnz	r3, 8005580 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 800557c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005580:	2301      	movs	r3, #1
 8005582:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005584:	2300      	movs	r3, #0
 8005586:	7173      	strb	r3, [r6, #5]
}
 8005588:	4640      	mov	r0, r8
 800558a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800558e:	f04f 0802 	mov.w	r8, #2
 8005592:	e7f9      	b.n	8005588 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8005594:	f04f 0802 	mov.w	r8, #2
 8005598:	e7f6      	b.n	8005588 <HAL_SUBGHZ_ExecGetCmd+0x80>
 800559a:	bf00      	nop
 800559c:	58000400 	.word	0x58000400

080055a0 <HAL_SUBGHZ_IRQHandler>:
{
 80055a0:	b530      	push	{r4, r5, lr}
 80055a2:	b083      	sub	sp, #12
 80055a4:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 80055a6:	2300      	movs	r3, #0
 80055a8:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80055ac:	2302      	movs	r3, #2
 80055ae:	aa01      	add	r2, sp, #4
 80055b0:	2112      	movs	r1, #18
 80055b2:	f7ff ffa9 	bl	8005508 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80055b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 80055ba:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80055be:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80055c2:	2302      	movs	r3, #2
 80055c4:	aa01      	add	r2, sp, #4
 80055c6:	4619      	mov	r1, r3
 80055c8:	4628      	mov	r0, r5
 80055ca:	f7ff ff47 	bl	800545c <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80055ce:	f014 0f01 	tst.w	r4, #1
 80055d2:	d123      	bne.n	800561c <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80055d4:	f014 0f02 	tst.w	r4, #2
 80055d8:	d124      	bne.n	8005624 <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80055da:	f014 0f04 	tst.w	r4, #4
 80055de:	d125      	bne.n	800562c <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80055e0:	f014 0f08 	tst.w	r4, #8
 80055e4:	d126      	bne.n	8005634 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80055e6:	f014 0f10 	tst.w	r4, #16
 80055ea:	d127      	bne.n	800563c <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80055ec:	f014 0f20 	tst.w	r4, #32
 80055f0:	d128      	bne.n	8005644 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80055f2:	f014 0f40 	tst.w	r4, #64	; 0x40
 80055f6:	d129      	bne.n	800564c <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80055f8:	f014 0f80 	tst.w	r4, #128	; 0x80
 80055fc:	d006      	beq.n	800560c <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80055fe:	f414 7f80 	tst.w	r4, #256	; 0x100
 8005602:	d027      	beq.n	8005654 <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005604:	2101      	movs	r1, #1
 8005606:	4628      	mov	r0, r5
 8005608:	f00b fb1e 	bl	8010c48 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800560c:	f414 7f00 	tst.w	r4, #512	; 0x200
 8005610:	d125      	bne.n	800565e <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8005612:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8005616:	d126      	bne.n	8005666 <HAL_SUBGHZ_IRQHandler+0xc6>
}
 8005618:	b003      	add	sp, #12
 800561a:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800561c:	4628      	mov	r0, r5
 800561e:	f00b fafb 	bl	8010c18 <HAL_SUBGHZ_TxCpltCallback>
 8005622:	e7d7      	b.n	80055d4 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005624:	4628      	mov	r0, r5
 8005626:	f00b faff 	bl	8010c28 <HAL_SUBGHZ_RxCpltCallback>
 800562a:	e7d6      	b.n	80055da <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800562c:	4628      	mov	r0, r5
 800562e:	f00b fb2f 	bl	8010c90 <HAL_SUBGHZ_PreambleDetectedCallback>
 8005632:	e7d5      	b.n	80055e0 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005634:	4628      	mov	r0, r5
 8005636:	f00b fb33 	bl	8010ca0 <HAL_SUBGHZ_SyncWordValidCallback>
 800563a:	e7d4      	b.n	80055e6 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800563c:	4628      	mov	r0, r5
 800563e:	f00b fb37 	bl	8010cb0 <HAL_SUBGHZ_HeaderValidCallback>
 8005642:	e7d3      	b.n	80055ec <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005644:	4628      	mov	r0, r5
 8005646:	f00b fb1b 	bl	8010c80 <HAL_SUBGHZ_HeaderErrorCallback>
 800564a:	e7d2      	b.n	80055f2 <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800564c:	4628      	mov	r0, r5
 800564e:	f00b faf3 	bl	8010c38 <HAL_SUBGHZ_CRCErrorCallback>
 8005652:	e7d1      	b.n	80055f8 <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005654:	2100      	movs	r1, #0
 8005656:	4628      	mov	r0, r5
 8005658:	f00b faf6 	bl	8010c48 <HAL_SUBGHZ_CADStatusCallback>
 800565c:	e7d6      	b.n	800560c <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800565e:	4628      	mov	r0, r5
 8005660:	f00b fb04 	bl	8010c6c <HAL_SUBGHZ_RxTxTimeoutCallback>
 8005664:	e7d5      	b.n	8005612 <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005666:	4628      	mov	r0, r5
 8005668:	f00b fb2a 	bl	8010cc0 <HAL_SUBGHZ_LrFhssHopCallback>
}
 800566c:	e7d4      	b.n	8005618 <HAL_SUBGHZ_IRQHandler+0x78>
	...

08005670 <HAL_SUBGHZ_WriteBuffer>:
{
 8005670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005674:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005676:	7980      	ldrb	r0, [r0, #6]
 8005678:	fa5f f880 	uxtb.w	r8, r0
 800567c:	f1b8 0f01 	cmp.w	r8, #1
 8005680:	d138      	bne.n	80056f4 <HAL_SUBGHZ_WriteBuffer+0x84>
 8005682:	460c      	mov	r4, r1
 8005684:	4617      	mov	r7, r2
 8005686:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005688:	796b      	ldrb	r3, [r5, #5]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d035      	beq.n	80056fa <HAL_SUBGHZ_WriteBuffer+0x8a>
 800568e:	2301      	movs	r3, #1
 8005690:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005692:	4628      	mov	r0, r5
 8005694:	f7ff fe14 	bl	80052c0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005698:	4a19      	ldr	r2, [pc, #100]	; (8005700 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800569a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800569e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80056a6:	210e      	movs	r1, #14
 80056a8:	4628      	mov	r0, r5
 80056aa:	f7ff fd61 	bl	8005170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80056ae:	4621      	mov	r1, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f7ff fd5d 	bl	8005170 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80056b6:	2400      	movs	r4, #0
 80056b8:	e005      	b.n	80056c6 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80056ba:	5d39      	ldrb	r1, [r7, r4]
 80056bc:	4628      	mov	r0, r5
 80056be:	f7ff fd57 	bl	8005170 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80056c2:	3401      	adds	r4, #1
 80056c4:	b2a4      	uxth	r4, r4
 80056c6:	42b4      	cmp	r4, r6
 80056c8:	d3f7      	bcc.n	80056ba <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056ca:	4a0d      	ldr	r2, [pc, #52]	; (8005700 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80056cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80056d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80056d8:	4628      	mov	r0, r5
 80056da:	f7ff fdc5 	bl	8005268 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80056de:	68ab      	ldr	r3, [r5, #8]
 80056e0:	b90b      	cbnz	r3, 80056e6 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 80056e2:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80056e6:	2301      	movs	r3, #1
 80056e8:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80056ea:	2300      	movs	r3, #0
 80056ec:	716b      	strb	r3, [r5, #5]
}
 80056ee:	4640      	mov	r0, r8
 80056f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80056f4:	f04f 0802 	mov.w	r8, #2
 80056f8:	e7f9      	b.n	80056ee <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 80056fa:	f04f 0802 	mov.w	r8, #2
 80056fe:	e7f6      	b.n	80056ee <HAL_SUBGHZ_WriteBuffer+0x7e>
 8005700:	58000400 	.word	0x58000400

08005704 <HAL_SUBGHZ_ReadBuffer>:
{
 8005704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005708:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800570a:	7980      	ldrb	r0, [r0, #6]
 800570c:	fa5f f880 	uxtb.w	r8, r0
 8005710:	f1b8 0f01 	cmp.w	r8, #1
 8005714:	d13d      	bne.n	8005792 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8005716:	460c      	mov	r4, r1
 8005718:	4615      	mov	r5, r2
 800571a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800571c:	7973      	ldrb	r3, [r6, #5]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d03a      	beq.n	8005798 <HAL_SUBGHZ_ReadBuffer+0x94>
 8005722:	2301      	movs	r3, #1
 8005724:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005726:	4630      	mov	r0, r6
 8005728:	f7ff fdca 	bl	80052c0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800572c:	4a1c      	ldr	r2, [pc, #112]	; (80057a0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800572e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005732:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800573a:	211e      	movs	r1, #30
 800573c:	4630      	mov	r0, r6
 800573e:	f7ff fd17 	bl	8005170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005742:	4621      	mov	r1, r4
 8005744:	4630      	mov	r0, r6
 8005746:	f7ff fd13 	bl	8005170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800574a:	2100      	movs	r1, #0
 800574c:	4630      	mov	r0, r6
 800574e:	f7ff fd0f 	bl	8005170 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005752:	2400      	movs	r4, #0
 8005754:	e006      	b.n	8005764 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005756:	4629      	mov	r1, r5
 8005758:	4630      	mov	r0, r6
 800575a:	f7ff fd45 	bl	80051e8 <SUBGHZSPI_Receive>
      pData++;
 800575e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005760:	3401      	adds	r4, #1
 8005762:	b2a4      	uxth	r4, r4
 8005764:	42bc      	cmp	r4, r7
 8005766:	d3f6      	bcc.n	8005756 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005768:	4a0d      	ldr	r2, [pc, #52]	; (80057a0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800576a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800576e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005776:	4630      	mov	r0, r6
 8005778:	f7ff fd76 	bl	8005268 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800577c:	68b3      	ldr	r3, [r6, #8]
 800577e:	b90b      	cbnz	r3, 8005784 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8005780:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005784:	2301      	movs	r3, #1
 8005786:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005788:	2300      	movs	r3, #0
 800578a:	7173      	strb	r3, [r6, #5]
}
 800578c:	4640      	mov	r0, r8
 800578e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005792:	f04f 0802 	mov.w	r8, #2
 8005796:	e7f9      	b.n	800578c <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8005798:	f04f 0802 	mov.w	r8, #2
 800579c:	e7f6      	b.n	800578c <HAL_SUBGHZ_ReadBuffer+0x88>
 800579e:	bf00      	nop
 80057a0:	58000400 	.word	0x58000400

080057a4 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80057a4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	e852 3f00 	ldrex	r3, [r2]
 80057aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	e842 3100 	strex	r1, r3, [r2]
 80057b2:	2900      	cmp	r1, #0
 80057b4:	d1f6      	bne.n	80057a4 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80057b6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	f102 0308 	add.w	r3, r2, #8
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	3208      	adds	r2, #8
 80057c6:	e842 3100 	strex	r1, r3, [r2]
 80057ca:	2900      	cmp	r1, #0
 80057cc:	d1f3      	bne.n	80057b6 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057ce:	2320      	movs	r3, #32
 80057d0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80057d4:	4770      	bx	lr

080057d6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057d6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	e852 3f00 	ldrex	r3, [r2]
 80057dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	e842 3100 	strex	r1, r3, [r2]
 80057e4:	2900      	cmp	r1, #0
 80057e6:	d1f6      	bne.n	80057d6 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057e8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	f102 0308 	add.w	r3, r2, #8
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057f6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	3208      	adds	r2, #8
 80057fc:	e842 3100 	strex	r1, r3, [r2]
 8005800:	2900      	cmp	r1, #0
 8005802:	d1f1      	bne.n	80057e8 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005804:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005806:	2b01      	cmp	r3, #1
 8005808:	d006      	beq.n	8005818 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800580a:	2320      	movs	r3, #32
 800580c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005810:	2300      	movs	r3, #0
 8005812:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005814:	6743      	str	r3, [r0, #116]	; 0x74
}
 8005816:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005818:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	e852 3f00 	ldrex	r3, [r2]
 800581e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	e842 3100 	strex	r1, r3, [r2]
 8005826:	2900      	cmp	r1, #0
 8005828:	d1f6      	bne.n	8005818 <UART_EndRxTransfer+0x42>
 800582a:	e7ee      	b.n	800580a <UART_EndRxTransfer+0x34>

0800582c <HAL_UART_Transmit_DMA>:
{
 800582c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800582e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005832:	2a20      	cmp	r2, #32
 8005834:	d13d      	bne.n	80058b2 <HAL_UART_Transmit_DMA+0x86>
{
 8005836:	b510      	push	{r4, lr}
 8005838:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800583a:	2900      	cmp	r1, #0
 800583c:	d03b      	beq.n	80058b6 <HAL_UART_Transmit_DMA+0x8a>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d03b      	beq.n	80058ba <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8005842:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005844:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8005848:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584c:	2200      	movs	r2, #0
 800584e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005852:	2221      	movs	r2, #33	; 0x21
 8005854:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 8005858:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800585a:	b1ca      	cbz	r2, 8005890 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800585c:	4918      	ldr	r1, [pc, #96]	; (80058c0 <HAL_UART_Transmit_DMA+0x94>)
 800585e:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005860:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005862:	4918      	ldr	r1, [pc, #96]	; (80058c4 <HAL_UART_Transmit_DMA+0x98>)
 8005864:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005866:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005868:	4917      	ldr	r1, [pc, #92]	; (80058c8 <HAL_UART_Transmit_DMA+0x9c>)
 800586a:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800586c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800586e:	2100      	movs	r1, #0
 8005870:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005872:	6802      	ldr	r2, [r0, #0]
 8005874:	3228      	adds	r2, #40	; 0x28
 8005876:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005878:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800587a:	f7fd fe3d 	bl	80034f8 <HAL_DMA_Start_IT>
 800587e:	b138      	cbz	r0, 8005890 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005880:	2310      	movs	r3, #16
 8005882:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 8005886:	2320      	movs	r3, #32
 8005888:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 800588c:	2001      	movs	r0, #1
 800588e:	e00f      	b.n	80058b0 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	2240      	movs	r2, #64	; 0x40
 8005894:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005896:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	f102 0308 	add.w	r3, r2, #8
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	3208      	adds	r2, #8
 80058a6:	e842 3100 	strex	r1, r3, [r2]
 80058aa:	2900      	cmp	r1, #0
 80058ac:	d1f3      	bne.n	8005896 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 80058ae:	2000      	movs	r0, #0
}
 80058b0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80058b2:	2002      	movs	r0, #2
}
 80058b4:	4770      	bx	lr
      return HAL_ERROR;
 80058b6:	2001      	movs	r0, #1
 80058b8:	e7fa      	b.n	80058b0 <HAL_UART_Transmit_DMA+0x84>
 80058ba:	2001      	movs	r0, #1
 80058bc:	e7f8      	b.n	80058b0 <HAL_UART_Transmit_DMA+0x84>
 80058be:	bf00      	nop
 80058c0:	080058cd 	.word	0x080058cd
 80058c4:	0800593b 	.word	0x0800593b
 80058c8:	08005947 	.word	0x08005947

080058cc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80058cc:	b508      	push	{r3, lr}
 80058ce:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058d0:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f013 0f20 	tst.w	r3, #32
 80058da:	d118      	bne.n	800590e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058e2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	f102 0308 	add.w	r3, r2, #8
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	3208      	adds	r2, #8
 80058f2:	e842 3100 	strex	r1, r3, [r2]
 80058f6:	2900      	cmp	r1, #0
 80058f8:	d1f3      	bne.n	80058e2 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	e852 3f00 	ldrex	r3, [r2]
 8005900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005904:	e842 3100 	strex	r1, r3, [r2]
 8005908:	2900      	cmp	r1, #0
 800590a:	d1f6      	bne.n	80058fa <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800590c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800590e:	f7fc f9e7 	bl	8001ce0 <HAL_UART_TxCpltCallback>
}
 8005912:	e7fb      	b.n	800590c <UART_DMATransmitCplt+0x40>

08005914 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005914:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005916:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	e852 3f00 	ldrex	r3, [r2]
 800591c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	e842 3100 	strex	r1, r3, [r2]
 8005924:	2900      	cmp	r1, #0
 8005926:	d1f6      	bne.n	8005916 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005928:	2320      	movs	r3, #32
 800592a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800592e:	2300      	movs	r3, #0
 8005930:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005932:	f7fc f9d5 	bl	8001ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005936:	bd08      	pop	{r3, pc}

08005938 <HAL_UART_TxHalfCpltCallback>:
}
 8005938:	4770      	bx	lr

0800593a <UART_DMATxHalfCplt>:
{
 800593a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800593c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800593e:	f7ff fffb 	bl	8005938 <HAL_UART_TxHalfCpltCallback>
}
 8005942:	bd08      	pop	{r3, pc}

08005944 <HAL_UART_ErrorCallback>:
}
 8005944:	4770      	bx	lr

08005946 <UART_DMAError>:
{
 8005946:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005948:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800594a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800594e:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f013 0f80 	tst.w	r3, #128	; 0x80
 800595a:	d001      	beq.n	8005960 <UART_DMAError+0x1a>
 800595c:	2a21      	cmp	r2, #33	; 0x21
 800595e:	d010      	beq.n	8005982 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005968:	d001      	beq.n	800596e <UART_DMAError+0x28>
 800596a:	2d22      	cmp	r5, #34	; 0x22
 800596c:	d010      	beq.n	8005990 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800596e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005972:	f043 0310 	orr.w	r3, r3, #16
 8005976:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 800597a:	4620      	mov	r0, r4
 800597c:	f7ff ffe2 	bl	8005944 <HAL_UART_ErrorCallback>
}
 8005980:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005988:	4620      	mov	r0, r4
 800598a:	f7ff ff0b 	bl	80057a4 <UART_EndTxTransfer>
 800598e:	e7e7      	b.n	8005960 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005996:	4620      	mov	r0, r4
 8005998:	f7ff ff1d 	bl	80057d6 <UART_EndRxTransfer>
 800599c:	e7e7      	b.n	800596e <UART_DMAError+0x28>

0800599e <UART_DMAAbortOnError>:
{
 800599e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80059a8:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80059ac:	f7ff ffca 	bl	8005944 <HAL_UART_ErrorCallback>
}
 80059b0:	bd08      	pop	{r3, pc}

080059b2 <HAL_UARTEx_RxEventCallback>:
}
 80059b2:	4770      	bx	lr

080059b4 <HAL_UART_IRQHandler>:
{
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059b8:	6801      	ldr	r1, [r0, #0]
 80059ba:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059bc:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059be:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059c0:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80059c4:	401a      	ands	r2, r3
 80059c6:	d108      	bne.n	80059da <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059c8:	f013 0f20 	tst.w	r3, #32
 80059cc:	d005      	beq.n	80059da <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80059ce:	f010 0f20 	tst.w	r0, #32
 80059d2:	d134      	bne.n	8005a3e <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80059d4:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80059d8:	d131      	bne.n	8005a3e <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 80059da:	b12a      	cbz	r2, 80059e8 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80059dc:	4a99      	ldr	r2, [pc, #612]	; (8005c44 <HAL_UART_IRQHandler+0x290>)
 80059de:	402a      	ands	r2, r5
 80059e0:	d133      	bne.n	8005a4a <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80059e2:	4e99      	ldr	r6, [pc, #612]	; (8005c48 <HAL_UART_IRQHandler+0x294>)
 80059e4:	4230      	tst	r0, r6
 80059e6:	d130      	bne.n	8005a4a <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80059ea:	2a01      	cmp	r2, #1
 80059ec:	f000 80c6 	beq.w	8005b7c <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80059f4:	d003      	beq.n	80059fe <HAL_UART_IRQHandler+0x4a>
 80059f6:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 80059fa:	f040 8165 	bne.w	8005cc8 <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80059fe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a02:	d007      	beq.n	8005a14 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a04:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005a08:	f040 8165 	bne.w	8005cd6 <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a0c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8005a10:	f040 8161 	bne.w	8005cd6 <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a14:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a18:	d003      	beq.n	8005a22 <HAL_UART_IRQHandler+0x6e>
 8005a1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a1e:	f040 8161 	bne.w	8005ce4 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a22:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005a26:	d003      	beq.n	8005a30 <HAL_UART_IRQHandler+0x7c>
 8005a28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005a2c:	f040 815e 	bne.w	8005cec <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a30:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005a34:	d002      	beq.n	8005a3c <HAL_UART_IRQHandler+0x88>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	f2c0 815c 	blt.w	8005cf4 <HAL_UART_IRQHandler+0x340>
}
 8005a3c:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005a3e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0fb      	beq.n	8005a3c <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005a44:	4620      	mov	r0, r4
 8005a46:	4798      	blx	r3
      return;
 8005a48:	e7f8      	b.n	8005a3c <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a4a:	f013 0f01 	tst.w	r3, #1
 8005a4e:	d009      	beq.n	8005a64 <HAL_UART_IRQHandler+0xb0>
 8005a50:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005a54:	d006      	beq.n	8005a64 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a56:	2601      	movs	r6, #1
 8005a58:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a5a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005a5e:	4331      	orrs	r1, r6
 8005a60:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a64:	f013 0f02 	tst.w	r3, #2
 8005a68:	d00b      	beq.n	8005a82 <HAL_UART_IRQHandler+0xce>
 8005a6a:	f015 0f01 	tst.w	r5, #1
 8005a6e:	d008      	beq.n	8005a82 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a70:	6821      	ldr	r1, [r4, #0]
 8005a72:	2602      	movs	r6, #2
 8005a74:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a76:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005a7a:	f041 0104 	orr.w	r1, r1, #4
 8005a7e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a82:	f013 0f04 	tst.w	r3, #4
 8005a86:	d00b      	beq.n	8005aa0 <HAL_UART_IRQHandler+0xec>
 8005a88:	f015 0f01 	tst.w	r5, #1
 8005a8c:	d008      	beq.n	8005aa0 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a8e:	6821      	ldr	r1, [r4, #0]
 8005a90:	2604      	movs	r6, #4
 8005a92:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a94:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005a98:	f041 0102 	orr.w	r1, r1, #2
 8005a9c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005aa0:	f013 0f08 	tst.w	r3, #8
 8005aa4:	d00b      	beq.n	8005abe <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005aa6:	f010 0f20 	tst.w	r0, #32
 8005aaa:	d100      	bne.n	8005aae <HAL_UART_IRQHandler+0xfa>
 8005aac:	b13a      	cbz	r2, 8005abe <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005aae:	6822      	ldr	r2, [r4, #0]
 8005ab0:	2108      	movs	r1, #8
 8005ab2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ab4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005abe:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005ac2:	d00c      	beq.n	8005ade <HAL_UART_IRQHandler+0x12a>
 8005ac4:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005ac8:	d009      	beq.n	8005ade <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aca:	6822      	ldr	r2, [r4, #0]
 8005acc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ad0:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ad2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005ad6:	f042 0220 	orr.w	r2, r2, #32
 8005ada:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ade:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	d0aa      	beq.n	8005a3c <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ae6:	f013 0f20 	tst.w	r3, #32
 8005aea:	d009      	beq.n	8005b00 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005aec:	f010 0f20 	tst.w	r0, #32
 8005af0:	d102      	bne.n	8005af8 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005af2:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005af6:	d003      	beq.n	8005b00 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8005af8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005afa:	b10b      	cbz	r3, 8005b00 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8005afc:	4620      	mov	r0, r4
 8005afe:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005b00:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b0c:	d102      	bne.n	8005b14 <HAL_UART_IRQHandler+0x160>
 8005b0e:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005b12:	d02c      	beq.n	8005b6e <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 8005b14:	4620      	mov	r0, r4
 8005b16:	f7ff fe5e 	bl	80057d6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b22:	d020      	beq.n	8005b66 <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b24:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	f102 0308 	add.w	r3, r2, #8
 8005b2a:	e853 3f00 	ldrex	r3, [r3]
 8005b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	3208      	adds	r2, #8
 8005b34:	e842 3100 	strex	r1, r3, [r2]
 8005b38:	2900      	cmp	r1, #0
 8005b3a:	d1f3      	bne.n	8005b24 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005b3c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005b40:	b16b      	cbz	r3, 8005b5e <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b42:	4a42      	ldr	r2, [pc, #264]	; (8005c4c <HAL_UART_IRQHandler+0x298>)
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b46:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005b4a:	f7fd fd5b 	bl	8003604 <HAL_DMA_Abort_IT>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	f43f af74 	beq.w	8005a3c <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b54:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005b58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005b5a:	4798      	blx	r3
 8005b5c:	e76e      	b.n	8005a3c <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f7ff fef0 	bl	8005944 <HAL_UART_ErrorCallback>
 8005b64:	e76a      	b.n	8005a3c <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005b66:	4620      	mov	r0, r4
 8005b68:	f7ff feec 	bl	8005944 <HAL_UART_ErrorCallback>
 8005b6c:	e766      	b.n	8005a3c <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f7ff fee8 	bl	8005944 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b74:	2300      	movs	r3, #0
 8005b76:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 8005b7a:	e75f      	b.n	8005a3c <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b7c:	f013 0f10 	tst.w	r3, #16
 8005b80:	f43f af36 	beq.w	80059f0 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b84:	f010 0f10 	tst.w	r0, #16
 8005b88:	f43f af32 	beq.w	80059f0 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b98:	d05a      	beq.n	8005c50 <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b9a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005b9e:	6813      	ldr	r3, [r2, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f43f af49 	beq.w	8005a3c <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005baa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005bae:	4299      	cmp	r1, r3
 8005bb0:	f67f af44 	bls.w	8005a3c <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005bb4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bb8:	6813      	ldr	r3, [r2, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f013 0f20 	tst.w	r3, #32
 8005bc0:	d132      	bne.n	8005c28 <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bc2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	e852 3f00 	ldrex	r3, [r2]
 8005bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	e842 3100 	strex	r1, r3, [r2]
 8005bd0:	2900      	cmp	r1, #0
 8005bd2:	d1f6      	bne.n	8005bc2 <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	f102 0308 	add.w	r3, r2, #8
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	3208      	adds	r2, #8
 8005be4:	e842 3100 	strex	r1, r3, [r2]
 8005be8:	2900      	cmp	r1, #0
 8005bea:	d1f3      	bne.n	8005bd4 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	f102 0308 	add.w	r3, r2, #8
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	3208      	adds	r2, #8
 8005bfc:	e842 3100 	strex	r1, r3, [r2]
 8005c00:	2900      	cmp	r1, #0
 8005c02:	d1f3      	bne.n	8005bec <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 8005c04:	2320      	movs	r3, #32
 8005c06:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	e852 3f00 	ldrex	r3, [r2]
 8005c14:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	e842 3100 	strex	r1, r3, [r2]
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	d1f6      	bne.n	8005c0e <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c20:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005c24:	f7fd fcb4 	bl	8003590 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c2c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005c30:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	1ac9      	subs	r1, r1, r3
 8005c38:	b289      	uxth	r1, r1
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f7ff feb9 	bl	80059b2 <HAL_UARTEx_RxEventCallback>
      return;
 8005c40:	e6fc      	b.n	8005a3c <HAL_UART_IRQHandler+0x88>
 8005c42:	bf00      	nop
 8005c44:	10000001 	.word	0x10000001
 8005c48:	04000120 	.word	0x04000120
 8005c4c:	0800599f 	.word	0x0800599f
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c50:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005c54:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	1ac9      	subs	r1, r1, r3
 8005c5c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005c5e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f43f aee9 	beq.w	8005a3c <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 8005c6a:	2900      	cmp	r1, #0
 8005c6c:	f43f aee6 	beq.w	8005a3c <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c70:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	e852 3f00 	ldrex	r3, [r2]
 8005c76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	e842 3000 	strex	r0, r3, [r2]
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d1f6      	bne.n	8005c70 <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c82:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	f102 0308 	add.w	r3, r2, #8
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c90:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	3208      	adds	r2, #8
 8005c96:	e842 3000 	strex	r0, r3, [r2]
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d1f1      	bne.n	8005c82 <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	2320      	movs	r3, #32
 8005ca0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005ca8:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005caa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	e852 3f00 	ldrex	r3, [r2]
 8005cb0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	e842 3000 	strex	r0, r3, [r2]
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d1f6      	bne.n	8005caa <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f7ff fe76 	bl	80059b2 <HAL_UARTEx_RxEventCallback>
      return;
 8005cc6:	e6b9      	b.n	8005a3c <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005cc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ccc:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f000 fe60 	bl	8006994 <HAL_UARTEx_WakeupCallback>
    return;
 8005cd4:	e6b2      	b.n	8005a3c <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8005cd6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f43f aeaf 	beq.w	8005a3c <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8005cde:	4620      	mov	r0, r4
 8005ce0:	4798      	blx	r3
    return;
 8005ce2:	e6ab      	b.n	8005a3c <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f7ff fe15 	bl	8005914 <UART_EndTransmit_IT>
    return;
 8005cea:	e6a7      	b.n	8005a3c <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005cec:	4620      	mov	r0, r4
 8005cee:	f000 fe53 	bl	8006998 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005cf2:	e6a3      	b.n	8005a3c <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f000 fe4e 	bl	8006996 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005cfa:	e69f      	b.n	8005a3c <HAL_UART_IRQHandler+0x88>

08005cfc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005cfc:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8005cfe:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d02:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8005d06:	2a22      	cmp	r2, #34	; 0x22
 8005d08:	d005      	beq.n	8005d16 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d0a:	6802      	ldr	r2, [r0, #0]
 8005d0c:	6993      	ldr	r3, [r2, #24]
 8005d0e:	f043 0308 	orr.w	r3, r3, #8
 8005d12:	6193      	str	r3, [r2, #24]
  }
}
 8005d14:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d16:	6802      	ldr	r2, [r0, #0]
 8005d18:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005d1e:	400b      	ands	r3, r1
 8005d20:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005d22:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005d24:	3301      	adds	r3, #1
 8005d26:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005d28:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005d36:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e9      	bne.n	8005d14 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d40:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	e852 3f00 	ldrex	r3, [r2]
 8005d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	e842 3100 	strex	r1, r3, [r2]
 8005d4e:	2900      	cmp	r1, #0
 8005d50:	d1f6      	bne.n	8005d40 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d52:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	f102 0308 	add.w	r3, r2, #8
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	3208      	adds	r2, #8
 8005d62:	e842 3100 	strex	r1, r3, [r2]
 8005d66:	2900      	cmp	r1, #0
 8005d68:	d1f3      	bne.n	8005d52 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8005d6a:	2320      	movs	r3, #32
 8005d6c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8005d70:	2300      	movs	r3, #0
 8005d72:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d74:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d76:	6803      	ldr	r3, [r0, #0]
 8005d78:	4a16      	ldr	r2, [pc, #88]	; (8005dd4 <UART_RxISR_8BIT+0xd8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00c      	beq.n	8005d98 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005d84:	d008      	beq.n	8005d98 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d86:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	e852 3f00 	ldrex	r3, [r2]
 8005d8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	e842 3100 	strex	r1, r3, [r2]
 8005d94:	2900      	cmp	r1, #0
 8005d96:	d1f6      	bne.n	8005d86 <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d98:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d116      	bne.n	8005dcc <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	e852 3f00 	ldrex	r3, [r2]
 8005da8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	e842 3100 	strex	r1, r3, [r2]
 8005db0:	2900      	cmp	r1, #0
 8005db2:	d1f6      	bne.n	8005da2 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005db4:	6803      	ldr	r3, [r0, #0]
 8005db6:	69da      	ldr	r2, [r3, #28]
 8005db8:	f012 0f10 	tst.w	r2, #16
 8005dbc:	d001      	beq.n	8005dc2 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dbe:	2210      	movs	r2, #16
 8005dc0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dc2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005dc6:	f7ff fdf4 	bl	80059b2 <HAL_UARTEx_RxEventCallback>
 8005dca:	e7a3      	b.n	8005d14 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005dcc:	f7fb ff98 	bl	8001d00 <HAL_UART_RxCpltCallback>
 8005dd0:	e7a0      	b.n	8005d14 <UART_RxISR_8BIT+0x18>
 8005dd2:	bf00      	nop
 8005dd4:	40008000 	.word	0x40008000

08005dd8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005dd8:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005dda:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dde:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8005de2:	2b22      	cmp	r3, #34	; 0x22
 8005de4:	d005      	beq.n	8005df2 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005de6:	6802      	ldr	r2, [r0, #0]
 8005de8:	6993      	ldr	r3, [r2, #24]
 8005dea:	f043 0308 	orr.w	r3, r3, #8
 8005dee:	6193      	str	r3, [r2, #24]
  }
}
 8005df0:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005df2:	6803      	ldr	r3, [r0, #0]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005df6:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8005df8:	4013      	ands	r3, r2
 8005dfa:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8005dfc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005dfe:	3302      	adds	r3, #2
 8005e00:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005e02:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005e10:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1ea      	bne.n	8005df0 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e1a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	e852 3f00 	ldrex	r3, [r2]
 8005e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	e842 3100 	strex	r1, r3, [r2]
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	d1f6      	bne.n	8005e1a <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	f102 0308 	add.w	r3, r2, #8
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	3208      	adds	r2, #8
 8005e3c:	e842 3100 	strex	r1, r3, [r2]
 8005e40:	2900      	cmp	r1, #0
 8005e42:	d1f3      	bne.n	8005e2c <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8005e44:	2320      	movs	r3, #32
 8005e46:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e4e:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e50:	6803      	ldr	r3, [r0, #0]
 8005e52:	4a16      	ldr	r2, [pc, #88]	; (8005eac <UART_RxISR_16BIT+0xd4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00c      	beq.n	8005e72 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005e5e:	d008      	beq.n	8005e72 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e60:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	e852 3f00 	ldrex	r3, [r2]
 8005e66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	e842 3100 	strex	r1, r3, [r2]
 8005e6e:	2900      	cmp	r1, #0
 8005e70:	d1f6      	bne.n	8005e60 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e72:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d116      	bne.n	8005ea6 <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e7c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	e852 3f00 	ldrex	r3, [r2]
 8005e82:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	e842 3100 	strex	r1, r3, [r2]
 8005e8a:	2900      	cmp	r1, #0
 8005e8c:	d1f6      	bne.n	8005e7c <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e8e:	6803      	ldr	r3, [r0, #0]
 8005e90:	69da      	ldr	r2, [r3, #28]
 8005e92:	f012 0f10 	tst.w	r2, #16
 8005e96:	d001      	beq.n	8005e9c <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e98:	2210      	movs	r2, #16
 8005e9a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e9c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005ea0:	f7ff fd87 	bl	80059b2 <HAL_UARTEx_RxEventCallback>
 8005ea4:	e7a4      	b.n	8005df0 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005ea6:	f7fb ff2b 	bl	8001d00 <HAL_UART_RxCpltCallback>
 8005eaa:	e7a1      	b.n	8005df0 <UART_RxISR_16BIT+0x18>
 8005eac:	40008000 	.word	0x40008000

08005eb0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8005eb4:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005eb8:	6803      	ldr	r3, [r0, #0]
 8005eba:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ebc:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ec0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ec4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8005ec8:	2a22      	cmp	r2, #34	; 0x22
 8005eca:	d005      	beq.n	8005ed8 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ecc:	699a      	ldr	r2, [r3, #24]
 8005ece:	f042 0208 	orr.w	r2, r2, #8
 8005ed2:	619a      	str	r2, [r3, #24]
  }
}
 8005ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ed8:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8005eda:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ede:	e008      	b.n	8005ef2 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ee0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d14c      	bne.n	8005f82 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8005ee8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d04e      	beq.n	8005f90 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ef2:	2f00      	cmp	r7, #0
 8005ef4:	f000 809a 	beq.w	800602c <UART_RxISR_8BIT_FIFOEN+0x17c>
 8005ef8:	f015 0f20 	tst.w	r5, #32
 8005efc:	f000 8096 	beq.w	800602c <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f04:	b2f3      	uxtb	r3, r6
 8005f06:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005f08:	400b      	ands	r3, r1
 8005f0a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8005f0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f0e:	3301      	adds	r3, #1
 8005f10:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005f12:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f24:	f015 0f07 	tst.w	r5, #7
 8005f28:	d0de      	beq.n	8005ee8 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f2a:	f015 0f01 	tst.w	r5, #1
 8005f2e:	d009      	beq.n	8005f44 <UART_RxISR_8BIT_FIFOEN+0x94>
 8005f30:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005f34:	d006      	beq.n	8005f44 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f36:	2201      	movs	r2, #1
 8005f38:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f3a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f44:	f015 0f02 	tst.w	r5, #2
 8005f48:	d00b      	beq.n	8005f62 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8005f4a:	f018 0f01 	tst.w	r8, #1
 8005f4e:	d008      	beq.n	8005f62 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	2202      	movs	r2, #2
 8005f54:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f56:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005f5a:	f043 0304 	orr.w	r3, r3, #4
 8005f5e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f62:	f015 0f04 	tst.w	r5, #4
 8005f66:	d0bb      	beq.n	8005ee0 <UART_RxISR_8BIT_FIFOEN+0x30>
 8005f68:	f018 0f01 	tst.w	r8, #1
 8005f6c:	d0b8      	beq.n	8005ee0 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	2204      	movs	r2, #4
 8005f72:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f74:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005f78:	f043 0302 	orr.w	r3, r3, #2
 8005f7c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8005f80:	e7ae      	b.n	8005ee0 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8005f82:	4620      	mov	r0, r4
 8005f84:	f7ff fcde 	bl	8005944 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8005f8e:	e7ab      	b.n	8005ee8 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f90:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	e852 3f00 	ldrex	r3, [r2]
 8005f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	e842 3100 	strex	r1, r3, [r2]
 8005f9e:	2900      	cmp	r1, #0
 8005fa0:	d1f6      	bne.n	8005f90 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fa2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	f102 0308 	add.w	r3, r2, #8
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	3208      	adds	r2, #8
 8005fb6:	e842 3100 	strex	r1, r3, [r2]
 8005fba:	2900      	cmp	r1, #0
 8005fbc:	d1f1      	bne.n	8005fa2 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8005fbe:	2320      	movs	r3, #32
 8005fc0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fc8:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	4a29      	ldr	r2, [pc, #164]	; (8006074 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d003      	beq.n	8005fda <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005fd8:	d106      	bne.n	8005fe8 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fda:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d00d      	beq.n	8005ffc <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f7fb fe8d 	bl	8001d00 <HAL_UART_RxCpltCallback>
 8005fe6:	e784      	b.n	8005ef2 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fe8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	e852 3f00 	ldrex	r3, [r2]
 8005fee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	e842 3100 	strex	r1, r3, [r2]
 8005ff6:	2900      	cmp	r1, #0
 8005ff8:	d1f6      	bne.n	8005fe8 <UART_RxISR_8BIT_FIFOEN+0x138>
 8005ffa:	e7ee      	b.n	8005fda <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006000:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	e852 3f00 	ldrex	r3, [r2]
 8006006:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	e842 3100 	strex	r1, r3, [r2]
 800600e:	2900      	cmp	r1, #0
 8006010:	d1f6      	bne.n	8006000 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	69da      	ldr	r2, [r3, #28]
 8006016:	f012 0f10 	tst.w	r2, #16
 800601a:	d001      	beq.n	8006020 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800601c:	2210      	movs	r2, #16
 800601e:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006020:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006024:	4620      	mov	r0, r4
 8006026:	f7ff fcc4 	bl	80059b2 <HAL_UARTEx_RxEventCallback>
 800602a:	e762      	b.n	8005ef2 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800602c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006030:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006032:	2b00      	cmp	r3, #0
 8006034:	f43f af4e 	beq.w	8005ed4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006038:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800603c:	429a      	cmp	r2, r3
 800603e:	f67f af49 	bls.w	8005ed4 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006042:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	f102 0308 	add.w	r3, r2, #8
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	3208      	adds	r2, #8
 8006052:	e842 3100 	strex	r1, r3, [r2]
 8006056:	2900      	cmp	r1, #0
 8006058:	d1f3      	bne.n	8006042 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 800605a:	4b07      	ldr	r3, [pc, #28]	; (8006078 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 800605c:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800605e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	e852 3f00 	ldrex	r3, [r2]
 8006064:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	e842 3100 	strex	r1, r3, [r2]
 800606c:	2900      	cmp	r1, #0
 800606e:	d1f6      	bne.n	800605e <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8006070:	e730      	b.n	8005ed4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006072:	bf00      	nop
 8006074:	40008000 	.word	0x40008000
 8006078:	08005cfd 	.word	0x08005cfd

0800607c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800607c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006080:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006084:	6803      	ldr	r3, [r0, #0]
 8006086:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006088:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800608c:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006090:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8006094:	2a22      	cmp	r2, #34	; 0x22
 8006096:	d005      	beq.n	80060a4 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	f042 0208 	orr.w	r2, r2, #8
 800609e:	619a      	str	r2, [r3, #24]
  }
}
 80060a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060a4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80060a6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060aa:	e008      	b.n	80060be <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060ac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d14b      	bne.n	800614c <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80060b4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d04d      	beq.n	800615a <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060be:	2f00      	cmp	r7, #0
 80060c0:	f000 8099 	beq.w	80061f6 <UART_RxISR_16BIT_FIFOEN+0x17a>
 80060c4:	f015 0f20 	tst.w	r5, #32
 80060c8:	f000 8095 	beq.w	80061f6 <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060d0:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80060d2:	4033      	ands	r3, r6
 80060d4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80060d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060d8:	3302      	adds	r3, #2
 80060da:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80060dc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3b01      	subs	r3, #1
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80060ee:	f015 0f07 	tst.w	r5, #7
 80060f2:	d0df      	beq.n	80060b4 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060f4:	f015 0f01 	tst.w	r5, #1
 80060f8:	d009      	beq.n	800610e <UART_RxISR_16BIT_FIFOEN+0x92>
 80060fa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80060fe:	d006      	beq.n	800610e <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006100:	2201      	movs	r2, #1
 8006102:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006104:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006108:	4313      	orrs	r3, r2
 800610a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800610e:	f015 0f02 	tst.w	r5, #2
 8006112:	d00b      	beq.n	800612c <UART_RxISR_16BIT_FIFOEN+0xb0>
 8006114:	f018 0f01 	tst.w	r8, #1
 8006118:	d008      	beq.n	800612c <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	2202      	movs	r2, #2
 800611e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006120:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006124:	f043 0304 	orr.w	r3, r3, #4
 8006128:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800612c:	f015 0f04 	tst.w	r5, #4
 8006130:	d0bc      	beq.n	80060ac <UART_RxISR_16BIT_FIFOEN+0x30>
 8006132:	f018 0f01 	tst.w	r8, #1
 8006136:	d0b9      	beq.n	80060ac <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	2204      	movs	r2, #4
 800613c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800613e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006142:	f043 0302 	orr.w	r3, r3, #2
 8006146:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800614a:	e7af      	b.n	80060ac <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800614c:	4620      	mov	r0, r4
 800614e:	f7ff fbf9 	bl	8005944 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006152:	2300      	movs	r3, #0
 8006154:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006158:	e7ac      	b.n	80060b4 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800615a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	e852 3f00 	ldrex	r3, [r2]
 8006160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	e842 3100 	strex	r1, r3, [r2]
 8006168:	2900      	cmp	r1, #0
 800616a:	d1f6      	bne.n	800615a <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800616c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	f102 0308 	add.w	r3, r2, #8
 8006172:	e853 3f00 	ldrex	r3, [r3]
 8006176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800617a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	3208      	adds	r2, #8
 8006180:	e842 3100 	strex	r1, r3, [r2]
 8006184:	2900      	cmp	r1, #0
 8006186:	d1f1      	bne.n	800616c <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8006188:	2320      	movs	r3, #32
 800618a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006192:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	4a29      	ldr	r2, [pc, #164]	; (800623c <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d003      	beq.n	80061a4 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80061a2:	d106      	bne.n	80061b2 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d00d      	beq.n	80061c6 <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 80061aa:	4620      	mov	r0, r4
 80061ac:	f7fb fda8 	bl	8001d00 <HAL_UART_RxCpltCallback>
 80061b0:	e785      	b.n	80060be <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	e852 3f00 	ldrex	r3, [r2]
 80061b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	e842 3100 	strex	r1, r3, [r2]
 80061c0:	2900      	cmp	r1, #0
 80061c2:	d1f6      	bne.n	80061b2 <UART_RxISR_16BIT_FIFOEN+0x136>
 80061c4:	e7ee      	b.n	80061a4 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	2300      	movs	r3, #0
 80061c8:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	e852 3f00 	ldrex	r3, [r2]
 80061d0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	e842 3100 	strex	r1, r3, [r2]
 80061d8:	2900      	cmp	r1, #0
 80061da:	d1f6      	bne.n	80061ca <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	f012 0f10 	tst.w	r2, #16
 80061e4:	d001      	beq.n	80061ea <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061e6:	2210      	movs	r2, #16
 80061e8:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061ea:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80061ee:	4620      	mov	r0, r4
 80061f0:	f7ff fbdf 	bl	80059b2 <HAL_UARTEx_RxEventCallback>
 80061f4:	e763      	b.n	80060be <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80061f6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80061fa:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f43f af4f 	beq.w	80060a0 <UART_RxISR_16BIT_FIFOEN+0x24>
 8006202:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006206:	429a      	cmp	r2, r3
 8006208:	f67f af4a 	bls.w	80060a0 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800620c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	f102 0308 	add.w	r3, r2, #8
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	3208      	adds	r2, #8
 800621c:	e842 3100 	strex	r1, r3, [r2]
 8006220:	2900      	cmp	r1, #0
 8006222:	d1f3      	bne.n	800620c <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8006224:	4b06      	ldr	r3, [pc, #24]	; (8006240 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8006226:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006228:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	e852 3f00 	ldrex	r3, [r2]
 800622e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	e842 3100 	strex	r1, r3, [r2]
 8006236:	2900      	cmp	r1, #0
 8006238:	d1f6      	bne.n	8006228 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 800623a:	e731      	b.n	80060a0 <UART_RxISR_16BIT_FIFOEN+0x24>
 800623c:	40008000 	.word	0x40008000
 8006240:	08005dd9 	.word	0x08005dd9

08006244 <UART_SetConfig>:
{
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006248:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800624a:	6883      	ldr	r3, [r0, #8]
 800624c:	6902      	ldr	r2, [r0, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	6942      	ldr	r2, [r0, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	69c2      	ldr	r2, [r0, #28]
 8006256:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006258:	6808      	ldr	r0, [r1, #0]
 800625a:	4a9d      	ldr	r2, [pc, #628]	; (80064d0 <UART_SetConfig+0x28c>)
 800625c:	4002      	ands	r2, r0
 800625e:	431a      	orrs	r2, r3
 8006260:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006262:	6822      	ldr	r2, [r4, #0]
 8006264:	6853      	ldr	r3, [r2, #4]
 8006266:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800626a:	68e1      	ldr	r1, [r4, #12]
 800626c:	430b      	orrs	r3, r1
 800626e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006270:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	4b97      	ldr	r3, [pc, #604]	; (80064d4 <UART_SetConfig+0x290>)
 8006276:	429a      	cmp	r2, r3
 8006278:	d001      	beq.n	800627e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800627a:	6a23      	ldr	r3, [r4, #32]
 800627c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800627e:	6893      	ldr	r3, [r2, #8]
 8006280:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006284:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006288:	430b      	orrs	r3, r1
 800628a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006290:	f023 030f 	bic.w	r3, r3, #15
 8006294:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006296:	430b      	orrs	r3, r1
 8006298:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	4a8e      	ldr	r2, [pc, #568]	; (80064d8 <UART_SetConfig+0x294>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d01c      	beq.n	80062dc <UART_SetConfig+0x98>
 80062a2:	4a8e      	ldr	r2, [pc, #568]	; (80064dc <UART_SetConfig+0x298>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d031      	beq.n	800630c <UART_SetConfig+0xc8>
 80062a8:	4a8a      	ldr	r2, [pc, #552]	; (80064d4 <UART_SetConfig+0x290>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d04b      	beq.n	8006346 <UART_SetConfig+0x102>
 80062ae:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80062b0:	4988      	ldr	r1, [pc, #544]	; (80064d4 <UART_SetConfig+0x290>)
 80062b2:	428b      	cmp	r3, r1
 80062b4:	d068      	beq.n	8006388 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062b6:	69e0      	ldr	r0, [r4, #28]
 80062b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80062bc:	f000 80a5 	beq.w	800640a <UART_SetConfig+0x1c6>
    switch (clocksource)
 80062c0:	2a08      	cmp	r2, #8
 80062c2:	f200 811f 	bhi.w	8006504 <UART_SetConfig+0x2c0>
 80062c6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80062ca:	00d3      	.short	0x00d3
 80062cc:	00d100f5 	.word	0x00d100f5
 80062d0:	00f8011d 	.word	0x00f8011d
 80062d4:	011d011d 	.word	0x011d011d
 80062d8:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80062dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062e0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80062e4:	f002 0203 	and.w	r2, r2, #3
 80062e8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ec:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 80062f0:	2a03      	cmp	r2, #3
 80062f2:	d809      	bhi.n	8006308 <UART_SetConfig+0xc4>
 80062f4:	e8df f002 	tbb	[pc, r2]
 80062f8:	063c0402 	.word	0x063c0402
 80062fc:	2201      	movs	r2, #1
 80062fe:	e7d7      	b.n	80062b0 <UART_SetConfig+0x6c>
 8006300:	2204      	movs	r2, #4
 8006302:	e7d5      	b.n	80062b0 <UART_SetConfig+0x6c>
 8006304:	2208      	movs	r2, #8
 8006306:	e7d3      	b.n	80062b0 <UART_SetConfig+0x6c>
 8006308:	2210      	movs	r2, #16
 800630a:	e7d1      	b.n	80062b0 <UART_SetConfig+0x6c>
 800630c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006310:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006314:	f002 020c 	and.w	r2, r2, #12
 8006318:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800631c:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8006320:	2a0c      	cmp	r2, #12
 8006322:	d80e      	bhi.n	8006342 <UART_SetConfig+0xfe>
 8006324:	e8df f002 	tbb	[pc, r2]
 8006328:	0d0d0d07 	.word	0x0d0d0d07
 800632c:	0d0d0d09 	.word	0x0d0d0d09
 8006330:	0d0d0d26 	.word	0x0d0d0d26
 8006334:	0b          	.byte	0x0b
 8006335:	00          	.byte	0x00
 8006336:	2200      	movs	r2, #0
 8006338:	e7ba      	b.n	80062b0 <UART_SetConfig+0x6c>
 800633a:	2204      	movs	r2, #4
 800633c:	e7b8      	b.n	80062b0 <UART_SetConfig+0x6c>
 800633e:	2208      	movs	r2, #8
 8006340:	e7b6      	b.n	80062b0 <UART_SetConfig+0x6c>
 8006342:	2210      	movs	r2, #16
 8006344:	e7b4      	b.n	80062b0 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800634a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800634e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006352:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006356:	d00f      	beq.n	8006378 <UART_SetConfig+0x134>
 8006358:	d805      	bhi.n	8006366 <UART_SetConfig+0x122>
 800635a:	b17a      	cbz	r2, 800637c <UART_SetConfig+0x138>
 800635c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006360:	d10e      	bne.n	8006380 <UART_SetConfig+0x13c>
 8006362:	2204      	movs	r2, #4
 8006364:	e7a4      	b.n	80062b0 <UART_SetConfig+0x6c>
 8006366:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800636a:	d10b      	bne.n	8006384 <UART_SetConfig+0x140>
 800636c:	2208      	movs	r2, #8
 800636e:	e79f      	b.n	80062b0 <UART_SetConfig+0x6c>
 8006370:	2202      	movs	r2, #2
 8006372:	e79d      	b.n	80062b0 <UART_SetConfig+0x6c>
 8006374:	2202      	movs	r2, #2
 8006376:	e79b      	b.n	80062b0 <UART_SetConfig+0x6c>
 8006378:	2202      	movs	r2, #2
 800637a:	e799      	b.n	80062b0 <UART_SetConfig+0x6c>
 800637c:	2200      	movs	r2, #0
 800637e:	e797      	b.n	80062b0 <UART_SetConfig+0x6c>
 8006380:	2210      	movs	r2, #16
 8006382:	e795      	b.n	80062b0 <UART_SetConfig+0x6c>
 8006384:	2210      	movs	r2, #16
 8006386:	e793      	b.n	80062b0 <UART_SetConfig+0x6c>
    switch (clocksource)
 8006388:	2a08      	cmp	r2, #8
 800638a:	f200 809c 	bhi.w	80064c6 <UART_SetConfig+0x282>
 800638e:	e8df f002 	tbb	[pc, r2]
 8006392:	9a08      	.short	0x9a08
 8006394:	9a379a3a 	.word	0x9a379a3a
 8006398:	9a9a      	.short	0x9a9a
 800639a:	05          	.byte	0x05
 800639b:	00          	.byte	0x00
 800639c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80063a0:	e004      	b.n	80063ac <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a2:	f7fe faab 	bl	80048fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f000 808f 	beq.w	80064ca <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80063ae:	4b4c      	ldr	r3, [pc, #304]	; (80064e0 <UART_SetConfig+0x29c>)
 80063b0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80063b4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063b8:	6865      	ldr	r5, [r4, #4]
 80063ba:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80063be:	4299      	cmp	r1, r3
 80063c0:	f200 8094 	bhi.w	80064ec <UART_SetConfig+0x2a8>
 80063c4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80063c8:	f200 8092 	bhi.w	80064f0 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063cc:	2600      	movs	r6, #0
 80063ce:	4633      	mov	r3, r6
 80063d0:	4631      	mov	r1, r6
 80063d2:	f7fa fa79 	bl	80008c8 <__aeabi_uldivmod>
 80063d6:	0209      	lsls	r1, r1, #8
 80063d8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80063dc:	0200      	lsls	r0, r0, #8
 80063de:	086b      	lsrs	r3, r5, #1
 80063e0:	18c0      	adds	r0, r0, r3
 80063e2:	462a      	mov	r2, r5
 80063e4:	4633      	mov	r3, r6
 80063e6:	f141 0100 	adc.w	r1, r1, #0
 80063ea:	f7fa fa6d 	bl	80008c8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063ee:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80063f2:	4b3c      	ldr	r3, [pc, #240]	; (80064e4 <UART_SetConfig+0x2a0>)
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d87d      	bhi.n	80064f4 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	60d8      	str	r0, [r3, #12]
 80063fc:	4630      	mov	r0, r6
 80063fe:	e050      	b.n	80064a2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006400:	f7fd fd7e 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
        break;
 8006404:	e7cf      	b.n	80063a6 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8006406:	4838      	ldr	r0, [pc, #224]	; (80064e8 <UART_SetConfig+0x2a4>)
 8006408:	e7d0      	b.n	80063ac <UART_SetConfig+0x168>
    switch (clocksource)
 800640a:	2a08      	cmp	r2, #8
 800640c:	d874      	bhi.n	80064f8 <UART_SetConfig+0x2b4>
 800640e:	e8df f002 	tbb	[pc, r2]
 8006412:	2707      	.short	0x2707
 8006414:	732a7305 	.word	0x732a7305
 8006418:	7373      	.short	0x7373
 800641a:	0b          	.byte	0x0b
 800641b:	00          	.byte	0x00
 800641c:	4832      	ldr	r0, [pc, #200]	; (80064e8 <UART_SetConfig+0x2a4>)
 800641e:	e003      	b.n	8006428 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006420:	f7fe fa6c 	bl	80048fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006424:	2800      	cmp	r0, #0
 8006426:	d069      	beq.n	80064fc <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006428:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800642a:	4b2d      	ldr	r3, [pc, #180]	; (80064e0 <UART_SetConfig+0x29c>)
 800642c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006430:	fbb0 f0f3 	udiv	r0, r0, r3
 8006434:	6862      	ldr	r2, [r4, #4]
 8006436:	0853      	lsrs	r3, r2, #1
 8006438:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800643c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006440:	f1a3 0110 	sub.w	r1, r3, #16
 8006444:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006448:	4291      	cmp	r1, r2
 800644a:	d859      	bhi.n	8006500 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800644c:	b29a      	uxth	r2, r3
 800644e:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006452:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006456:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8006458:	6822      	ldr	r2, [r4, #0]
 800645a:	60d3      	str	r3, [r2, #12]
 800645c:	2000      	movs	r0, #0
 800645e:	e020      	b.n	80064a2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006460:	f7fe fa5c 	bl	800491c <HAL_RCC_GetPCLK2Freq>
        break;
 8006464:	e7de      	b.n	8006424 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8006466:	f7fd fd4b 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
        break;
 800646a:	e7db      	b.n	8006424 <UART_SetConfig+0x1e0>
    switch (clocksource)
 800646c:	481e      	ldr	r0, [pc, #120]	; (80064e8 <UART_SetConfig+0x2a4>)
 800646e:	e003      	b.n	8006478 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006470:	f7fe fa44 	bl	80048fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006474:	2800      	cmp	r0, #0
 8006476:	d047      	beq.n	8006508 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006478:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800647a:	4b19      	ldr	r3, [pc, #100]	; (80064e0 <UART_SetConfig+0x29c>)
 800647c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006480:	fbb0 f0f3 	udiv	r0, r0, r3
 8006484:	6863      	ldr	r3, [r4, #4]
 8006486:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800648a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800648e:	f1a0 0210 	sub.w	r2, r0, #16
 8006492:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006496:	429a      	cmp	r2, r3
 8006498:	d838      	bhi.n	800650c <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	b280      	uxth	r0, r0
 800649e:	60d8      	str	r0, [r3, #12]
 80064a0:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064a8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80064b0:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80064b2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80064b4:	f7fe fa32 	bl	800491c <HAL_RCC_GetPCLK2Freq>
        break;
 80064b8:	e7dc      	b.n	8006474 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 80064ba:	f7fd fd21 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
        break;
 80064be:	e7d9      	b.n	8006474 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 80064c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80064c4:	e7d8      	b.n	8006478 <UART_SetConfig+0x234>
    switch (clocksource)
 80064c6:	2001      	movs	r0, #1
 80064c8:	e7eb      	b.n	80064a2 <UART_SetConfig+0x25e>
 80064ca:	2000      	movs	r0, #0
 80064cc:	e7e9      	b.n	80064a2 <UART_SetConfig+0x25e>
 80064ce:	bf00      	nop
 80064d0:	cfff69f3 	.word	0xcfff69f3
 80064d4:	40008000 	.word	0x40008000
 80064d8:	40013800 	.word	0x40013800
 80064dc:	40004400 	.word	0x40004400
 80064e0:	08012204 	.word	0x08012204
 80064e4:	000ffcff 	.word	0x000ffcff
 80064e8:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 80064ec:	2001      	movs	r0, #1
 80064ee:	e7d8      	b.n	80064a2 <UART_SetConfig+0x25e>
 80064f0:	2001      	movs	r0, #1
 80064f2:	e7d6      	b.n	80064a2 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 80064f4:	2001      	movs	r0, #1
 80064f6:	e7d4      	b.n	80064a2 <UART_SetConfig+0x25e>
    switch (clocksource)
 80064f8:	2001      	movs	r0, #1
 80064fa:	e7d2      	b.n	80064a2 <UART_SetConfig+0x25e>
 80064fc:	2000      	movs	r0, #0
 80064fe:	e7d0      	b.n	80064a2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006500:	2001      	movs	r0, #1
 8006502:	e7ce      	b.n	80064a2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006504:	2001      	movs	r0, #1
 8006506:	e7cc      	b.n	80064a2 <UART_SetConfig+0x25e>
 8006508:	2000      	movs	r0, #0
 800650a:	e7ca      	b.n	80064a2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800650c:	2001      	movs	r0, #1
 800650e:	e7c8      	b.n	80064a2 <UART_SetConfig+0x25e>

08006510 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006510:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006512:	f013 0f01 	tst.w	r3, #1
 8006516:	d006      	beq.n	8006526 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006518:	6802      	ldr	r2, [r0, #0]
 800651a:	6853      	ldr	r3, [r2, #4]
 800651c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006520:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006522:	430b      	orrs	r3, r1
 8006524:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006526:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006528:	f013 0f02 	tst.w	r3, #2
 800652c:	d006      	beq.n	800653c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800652e:	6802      	ldr	r2, [r0, #0]
 8006530:	6853      	ldr	r3, [r2, #4]
 8006532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006536:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006538:	430b      	orrs	r3, r1
 800653a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800653c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800653e:	f013 0f04 	tst.w	r3, #4
 8006542:	d006      	beq.n	8006552 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006544:	6802      	ldr	r2, [r0, #0]
 8006546:	6853      	ldr	r3, [r2, #4]
 8006548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800654c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800654e:	430b      	orrs	r3, r1
 8006550:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006552:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006554:	f013 0f08 	tst.w	r3, #8
 8006558:	d006      	beq.n	8006568 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800655a:	6802      	ldr	r2, [r0, #0]
 800655c:	6853      	ldr	r3, [r2, #4]
 800655e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006562:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006564:	430b      	orrs	r3, r1
 8006566:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006568:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800656a:	f013 0f10 	tst.w	r3, #16
 800656e:	d006      	beq.n	800657e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006570:	6802      	ldr	r2, [r0, #0]
 8006572:	6893      	ldr	r3, [r2, #8]
 8006574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006578:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800657a:	430b      	orrs	r3, r1
 800657c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800657e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006580:	f013 0f20 	tst.w	r3, #32
 8006584:	d006      	beq.n	8006594 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006586:	6802      	ldr	r2, [r0, #0]
 8006588:	6893      	ldr	r3, [r2, #8]
 800658a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800658e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006590:	430b      	orrs	r3, r1
 8006592:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006594:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006596:	f013 0f40 	tst.w	r3, #64	; 0x40
 800659a:	d00a      	beq.n	80065b2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800659c:	6802      	ldr	r2, [r0, #0]
 800659e:	6853      	ldr	r3, [r2, #4]
 80065a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80065a4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80065a6:	430b      	orrs	r3, r1
 80065a8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80065ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b0:	d00b      	beq.n	80065ca <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80065b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80065b8:	d006      	beq.n	80065c8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065ba:	6802      	ldr	r2, [r0, #0]
 80065bc:	6853      	ldr	r3, [r2, #4]
 80065be:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80065c2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6053      	str	r3, [r2, #4]
}
 80065c8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065ca:	6802      	ldr	r2, [r0, #0]
 80065cc:	6853      	ldr	r3, [r2, #4]
 80065ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80065d2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80065d4:	430b      	orrs	r3, r1
 80065d6:	6053      	str	r3, [r2, #4]
 80065d8:	e7eb      	b.n	80065b2 <UART_AdvFeatureConfig+0xa2>

080065da <UART_WaitOnFlagUntilTimeout>:
{
 80065da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065de:	4605      	mov	r5, r0
 80065e0:	460f      	mov	r7, r1
 80065e2:	4616      	mov	r6, r2
 80065e4:	4699      	mov	r9, r3
 80065e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ea:	682b      	ldr	r3, [r5, #0]
 80065ec:	69dc      	ldr	r4, [r3, #28]
 80065ee:	ea37 0404 	bics.w	r4, r7, r4
 80065f2:	bf0c      	ite	eq
 80065f4:	2401      	moveq	r4, #1
 80065f6:	2400      	movne	r4, #0
 80065f8:	42b4      	cmp	r4, r6
 80065fa:	d157      	bne.n	80066ac <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 80065fc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006600:	d0f3      	beq.n	80065ea <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006602:	f7fb f879 	bl	80016f8 <HAL_GetTick>
 8006606:	eba0 0009 	sub.w	r0, r0, r9
 800660a:	4540      	cmp	r0, r8
 800660c:	d82f      	bhi.n	800666e <UART_WaitOnFlagUntilTimeout+0x94>
 800660e:	f1b8 0f00 	cmp.w	r8, #0
 8006612:	d02c      	beq.n	800666e <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	f012 0f04 	tst.w	r2, #4
 800661c:	d0e5      	beq.n	80065ea <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800661e:	69da      	ldr	r2, [r3, #28]
 8006620:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006624:	d0e1      	beq.n	80065ea <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800662a:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800662c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	e852 3f00 	ldrex	r3, [r2]
 8006632:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006636:	e842 3100 	strex	r1, r3, [r2]
 800663a:	2900      	cmp	r1, #0
 800663c:	d1f6      	bne.n	800662c <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	f102 0308 	add.w	r3, r2, #8
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	3208      	adds	r2, #8
 800664e:	e842 3100 	strex	r1, r3, [r2]
 8006652:	2900      	cmp	r1, #0
 8006654:	d1f3      	bne.n	800663e <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8006656:	2320      	movs	r3, #32
 8006658:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800665c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006660:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8006664:	2300      	movs	r3, #0
 8006666:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 800666a:	2003      	movs	r0, #3
 800666c:	e01f      	b.n	80066ae <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800666e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	e852 3f00 	ldrex	r3, [r2]
 8006674:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	e842 3100 	strex	r1, r3, [r2]
 800667c:	2900      	cmp	r1, #0
 800667e:	d1f6      	bne.n	800666e <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006680:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	f102 0308 	add.w	r3, r2, #8
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	3208      	adds	r2, #8
 8006690:	e842 3100 	strex	r1, r3, [r2]
 8006694:	2900      	cmp	r1, #0
 8006696:	d1f3      	bne.n	8006680 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8006698:	2320      	movs	r3, #32
 800669a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800669e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80066a2:	2300      	movs	r3, #0
 80066a4:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 80066a8:	2003      	movs	r0, #3
 80066aa:	e000      	b.n	80066ae <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 80066ac:	2000      	movs	r0, #0
}
 80066ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080066b2 <UART_CheckIdleState>:
{
 80066b2:	b530      	push	{r4, r5, lr}
 80066b4:	b083      	sub	sp, #12
 80066b6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 80066be:	f7fb f81b 	bl	80016f8 <HAL_GetTick>
 80066c2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066c4:	6822      	ldr	r2, [r4, #0]
 80066c6:	6812      	ldr	r2, [r2, #0]
 80066c8:	f012 0f08 	tst.w	r2, #8
 80066cc:	d110      	bne.n	80066f0 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f013 0f04 	tst.w	r3, #4
 80066d6:	d119      	bne.n	800670c <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80066d8:	2320      	movs	r3, #32
 80066da:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80066de:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e2:	2000      	movs	r0, #0
 80066e4:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066e6:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 80066e8:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80066ec:	b003      	add	sp, #12
 80066ee:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	4603      	mov	r3, r0
 80066f8:	2200      	movs	r2, #0
 80066fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066fe:	4620      	mov	r0, r4
 8006700:	f7ff ff6b 	bl	80065da <UART_WaitOnFlagUntilTimeout>
 8006704:	2800      	cmp	r0, #0
 8006706:	d0e2      	beq.n	80066ce <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006708:	2003      	movs	r0, #3
 800670a:	e7ef      	b.n	80066ec <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800670c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	462b      	mov	r3, r5
 8006714:	2200      	movs	r2, #0
 8006716:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800671a:	4620      	mov	r0, r4
 800671c:	f7ff ff5d 	bl	80065da <UART_WaitOnFlagUntilTimeout>
 8006720:	2800      	cmp	r0, #0
 8006722:	d0d9      	beq.n	80066d8 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006724:	2003      	movs	r0, #3
 8006726:	e7e1      	b.n	80066ec <UART_CheckIdleState+0x3a>

08006728 <HAL_UART_Init>:
  if (huart == NULL)
 8006728:	b378      	cbz	r0, 800678a <HAL_UART_Init+0x62>
{
 800672a:	b510      	push	{r4, lr}
 800672c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800672e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006732:	b30b      	cbz	r3, 8006778 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006734:	2324      	movs	r3, #36	; 0x24
 8006736:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800673a:	6822      	ldr	r2, [r4, #0]
 800673c:	6813      	ldr	r3, [r2, #0]
 800673e:	f023 0301 	bic.w	r3, r3, #1
 8006742:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006744:	4620      	mov	r0, r4
 8006746:	f7ff fd7d 	bl	8006244 <UART_SetConfig>
 800674a:	2801      	cmp	r0, #1
 800674c:	d013      	beq.n	8006776 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800674e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006750:	b9bb      	cbnz	r3, 8006782 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006752:	6822      	ldr	r2, [r4, #0]
 8006754:	6853      	ldr	r3, [r2, #4]
 8006756:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800675a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800675c:	6822      	ldr	r2, [r4, #0]
 800675e:	6893      	ldr	r3, [r2, #8]
 8006760:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006764:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006766:	6822      	ldr	r2, [r4, #0]
 8006768:	6813      	ldr	r3, [r2, #0]
 800676a:	f043 0301 	orr.w	r3, r3, #1
 800676e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006770:	4620      	mov	r0, r4
 8006772:	f7ff ff9e 	bl	80066b2 <UART_CheckIdleState>
}
 8006776:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006778:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800677c:	f7fb f9ac 	bl	8001ad8 <HAL_UART_MspInit>
 8006780:	e7d8      	b.n	8006734 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff fec4 	bl	8006510 <UART_AdvFeatureConfig>
 8006788:	e7e3      	b.n	8006752 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800678a:	2001      	movs	r0, #1
}
 800678c:	4770      	bx	lr
	...

08006790 <UART_Start_Receive_IT>:
{
 8006790:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8006792:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006794:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006798:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800679c:	2300      	movs	r3, #0
 800679e:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 80067a0:	6883      	ldr	r3, [r0, #8]
 80067a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a6:	d006      	beq.n	80067b6 <UART_Start_Receive_IT+0x26>
 80067a8:	b9a3      	cbnz	r3, 80067d4 <UART_Start_Receive_IT+0x44>
 80067aa:	6903      	ldr	r3, [r0, #16]
 80067ac:	b973      	cbnz	r3, 80067cc <UART_Start_Receive_IT+0x3c>
 80067ae:	23ff      	movs	r3, #255	; 0xff
 80067b0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80067b4:	e014      	b.n	80067e0 <UART_Start_Receive_IT+0x50>
 80067b6:	6903      	ldr	r3, [r0, #16]
 80067b8:	b923      	cbnz	r3, 80067c4 <UART_Start_Receive_IT+0x34>
 80067ba:	f240 13ff 	movw	r3, #511	; 0x1ff
 80067be:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80067c2:	e00d      	b.n	80067e0 <UART_Start_Receive_IT+0x50>
 80067c4:	23ff      	movs	r3, #255	; 0xff
 80067c6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80067ca:	e009      	b.n	80067e0 <UART_Start_Receive_IT+0x50>
 80067cc:	237f      	movs	r3, #127	; 0x7f
 80067ce:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80067d2:	e005      	b.n	80067e0 <UART_Start_Receive_IT+0x50>
 80067d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067d8:	d02d      	beq.n	8006836 <UART_Start_Receive_IT+0xa6>
 80067da:	2300      	movs	r3, #0
 80067dc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e0:	2300      	movs	r3, #0
 80067e2:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067e6:	2322      	movs	r3, #34	; 0x22
 80067e8:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ec:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	f101 0308 	add.w	r3, r1, #8
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	3108      	adds	r1, #8
 80067fc:	e841 3400 	strex	r4, r3, [r1]
 8006800:	2c00      	cmp	r4, #0
 8006802:	d1f3      	bne.n	80067ec <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006804:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800680a:	d01e      	beq.n	800684a <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800680c:	6883      	ldr	r3, [r0, #8]
 800680e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006812:	d042      	beq.n	800689a <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8006814:	4b29      	ldr	r3, [pc, #164]	; (80068bc <UART_Start_Receive_IT+0x12c>)
 8006816:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006818:	6903      	ldr	r3, [r0, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d043      	beq.n	80068a6 <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800681e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	e852 3f00 	ldrex	r3, [r2]
 8006824:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	e842 3100 	strex	r1, r3, [r2]
 800682c:	2900      	cmp	r1, #0
 800682e:	d1f6      	bne.n	800681e <UART_Start_Receive_IT+0x8e>
}
 8006830:	2000      	movs	r0, #0
 8006832:	bc10      	pop	{r4}
 8006834:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006836:	6903      	ldr	r3, [r0, #16]
 8006838:	b91b      	cbnz	r3, 8006842 <UART_Start_Receive_IT+0xb2>
 800683a:	237f      	movs	r3, #127	; 0x7f
 800683c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006840:	e7ce      	b.n	80067e0 <UART_Start_Receive_IT+0x50>
 8006842:	233f      	movs	r3, #63	; 0x3f
 8006844:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006848:	e7ca      	b.n	80067e0 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800684a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800684e:	4293      	cmp	r3, r2
 8006850:	d8dc      	bhi.n	800680c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006852:	6883      	ldr	r3, [r0, #8]
 8006854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006858:	d019      	beq.n	800688e <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800685a:	4b19      	ldr	r3, [pc, #100]	; (80068c0 <UART_Start_Receive_IT+0x130>)
 800685c:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800685e:	6903      	ldr	r3, [r0, #16]
 8006860:	b143      	cbz	r3, 8006874 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006862:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	e852 3f00 	ldrex	r3, [r2]
 8006868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686c:	e842 3100 	strex	r1, r3, [r2]
 8006870:	2900      	cmp	r1, #0
 8006872:	d1f6      	bne.n	8006862 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006874:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	f102 0308 	add.w	r3, r2, #8
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	3208      	adds	r2, #8
 8006884:	e842 3100 	strex	r1, r3, [r2]
 8006888:	2900      	cmp	r1, #0
 800688a:	d1f3      	bne.n	8006874 <UART_Start_Receive_IT+0xe4>
 800688c:	e7d0      	b.n	8006830 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800688e:	6903      	ldr	r3, [r0, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e2      	bne.n	800685a <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006894:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <UART_Start_Receive_IT+0x134>)
 8006896:	6743      	str	r3, [r0, #116]	; 0x74
 8006898:	e7e1      	b.n	800685e <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800689a:	6903      	ldr	r3, [r0, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1b9      	bne.n	8006814 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 80068a0:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <UART_Start_Receive_IT+0x138>)
 80068a2:	6743      	str	r3, [r0, #116]	; 0x74
 80068a4:	e7b8      	b.n	8006818 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80068a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	e852 3f00 	ldrex	r3, [r2]
 80068ac:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	e842 3100 	strex	r1, r3, [r2]
 80068b4:	2900      	cmp	r1, #0
 80068b6:	d1f6      	bne.n	80068a6 <UART_Start_Receive_IT+0x116>
 80068b8:	e7ba      	b.n	8006830 <UART_Start_Receive_IT+0xa0>
 80068ba:	bf00      	nop
 80068bc:	08005cfd 	.word	0x08005cfd
 80068c0:	08005eb1 	.word	0x08005eb1
 80068c4:	0800607d 	.word	0x0800607d
 80068c8:	08005dd9 	.word	0x08005dd9

080068cc <HAL_UART_Receive_IT>:
{
 80068cc:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80068ce:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	d117      	bne.n	8006906 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80068d6:	b1c1      	cbz	r1, 800690a <HAL_UART_Receive_IT+0x3e>
 80068d8:	b1ca      	cbz	r2, 800690e <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068da:	2300      	movs	r3, #0
 80068dc:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068de:	6803      	ldr	r3, [r0, #0]
 80068e0:	4c0c      	ldr	r4, [pc, #48]	; (8006914 <HAL_UART_Receive_IT+0x48>)
 80068e2:	42a3      	cmp	r3, r4
 80068e4:	d00c      	beq.n	8006900 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80068ec:	d008      	beq.n	8006900 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068ee:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	e854 3f00 	ldrex	r3, [r4]
 80068f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	e844 3500 	strex	r5, r3, [r4]
 80068fc:	2d00      	cmp	r5, #0
 80068fe:	d1f6      	bne.n	80068ee <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006900:	f7ff ff46 	bl	8006790 <UART_Start_Receive_IT>
 8006904:	e000      	b.n	8006908 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8006906:	2002      	movs	r0, #2
}
 8006908:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800690a:	2001      	movs	r0, #1
 800690c:	e7fc      	b.n	8006908 <HAL_UART_Receive_IT+0x3c>
 800690e:	2001      	movs	r0, #1
 8006910:	e7fa      	b.n	8006908 <HAL_UART_Receive_IT+0x3c>
 8006912:	bf00      	nop
 8006914:	40008000 	.word	0x40008000

08006918 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006918:	b082      	sub	sp, #8
 800691a:	ab02      	add	r3, sp, #8
 800691c:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006920:	6802      	ldr	r2, [r0, #0]
 8006922:	6853      	ldr	r3, [r2, #4]
 8006924:	f023 0310 	bic.w	r3, r3, #16
 8006928:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800692c:	430b      	orrs	r3, r1
 800692e:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006930:	6802      	ldr	r2, [r0, #0]
 8006932:	6853      	ldr	r3, [r2, #4]
 8006934:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006938:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800693c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006940:	6053      	str	r3, [r2, #4]
}
 8006942:	b002      	add	sp, #8
 8006944:	4770      	bx	lr
	...

08006948 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006948:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800694a:	b92b      	cbnz	r3, 8006958 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800694c:	2301      	movs	r3, #1
 800694e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006952:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006956:	4770      	bx	lr
{
 8006958:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800695a:	6803      	ldr	r3, [r0, #0]
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006962:	6899      	ldr	r1, [r3, #8]
 8006964:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006966:	4d09      	ldr	r5, [pc, #36]	; (800698c <UARTEx_SetNbDataToProcess+0x44>)
 8006968:	5c6b      	ldrb	r3, [r5, r1]
 800696a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800696c:	4c08      	ldr	r4, [pc, #32]	; (8006990 <UARTEx_SetNbDataToProcess+0x48>)
 800696e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006970:	fb93 f3f1 	sdiv	r3, r3, r1
 8006974:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006978:	5cab      	ldrb	r3, [r5, r2]
 800697a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800697c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800697e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006982:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006986:	bc30      	pop	{r4, r5}
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	08012224 	.word	0x08012224
 8006990:	0801221c 	.word	0x0801221c

08006994 <HAL_UARTEx_WakeupCallback>:
}
 8006994:	4770      	bx	lr

08006996 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006996:	4770      	bx	lr

08006998 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006998:	4770      	bx	lr

0800699a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800699a:	b510      	push	{r4, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	ab04      	add	r3, sp, #16
 80069a0:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 80069a4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d035      	beq.n	8006a18 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 80069ac:	4604      	mov	r4, r0
 80069ae:	2301      	movs	r3, #1
 80069b0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80069b4:	2324      	movs	r3, #36	; 0x24
 80069b6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80069ba:	6802      	ldr	r2, [r0, #0]
 80069bc:	6813      	ldr	r3, [r2, #0]
 80069be:	f023 0301 	bic.w	r3, r3, #1
 80069c2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80069c4:	6801      	ldr	r1, [r0, #0]
 80069c6:	688b      	ldr	r3, [r1, #8]
 80069c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80069cc:	9a02      	ldr	r2, [sp, #8]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80069d2:	b1aa      	cbz	r2, 8006a00 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80069d4:	6822      	ldr	r2, [r4, #0]
 80069d6:	6813      	ldr	r3, [r2, #0]
 80069d8:	f043 0301 	orr.w	r3, r3, #1
 80069dc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80069de:	f7fa fe8b 	bl	80016f8 <HAL_GetTick>
 80069e2:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80069e8:	9200      	str	r2, [sp, #0]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069f0:	4620      	mov	r0, r4
 80069f2:	f7ff fdf2 	bl	80065da <UART_WaitOnFlagUntilTimeout>
 80069f6:	b948      	cbnz	r0, 8006a0c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80069f8:	2320      	movs	r3, #32
 80069fa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80069fe:	e006      	b.n	8006a0e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006a00:	ab04      	add	r3, sp, #16
 8006a02:	e913 0006 	ldmdb	r3, {r1, r2}
 8006a06:	f7ff ff87 	bl	8006918 <UARTEx_Wakeup_AddressConfig>
 8006a0a:	e7e3      	b.n	80069d4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8006a0c:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8006a14:	b004      	add	sp, #16
 8006a16:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006a18:	2002      	movs	r0, #2
 8006a1a:	e7fb      	b.n	8006a14 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08006a1c <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006a1c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d010      	beq.n	8006a46 <HAL_UARTEx_EnableStopMode+0x2a>
 8006a24:	2301      	movs	r3, #1
 8006a26:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006a2a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	e852 3f00 	ldrex	r3, [r2]
 8006a30:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	e842 3100 	strex	r1, r3, [r2]
 8006a38:	2900      	cmp	r1, #0
 8006a3a:	d1f6      	bne.n	8006a2a <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8006a42:	4618      	mov	r0, r3
 8006a44:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006a46:	2002      	movs	r0, #2
}
 8006a48:	4770      	bx	lr

08006a4a <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8006a4a:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d01d      	beq.n	8006a8e <HAL_UARTEx_EnableFifoMode+0x44>
{
 8006a52:	b510      	push	{r4, lr}
 8006a54:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006a56:	2301      	movs	r3, #1
 8006a58:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006a5c:	2324      	movs	r3, #36	; 0x24
 8006a5e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a62:	6802      	ldr	r2, [r0, #0]
 8006a64:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006a66:	6811      	ldr	r1, [r2, #0]
 8006a68:	f021 0101 	bic.w	r1, r1, #1
 8006a6c:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006a72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006a76:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a78:	6802      	ldr	r2, [r0, #0]
 8006a7a:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006a7c:	f7ff ff64 	bl	8006948 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006a80:	2320      	movs	r3, #32
 8006a82:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006a86:	2000      	movs	r0, #0
 8006a88:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006a8c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006a8e:	2002      	movs	r0, #2
}
 8006a90:	4770      	bx	lr

08006a92 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006a92:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006a94:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d01d      	beq.n	8006ad8 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006aa4:	2324      	movs	r3, #36	; 0x24
 8006aa6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aaa:	6803      	ldr	r3, [r0, #0]
 8006aac:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	f022 0201 	bic.w	r2, r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ab6:	6802      	ldr	r2, [r0, #0]
 8006ab8:	6893      	ldr	r3, [r2, #8]
 8006aba:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006abe:	4319      	orrs	r1, r3
 8006ac0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006ac2:	f7ff ff41 	bl	8006948 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006aca:	2320      	movs	r3, #32
 8006acc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006ad8:	2002      	movs	r0, #2
 8006ada:	e7fc      	b.n	8006ad6 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006adc <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006adc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006ade:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d01d      	beq.n	8006b22 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006aee:	2324      	movs	r3, #36	; 0x24
 8006af0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006af4:	6803      	ldr	r3, [r0, #0]
 8006af6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	f022 0201 	bic.w	r2, r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b00:	6802      	ldr	r2, [r0, #0]
 8006b02:	6893      	ldr	r3, [r2, #8]
 8006b04:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006b08:	4319      	orrs	r1, r3
 8006b0a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006b0c:	f7ff ff1c 	bl	8006948 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006b14:	2320      	movs	r3, #32
 8006b16:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006b20:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006b22:	2002      	movs	r0, #2
 8006b24:	e7fc      	b.n	8006b20 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006b28 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006b28:	2804      	cmp	r0, #4
 8006b2a:	d807      	bhi.n	8006b3c <LmHandlerPackageIsInitialized+0x14>
{
 8006b2c:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <LmHandlerPackageIsInitialized+0x1c>)
 8006b30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	b11b      	cbz	r3, 8006b40 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8006b38:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8006b3a:	bd08      	pop	{r3, pc}
        return false;
 8006b3c:	2000      	movs	r0, #0
}
 8006b3e:	4770      	bx	lr
        return false;
 8006b40:	2000      	movs	r0, #0
 8006b42:	e7fa      	b.n	8006b3a <LmHandlerPackageIsInitialized+0x12>
 8006b44:	20000598 	.word	0x20000598

08006b48 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006b4e:	2400      	movs	r4, #0
 8006b50:	e005      	b.n	8006b5e <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	b10b      	cbz	r3, 8006b5a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8006b56:	4638      	mov	r0, r7
 8006b58:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006b5a:	3401      	adds	r4, #1
 8006b5c:	b264      	sxtb	r4, r4
 8006b5e:	2c04      	cmp	r4, #4
 8006b60:	dc34      	bgt.n	8006bcc <LmHandlerPackagesNotify+0x84>
        if( LmHandlerPackages[i] != NULL )
 8006b62:	4626      	mov	r6, r4
 8006b64:	4b1a      	ldr	r3, [pc, #104]	; (8006bd0 <LmHandlerPackagesNotify+0x88>)
 8006b66:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f5      	beq.n	8006b5a <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8006b6e:	2d03      	cmp	r5, #3
 8006b70:	d8f3      	bhi.n	8006b5a <LmHandlerPackagesNotify+0x12>
 8006b72:	a201      	add	r2, pc, #4	; (adr r2, 8006b78 <LmHandlerPackagesNotify+0x30>)
 8006b74:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8006b78:	08006b53 	.word	0x08006b53
 8006b7c:	08006b89 	.word	0x08006b89
 8006b80:	08006bb5 	.word	0x08006bb5
 8006b84:	08006bc1 	.word	0x08006bc1
                        break;
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006b88:	6a1a      	ldr	r2, [r3, #32]
 8006b8a:	2a00      	cmp	r2, #0
 8006b8c:	d0e5      	beq.n	8006b5a <LmHandlerPackagesNotify+0x12>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8006b8e:	781a      	ldrb	r2, [r3, #0]
 8006b90:	78fb      	ldrb	r3, [r7, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d007      	beq.n	8006ba6 <LmHandlerPackagesNotify+0x5e>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8006b96:	2c00      	cmp	r4, #0
 8006b98:	d1df      	bne.n	8006b5a <LmHandlerPackagesNotify+0x12>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 8006b9a:	4b0d      	ldr	r3, [pc, #52]	; (8006bd0 <LmHandlerPackagesNotify+0x88>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	4798      	blx	r3
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d0d9      	beq.n	8006b5a <LmHandlerPackagesNotify+0x12>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8006ba6:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <LmHandlerPackagesNotify+0x88>)
 8006ba8:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	4638      	mov	r0, r7
 8006bb0:	4798      	blx	r3
 8006bb2:	e7d2      	b.n	8006b5a <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0cf      	beq.n	8006b5a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 8006bba:	4638      	mov	r0, r7
 8006bbc:	4798      	blx	r3
 8006bbe:	e7cc      	b.n	8006b5a <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0c9      	beq.n	8006b5a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	4798      	blx	r3
 8006bca:	e7c6      	b.n	8006b5a <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 8006bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000598 	.word	0x20000598

08006bd4 <MlmeIndication>:
{
 8006bd4:	b510      	push	{r4, lr}
 8006bd6:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8006bd8:	4b11      	ldr	r3, [pc, #68]	; (8006c20 <MlmeIndication+0x4c>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8006bde:	7842      	ldrb	r2, [r0, #1]
 8006be0:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8006be2:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8006be6:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8006be8:	f9b1 2000 	ldrsh.w	r2, [r1]
 8006bec:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8006bee:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8006bf2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8006bf4:	78ca      	ldrb	r2, [r1, #3]
 8006bf6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8006bf8:	6842      	ldr	r2, [r0, #4]
 8006bfa:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8006bfc:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <MlmeIndication+0x50>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	b13b      	cbz	r3, 8006c14 <MlmeIndication+0x40>
 8006c04:	7802      	ldrb	r2, [r0, #0]
 8006c06:	2a0b      	cmp	r2, #11
 8006c08:	d004      	beq.n	8006c14 <MlmeIndication+0x40>
 8006c0a:	2a0f      	cmp	r2, #15
 8006c0c:	d002      	beq.n	8006c14 <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8006c0e:	4904      	ldr	r1, [pc, #16]	; (8006c20 <MlmeIndication+0x4c>)
 8006c10:	2000      	movs	r0, #0
 8006c12:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8006c14:	4621      	mov	r1, r4
 8006c16:	2003      	movs	r0, #3
 8006c18:	f7ff ff96 	bl	8006b48 <LmHandlerPackagesNotify>
}
 8006c1c:	bd10      	pop	{r4, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000094 	.word	0x20000094
 8006c24:	20000594 	.word	0x20000594

08006c28 <McpsConfirm>:
{
 8006c28:	b510      	push	{r4, lr}
 8006c2a:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8006c2c:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <McpsConfirm+0x3c>)
 8006c2e:	2201      	movs	r2, #1
 8006c30:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8006c32:	7842      	ldrb	r2, [r0, #1]
 8006c34:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8006c36:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8006c3a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006c3c:	68c2      	ldr	r2, [r0, #12]
 8006c3e:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006c40:	f990 2003 	ldrsb.w	r2, [r0, #3]
 8006c44:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8006c46:	6902      	ldr	r2, [r0, #16]
 8006c48:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006c4a:	7902      	ldrb	r2, [r0, #4]
 8006c4c:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8006c4e:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <McpsConfirm+0x40>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c54:	b10b      	cbz	r3, 8006c5a <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8006c56:	4803      	ldr	r0, [pc, #12]	; (8006c64 <McpsConfirm+0x3c>)
 8006c58:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	f7ff ff73 	bl	8006b48 <LmHandlerPackagesNotify>
}
 8006c62:	bd10      	pop	{r4, pc}
 8006c64:	200000a8 	.word	0x200000a8
 8006c68:	20000594 	.word	0x20000594

08006c6c <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8006c6c:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006c6e:	2400      	movs	r4, #0
 8006c70:	e001      	b.n	8006c76 <LmHandlerPackageIsTxPending+0xa>
 8006c72:	3401      	adds	r4, #1
 8006c74:	b264      	sxtb	r4, r4
 8006c76:	2c04      	cmp	r4, #4
 8006c78:	dc0c      	bgt.n	8006c94 <LmHandlerPackageIsTxPending+0x28>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 8006c7a:	4b08      	ldr	r3, [pc, #32]	; (8006c9c <LmHandlerPackageIsTxPending+0x30>)
 8006c7c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0f6      	beq.n	8006c72 <LmHandlerPackageIsTxPending+0x6>
 8006c84:	2c00      	cmp	r4, #0
 8006c86:	d0f4      	beq.n	8006c72 <LmHandlerPackageIsTxPending+0x6>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	4798      	blx	r3
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d0ef      	beq.n	8006c72 <LmHandlerPackageIsTxPending+0x6>
 8006c92:	e000      	b.n	8006c96 <LmHandlerPackageIsTxPending+0x2a>
            {
                return true;
            }
        }
    }
    return false;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	bd10      	pop	{r4, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000598 	.word	0x20000598

08006ca0 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8006ca0:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006ca2:	2400      	movs	r4, #0
 8006ca4:	e001      	b.n	8006caa <LmHandlerPackagesProcess+0xa>
 8006ca6:	3401      	adds	r4, #1
 8006ca8:	b264      	sxtb	r4, r4
 8006caa:	2c04      	cmp	r4, #4
 8006cac:	dc12      	bgt.n	8006cd4 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006cae:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <LmHandlerPackagesProcess+0x38>)
 8006cb0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0f6      	beq.n	8006ca6 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006cb8:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0f3      	beq.n	8006ca6 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8006cbe:	b2e0      	uxtb	r0, r4
 8006cc0:	f7ff ff32 	bl	8006b28 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d0ee      	beq.n	8006ca6 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8006cc8:	4b03      	ldr	r3, [pc, #12]	; (8006cd8 <LmHandlerPackagesProcess+0x38>)
 8006cca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	4798      	blx	r3
 8006cd2:	e7e8      	b.n	8006ca6 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8006cd4:	bd38      	pop	{r3, r4, r5, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000598 	.word	0x20000598

08006cdc <LmHandlerDeviceTimeReq>:
{
 8006cdc:	b500      	push	{lr}
 8006cde:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8006ce0:	230a      	movs	r3, #10
 8006ce2:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8006ce6:	a801      	add	r0, sp, #4
 8006ce8:	f003 ff28 	bl	800ab3c <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8006cec:	9a05      	ldr	r2, [sp, #20]
 8006cee:	4b04      	ldr	r3, [pc, #16]	; (8006d00 <LmHandlerDeviceTimeReq+0x24>)
 8006cf0:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8006cf2:	b910      	cbnz	r0, 8006cfa <LmHandlerDeviceTimeReq+0x1e>
}
 8006cf4:	b007      	add	sp, #28
 8006cf6:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8006cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfe:	e7f9      	b.n	8006cf4 <LmHandlerDeviceTimeReq+0x18>
 8006d00:	20000590 	.word	0x20000590

08006d04 <LmHandlerProcess>:
{
 8006d04:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 8006d06:	f002 ffe7 	bl	8009cd8 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8006d0a:	f7ff ffc9 	bl	8006ca0 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8006d0e:	f7ff ffad 	bl	8006c6c <LmHandlerPackageIsTxPending>
}
 8006d12:	bd08      	pop	{r3, pc}

08006d14 <LmHandlerGetDutyCycleWaitTime>:
}
 8006d14:	4b01      	ldr	r3, [pc, #4]	; (8006d1c <LmHandlerGetDutyCycleWaitTime+0x8>)
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	20000590 	.word	0x20000590

08006d20 <LmHandlerJoinStatus>:
{
 8006d20:	b500      	push	{lr}
 8006d22:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006d24:	2301      	movs	r3, #1
 8006d26:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8006d2a:	4668      	mov	r0, sp
 8006d2c:	f003 fab8 	bl	800a2a0 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8006d30:	b920      	cbnz	r0, 8006d3c <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006d32:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006d36:	b110      	cbz	r0, 8006d3e <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8006d38:	2001      	movs	r0, #1
 8006d3a:	e000      	b.n	8006d3e <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8006d3c:	2000      	movs	r0, #0
}
 8006d3e:	b00b      	add	sp, #44	; 0x2c
 8006d40:	f85d fb04 	ldr.w	pc, [sp], #4

08006d44 <LmHandlerRequestClass>:
{
 8006d44:	b510      	push	{r4, lr}
 8006d46:	b08a      	sub	sp, #40	; 0x28
 8006d48:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 8006d4a:	f002 ffa3 	bl	8009c94 <LoRaMacIsBusy>
 8006d4e:	bbb0      	cbnz	r0, 8006dbe <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8006d50:	f7ff ffe6 	bl	8006d20 <LmHandlerJoinStatus>
 8006d54:	2801      	cmp	r0, #1
 8006d56:	d135      	bne.n	8006dc4 <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006d5e:	4668      	mov	r0, sp
 8006d60:	f003 fa9e 	bl	800a2a0 <LoRaMacMibGetRequestConfirm>
 8006d64:	bb88      	cbnz	r0, 8006dca <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 8006d66:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 8006d6a:	42a3      	cmp	r3, r4
 8006d6c:	d030      	beq.n	8006dd0 <LmHandlerRequestClass+0x8c>
        switch( newClass )
 8006d6e:	2c01      	cmp	r4, #1
 8006d70:	d030      	beq.n	8006dd4 <LmHandlerRequestClass+0x90>
 8006d72:	2c02      	cmp	r4, #2
 8006d74:	d014      	beq.n	8006da0 <LmHandlerRequestClass+0x5c>
 8006d76:	b114      	cbz	r4, 8006d7e <LmHandlerRequestClass+0x3a>
 8006d78:	2000      	movs	r0, #0
}
 8006d7a:	b00a      	add	sp, #40	; 0x28
 8006d7c:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 8006d7e:	b90b      	cbnz	r3, 8006d84 <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006d80:	2000      	movs	r0, #0
 8006d82:	e7fa      	b.n	8006d7a <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 8006d84:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8006d88:	4668      	mov	r0, sp
 8006d8a:	f003 fbfd 	bl	800a588 <LoRaMacMibSetRequestConfirm>
 8006d8e:	bb20      	cbnz	r0, 8006dda <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8006d90:	4b18      	ldr	r3, [pc, #96]	; (8006df4 <LmHandlerRequestClass+0xb0>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	b31b      	cbz	r3, 8006de0 <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8006d98:	4620      	mov	r0, r4
 8006d9a:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	e7ec      	b.n	8006d7a <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 8006da0:	bb03      	cbnz	r3, 8006de4 <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 8006da2:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8006da6:	4668      	mov	r0, sp
 8006da8:	f003 fbee 	bl	800a588 <LoRaMacMibSetRequestConfirm>
 8006dac:	b9e8      	cbnz	r0, 8006dea <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8006dae:	4b11      	ldr	r3, [pc, #68]	; (8006df4 <LmHandlerRequestClass+0xb0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	b1e3      	cbz	r3, 8006df0 <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8006db6:	4620      	mov	r0, r4
 8006db8:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006dba:	2000      	movs	r0, #0
 8006dbc:	e7dd      	b.n	8006d7a <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8006dbe:	f06f 0001 	mvn.w	r0, #1
 8006dc2:	e7da      	b.n	8006d7a <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006dc4:	f06f 0002 	mvn.w	r0, #2
 8006dc8:	e7d7      	b.n	8006d7a <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 8006dca:	f04f 30ff 	mov.w	r0, #4294967295
 8006dce:	e7d4      	b.n	8006d7a <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	e7d2      	b.n	8006d7a <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	e7cf      	b.n	8006d7a <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8006dda:	f04f 30ff 	mov.w	r0, #4294967295
 8006dde:	e7cc      	b.n	8006d7a <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006de0:	2000      	movs	r0, #0
 8006de2:	e7ca      	b.n	8006d7a <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8006de4:	f04f 30ff 	mov.w	r0, #4294967295
 8006de8:	e7c7      	b.n	8006d7a <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8006dea:	f04f 30ff 	mov.w	r0, #4294967295
 8006dee:	e7c4      	b.n	8006d7a <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006df0:	2000      	movs	r0, #0
 8006df2:	e7c2      	b.n	8006d7a <LmHandlerRequestClass+0x36>
 8006df4:	20000594 	.word	0x20000594

08006df8 <LmHandlerJoin>:
{
 8006df8:	b510      	push	{r4, lr}
 8006dfa:	b090      	sub	sp, #64	; 0x40
    mlmeReq.Type = MLME_JOIN;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8006e02:	4b35      	ldr	r3, [pc, #212]	; (8006ed8 <LmHandlerJoin+0xe0>)
 8006e04:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8006e08:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 8006e0c:	f993 c005 	ldrsb.w	ip, [r3, #5]
 8006e10:	f88d c032 	strb.w	ip, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 8006e14:	2802      	cmp	r0, #2
 8006e16:	d023      	beq.n	8006e60 <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8006e18:	2001      	movs	r0, #1
 8006e1a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8006e1e:	4b2f      	ldr	r3, [pc, #188]	; (8006edc <LmHandlerJoin+0xe4>)
 8006e20:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8006e22:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 8006e24:	f883 c005 	strb.w	ip, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8006e28:	2000      	movs	r0, #0
 8006e2a:	7198      	strb	r0, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8006e2c:	7219      	strb	r1, [r3, #8]
        if( CtxRestoreDone == false )
 8006e2e:	4b2c      	ldr	r3, [pc, #176]	; (8006ee0 <LmHandlerJoin+0xe8>)
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	b30b      	cbz	r3, 8006e78 <LmHandlerJoin+0x80>
        LoRaMacStart();
 8006e34:	f003 f972 	bl	800a11c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8006e3e:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8006e42:	a801      	add	r0, sp, #4
 8006e44:	f003 fba0 	bl	800a588 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8006e48:	4b26      	ldr	r3, [pc, #152]	; (8006ee4 <LmHandlerJoin+0xec>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	b10b      	cbz	r3, 8006e54 <LmHandlerJoin+0x5c>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8006e50:	4822      	ldr	r0, [pc, #136]	; (8006edc <LmHandlerJoin+0xe4>)
 8006e52:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8006e54:	4b20      	ldr	r3, [pc, #128]	; (8006ed8 <LmHandlerJoin+0xe0>)
 8006e56:	7858      	ldrb	r0, [r3, #1]
 8006e58:	f7ff ff74 	bl	8006d44 <LmHandlerRequestClass>
}
 8006e5c:	b010      	add	sp, #64	; 0x40
 8006e5e:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8006e60:	2202      	movs	r2, #2
 8006e62:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8006e66:	4b1d      	ldr	r3, [pc, #116]	; (8006edc <LmHandlerJoin+0xe4>)
 8006e68:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 8006e6a:	7219      	strb	r1, [r3, #8]
        LoRaMacStart();
 8006e6c:	f003 f956 	bl	800a11c <LoRaMacStart>
        LoRaMacMlmeRequest( &mlmeReq );
 8006e70:	a80b      	add	r0, sp, #44	; 0x2c
 8006e72:	f003 fe63 	bl	800ab3c <LoRaMacMlmeRequest>
 8006e76:	e7f1      	b.n	8006e5c <LmHandlerJoin+0x64>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8006e78:	231e      	movs	r3, #30
 8006e7a:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8006e7e:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006e82:	a801      	add	r0, sp, #4
 8006e84:	f003 fb80 	bl	800a588 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8006e88:	231f      	movs	r3, #31
 8006e8a:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8006e8e:	4c12      	ldr	r4, [pc, #72]	; (8006ed8 <LmHandlerJoin+0xe0>)
 8006e90:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8006e94:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006e98:	a801      	add	r0, sp, #4
 8006e9a:	f003 fb75 	bl	800a588 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8006e9e:	2321      	movs	r3, #33	; 0x21
 8006ea0:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 8006ea4:	f994 3005 	ldrsb.w	r3, [r4, #5]
 8006ea8:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006eac:	a801      	add	r0, sp, #4
 8006eae:	f003 fb6b 	bl	800a588 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 8006eb2:	2320      	movs	r3, #32
 8006eb4:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 8006eb8:	f994 3005 	ldrsb.w	r3, [r4, #5]
 8006ebc:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006ec0:	a801      	add	r0, sp, #4
 8006ec2:	f003 fb61 	bl	800a588 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8006ec6:	2328      	movs	r3, #40	; 0x28
 8006ec8:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8006ecc:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <LmHandlerJoin+0xf0>)
 8006ece:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006ed0:	a801      	add	r0, sp, #4
 8006ed2:	f003 fb59 	bl	800a588 <LoRaMacMibSetRequestConfirm>
 8006ed6:	e7ad      	b.n	8006e34 <LmHandlerJoin+0x3c>
 8006ed8:	200005ac 	.word	0x200005ac
 8006edc:	2000007c 	.word	0x2000007c
 8006ee0:	2000058c 	.word	0x2000058c
 8006ee4:	20000594 	.word	0x20000594
 8006ee8:	01000300 	.word	0x01000300

08006eec <LmHandlerIsBusy>:
{
 8006eec:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 8006eee:	f002 fed1 	bl	8009c94 <LoRaMacIsBusy>
 8006ef2:	b100      	cbz	r0, 8006ef6 <LmHandlerIsBusy+0xa>
}
 8006ef4:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8006ef6:	f7ff ff13 	bl	8006d20 <LmHandlerJoinStatus>
 8006efa:	2801      	cmp	r0, #1
 8006efc:	d108      	bne.n	8006f10 <LmHandlerIsBusy+0x24>
    if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 8006efe:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <LmHandlerIsBusy+0x34>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	4798      	blx	r3
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d1f4      	bne.n	8006ef4 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 8006f0a:	f7ff feaf 	bl	8006c6c <LmHandlerPackageIsTxPending>
 8006f0e:	e7f1      	b.n	8006ef4 <LmHandlerIsBusy+0x8>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8006f10:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <LmHandlerIsBusy+0x38>)
 8006f12:	7a19      	ldrb	r1, [r3, #8]
 8006f14:	79d8      	ldrb	r0, [r3, #7]
 8006f16:	f7ff ff6f 	bl	8006df8 <LmHandlerJoin>
        return true;
 8006f1a:	2001      	movs	r0, #1
 8006f1c:	e7ea      	b.n	8006ef4 <LmHandlerIsBusy+0x8>
 8006f1e:	bf00      	nop
 8006f20:	20000598 	.word	0x20000598
 8006f24:	2000007c 	.word	0x2000007c

08006f28 <LmHandlerSend>:
{
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	460d      	mov	r5, r1
 8006f30:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 8006f32:	f002 feaf 	bl	8009c94 <LoRaMacIsBusy>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d172      	bne.n	8007020 <LmHandlerSend+0xf8>
    if( LoRaMacIsStopped() == true )
 8006f3a:	f002 fec1 	bl	8009cc0 <LoRaMacIsStopped>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d171      	bne.n	8007026 <LmHandlerSend+0xfe>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8006f42:	f7ff feed 	bl	8006d20 <LmHandlerJoinStatus>
 8006f46:	2801      	cmp	r0, #1
 8006f48:	d144      	bne.n	8006fd4 <LmHandlerSend+0xac>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 8006f4a:	4b3b      	ldr	r3, [pc, #236]	; (8007038 <LmHandlerSend+0x110>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	4798      	blx	r3
 8006f52:	b138      	cbz	r0, 8006f64 <LmHandlerSend+0x3c>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8006f54:	7823      	ldrb	r3, [r4, #0]
 8006f56:	4a38      	ldr	r2, [pc, #224]	; (8007038 <LmHandlerSend+0x110>)
 8006f58:	6812      	ldr	r2, [r2, #0]
 8006f5a:	7812      	ldrb	r2, [r2, #0]
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d001      	beq.n	8006f64 <LmHandlerSend+0x3c>
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d163      	bne.n	800702c <LmHandlerSend+0x104>
    TxParams.MsgType = isTxConfirmed;
 8006f64:	4b35      	ldr	r3, [pc, #212]	; (800703c <LmHandlerSend+0x114>)
 8006f66:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8006f68:	3d00      	subs	r5, #0
 8006f6a:	bf18      	it	ne
 8006f6c:	2501      	movne	r5, #1
 8006f6e:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8006f72:	4b33      	ldr	r3, [pc, #204]	; (8007040 <LmHandlerSend+0x118>)
 8006f74:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006f78:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8006f7c:	4669      	mov	r1, sp
 8006f7e:	7860      	ldrb	r0, [r4, #1]
 8006f80:	f003 f92c 	bl	800a1dc <LoRaMacQueryTxPossible>
 8006f84:	b370      	cbz	r0, 8006fe4 <LmHandlerSend+0xbc>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8006f86:	2300      	movs	r3, #0
 8006f88:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8006f8c:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8006f8e:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8006f92:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8006f96:	4b29      	ldr	r3, [pc, #164]	; (800703c <LmHandlerSend+0x114>)
 8006f98:	f103 0c10 	add.w	ip, r3, #16
 8006f9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006fa0:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8006fa4:	4a26      	ldr	r2, [pc, #152]	; (8007040 <LmHandlerSend+0x118>)
 8006fa6:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8006faa:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8006fac:	4631      	mov	r1, r6
 8006fae:	a801      	add	r0, sp, #4
 8006fb0:	f003 fea4 	bl	800acfc <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8006fb4:	9a05      	ldr	r2, [sp, #20]
 8006fb6:	4b23      	ldr	r3, [pc, #140]	; (8007044 <LmHandlerSend+0x11c>)
 8006fb8:	601a      	str	r2, [r3, #0]
    switch( status )
 8006fba:	2811      	cmp	r0, #17
 8006fbc:	d82d      	bhi.n	800701a <LmHandlerSend+0xf2>
 8006fbe:	e8df f000 	tbb	[pc, r0]
 8006fc2:	1c21      	.short	0x1c21
 8006fc4:	2c2c2c2c 	.word	0x2c2c2c2c
 8006fc8:	2c2c382c 	.word	0x2c2c382c
 8006fcc:	2c2c292c 	.word	0x2c2c292c
 8006fd0:	261c1c1c 	.word	0x261c1c1c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8006fd4:	4b1c      	ldr	r3, [pc, #112]	; (8007048 <LmHandlerSend+0x120>)
 8006fd6:	7a19      	ldrb	r1, [r3, #8]
 8006fd8:	79d8      	ldrb	r0, [r3, #7]
 8006fda:	f7ff ff0d 	bl	8006df8 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006fde:	f06f 0502 	mvn.w	r5, #2
 8006fe2:	e00c      	b.n	8006ffe <LmHandlerSend+0xd6>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8006fe4:	7823      	ldrb	r3, [r4, #0]
 8006fe6:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8006fea:	7863      	ldrb	r3, [r4, #1]
 8006fec:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8006ff0:	6863      	ldr	r3, [r4, #4]
 8006ff2:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8006ff4:	f04f 35ff 	mov.w	r5, #4294967295
 8006ff8:	e7cd      	b.n	8006f96 <LmHandlerSend+0x6e>
    switch( status )
 8006ffa:	f06f 0501 	mvn.w	r5, #1
}
 8006ffe:	4628      	mov	r0, r5
 8007000:	b006      	add	sp, #24
 8007002:	bd70      	pop	{r4, r5, r6, pc}
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8007004:	f115 0f07 	cmn.w	r5, #7
 8007008:	d0f9      	beq.n	8006ffe <LmHandlerSend+0xd6>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800700a:	2500      	movs	r5, #0
 800700c:	e7f7      	b.n	8006ffe <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800700e:	f06f 0504 	mvn.w	r5, #4
            break;
 8007012:	e7f4      	b.n	8006ffe <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8007014:	f06f 0505 	mvn.w	r5, #5
            break;
 8007018:	e7f1      	b.n	8006ffe <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800701a:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 800701e:	e7ee      	b.n	8006ffe <LmHandlerSend+0xd6>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007020:	f06f 0501 	mvn.w	r5, #1
 8007024:	e7eb      	b.n	8006ffe <LmHandlerSend+0xd6>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007026:	f06f 0502 	mvn.w	r5, #2
 800702a:	e7e8      	b.n	8006ffe <LmHandlerSend+0xd6>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800702c:	f06f 0503 	mvn.w	r5, #3
 8007030:	e7e5      	b.n	8006ffe <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007032:	f06f 0502 	mvn.w	r5, #2
 8007036:	e7e2      	b.n	8006ffe <LmHandlerSend+0xd6>
 8007038:	20000598 	.word	0x20000598
 800703c:	200000a8 	.word	0x200000a8
 8007040:	200005ac 	.word	0x200005ac
 8007044:	20000590 	.word	0x20000590
 8007048:	2000007c 	.word	0x2000007c

0800704c <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 800704c:	b170      	cbz	r0, 800706c <LmHandlerGetCurrentClass+0x20>
{
 800704e:	b510      	push	{r4, lr}
 8007050:	b08a      	sub	sp, #40	; 0x28
 8007052:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8007054:	2300      	movs	r3, #0
 8007056:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800705a:	4668      	mov	r0, sp
 800705c:	f003 f920 	bl	800a2a0 <LoRaMacMibGetRequestConfirm>
 8007060:	b938      	cbnz	r0, 8007072 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8007062:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007066:	7023      	strb	r3, [r4, #0]
}
 8007068:	b00a      	add	sp, #40	; 0x28
 800706a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800706c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007070:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007072:	f04f 30ff 	mov.w	r0, #4294967295
 8007076:	e7f7      	b.n	8007068 <LmHandlerGetCurrentClass+0x1c>

08007078 <McpsIndication>:
{
 8007078:	b510      	push	{r4, lr}
 800707a:	b086      	sub	sp, #24
    DeviceClass_t deviceClass = CLASS_A;
 800707c:	2300      	movs	r3, #0
 800707e:	f88d 300f 	strb.w	r3, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 8007082:	4a21      	ldr	r2, [pc, #132]	; (8007108 <McpsIndication+0x90>)
 8007084:	2301      	movs	r3, #1
 8007086:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 8007088:	7843      	ldrb	r3, [r0, #1]
 800708a:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800708c:	2b00      	cmp	r3, #0
 800708e:	d12e      	bne.n	80070ee <McpsIndication+0x76>
 8007090:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8007092:	f990 2004 	ldrsb.w	r2, [r0, #4]
 8007096:	4b1c      	ldr	r3, [pc, #112]	; (8007108 <McpsIndication+0x90>)
 8007098:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800709a:	f9b1 2000 	ldrsh.w	r2, [r1]
 800709e:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80070a0:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80070a4:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80070a6:	78ca      	ldrb	r2, [r1, #3]
 80070a8:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80070aa:	6902      	ldr	r2, [r0, #16]
 80070ac:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 80070ae:	78c3      	ldrb	r3, [r0, #3]
 80070b0:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 80070b4:	7b03      	ldrb	r3, [r0, #12]
 80070b6:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 80070ba:	6883      	ldr	r3, [r0, #8]
 80070bc:	9305      	str	r3, [sp, #20]
    if( LmHandlerCallbacks->OnRxData != NULL )
 80070be:	4b13      	ldr	r3, [pc, #76]	; (800710c <McpsIndication+0x94>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	b113      	cbz	r3, 80070cc <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 80070c6:	4910      	ldr	r1, [pc, #64]	; (8007108 <McpsIndication+0x90>)
 80070c8:	a804      	add	r0, sp, #16
 80070ca:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 80070cc:	4b0f      	ldr	r3, [pc, #60]	; (800710c <McpsIndication+0x94>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	b113      	cbz	r3, 80070da <McpsIndication+0x62>
 80070d4:	7e22      	ldrb	r2, [r4, #24]
 80070d6:	b102      	cbz	r2, 80070da <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 80070d8:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 80070da:	4621      	mov	r1, r4
 80070dc:	2001      	movs	r0, #1
 80070de:	f7ff fd33 	bl	8006b48 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 80070e2:	f10d 000f 	add.w	r0, sp, #15
 80070e6:	f7ff ffb1 	bl	800704c <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 80070ea:	7963      	ldrb	r3, [r4, #5]
 80070ec:	b90b      	cbnz	r3, 80070f2 <McpsIndication+0x7a>
}
 80070ee:	b006      	add	sp, #24
 80070f0:	bd10      	pop	{r4, pc}
        LmHandlerAppData_t appData =
 80070f2:	2100      	movs	r1, #0
 80070f4:	f88d 1004 	strb.w	r1, [sp, #4]
 80070f8:	f88d 1005 	strb.w	r1, [sp, #5]
 80070fc:	9102      	str	r1, [sp, #8]
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 80070fe:	2201      	movs	r2, #1
 8007100:	a801      	add	r0, sp, #4
 8007102:	f7ff ff11 	bl	8006f28 <LmHandlerSend>
 8007106:	e7f2      	b.n	80070ee <McpsIndication+0x76>
 8007108:	20000094 	.word	0x20000094
 800710c:	20000594 	.word	0x20000594

08007110 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 8007110:	b180      	cbz	r0, 8007134 <LmHandlerGetTxDatarate+0x24>
{
 8007112:	b510      	push	{r4, lr}
 8007114:	b08a      	sub	sp, #40	; 0x28
 8007116:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8007118:	231f      	movs	r3, #31
 800711a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800711e:	4668      	mov	r0, sp
 8007120:	f003 f8be 	bl	800a2a0 <LoRaMacMibGetRequestConfirm>
 8007124:	b948      	cbnz	r0, 800713a <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8007126:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800712a:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800712c:	4a04      	ldr	r2, [pc, #16]	; (8007140 <LmHandlerGetTxDatarate+0x30>)
 800712e:	7113      	strb	r3, [r2, #4]
}
 8007130:	b00a      	add	sp, #40	; 0x28
 8007132:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007134:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007138:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800713a:	f04f 30ff 	mov.w	r0, #4294967295
 800713e:	e7f7      	b.n	8007130 <LmHandlerGetTxDatarate+0x20>
 8007140:	200005ac 	.word	0x200005ac

08007144 <LmHandlerSetSystemMaxRxError>:
{
 8007144:	b500      	push	{lr}
 8007146:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007148:	2322      	movs	r3, #34	; 0x22
 800714a:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800714e:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007150:	4668      	mov	r0, sp
 8007152:	f003 fa19 	bl	800a588 <LoRaMacMibSetRequestConfirm>
 8007156:	b910      	cbnz	r0, 800715e <LmHandlerSetSystemMaxRxError+0x1a>
}
 8007158:	b00b      	add	sp, #44	; 0x2c
 800715a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800715e:	f04f 30ff 	mov.w	r0, #4294967295
 8007162:	e7f9      	b.n	8007158 <LmHandlerSetSystemMaxRxError+0x14>

08007164 <LmHandlerConfigure>:
{
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	b08e      	sub	sp, #56	; 0x38
 8007168:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800716a:	4c6c      	ldr	r4, [pc, #432]	; (800731c <LmHandlerConfigure+0x1b8>)
 800716c:	2218      	movs	r2, #24
 800716e:	4620      	mov	r0, r4
 8007170:	f008 f81d 	bl	800f1ae <memcpy1>
    loraInfo = LoraInfo_GetPtr();
 8007174:	f7fb fa10 	bl	8002598 <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 8007178:	7822      	ldrb	r2, [r4, #0]
 800717a:	2301      	movs	r3, #1
 800717c:	4093      	lsls	r3, r2
 800717e:	6841      	ldr	r1, [r0, #4]
 8007180:	420b      	tst	r3, r1
 8007182:	d106      	bne.n	8007192 <LmHandlerConfigure+0x2e>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 8007184:	4b66      	ldr	r3, [pc, #408]	; (8007320 <LmHandlerConfigure+0x1bc>)
 8007186:	2201      	movs	r2, #1
 8007188:	2100      	movs	r1, #0
 800718a:	4608      	mov	r0, r1
 800718c:	f009 feec 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 8007190:	e7fe      	b.n	8007190 <LmHandlerConfigure+0x2c>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 8007192:	4964      	ldr	r1, [pc, #400]	; (8007324 <LmHandlerConfigure+0x1c0>)
 8007194:	4864      	ldr	r0, [pc, #400]	; (8007328 <LmHandlerConfigure+0x1c4>)
 8007196:	f002 fde7 	bl	8009d68 <LoRaMacInitialization>
 800719a:	2800      	cmp	r0, #0
 800719c:	f040 80b7 	bne.w	800730e <LmHandlerConfigure+0x1aa>
    mibReq.Type = MIB_NVM_CTXS;
 80071a0:	2326      	movs	r3, #38	; 0x26
 80071a2:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80071a6:	a804      	add	r0, sp, #16
 80071a8:	f003 f9ee 	bl	800a588 <LoRaMacMibSetRequestConfirm>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d17c      	bne.n	80072aa <LmHandlerConfigure+0x146>
        CtxRestoreDone = true;
 80071b0:	4b5e      	ldr	r3, [pc, #376]	; (800732c <LmHandlerConfigure+0x1c8>)
 80071b2:	2201      	movs	r2, #1
 80071b4:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 80071b6:	4b5d      	ldr	r3, [pc, #372]	; (800732c <LmHandlerConfigure+0x1c8>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 809e 	beq.w	80072fc <LmHandlerConfigure+0x198>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 80071c0:	4b5b      	ldr	r3, [pc, #364]	; (8007330 <LmHandlerConfigure+0x1cc>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	b10b      	cbz	r3, 80071cc <LmHandlerConfigure+0x68>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 80071c8:	2000      	movs	r0, #0
 80071ca:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 80071cc:	2326      	movs	r3, #38	; 0x26
 80071ce:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 80071d2:	a804      	add	r0, sp, #16
 80071d4:	f003 f864 	bl	800a2a0 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 80071d8:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 80071da:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 80071de:	4b4f      	ldr	r3, [pc, #316]	; (800731c <LmHandlerConfigure+0x1b8>)
 80071e0:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 80071e2:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
 80071e6:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 80071e8:	f892 211a 	ldrb.w	r2, [r2, #282]	; 0x11a
 80071ec:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 80071ee:	4b4d      	ldr	r3, [pc, #308]	; (8007324 <LmHandlerConfigure+0x1c0>)
 80071f0:	68d9      	ldr	r1, [r3, #12]
 80071f2:	6898      	ldr	r0, [r3, #8]
 80071f4:	f007 feee 	bl	800efd4 <SecureElementInitMcuID>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	f040 808b 	bne.w	8007314 <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_DEV_ADDR;
 80071fe:	2306      	movs	r3, #6
 8007200:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007204:	a804      	add	r0, sp, #16
 8007206:	f003 f84b 	bl	800a2a0 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800720a:	4c4a      	ldr	r4, [pc, #296]	; (8007334 <LmHandlerConfigure+0x1d0>)
 800720c:	9b05      	ldr	r3, [sp, #20]
 800720e:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007210:	a804      	add	r0, sp, #16
 8007212:	f003 f9b9 	bl	800a588 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 8007216:	2302      	movs	r3, #2
 8007218:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800721c:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800721e:	a804      	add	r0, sp, #16
 8007220:	f003 f83e 	bl	800a2a0 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 8007224:	2303      	movs	r3, #3
 8007226:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800722a:	3408      	adds	r4, #8
 800722c:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800722e:	a804      	add	r0, sp, #16
 8007230:	f003 f836 	bl	800a2a0 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 8007234:	f007 ff68 	bl	800f108 <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8007238:	260f      	movs	r6, #15
 800723a:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800723e:	2301      	movs	r3, #1
 8007240:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007244:	a804      	add	r0, sp, #16
 8007246:	f003 f99f 	bl	800a588 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800724a:	2310      	movs	r3, #16
 800724c:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8007250:	2500      	movs	r5, #0
 8007252:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007256:	eb0d 0003 	add.w	r0, sp, r3
 800725a:	f003 f995 	bl	800a588 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800725e:	2304      	movs	r3, #4
 8007260:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8007264:	4c2d      	ldr	r4, [pc, #180]	; (800731c <LmHandlerConfigure+0x1b8>)
 8007266:	78a3      	ldrb	r3, [r4, #2]
 8007268:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800726c:	a804      	add	r0, sp, #16
 800726e:	f003 f98b 	bl	800a588 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8007272:	2339      	movs	r3, #57	; 0x39
 8007274:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8007278:	6963      	ldr	r3, [r4, #20]
 800727a:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800727c:	a804      	add	r0, sp, #16
 800727e:	f003 f983 	bl	800a588 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007282:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8007286:	a902      	add	r1, sp, #8
 8007288:	7820      	ldrb	r0, [r4, #0]
 800728a:	f004 feca 	bl	800c022 <RegionGetPhyParam>
 800728e:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 8007290:	1b43      	subs	r3, r0, r5
 8007292:	bf18      	it	ne
 8007294:	2301      	movne	r3, #1
 8007296:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 8007298:	2014      	movs	r0, #20
 800729a:	f7ff ff53 	bl	8007144 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800729e:	79e0      	ldrb	r0, [r4, #7]
 80072a0:	f003 fde8 	bl	800ae74 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 80072a4:	4628      	mov	r0, r5
}
 80072a6:	b00e      	add	sp, #56	; 0x38
 80072a8:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 80072aa:	2327      	movs	r3, #39	; 0x27
 80072ac:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 80072b0:	4b1f      	ldr	r3, [pc, #124]	; (8007330 <LmHandlerConfigure+0x1cc>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	b14b      	cbz	r3, 80072cc <LmHandlerConfigure+0x168>
            LoRaMacMibGetRequestConfirm( &mibReq );
 80072b8:	a804      	add	r0, sp, #16
 80072ba:	f002 fff1 	bl	800a2a0 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 80072be:	4b1c      	ldr	r3, [pc, #112]	; (8007330 <LmHandlerConfigure+0x1cc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	f44f 61ee 	mov.w	r1, #1904	; 0x770
 80072c8:	9805      	ldr	r0, [sp, #20]
 80072ca:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 80072cc:	2326      	movs	r3, #38	; 0x26
 80072ce:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80072d2:	a804      	add	r0, sp, #16
 80072d4:	f003 f958 	bl	800a588 <LoRaMacMibSetRequestConfirm>
 80072d8:	2800      	cmp	r0, #0
 80072da:	f47f af6c 	bne.w	80071b6 <LmHandlerConfigure+0x52>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 80072de:	2301      	movs	r3, #1
 80072e0:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80072e4:	a804      	add	r0, sp, #16
 80072e6:	f002 ffdb 	bl	800a2a0 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 80072ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f43f af61 	beq.w	80071b6 <LmHandlerConfigure+0x52>
                CtxRestoreDone = true;
 80072f4:	4b0d      	ldr	r3, [pc, #52]	; (800732c <LmHandlerConfigure+0x1c8>)
 80072f6:	2201      	movs	r2, #1
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	e75c      	b.n	80071b6 <LmHandlerConfigure+0x52>
        mibReq.Type = MIB_NET_ID;
 80072fc:	2305      	movs	r3, #5
 80072fe:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8007302:	2300      	movs	r3, #0
 8007304:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007306:	a804      	add	r0, sp, #16
 8007308:	f003 f93e 	bl	800a588 <LoRaMacMibSetRequestConfirm>
 800730c:	e76f      	b.n	80071ee <LmHandlerConfigure+0x8a>
        return LORAMAC_HANDLER_ERROR;
 800730e:	f04f 30ff 	mov.w	r0, #4294967295
 8007312:	e7c8      	b.n	80072a6 <LmHandlerConfigure+0x142>
        return LORAMAC_HANDLER_ERROR;
 8007314:	f04f 30ff 	mov.w	r0, #4294967295
 8007318:	e7c5      	b.n	80072a6 <LmHandlerConfigure+0x142>
 800731a:	bf00      	nop
 800731c:	200005ac 	.word	0x200005ac
 8007320:	0801222c 	.word	0x0801222c
 8007324:	200005c4 	.word	0x200005c4
 8007328:	200005dc 	.word	0x200005dc
 800732c:	2000058c 	.word	0x2000058c
 8007330:	20000594 	.word	0x20000594
 8007334:	20000574 	.word	0x20000574

08007338 <LmHandlerPackageRegister>:
{
 8007338:	b530      	push	{r4, r5, lr}
 800733a:	b083      	sub	sp, #12
 800733c:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 800733e:	2300      	movs	r3, #0
 8007340:	9301      	str	r3, [sp, #4]
    switch( id )
 8007342:	4604      	mov	r4, r0
 8007344:	b9c8      	cbnz	r0, 800737a <LmHandlerPackageRegister+0x42>
                package = LmhpCompliancePackageFactory( );
 8007346:	f000 fb21 	bl	800798c <LmhpCompliancePackageFactory>
 800734a:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 800734c:	9b01      	ldr	r3, [sp, #4]
 800734e:	b1e3      	cbz	r3, 800738a <LmHandlerPackageRegister+0x52>
        LmHandlerPackages[id] = package;
 8007350:	4a0f      	ldr	r2, [pc, #60]	; (8007390 <LmHandlerPackageRegister+0x58>)
 8007352:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8007356:	4a0f      	ldr	r2, [pc, #60]	; (8007394 <LmHandlerPackageRegister+0x5c>)
 8007358:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800735a:	4a0f      	ldr	r2, [pc, #60]	; (8007398 <LmHandlerPackageRegister+0x60>)
 800735c:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800735e:	4a0f      	ldr	r2, [pc, #60]	; (800739c <LmHandlerPackageRegister+0x64>)
 8007360:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8007362:	4a0f      	ldr	r2, [pc, #60]	; (80073a0 <LmHandlerPackageRegister+0x68>)
 8007364:	6812      	ldr	r2, [r2, #0]
 8007366:	6992      	ldr	r2, [r2, #24]
 8007368:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	22f2      	movs	r2, #242	; 0xf2
 800736e:	490d      	ldr	r1, [pc, #52]	; (80073a4 <LmHandlerPackageRegister+0x6c>)
 8007370:	4628      	mov	r0, r5
 8007372:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8007374:	2000      	movs	r0, #0
}
 8007376:	b003      	add	sp, #12
 8007378:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800737a:	a901      	add	r1, sp, #4
 800737c:	f000 fb0c 	bl	8007998 <LmhpPackagesRegister>
 8007380:	2800      	cmp	r0, #0
 8007382:	d0e3      	beq.n	800734c <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	e7f5      	b.n	8007376 <LmHandlerPackageRegister+0x3e>
        return LORAMAC_HANDLER_ERROR;
 800738a:	f04f 30ff 	mov.w	r0, #4294967295
 800738e:	e7f2      	b.n	8007376 <LmHandlerPackageRegister+0x3e>
 8007390:	20000598 	.word	0x20000598
 8007394:	08006df9 	.word	0x08006df9
 8007398:	08006f29 	.word	0x08006f29
 800739c:	08006cdd 	.word	0x08006cdd
 80073a0:	20000594 	.word	0x20000594
 80073a4:	20000480 	.word	0x20000480

080073a8 <LmHandlerInit>:
{
 80073a8:	b500      	push	{lr}
 80073aa:	b083      	sub	sp, #12
 80073ac:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 80073ae:	4b15      	ldr	r3, [pc, #84]	; (8007404 <LmHandlerInit+0x5c>)
 80073b0:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80073b2:	4b15      	ldr	r3, [pc, #84]	; (8007408 <LmHandlerInit+0x60>)
 80073b4:	4a15      	ldr	r2, [pc, #84]	; (800740c <LmHandlerInit+0x64>)
 80073b6:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80073b8:	4a15      	ldr	r2, [pc, #84]	; (8007410 <LmHandlerInit+0x68>)
 80073ba:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80073bc:	4a15      	ldr	r2, [pc, #84]	; (8007414 <LmHandlerInit+0x6c>)
 80073be:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80073c0:	4a15      	ldr	r2, [pc, #84]	; (8007418 <LmHandlerInit+0x70>)
 80073c2:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 80073c4:	6802      	ldr	r2, [r0, #0]
 80073c6:	4b15      	ldr	r3, [pc, #84]	; (800741c <LmHandlerInit+0x74>)
 80073c8:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 80073ca:	6842      	ldr	r2, [r0, #4]
 80073cc:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 80073ce:	6882      	ldr	r2, [r0, #8]
 80073d0:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 80073d2:	68c2      	ldr	r2, [r0, #12]
 80073d4:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 80073d6:	4a12      	ldr	r2, [pc, #72]	; (8007420 <LmHandlerInit+0x78>)
 80073d8:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80073da:	6982      	ldr	r2, [r0, #24]
 80073dc:	615a      	str	r2, [r3, #20]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 80073de:	4911      	ldr	r1, [pc, #68]	; (8007424 <LmHandlerInit+0x7c>)
 80073e0:	2000      	movs	r0, #0
 80073e2:	f7ff ffa9 	bl	8007338 <LmHandlerPackageRegister>
 80073e6:	b930      	cbnz	r0, 80073f6 <LmHandlerInit+0x4e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 80073e8:	a801      	add	r0, sp, #4
 80073ea:	f000 fad3 	bl	8007994 <LmhpPackagesRegistrationInit>
 80073ee:	b928      	cbnz	r0, 80073fc <LmHandlerInit+0x54>
}
 80073f0:	b003      	add	sp, #12
 80073f2:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80073f6:	f04f 30ff 	mov.w	r0, #4294967295
 80073fa:	e7f9      	b.n	80073f0 <LmHandlerInit+0x48>
        return LORAMAC_HANDLER_ERROR;
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	e7f6      	b.n	80073f0 <LmHandlerInit+0x48>
 8007402:	bf00      	nop
 8007404:	20000594 	.word	0x20000594
 8007408:	200005dc 	.word	0x200005dc
 800740c:	08006c29 	.word	0x08006c29
 8007410:	08007079 	.word	0x08007079
 8007414:	080074a9 	.word	0x080074a9
 8007418:	08006bd5 	.word	0x08006bd5
 800741c:	200005c4 	.word	0x200005c4
 8007420:	0800bfcd 	.word	0x0800bfcd
 8007424:	20000088 	.word	0x20000088

08007428 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 8007428:	b161      	cbz	r1, 8007444 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 800742a:	b118      	cbz	r0, 8007434 <LmHandlerGetVersion+0xc>
 800742c:	2801      	cmp	r0, #1
 800742e:	d005      	beq.n	800743c <LmHandlerGetVersion+0x14>
 8007430:	2000      	movs	r0, #0
 8007432:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8007434:	4a05      	ldr	r2, [pc, #20]	; (800744c <LmHandlerGetVersion+0x24>)
 8007436:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8007438:	2000      	movs	r0, #0
            break;
 800743a:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 800743c:	4a04      	ldr	r2, [pc, #16]	; (8007450 <LmHandlerGetVersion+0x28>)
 800743e:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8007440:	2000      	movs	r0, #0
            break;
 8007442:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	01000300 	.word	0x01000300
 8007450:	01010003 	.word	0x01010003

08007454 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8007454:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8007456:	f003 fd2b 	bl	800aeb0 <LoRaMacDeInitialization>
 800745a:	b900      	cbnz	r0, 800745e <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800745c:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800745e:	f06f 0001 	mvn.w	r0, #1
 8007462:	e7fb      	b.n	800745c <LmHandlerStop+0x8>

08007464 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 8007464:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 8007466:	f002 fe87 	bl	800a178 <LoRaMacHalt>
 800746a:	b900      	cbnz	r0, 800746e <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800746c:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800746e:	f06f 0001 	mvn.w	r0, #1
 8007472:	e7fb      	b.n	800746c <LmHandlerHalt+0x8>

08007474 <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 8007474:	b180      	cbz	r0, 8007498 <LmHandlerGetTxPower+0x24>
{
 8007476:	b510      	push	{r4, lr}
 8007478:	b08a      	sub	sp, #40	; 0x28
 800747a:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800747c:	2320      	movs	r3, #32
 800747e:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007482:	4668      	mov	r0, sp
 8007484:	f002 ff0c 	bl	800a2a0 <LoRaMacMibGetRequestConfirm>
 8007488:	b948      	cbnz	r0, 800749e <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800748a:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800748e:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 8007490:	4a04      	ldr	r2, [pc, #16]	; (80074a4 <LmHandlerGetTxPower+0x30>)
 8007492:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 8007494:	b00a      	add	sp, #40	; 0x28
 8007496:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007498:	f04f 30ff 	mov.w	r0, #4294967295
}
 800749c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800749e:	f04f 30ff 	mov.w	r0, #4294967295
 80074a2:	e7f7      	b.n	8007494 <LmHandlerGetTxPower+0x20>
 80074a4:	200005ac 	.word	0x200005ac

080074a8 <MlmeConfirm>:
{
 80074a8:	b510      	push	{r4, lr}
 80074aa:	b08a      	sub	sp, #40	; 0x28
 80074ac:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 80074ae:	4b2c      	ldr	r3, [pc, #176]	; (8007560 <MlmeConfirm+0xb8>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 80074b4:	7842      	ldrb	r2, [r0, #1]
 80074b6:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 80074b8:	4b2a      	ldr	r3, [pc, #168]	; (8007564 <MlmeConfirm+0xbc>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074be:	b10b      	cbz	r3, 80074c4 <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 80074c0:	4827      	ldr	r0, [pc, #156]	; (8007560 <MlmeConfirm+0xb8>)
 80074c2:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 80074c4:	4621      	mov	r1, r4
 80074c6:	2002      	movs	r0, #2
 80074c8:	f7ff fb3e 	bl	8006b48 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 80074cc:	7823      	ldrb	r3, [r4, #0]
 80074ce:	2b05      	cmp	r3, #5
 80074d0:	d037      	beq.n	8007542 <MlmeConfirm+0x9a>
 80074d2:	2b0c      	cmp	r3, #12
 80074d4:	d03d      	beq.n	8007552 <MlmeConfirm+0xaa>
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d001      	beq.n	80074de <MlmeConfirm+0x36>
}
 80074da:	b00a      	add	sp, #40	; 0x28
 80074dc:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 80074de:	2306      	movs	r3, #6
 80074e0:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 80074e4:	4668      	mov	r0, sp
 80074e6:	f002 fedb 	bl	800a2a0 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 80074ea:	9901      	ldr	r1, [sp, #4]
 80074ec:	4b1e      	ldr	r3, [pc, #120]	; (8007568 <MlmeConfirm+0xc0>)
 80074ee:	79d8      	ldrb	r0, [r3, #7]
 80074f0:	f007 fd4e 	bl	800ef90 <SecureElementSetDevAddr>
 80074f4:	b910      	cbnz	r0, 80074fc <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80074f6:	9a01      	ldr	r2, [sp, #4]
 80074f8:	4b1c      	ldr	r3, [pc, #112]	; (800756c <MlmeConfirm+0xc4>)
 80074fa:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80074fc:	4c1a      	ldr	r4, [pc, #104]	; (8007568 <MlmeConfirm+0xc0>)
 80074fe:	1d20      	adds	r0, r4, #4
 8007500:	f7ff fe06 	bl	8007110 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8007504:	1d60      	adds	r0, r4, #5
 8007506:	f7ff ffb5 	bl	8007474 <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800750a:	4b15      	ldr	r3, [pc, #84]	; (8007560 <MlmeConfirm+0xb8>)
 800750c:	785b      	ldrb	r3, [r3, #1]
 800750e:	b18b      	cbz	r3, 8007534 <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8007510:	4b15      	ldr	r3, [pc, #84]	; (8007568 <MlmeConfirm+0xc0>)
 8007512:	22ff      	movs	r2, #255	; 0xff
 8007514:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8007516:	4b13      	ldr	r3, [pc, #76]	; (8007564 <MlmeConfirm+0xbc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	b10b      	cbz	r3, 8007522 <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800751e:	4812      	ldr	r0, [pc, #72]	; (8007568 <MlmeConfirm+0xc0>)
 8007520:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007522:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <MlmeConfirm+0xb8>)
 8007524:	785b      	ldrb	r3, [r3, #1]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1d7      	bne.n	80074da <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800752a:	4b0f      	ldr	r3, [pc, #60]	; (8007568 <MlmeConfirm+0xc0>)
 800752c:	79d8      	ldrb	r0, [r3, #7]
 800752e:	f007 fdfd 	bl	800f12c <SecureElementPrintSessionKeys>
            break;
 8007532:	e7d2      	b.n	80074da <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007534:	2200      	movs	r2, #0
 8007536:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8007538:	4b0d      	ldr	r3, [pc, #52]	; (8007570 <MlmeConfirm+0xc8>)
 800753a:	7858      	ldrb	r0, [r3, #1]
 800753c:	f7ff fc02 	bl	8006d44 <LmHandlerRequestClass>
 8007540:	e7e9      	b.n	8007516 <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 8007542:	4b0c      	ldr	r3, [pc, #48]	; (8007574 <MlmeConfirm+0xcc>)
 8007544:	2201      	movs	r2, #1
 8007546:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8007548:	7a22      	ldrb	r2, [r4, #8]
 800754a:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800754c:	7a62      	ldrb	r2, [r4, #9]
 800754e:	74da      	strb	r2, [r3, #19]
            break;
 8007550:	e7c3      	b.n	80074da <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007552:	7863      	ldrb	r3, [r4, #1]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0c0      	beq.n	80074da <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 8007558:	f7ff fbc0 	bl	8006cdc <LmHandlerDeviceTimeReq>
}
 800755c:	e7bd      	b.n	80074da <MlmeConfirm+0x32>
 800755e:	bf00      	nop
 8007560:	200000a8 	.word	0x200000a8
 8007564:	20000594 	.word	0x20000594
 8007568:	2000007c 	.word	0x2000007c
 800756c:	20000574 	.word	0x20000574
 8007570:	200005ac 	.word	0x200005ac
 8007574:	20000094 	.word	0x20000094

08007578 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8007578:	b510      	push	{r4, lr}
 800757a:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 800757c:	f7ff ff72 	bl	8007464 <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 8007580:	4604      	mov	r4, r0
 8007582:	b148      	cbz	r0, 8007598 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 8007584:	b92c      	cbnz	r4, 8007592 <LmHandlerNvmDataStore+0x1a>
 8007586:	4b18      	ldr	r3, [pc, #96]	; (80075e8 <LmHandlerNvmDataStore+0x70>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	b10b      	cbz	r3, 8007592 <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800758e:	2001      	movs	r0, #1
 8007590:	4798      	blx	r3

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8007592:	4620      	mov	r0, r4
 8007594:	b00a      	add	sp, #40	; 0x28
 8007596:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8007598:	f004 fd20 	bl	800bfdc <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 800759c:	f110 0f02 	cmn.w	r0, #2
 80075a0:	d012      	beq.n	80075c8 <LmHandlerNvmDataStore+0x50>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 80075a2:	b9d0      	cbnz	r0, 80075da <LmHandlerNvmDataStore+0x62>
 80075a4:	4b10      	ldr	r3, [pc, #64]	; (80075e8 <LmHandlerNvmDataStore+0x70>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	b1cb      	cbz	r3, 80075e0 <LmHandlerNvmDataStore+0x68>
            mibReq.Type = MIB_NVM_CTXS;
 80075ac:	2326      	movs	r3, #38	; 0x26
 80075ae:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80075b2:	4668      	mov	r0, sp
 80075b4:	f002 fe74 	bl	800a2a0 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <LmHandlerNvmDataStore+0x70>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	f44f 61ee 	mov.w	r1, #1904	; 0x770
 80075c2:	9801      	ldr	r0, [sp, #4]
 80075c4:	4798      	blx	r3
 80075c6:	e001      	b.n	80075cc <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 80075c8:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 80075cc:	f004 fd16 	bl	800bffc <NvmDataMgmtStoreEnd>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d0d7      	beq.n	8007584 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80075d4:	f04f 34ff 	mov.w	r4, #4294967295
 80075d8:	e7db      	b.n	8007592 <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80075da:	f04f 34ff 	mov.w	r4, #4294967295
 80075de:	e7f5      	b.n	80075cc <LmHandlerNvmDataStore+0x54>
 80075e0:	f04f 34ff 	mov.w	r4, #4294967295
 80075e4:	e7f2      	b.n	80075cc <LmHandlerNvmDataStore+0x54>
 80075e6:	bf00      	nop
 80075e8:	20000594 	.word	0x20000594

080075ec <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80075ec:	4603      	mov	r3, r0
 80075ee:	b140      	cbz	r0, 8007602 <LmhpComplianceInit+0x16>
 80075f0:	b139      	cbz	r1, 8007602 <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 80075f2:	4807      	ldr	r0, [pc, #28]	; (8007610 <LmhpComplianceInit+0x24>)
 80075f4:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80075f6:	4b07      	ldr	r3, [pc, #28]	; (8007614 <LmhpComplianceInit+0x28>)
 80075f8:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80075fa:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 80075fc:	2201      	movs	r2, #1
 80075fe:	701a      	strb	r2, [r3, #0]
 8007600:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	4a02      	ldr	r2, [pc, #8]	; (8007610 <LmhpComplianceInit+0x24>)
 8007606:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8007608:	4a02      	ldr	r2, [pc, #8]	; (8007614 <LmhpComplianceInit+0x28>)
 800760a:	7013      	strb	r3, [r2, #0]
    }
}
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	20000618 	.word	0x20000618
 8007614:	200005ec 	.word	0x200005ec

08007618 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8007618:	4b01      	ldr	r3, [pc, #4]	; (8007620 <LmhpComplianceIsInitialized+0x8>)
 800761a:	7818      	ldrb	r0, [r3, #0]
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	200005ec 	.word	0x200005ec

08007624 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 8007624:	4b02      	ldr	r3, [pc, #8]	; (8007630 <LmhpComplianceIsRunning+0xc>)
 8007626:	7818      	ldrb	r0, [r3, #0]
 8007628:	b100      	cbz	r0, 800762c <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 800762a:	7858      	ldrb	r0, [r3, #1]
}
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	200005ec 	.word	0x200005ec

08007634 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
    if( ComplianceTestState.Initialized == false )
 8007634:	4b08      	ldr	r3, [pc, #32]	; (8007658 <LmhpComplianceOnMcpsConfirm+0x24>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	b12b      	cbz	r3, 8007646 <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800763a:	4b07      	ldr	r3, [pc, #28]	; (8007658 <LmhpComplianceOnMcpsConfirm+0x24>)
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	b113      	cbz	r3, 8007646 <LmhpComplianceOnMcpsConfirm+0x12>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 8007640:	7803      	ldrb	r3, [r0, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 8007642:	2b01      	cmp	r3, #1
 8007644:	d000      	beq.n	8007648 <LmhpComplianceOnMcpsConfirm+0x14>
        ( mcpsConfirm->AckReceived != 0 ) )
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 8007646:	4770      	bx	lr
        ( mcpsConfirm->AckReceived != 0 ) )
 8007648:	7903      	ldrb	r3, [r0, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0fb      	beq.n	8007646 <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 800764e:	4a02      	ldr	r2, [pc, #8]	; (8007658 <LmhpComplianceOnMcpsConfirm+0x24>)
 8007650:	8993      	ldrh	r3, [r2, #12]
 8007652:	3301      	adds	r3, #1
 8007654:	8193      	strh	r3, [r2, #12]
 8007656:	e7f6      	b.n	8007646 <LmhpComplianceOnMcpsConfirm+0x12>
 8007658:	200005ec 	.word	0x200005ec

0800765c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 800765c:	4b08      	ldr	r3, [pc, #32]	; (8007680 <LmhpComplianceOnMlmeConfirm+0x24>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	b12b      	cbz	r3, 800766e <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8007662:	4b07      	ldr	r3, [pc, #28]	; (8007680 <LmhpComplianceOnMlmeConfirm+0x24>)
 8007664:	785b      	ldrb	r3, [r3, #1]
 8007666:	b113      	cbz	r3, 800766e <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8007668:	7803      	ldrb	r3, [r0, #0]
 800766a:	2b05      	cmp	r3, #5
 800766c:	d000      	beq.n	8007670 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 800766e:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 8007670:	4b03      	ldr	r3, [pc, #12]	; (8007680 <LmhpComplianceOnMlmeConfirm+0x24>)
 8007672:	2201      	movs	r2, #1
 8007674:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8007676:	7a02      	ldrb	r2, [r0, #8]
 8007678:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800767a:	7a42      	ldrb	r2, [r0, #9]
 800767c:	741a      	strb	r2, [r3, #16]
 800767e:	e7f6      	b.n	800766e <LmhpComplianceOnMlmeConfirm+0x12>
 8007680:	200005ec 	.word	0x200005ec

08007684 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8007684:	4770      	bx	lr
	...

08007688 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 8007688:	4b26      	ldr	r3, [pc, #152]	; (8007724 <LmhpComplianceTxProcess+0x9c>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d040      	beq.n	8007712 <LmhpComplianceTxProcess+0x8a>
    if( ComplianceTestState.IsRunning == false )
 8007690:	4b24      	ldr	r3, [pc, #144]	; (8007724 <LmhpComplianceTxProcess+0x9c>)
 8007692:	785b      	ldrb	r3, [r3, #1]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d03f      	beq.n	8007718 <LmhpComplianceTxProcess+0x90>
{
 8007698:	b500      	push	{lr}
 800769a:	b083      	sub	sp, #12
    if( ComplianceTestState.LinkCheck == true )
 800769c:	4b21      	ldr	r3, [pc, #132]	; (8007724 <LmhpComplianceTxProcess+0x9c>)
 800769e:	7b9b      	ldrb	r3, [r3, #14]
 80076a0:	b323      	cbz	r3, 80076ec <LmhpComplianceTxProcess+0x64>
        ComplianceTestState.LinkCheck = false;
 80076a2:	4b20      	ldr	r3, [pc, #128]	; (8007724 <LmhpComplianceTxProcess+0x9c>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 80076a8:	2203      	movs	r2, #3
 80076aa:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	2105      	movs	r1, #5
 80076b0:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80076b2:	7bd9      	ldrb	r1, [r3, #15]
 80076b4:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80076b6:	7c19      	ldrb	r1, [r3, #16]
 80076b8:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 80076ba:	2201      	movs	r2, #1
 80076bc:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 80076be:	23e0      	movs	r3, #224	; 0xe0
 80076c0:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 80076c4:	4b17      	ldr	r3, [pc, #92]	; (8007724 <LmhpComplianceTxProcess+0x9c>)
 80076c6:	799a      	ldrb	r2, [r3, #6]
    LmHandlerAppData_t appData =
 80076c8:	f88d 2001 	strb.w	r2, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 80076cc:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 80076ce:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 80076d0:	4815      	ldr	r0, [pc, #84]	; (8007728 <LmhpComplianceTxProcess+0xa0>)
 80076d2:	f009 fff5 	bl	80116c0 <UTIL_TIMER_Start>
    if( LmhpCompliancePackage.OnSendRequest == NULL)
 80076d6:	4b15      	ldr	r3, [pc, #84]	; (800772c <LmhpComplianceTxProcess+0xa4>)
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	b1fb      	cbz	r3, 800771c <LmhpComplianceTxProcess+0x94>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 80076dc:	2201      	movs	r2, #1
 80076de:	4911      	ldr	r1, [pc, #68]	; (8007724 <LmhpComplianceTxProcess+0x9c>)
 80076e0:	78c9      	ldrb	r1, [r1, #3]
 80076e2:	4668      	mov	r0, sp
 80076e4:	4798      	blx	r3
}
 80076e6:	b003      	add	sp, #12
 80076e8:	f85d fb04 	ldr.w	pc, [sp], #4
        switch( ComplianceTestState.State )
 80076ec:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <LmhpComplianceTxProcess+0x9c>)
 80076ee:	789b      	ldrb	r3, [r3, #2]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d005      	beq.n	8007700 <LmhpComplianceTxProcess+0x78>
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d1e2      	bne.n	80076be <LmhpComplianceTxProcess+0x36>
                ComplianceTestState.State = 1;
 80076f8:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <LmhpComplianceTxProcess+0x9c>)
 80076fa:	2201      	movs	r2, #1
 80076fc:	709a      	strb	r2, [r3, #2]
                break;
 80076fe:	e7de      	b.n	80076be <LmhpComplianceTxProcess+0x36>
                ComplianceTestState.DataBufferSize = 2;
 8007700:	4b08      	ldr	r3, [pc, #32]	; (8007724 <LmhpComplianceTxProcess+0x9c>)
 8007702:	2202      	movs	r2, #2
 8007704:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8007706:	899a      	ldrh	r2, [r3, #12]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	0a11      	lsrs	r1, r2, #8
 800770c:	7019      	strb	r1, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800770e:	705a      	strb	r2, [r3, #1]
                break;
 8007710:	e7d5      	b.n	80076be <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 8007712:	f04f 30ff 	mov.w	r0, #4294967295
 8007716:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 8007718:	2000      	movs	r0, #0
}
 800771a:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800771c:	f04f 30ff 	mov.w	r0, #4294967295
 8007720:	e7e1      	b.n	80076e6 <LmhpComplianceTxProcess+0x5e>
 8007722:	bf00      	nop
 8007724:	200005ec 	.word	0x200005ec
 8007728:	20000600 	.word	0x20000600
 800772c:	200000c4 	.word	0x200000c4

08007730 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8007730:	4b8f      	ldr	r3, [pc, #572]	; (8007970 <LmhpComplianceOnMcpsIndication+0x240>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 8119 	beq.w	800796c <LmhpComplianceOnMcpsIndication+0x23c>
    if( mcpsIndication->RxData == false )
 800773a:	7b43      	ldrb	r3, [r0, #13]
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 8115 	beq.w	800796c <LmhpComplianceOnMcpsIndication+0x23c>
    if( ( ComplianceTestState.IsRunning == true ) &&
 8007742:	4b8b      	ldr	r3, [pc, #556]	; (8007970 <LmhpComplianceOnMcpsIndication+0x240>)
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	b12b      	cbz	r3, 8007754 <LmhpComplianceOnMcpsIndication+0x24>
        ( mcpsIndication->AckReceived == 0 ) )
 8007748:	7b82      	ldrb	r2, [r0, #14]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800774a:	b91a      	cbnz	r2, 8007754 <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 800774c:	4988      	ldr	r1, [pc, #544]	; (8007970 <LmhpComplianceOnMcpsIndication+0x240>)
 800774e:	898a      	ldrh	r2, [r1, #12]
 8007750:	3201      	adds	r2, #1
 8007752:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8007754:	78c2      	ldrb	r2, [r0, #3]
 8007756:	2ae0      	cmp	r2, #224	; 0xe0
 8007758:	f040 8108 	bne.w	800796c <LmhpComplianceOnMcpsIndication+0x23c>
{
 800775c:	b510      	push	{r4, lr}
 800775e:	b08c      	sub	sp, #48	; 0x30
    if( ComplianceTestState.IsRunning == false )
 8007760:	2b00      	cmp	r3, #0
 8007762:	d140      	bne.n	80077e6 <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8007764:	7b03      	ldrb	r3, [r0, #12]
 8007766:	2b04      	cmp	r3, #4
 8007768:	d001      	beq.n	800776e <LmhpComplianceOnMcpsIndication+0x3e>
}
 800776a:	b00c      	add	sp, #48	; 0x30
 800776c:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800776e:	6883      	ldr	r3, [r0, #8]
 8007770:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8007772:	2a01      	cmp	r2, #1
 8007774:	d1f9      	bne.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8007776:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8007778:	2a01      	cmp	r2, #1
 800777a:	d1f6      	bne.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800777c:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800777e:	2a01      	cmp	r2, #1
 8007780:	d1f3      	bne.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8007782:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007784:	2b01      	cmp	r3, #1
 8007786:	d1f0      	bne.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8007788:	4b79      	ldr	r3, [pc, #484]	; (8007970 <LmhpComplianceOnMcpsIndication+0x240>)
 800778a:	2400      	movs	r4, #0
 800778c:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 800778e:	22e0      	movs	r2, #224	; 0xe0
 8007790:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8007792:	2202      	movs	r2, #2
 8007794:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8007796:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8007798:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800779a:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800779c:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800779e:	2201      	movs	r2, #1
 80077a0:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 80077a2:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 80077a4:	2304      	movs	r3, #4
 80077a6:	f88d 3008 	strb.w	r3, [sp, #8]
            mibReq.Param.AdrEnable = true;
 80077aa:	f88d 200c 	strb.w	r2, [sp, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80077ae:	a802      	add	r0, sp, #8
 80077b0:	f002 feea 	bl	800a588 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 80077b4:	4620      	mov	r0, r4
 80077b6:	f003 fb5d 	bl	800ae74 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 80077ba:	4b6e      	ldr	r3, [pc, #440]	; (8007974 <LmhpComplianceOnMcpsIndication+0x244>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	b103      	cbz	r3, 80077c4 <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 80077c2:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 80077c4:	4c6c      	ldr	r4, [pc, #432]	; (8007978 <LmhpComplianceOnMcpsIndication+0x248>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	9200      	str	r2, [sp, #0]
 80077ca:	4b6c      	ldr	r3, [pc, #432]	; (800797c <LmhpComplianceOnMcpsIndication+0x24c>)
 80077cc:	f04f 31ff 	mov.w	r1, #4294967295
 80077d0:	4620      	mov	r0, r4
 80077d2:	f009 febd 	bl	8011550 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 80077d6:	f241 3188 	movw	r1, #5000	; 0x1388
 80077da:	4620      	mov	r0, r4
 80077dc:	f009 ffb6 	bl	801174c <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 80077e0:	f7ff ff52 	bl	8007688 <LmhpComplianceTxProcess>
 80077e4:	e7c1      	b.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 80077e6:	6882      	ldr	r2, [r0, #8]
 80077e8:	7813      	ldrb	r3, [r2, #0]
 80077ea:	4961      	ldr	r1, [pc, #388]	; (8007970 <LmhpComplianceOnMcpsIndication+0x240>)
 80077ec:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 80077ee:	2b0a      	cmp	r3, #10
 80077f0:	d8bb      	bhi.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
 80077f2:	e8df f003 	tbb	[pc, r3]
 80077f6:	2206      	.short	0x2206
 80077f8:	47312b26 	.word	0x47312b26
 80077fc:	a7a0714e 	.word	0xa7a0714e
 8007800:	b1          	.byte	0xb1
 8007801:	00          	.byte	0x00
                    TimerStop( &ComplianceTxNextPacketTimer );
 8007802:	485d      	ldr	r0, [pc, #372]	; (8007978 <LmhpComplianceOnMcpsIndication+0x248>)
 8007804:	f009 ff02 	bl	801160c <UTIL_TIMER_Stop>
                    ComplianceTestState.DownLinkCounter = 0;
 8007808:	4b59      	ldr	r3, [pc, #356]	; (8007970 <LmhpComplianceOnMcpsIndication+0x240>)
 800780a:	2200      	movs	r2, #0
 800780c:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800780e:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
 8007810:	2304      	movs	r3, #4
 8007812:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8007816:	4c57      	ldr	r4, [pc, #348]	; (8007974 <LmhpComplianceOnMcpsIndication+0x244>)
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8007820:	a802      	add	r0, sp, #8
 8007822:	f002 feb1 	bl	800a588 <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	7858      	ldrb	r0, [r3, #1]
 800782a:	f003 fb23 	bl	800ae74 <LoRaMacTestSetDutyCycleOn>
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d099      	beq.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
                        LmhpComplianceParams->StartPeripherals( );
 8007836:	4798      	blx	r3
                break;
 8007838:	e797      	b.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.DataBufferSize = 2;
 800783a:	4b4d      	ldr	r3, [pc, #308]	; (8007970 <LmhpComplianceOnMcpsIndication+0x240>)
 800783c:	2202      	movs	r2, #2
 800783e:	719a      	strb	r2, [r3, #6]
                break;
 8007840:	e793      	b.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.IsTxConfirmed = true;
 8007842:	4b4b      	ldr	r3, [pc, #300]	; (8007970 <LmhpComplianceOnMcpsIndication+0x240>)
 8007844:	2201      	movs	r2, #1
 8007846:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 8007848:	709a      	strb	r2, [r3, #2]
                break;
 800784a:	e78e      	b.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.IsTxConfirmed = false;
 800784c:	4b48      	ldr	r3, [pc, #288]	; (8007970 <LmhpComplianceOnMcpsIndication+0x240>)
 800784e:	2200      	movs	r2, #0
 8007850:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 8007852:	2201      	movs	r2, #1
 8007854:	709a      	strb	r2, [r3, #2]
                break;
 8007856:	e788      	b.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8007858:	7b01      	ldrb	r1, [r0, #12]
 800785a:	4b45      	ldr	r3, [pc, #276]	; (8007970 <LmhpComplianceOnMcpsIndication+0x240>)
 800785c:	7199      	strb	r1, [r3, #6]
                ComplianceTestState.DataBuffer[0] = 4;
 800785e:	689c      	ldr	r4, [r3, #8]
 8007860:	2304      	movs	r3, #4
 8007862:	7023      	strb	r3, [r4, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8007864:	2301      	movs	r3, #1
 8007866:	4a42      	ldr	r2, [pc, #264]	; (8007970 <LmhpComplianceOnMcpsIndication+0x240>)
 8007868:	7952      	ldrb	r2, [r2, #5]
 800786a:	428a      	cmp	r2, r1
 800786c:	bf28      	it	cs
 800786e:	460a      	movcs	r2, r1
 8007870:	429a      	cmp	r2, r3
 8007872:	f67f af7a 	bls.w	800776a <LmhpComplianceOnMcpsIndication+0x3a>
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8007876:	6882      	ldr	r2, [r0, #8]
 8007878:	5cd2      	ldrb	r2, [r2, r3]
 800787a:	3201      	adds	r2, #1
 800787c:	54e2      	strb	r2, [r4, r3]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800787e:	3301      	adds	r3, #1
 8007880:	b2db      	uxtb	r3, r3
 8007882:	e7f0      	b.n	8007866 <LmhpComplianceOnMcpsIndication+0x136>
                    mlmeReq.Type = MLME_LINK_CHECK;
 8007884:	2305      	movs	r3, #5
 8007886:	f88d 3008 	strb.w	r3, [sp, #8]
                    LoRaMacMlmeRequest( &mlmeReq );
 800788a:	a802      	add	r0, sp, #8
 800788c:	f003 f956 	bl	800ab3c <LoRaMacMlmeRequest>
                break;
 8007890:	e76b      	b.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
                    TimerStop( &ComplianceTxNextPacketTimer );
 8007892:	4839      	ldr	r0, [pc, #228]	; (8007978 <LmhpComplianceOnMcpsIndication+0x248>)
 8007894:	f009 feba 	bl	801160c <UTIL_TIMER_Stop>
                    ComplianceTestState.DownLinkCounter = 0;
 8007898:	4b35      	ldr	r3, [pc, #212]	; (8007970 <LmhpComplianceOnMcpsIndication+0x240>)
 800789a:	2200      	movs	r2, #0
 800789c:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800789e:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
 80078a0:	2304      	movs	r3, #4
 80078a2:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80078a6:	4c33      	ldr	r4, [pc, #204]	; (8007974 <LmhpComplianceOnMcpsIndication+0x244>)
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80078b0:	a802      	add	r0, sp, #8
 80078b2:	f002 fe69 	bl	800a588 <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	7858      	ldrb	r0, [r3, #1]
 80078ba:	f003 fadb 	bl	800ae74 <LoRaMacTestSetDutyCycleOn>
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	b103      	cbz	r3, 80078c6 <LmhpComplianceOnMcpsIndication+0x196>
                        LmhpComplianceParams->StartPeripherals( );
 80078c4:	4798      	blx	r3
                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 80078c6:	4b2e      	ldr	r3, [pc, #184]	; (8007980 <LmhpComplianceOnMcpsIndication+0x250>)
 80078c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f43f af4d 	beq.w	800776a <LmhpComplianceOnMcpsIndication+0x3a>
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80078d0:	2101      	movs	r1, #1
 80078d2:	2002      	movs	r0, #2
 80078d4:	4798      	blx	r3
                break;
 80078d6:	e748      	b.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
                    if( mcpsIndication->BufferSize == 3 )
 80078d8:	7b03      	ldrb	r3, [r0, #12]
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d008      	beq.n	80078f0 <LmhpComplianceOnMcpsIndication+0x1c0>
                    else if( mcpsIndication->BufferSize == 7 )
 80078de:	2b07      	cmp	r3, #7
 80078e0:	d010      	beq.n	8007904 <LmhpComplianceOnMcpsIndication+0x1d4>
                    LoRaMacMlmeRequest( &mlmeReq );
 80078e2:	a802      	add	r0, sp, #8
 80078e4:	f003 f92a 	bl	800ab3c <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 80078e8:	4b21      	ldr	r3, [pc, #132]	; (8007970 <LmhpComplianceOnMcpsIndication+0x240>)
 80078ea:	2201      	movs	r2, #1
 80078ec:	709a      	strb	r2, [r3, #2]
                break;
 80078ee:	e73c      	b.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
                        mlmeReq.Type = MLME_TXCW;
 80078f0:	2306      	movs	r3, #6
 80078f2:	f88d 3008 	strb.w	r3, [sp, #8]
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 80078f6:	7851      	ldrb	r1, [r2, #1]
 80078f8:	7893      	ldrb	r3, [r2, #2]
 80078fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80078fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007902:	e7ee      	b.n	80078e2 <LmhpComplianceOnMcpsIndication+0x1b2>
                        mlmeReq.Type = MLME_TXCW_1;
 8007904:	f88d 3008 	strb.w	r3, [sp, #8]
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007908:	7851      	ldrb	r1, [r2, #1]
 800790a:	7893      	ldrb	r3, [r2, #2]
 800790c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007910:	f8ad 300c 	strh.w	r3, [sp, #12]
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8007914:	78d1      	ldrb	r1, [r2, #3]
 8007916:	7913      	ldrb	r3, [r2, #4]
 8007918:	021b      	lsls	r3, r3, #8
 800791a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800791e:	7952      	ldrb	r2, [r2, #5]
 8007920:	4313      	orrs	r3, r2
 8007922:	2264      	movs	r2, #100	; 0x64
 8007924:	fb02 f303 	mul.w	r3, r2, r3
 8007928:	9304      	str	r3, [sp, #16]
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800792a:	6883      	ldr	r3, [r0, #8]
 800792c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007930:	f88d 3014 	strb.w	r3, [sp, #20]
 8007934:	e7d5      	b.n	80078e2 <LmhpComplianceOnMcpsIndication+0x1b2>
                    mlmeReq.Type = MLME_DEVICE_TIME;
 8007936:	230a      	movs	r3, #10
 8007938:	f88d 3008 	strb.w	r3, [sp, #8]
                    LoRaMacMlmeRequest( &mlmeReq );
 800793c:	a802      	add	r0, sp, #8
 800793e:	f003 f8fd 	bl	800ab3c <LoRaMacMlmeRequest>
                break;
 8007942:	e712      	b.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
                    mibReq.Type = MIB_DEVICE_CLASS;
 8007944:	2300      	movs	r3, #0
 8007946:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800794a:	7853      	ldrb	r3, [r2, #1]
 800794c:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8007950:	a802      	add	r0, sp, #8
 8007952:	f002 fe19 	bl	800a588 <LoRaMacMibSetRequestConfirm>
                break;
 8007956:	e708      	b.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 8007958:	230d      	movs	r3, #13
 800795a:	f88d 3008 	strb.w	r3, [sp, #8]
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800795e:	7853      	ldrb	r3, [r2, #1]
 8007960:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMlmeRequest( &mlmeReq );
 8007964:	a802      	add	r0, sp, #8
 8007966:	f003 f8e9 	bl	800ab3c <LoRaMacMlmeRequest>
                break;
 800796a:	e6fe      	b.n	800776a <LmhpComplianceOnMcpsIndication+0x3a>
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	200005ec 	.word	0x200005ec
 8007974:	20000618 	.word	0x20000618
 8007978:	20000600 	.word	0x20000600
 800797c:	08007985 	.word	0x08007985
 8007980:	200000c4 	.word	0x200000c4

08007984 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 8007984:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 8007986:	f7ff fe7f 	bl	8007688 <LmhpComplianceTxProcess>
}
 800798a:	bd08      	pop	{r3, pc}

0800798c <LmhpCompliancePackageFactory>:
}
 800798c:	4800      	ldr	r0, [pc, #0]	; (8007990 <LmhpCompliancePackageFactory+0x4>)
 800798e:	4770      	bx	lr
 8007990:	200000c4 	.word	0x200000c4

08007994 <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 8007994:	2000      	movs	r0, #0
 8007996:	4770      	bx	lr

08007998 <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8007998:	f04f 30ff 	mov.w	r0, #4294967295
 800799c:	4770      	bx	lr
	...

080079a0 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80079a0:	4b07      	ldr	r3, [pc, #28]	; (80079c0 <UpdateRxSlotIdleState+0x20>)
 80079a2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d004      	beq.n	80079b4 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80079aa:	4b06      	ldr	r3, [pc, #24]	; (80079c4 <UpdateRxSlotIdleState+0x24>)
 80079ac:	2206      	movs	r2, #6
 80079ae:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 80079b2:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80079b4:	4b03      	ldr	r3, [pc, #12]	; (80079c4 <UpdateRxSlotIdleState+0x24>)
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	20008000 	.word	0x20008000
 80079c4:	20000620 	.word	0x20000620

080079c8 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 80079c8:	4b01      	ldr	r3, [pc, #4]	; (80079d0 <LoRaMacEnableRequests+0x8>)
 80079ca:	f883 0482 	strb.w	r0, [r3, #1154]	; 0x482
}
 80079ce:	4770      	bx	lr
 80079d0:	20000620 	.word	0x20000620

080079d4 <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 80079d4:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80079d6:	4b15      	ldr	r3, [pc, #84]	; (8007a2c <LoRaMacHandleIndicationEvents+0x58>)
 80079d8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80079dc:	f013 0f08 	tst.w	r3, #8
 80079e0:	d00e      	beq.n	8007a00 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80079e2:	4812      	ldr	r0, [pc, #72]	; (8007a2c <LoRaMacHandleIndicationEvents+0x58>)
 80079e4:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 80079e8:	f36f 03c3 	bfc	r3, #3, #1
 80079ec:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80079f0:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 80079fa:	f200 405c 	addw	r0, r0, #1116	; 0x45c
 80079fe:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007a00:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <LoRaMacHandleIndicationEvents+0x58>)
 8007a02:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007a06:	f013 0f02 	tst.w	r3, #2
 8007a0a:	d00e      	beq.n	8007a2a <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8007a0c:	4807      	ldr	r0, [pc, #28]	; (8007a2c <LoRaMacHandleIndicationEvents+0x58>)
 8007a0e:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8007a12:	f36f 0341 	bfc	r3, #1, #1
 8007a16:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8007a1a:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8007a24:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 8007a28:	4798      	blx	r3
    }
}
 8007a2a:	bd08      	pop	{r3, pc}
 8007a2c:	20000620 	.word	0x20000620

08007a30 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <LoRaMacCheckForRxAbort+0x20>)
 8007a32:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007a36:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a3a:	d008      	beq.n	8007a4e <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8007a3c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007a40:	4a03      	ldr	r2, [pc, #12]	; (8007a50 <LoRaMacCheckForRxAbort+0x20>)
 8007a42:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007a46:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8007a4a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8007a4e:	4770      	bx	lr
 8007a50:	20000620 	.word	0x20000620

08007a54 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8007a54:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <CalculateBackOff+0x1c>)
 8007a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a58:	b94b      	cbnz	r3, 8007a6e <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8007a5a:	4a05      	ldr	r2, [pc, #20]	; (8007a70 <CalculateBackOff+0x1c>)
 8007a5c:	f8b2 311e 	ldrh.w	r3, [r2, #286]	; 0x11e
 8007a60:	4904      	ldr	r1, [pc, #16]	; (8007a74 <CalculateBackOff+0x20>)
 8007a62:	f8d1 1414 	ldr.w	r1, [r1, #1044]	; 0x414
 8007a66:	3b01      	subs	r3, #1
 8007a68:	fb01 f303 	mul.w	r3, r1, r3
 8007a6c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8007a6e:	4770      	bx	lr
 8007a70:	20008000 	.word	0x20008000
 8007a74:	20000620 	.word	0x20000620

08007a78 <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8007a78:	b508      	push	{r3, lr}
 8007a7a:	4684      	mov	ip, r0
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8007a80:	4b06      	ldr	r3, [pc, #24]	; (8007a9c <SetTxContinuousWave1+0x24>)
 8007a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a84:	4662      	mov	r2, ip
 8007a86:	b249      	sxtb	r1, r1
 8007a88:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007a8a:	4a05      	ldr	r2, [pc, #20]	; (8007aa0 <SetTxContinuousWave1+0x28>)
 8007a8c:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8007a90:	f043 0302 	orr.w	r3, r3, #2
 8007a94:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8007a98:	2000      	movs	r0, #0
 8007a9a:	bd08      	pop	{r3, pc}
 8007a9c:	08012954 	.word	0x08012954
 8007aa0:	20000620 	.word	0x20000620

08007aa4 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	b1f8      	cbz	r0, 8007ae8 <DetermineFrameType+0x44>
 8007aa8:	b301      	cbz	r1, 8007aec <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8007aaa:	7b03      	ldrb	r3, [r0, #12]
 8007aac:	f013 030f 	ands.w	r3, r3, #15
 8007ab0:	d005      	beq.n	8007abe <DetermineFrameType+0x1a>
 8007ab2:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007ab6:	b110      	cbz	r0, 8007abe <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8007ab8:	2000      	movs	r0, #0
 8007aba:	7008      	strb	r0, [r1, #0]
 8007abc:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8007abe:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8007ac2:	b910      	cbnz	r0, 8007aca <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	700b      	strb	r3, [r1, #0]
 8007ac8:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8007aca:	b92b      	cbnz	r3, 8007ad8 <DetermineFrameType+0x34>
 8007acc:	f892 0020 	ldrb.w	r0, [r2, #32]
 8007ad0:	b910      	cbnz	r0, 8007ad8 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	700b      	strb	r3, [r1, #0]
 8007ad6:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8007ad8:	b953      	cbnz	r3, 8007af0 <DetermineFrameType+0x4c>
 8007ada:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007ade:	b14a      	cbz	r2, 8007af4 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8007ae4:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8007ae6:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007ae8:	2003      	movs	r0, #3
 8007aea:	4770      	bx	lr
 8007aec:	2003      	movs	r0, #3
 8007aee:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8007af0:	2018      	movs	r0, #24
 8007af2:	4770      	bx	lr
 8007af4:	2018      	movs	r0, #24
}
 8007af6:	4770      	bx	lr

08007af8 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8007af8:	4b0f      	ldr	r3, [pc, #60]	; (8007b38 <CheckRetransUnconfirmedUplink+0x40>)
 8007afa:	f893 240c 	ldrb.w	r2, [r3, #1036]	; 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8007afe:	4b0f      	ldr	r3, [pc, #60]	; (8007b3c <CheckRetransUnconfirmedUplink+0x44>)
 8007b00:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d20f      	bcs.n	8007b28 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007b08:	4b0b      	ldr	r3, [pc, #44]	; (8007b38 <CheckRetransUnconfirmedUplink+0x40>)
 8007b0a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007b0e:	f013 0f02 	tst.w	r3, #2
 8007b12:	d00b      	beq.n	8007b2c <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8007b14:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <CheckRetransUnconfirmedUplink+0x44>)
 8007b16:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8007b1a:	b14b      	cbz	r3, 8007b30 <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8007b1c:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <CheckRetransUnconfirmedUplink+0x40>)
 8007b1e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8007b22:	b13b      	cbz	r3, 8007b34 <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 8007b24:	2000      	movs	r0, #0
 8007b26:	4770      	bx	lr
        return true;
 8007b28:	2001      	movs	r0, #1
 8007b2a:	4770      	bx	lr
    return false;
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	4770      	bx	lr
            return true;
 8007b30:	2001      	movs	r0, #1
 8007b32:	4770      	bx	lr
                return true;
 8007b34:	2001      	movs	r0, #1
}
 8007b36:	4770      	bx	lr
 8007b38:	20000620 	.word	0x20000620
 8007b3c:	20008000 	.word	0x20008000

08007b40 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8007b40:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <CheckRetransConfirmedUplink+0x2c>)
 8007b42:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
        MacCtx.AckTimeoutRetries )
 8007b46:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d209      	bcs.n	8007b62 <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007b4e:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <CheckRetransConfirmedUplink+0x2c>)
 8007b50:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007b54:	f013 0f02 	tst.w	r3, #2
 8007b58:	d005      	beq.n	8007b66 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007b5a:	4b04      	ldr	r3, [pc, #16]	; (8007b6c <CheckRetransConfirmedUplink+0x2c>)
 8007b5c:	f893 0438 	ldrb.w	r0, [r3, #1080]	; 0x438
 8007b60:	4770      	bx	lr
        return true;
 8007b62:	2001      	movs	r0, #1
 8007b64:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 8007b66:	2000      	movs	r0, #0
}
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	20000620 	.word	0x20000620

08007b70 <StopRetransmission>:
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007b70:	4b11      	ldr	r3, [pc, #68]	; (8007bb8 <StopRetransmission+0x48>)
 8007b72:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007b76:	f013 0f02 	tst.w	r3, #2
 8007b7a:	d004      	beq.n	8007b86 <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8007b7c:	4b0e      	ldr	r3, [pc, #56]	; (8007bb8 <StopRetransmission+0x48>)
 8007b7e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d907      	bls.n	8007b96 <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8007b86:	4b0d      	ldr	r3, [pc, #52]	; (8007bbc <StopRetransmission+0x4c>)
 8007b88:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8007b8c:	b11b      	cbz	r3, 8007b96 <StopRetransmission+0x26>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8007b8e:	4a0b      	ldr	r2, [pc, #44]	; (8007bbc <StopRetransmission+0x4c>)
 8007b90:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007b92:	3301      	adds	r3, #1
 8007b94:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8007b96:	4b08      	ldr	r3, [pc, #32]	; (8007bb8 <StopRetransmission+0x48>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 8007b9e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8007ba2:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007ba6:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8007baa:	f022 0202 	bic.w	r2, r2, #2
 8007bae:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8007bb2:	2001      	movs	r0, #1
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	20000620 	.word	0x20000620
 8007bbc:	20008000 	.word	0x20008000

08007bc0 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8007bc0:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007bc2:	4b04      	ldr	r3, [pc, #16]	; (8007bd4 <OnMacProcessNotify+0x14>)
 8007bc4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007bc8:	b113      	cbz	r3, 8007bd0 <OnMacProcessNotify+0x10>
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	b103      	cbz	r3, 8007bd0 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007bce:	4798      	blx	r3
    }
}
 8007bd0:	bd08      	pop	{r3, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20000620 	.word	0x20000620

08007bd8 <OnRadioRxError>:
{
 8007bd8:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8007bda:	4a04      	ldr	r2, [pc, #16]	; (8007bec <OnRadioRxError+0x14>)
 8007bdc:	7813      	ldrb	r3, [r2, #0]
 8007bde:	f043 0302 	orr.w	r3, r3, #2
 8007be2:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8007be4:	f7ff ffec 	bl	8007bc0 <OnMacProcessNotify>
}
 8007be8:	bd08      	pop	{r3, pc}
 8007bea:	bf00      	nop
 8007bec:	2000061c 	.word	0x2000061c

08007bf0 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8007bf0:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8007bf2:	4b04      	ldr	r3, [pc, #16]	; (8007c04 <CallNvmDataChangeCallback+0x14>)
 8007bf4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007bf8:	b113      	cbz	r3, 8007c00 <CallNvmDataChangeCallback+0x10>
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	b103      	cbz	r3, 8007c00 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8007bfe:	4798      	blx	r3
    }
}
 8007c00:	bd08      	pop	{r3, pc}
 8007c02:	bf00      	nop
 8007c04:	20000620 	.word	0x20000620

08007c08 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8007c08:	4b04      	ldr	r3, [pc, #16]	; (8007c1c <IsRequestPending+0x14>)
 8007c0a:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
 8007c0e:	f010 0005 	ands.w	r0, r0, #5
 8007c12:	d100      	bne.n	8007c16 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8007c14:	4770      	bx	lr
        return 1;
 8007c16:	2001      	movs	r0, #1
 8007c18:	e7fc      	b.n	8007c14 <IsRequestPending+0xc>
 8007c1a:	bf00      	nop
 8007c1c:	20000620 	.word	0x20000620

08007c20 <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8007c20:	4a13      	ldr	r2, [pc, #76]	; (8007c70 <AckTimeoutRetriesProcess+0x50>)
 8007c22:	f892 340e 	ldrb.w	r3, [r2, #1038]	; 0x40e
 8007c26:	f892 240d 	ldrb.w	r2, [r2, #1037]	; 0x40d
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d207      	bcs.n	8007c3e <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 8007c2e:	3301      	adds	r3, #1
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	4a0f      	ldr	r2, [pc, #60]	; (8007c70 <AckTimeoutRetriesProcess+0x50>)
 8007c34:	f882 340e 	strb.w	r3, [r2, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8007c38:	f013 0f01 	tst.w	r3, #1
 8007c3c:	d100      	bne.n	8007c40 <AckTimeoutRetriesProcess+0x20>
 8007c3e:	4770      	bx	lr
{
 8007c40:	b510      	push	{r4, lr}
 8007c42:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8007c44:	2322      	movs	r3, #34	; 0x22
 8007c46:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007c4a:	4c0a      	ldr	r4, [pc, #40]	; (8007c74 <AckTimeoutRetriesProcess+0x54>)
 8007c4c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 8007c50:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007c54:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 8007c58:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007c5c:	a902      	add	r1, sp, #8
 8007c5e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8007c62:	f004 f9de 	bl	800c022 <RegionGetPhyParam>
 8007c66:	9001      	str	r0, [sp, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8007c68:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 8007c6c:	b004      	add	sp, #16
 8007c6e:	bd10      	pop	{r4, pc}
 8007c70:	20000620 	.word	0x20000620
 8007c74:	20008000 	.word	0x20008000

08007c78 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8007c78:	b500      	push	{lr}
 8007c7a:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007c7c:	4b0d      	ldr	r3, [pc, #52]	; (8007cb4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8007c7e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8007c82:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8007c86:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007c8a:	220d      	movs	r2, #13
 8007c8c:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007c90:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8007c94:	b113      	cbz	r3, 8007c9c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007c96:	230e      	movs	r3, #14
 8007c98:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007c9c:	a902      	add	r1, sp, #8
 8007c9e:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8007ca0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8007ca4:	f004 f9bd 	bl	800c022 <RegionGetPhyParam>
 8007ca8:	9001      	str	r0, [sp, #4]
}
 8007caa:	b2c0      	uxtb	r0, r0
 8007cac:	b005      	add	sp, #20
 8007cae:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cb2:	bf00      	nop
 8007cb4:	20008000 	.word	0x20008000

08007cb8 <ValidatePayloadLength>:
{
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4605      	mov	r5, r0
 8007cbc:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007cbe:	4608      	mov	r0, r1
 8007cc0:	f7ff ffda 	bl	8007c78 <GetMaxAppPayloadWithoutFOptsLength>
 8007cc4:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8007cc6:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d303      	bcc.n	8007cd4 <ValidatePayloadLength+0x1c>
 8007ccc:	2aff      	cmp	r2, #255	; 0xff
 8007cce:	d903      	bls.n	8007cd8 <ValidatePayloadLength+0x20>
    return false;
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	e000      	b.n	8007cd6 <ValidatePayloadLength+0x1e>
 8007cd4:	2000      	movs	r0, #0
}
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8007cd8:	2001      	movs	r0, #1
 8007cda:	e7fc      	b.n	8007cd6 <ValidatePayloadLength+0x1e>

08007cdc <ProcessRadioTxDone>:
{
 8007cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cde:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007ce0:	4b40      	ldr	r3, [pc, #256]	; (8007de4 <ProcessRadioTxDone+0x108>)
 8007ce2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d002      	beq.n	8007cf0 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8007cea:	4b3f      	ldr	r3, [pc, #252]	; (8007de8 <ProcessRadioTxDone+0x10c>)
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cee:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cf0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007cf4:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8007cf6:	f009 fc49 	bl	801158c <UTIL_TIMER_GetCurrentTime>
 8007cfa:	4b3c      	ldr	r3, [pc, #240]	; (8007dec <ProcessRadioTxDone+0x110>)
 8007cfc:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8007cfe:	4c3c      	ldr	r4, [pc, #240]	; (8007df0 <ProcessRadioTxDone+0x114>)
 8007d00:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 8007d04:	1a2d      	subs	r5, r5, r0
 8007d06:	f504 7660 	add.w	r6, r4, #896	; 0x380
 8007d0a:	4429      	add	r1, r5
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f009 fd1d 	bl	801174c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8007d12:	4630      	mov	r0, r6
 8007d14:	f009 fcd4 	bl	80116c0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8007d18:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8007d1c:	f504 7466 	add.w	r4, r4, #920	; 0x398
 8007d20:	4429      	add	r1, r5
 8007d22:	4620      	mov	r0, r4
 8007d24:	f009 fd12 	bl	801174c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f009 fcc9 	bl	80116c0 <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2e:	f387 8810 	msr	PRIMASK, r7
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8007d32:	4b2c      	ldr	r3, [pc, #176]	; (8007de4 <ProcessRadioTxDone+0x108>)
 8007d34:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d004      	beq.n	8007d46 <ProcessRadioTxDone+0x6a>
 8007d3c:	f5a4 7366 	sub.w	r3, r4, #920	; 0x398
 8007d40:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8007d44:	b1ab      	cbz	r3, 8007d72 <ProcessRadioTxDone+0x96>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8007d46:	2316      	movs	r3, #22
 8007d48:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007d4c:	a90a      	add	r1, sp, #40	; 0x28
 8007d4e:	4b25      	ldr	r3, [pc, #148]	; (8007de4 <ProcessRadioTxDone+0x108>)
 8007d50:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8007d54:	f004 f965 	bl	800c022 <RegionGetPhyParam>
 8007d58:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8007d5a:	4c25      	ldr	r4, [pc, #148]	; (8007df0 <ProcessRadioTxDone+0x114>)
 8007d5c:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8007d60:	f504 747d 	add.w	r4, r4, #1012	; 0x3f4
 8007d64:	4401      	add	r1, r0
 8007d66:	4620      	mov	r0, r4
 8007d68:	f009 fcf0 	bl	801174c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f009 fca7 	bl	80116c0 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8007d72:	4b1e      	ldr	r3, [pc, #120]	; (8007dec <ProcessRadioTxDone+0x110>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4c1b      	ldr	r4, [pc, #108]	; (8007de4 <ProcessRadioTxDone+0x108>)
 8007d78:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8007d7a:	4f1d      	ldr	r7, [pc, #116]	; (8007df0 <ProcessRadioTxDone+0x114>)
 8007d7c:	f897 2411 	ldrb.w	r2, [r7, #1041]	; 0x411
 8007d80:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8007d84:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007d86:	ae0c      	add	r6, sp, #48	; 0x30
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f009 fb73 	bl	8011474 <SysTimeGetMcuTime>
 8007d8e:	ad02      	add	r5, sp, #8
 8007d90:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007d9a:	e896 0006 	ldmia.w	r6, {r1, r2}
 8007d9e:	4628      	mov	r0, r5
 8007da0:	f009 fb05 	bl	80113ae <SysTimeSub>
 8007da4:	ab07      	add	r3, sp, #28
 8007da6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007daa:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8007dae:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8007db2:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8007db4:	2301      	movs	r3, #1
 8007db6:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007dba:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8007dbe:	b90b      	cbnz	r3, 8007dc4 <ProcessRadioTxDone+0xe8>
        txDone.Joined  = false;
 8007dc0:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8007dc4:	a904      	add	r1, sp, #16
 8007dc6:	4b07      	ldr	r3, [pc, #28]	; (8007de4 <ProcessRadioTxDone+0x108>)
 8007dc8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8007dcc:	f004 f940 	bl	800c050 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8007dd0:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <ProcessRadioTxDone+0x114>)
 8007dd2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8007dd6:	b91b      	cbnz	r3, 8007de0 <ProcessRadioTxDone+0x104>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007dd8:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <ProcessRadioTxDone+0x114>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
}
 8007de0:	b00f      	add	sp, #60	; 0x3c
 8007de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007de4:	20008000 	.word	0x20008000
 8007de8:	08012954 	.word	0x08012954
 8007dec:	20000b38 	.word	0x20000b38
 8007df0:	20000620 	.word	0x20000620

08007df4 <OnAckTimeoutTimerEvent>:
{
 8007df4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8007df6:	4c0d      	ldr	r4, [pc, #52]	; (8007e2c <OnAckTimeoutTimerEvent+0x38>)
 8007df8:	f504 707d 	add.w	r0, r4, #1012	; 0x3f4
 8007dfc:	f009 fc06 	bl	801160c <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8007e00:	f894 3410 	ldrb.w	r3, [r4, #1040]	; 0x410
 8007e04:	b113      	cbz	r3, 8007e0c <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8007e06:	2201      	movs	r2, #1
 8007e08:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007e0c:	4b08      	ldr	r3, [pc, #32]	; (8007e30 <OnAckTimeoutTimerEvent+0x3c>)
 8007e0e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d002      	beq.n	8007e1c <OnAckTimeoutTimerEvent+0x28>
    OnMacProcessNotify( );
 8007e16:	f7ff fed3 	bl	8007bc0 <OnMacProcessNotify>
}
 8007e1a:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 8007e1c:	4a03      	ldr	r2, [pc, #12]	; (8007e2c <OnAckTimeoutTimerEvent+0x38>)
 8007e1e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007e22:	f043 0310 	orr.w	r3, r3, #16
 8007e26:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8007e2a:	e7f4      	b.n	8007e16 <OnAckTimeoutTimerEvent+0x22>
 8007e2c:	20000620 	.word	0x20000620
 8007e30:	20008000 	.word	0x20008000

08007e34 <PrepareRxDoneAbort>:
{
 8007e34:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8007e36:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <PrepareRxDoneAbort+0x3c>)
 8007e38:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8007e3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e40:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8007e44:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8007e48:	b973      	cbnz	r3, 8007e68 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8007e4a:	4b09      	ldr	r3, [pc, #36]	; (8007e70 <PrepareRxDoneAbort+0x3c>)
 8007e4c:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8007e50:	f042 0202 	orr.w	r2, r2, #2
 8007e54:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007e58:	b2d2      	uxtb	r2, r2
 8007e5a:	f042 0210 	orr.w	r2, r2, #16
 8007e5e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8007e62:	f7ff fd9d 	bl	80079a0 <UpdateRxSlotIdleState>
}
 8007e66:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 8007e68:	2000      	movs	r0, #0
 8007e6a:	f7ff ffc3 	bl	8007df4 <OnAckTimeoutTimerEvent>
 8007e6e:	e7ec      	b.n	8007e4a <PrepareRxDoneAbort+0x16>
 8007e70:	20000620 	.word	0x20000620

08007e74 <LoRaMacCheckForBeaconAcquisition>:
{
 8007e74:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8007e76:	200c      	movs	r0, #12
 8007e78:	f003 fb40 	bl	800b4fc <LoRaMacConfirmQueueIsCmdActive>
 8007e7c:	b188      	cbz	r0, 8007ea2 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8007e7e:	4b0b      	ldr	r3, [pc, #44]	; (8007eac <LoRaMacCheckForBeaconAcquisition+0x38>)
 8007e80:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8007e84:	f010 0f01 	tst.w	r0, #1
 8007e88:	d10d      	bne.n	8007ea6 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8007e8a:	f010 0004 	ands.w	r0, r0, #4
 8007e8e:	d009      	beq.n	8007ea4 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007e90:	461a      	mov	r2, r3
 8007e92:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007e96:	f023 0302 	bic.w	r3, r3, #2
 8007e9a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	e000      	b.n	8007ea4 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8007ea2:	2000      	movs	r0, #0
}
 8007ea4:	bd08      	pop	{r3, pc}
    return 0x00;
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	e7fc      	b.n	8007ea4 <LoRaMacCheckForBeaconAcquisition+0x30>
 8007eaa:	bf00      	nop
 8007eac:	20000620 	.word	0x20000620

08007eb0 <GetFCntDown>:
{
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	9c05      	ldr	r4, [sp, #20]
 8007eb4:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8007eb6:	b302      	cbz	r2, 8007efa <GetFCntDown+0x4a>
 8007eb8:	4694      	mov	ip, r2
 8007eba:	b304      	cbz	r4, 8007efe <GetFCntDown+0x4e>
 8007ebc:	b30d      	cbz	r5, 8007f02 <GetFCntDown+0x52>
    switch( addrID )
 8007ebe:	b188      	cbz	r0, 8007ee4 <GetFCntDown+0x34>
 8007ec0:	2801      	cmp	r0, #1
 8007ec2:	d120      	bne.n	8007f06 <GetFCntDown+0x56>
            if( lrWanVersion.Fields.Minor == 1 )
 8007ec4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007ec8:	2a01      	cmp	r2, #1
 8007eca:	d002      	beq.n	8007ed2 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	7023      	strb	r3, [r4, #0]
 8007ed0:	e00a      	b.n	8007ee8 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8007ed2:	b121      	cbz	r1, 8007ede <GetFCntDown+0x2e>
 8007ed4:	2903      	cmp	r1, #3
 8007ed6:	d002      	beq.n	8007ede <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	7023      	strb	r3, [r4, #0]
 8007edc:	e004      	b.n	8007ee8 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 8007ede:	2302      	movs	r3, #2
 8007ee0:	7023      	strb	r3, [r4, #0]
 8007ee2:	e001      	b.n	8007ee8 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8007ee4:	2304      	movs	r3, #4
 8007ee6:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8007ee8:	462b      	mov	r3, r5
 8007eea:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 8007eee:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8007ef2:	7820      	ldrb	r0, [r4, #0]
 8007ef4:	f003 fd2c 	bl	800b950 <LoRaMacCryptoGetFCntDown>
}
 8007ef8:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8007efa:	200a      	movs	r0, #10
 8007efc:	e7fc      	b.n	8007ef8 <GetFCntDown+0x48>
 8007efe:	200a      	movs	r0, #10
 8007f00:	e7fa      	b.n	8007ef8 <GetFCntDown+0x48>
 8007f02:	200a      	movs	r0, #10
 8007f04:	e7f8      	b.n	8007ef8 <GetFCntDown+0x48>
    switch( addrID )
 8007f06:	2005      	movs	r0, #5
 8007f08:	e7f6      	b.n	8007ef8 <GetFCntDown+0x48>

08007f0a <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8007f0a:	2801      	cmp	r0, #1
 8007f0c:	d900      	bls.n	8007f10 <RemoveMacCommands+0x6>
 8007f0e:	4770      	bx	lr
{
 8007f10:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8007f12:	2a01      	cmp	r2, #1
 8007f14:	d105      	bne.n	8007f22 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8007f16:	f011 0f20 	tst.w	r1, #32
 8007f1a:	d004      	beq.n	8007f26 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8007f1c:	f003 f99a 	bl	800b254 <LoRaMacCommandsRemoveStickyAnsCmds>
 8007f20:	e001      	b.n	8007f26 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8007f22:	f003 f997 	bl	800b254 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8007f26:	bd08      	pop	{r3, pc}

08007f28 <ProcessMacCommands>:
{
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	b08f      	sub	sp, #60	; 0x3c
 8007f2e:	4605      	mov	r5, r0
 8007f30:	460c      	mov	r4, r1
 8007f32:	4616      	mov	r6, r2
 8007f34:	4698      	mov	r8, r3
    uint8_t status = 0;
 8007f36:	2700      	movs	r7, #0
 8007f38:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8007f3c:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 8007f40:	42b4      	cmp	r4, r6
 8007f42:	f080 82c4 	bcs.w	80084ce <ProcessMacCommands+0x5a6>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8007f46:	5d28      	ldrb	r0, [r5, r4]
 8007f48:	f003 f9dc 	bl	800b304 <LoRaMacCommandsGetCmdSize>
 8007f4c:	4420      	add	r0, r4
 8007f4e:	42b0      	cmp	r0, r6
 8007f50:	f300 82bd 	bgt.w	80084ce <ProcessMacCommands+0x5a6>
        switch( payload[macIndex++] )
 8007f54:	f104 0901 	add.w	r9, r4, #1
 8007f58:	fa5f f989 	uxtb.w	r9, r9
 8007f5c:	5d29      	ldrb	r1, [r5, r4]
 8007f5e:	3902      	subs	r1, #2
 8007f60:	2911      	cmp	r1, #17
 8007f62:	f200 82b4 	bhi.w	80084ce <ProcessMacCommands+0x5a6>
 8007f66:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007f6a:	0012      	.short	0x0012
 8007f6c:	00910029 	.word	0x00910029
 8007f70:	00ed00a5 	.word	0x00ed00a5
 8007f74:	013f0105 	.word	0x013f0105
 8007f78:	01ad0156 	.word	0x01ad0156
 8007f7c:	02b202b2 	.word	0x02b202b2
 8007f80:	02b201de 	.word	0x02b201de
 8007f84:	023e02b2 	.word	0x023e02b2
 8007f88:	02750255 	.word	0x02750255
 8007f8c:	0291      	.short	0x0291
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8007f8e:	2005      	movs	r0, #5
 8007f90:	f003 fab4 	bl	800b4fc <LoRaMacConfirmQueueIsCmdActive>
 8007f94:	b908      	cbnz	r0, 8007f9a <ProcessMacCommands+0x72>
        switch( payload[macIndex++] )
 8007f96:	464c      	mov	r4, r9
 8007f98:	e7d2      	b.n	8007f40 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8007f9a:	2105      	movs	r1, #5
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	f003 fa61 	bl	800b464 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8007fa2:	1ca3      	adds	r3, r4, #2
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	f815 1009 	ldrb.w	r1, [r5, r9]
 8007faa:	4ac2      	ldr	r2, [pc, #776]	; (80082b4 <ProcessMacCommands+0x38c>)
 8007fac:	f882 1450 	strb.w	r1, [r2, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8007fb0:	3403      	adds	r4, #3
 8007fb2:	b2e4      	uxtb	r4, r4
 8007fb4:	5ceb      	ldrb	r3, [r5, r3]
 8007fb6:	f882 3451 	strb.w	r3, [r2, #1105]	; 0x451
 8007fba:	e7c1      	b.n	8007f40 <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8007fc2:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8007fc6:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 8007fca:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8007fce:	b10f      	cbz	r7, 8007fd4 <ProcessMacCommands+0xac>
                break;
 8007fd0:	464c      	mov	r4, r9
 8007fd2:	e7b5      	b.n	8007f40 <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8007fd4:	f109 33ff 	add.w	r3, r9, #4294967295
 8007fd8:	442b      	add	r3, r5
 8007fda:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8007fdc:	eba6 0309 	sub.w	r3, r6, r9
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007fe6:	48b4      	ldr	r0, [pc, #720]	; (80082b8 <ProcessMacCommands+0x390>)
 8007fe8:	f890 311a 	ldrb.w	r3, [r0, #282]	; 0x11a
 8007fec:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007ff0:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8007ff4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8007ff8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 8007ffc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008000:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
 8008004:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008008:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800800c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8008010:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 8008014:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8008016:	ab05      	add	r3, sp, #20
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	ab03      	add	r3, sp, #12
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	f10d 030b 	add.w	r3, sp, #11
 8008022:	f10d 020a 	add.w	r2, sp, #10
 8008026:	a907      	add	r1, sp, #28
 8008028:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800802c:	f004 f888 	bl	800c140 <RegionLinkAdrReq>
 8008030:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 8008034:	f000 0007 	and.w	r0, r0, #7
 8008038:	2807      	cmp	r0, #7
 800803a:	d001      	beq.n	8008040 <ProcessMacCommands+0x118>
{
 800803c:	2400      	movs	r4, #0
 800803e:	e015      	b.n	800806c <ProcessMacCommands+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8008040:	4b9d      	ldr	r3, [pc, #628]	; (80082b8 <ProcessMacCommands+0x390>)
 8008042:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8008046:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800804a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800804e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8008052:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008056:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800805a:	e7ef      	b.n	800803c <ProcessMacCommands+0x114>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800805c:	2201      	movs	r2, #1
 800805e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8008062:	2003      	movs	r0, #3
 8008064:	f003 f882 	bl	800b16c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8008068:	3401      	adds	r4, #1
 800806a:	b2e4      	uxtb	r4, r4
 800806c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8008070:	4b92      	ldr	r3, [pc, #584]	; (80082bc <ProcessMacCommands+0x394>)
 8008072:	fba3 1302 	umull	r1, r3, r3, r2
 8008076:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 800807a:	d3ef      	bcc.n	800805c <ProcessMacCommands+0x134>
                    macIndex += linkAdrNbBytesParsed - 1;
 800807c:	eb02 0309 	add.w	r3, r2, r9
 8008080:	b2db      	uxtb	r3, r3
 8008082:	3b01      	subs	r3, #1
 8008084:	fa5f f983 	uxtb.w	r9, r3
                    adrBlockFound = true;
 8008088:	2701      	movs	r7, #1
 800808a:	e7a1      	b.n	8007fd0 <ProcessMacCommands+0xa8>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800808c:	3402      	adds	r4, #2
 800808e:	b2e4      	uxtb	r4, r4
 8008090:	f815 3009 	ldrb.w	r3, [r5, r9]
 8008094:	f003 030f 	and.w	r3, r3, #15
 8008098:	4987      	ldr	r1, [pc, #540]	; (80082b8 <ProcessMacCommands+0x390>)
 800809a:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800809e:	2201      	movs	r2, #1
 80080a0:	fa02 f303 	lsl.w	r3, r2, r3
 80080a4:	f8a1 311e 	strh.w	r3, [r1, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80080a8:	2200      	movs	r2, #0
 80080aa:	a90b      	add	r1, sp, #44	; 0x2c
 80080ac:	2004      	movs	r0, #4
 80080ae:	f003 f85d 	bl	800b16c <LoRaMacCommandsAddCmd>
                break;
 80080b2:	e745      	b.n	8007f40 <ProcessMacCommands+0x18>
                status = 0x07;
 80080b4:	2307      	movs	r3, #7
 80080b6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80080ba:	f815 3009 	ldrb.w	r3, [r5, r9]
 80080be:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80080c2:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80080c6:	f915 3009 	ldrsb.w	r3, [r5, r9]
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 80080d2:	1ca3      	adds	r3, r4, #2
 80080d4:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80080d6:	1ce1      	adds	r1, r4, #3
 80080d8:	b2c9      	uxtb	r1, r1
 80080da:	5ceb      	ldrb	r3, [r5, r3]
 80080dc:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80080de:	1d22      	adds	r2, r4, #4
 80080e0:	b2d2      	uxtb	r2, r2
 80080e2:	5c69      	ldrb	r1, [r5, r1]
 80080e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80080e8:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80080ea:	3405      	adds	r4, #5
 80080ec:	b2e4      	uxtb	r4, r4
 80080ee:	5caa      	ldrb	r2, [r5, r2]
 80080f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080f4:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 80080f6:	2264      	movs	r2, #100	; 0x64
 80080f8:	fb02 f303 	mul.w	r3, r2, r3
 80080fc:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80080fe:	a907      	add	r1, sp, #28
 8008100:	4b6d      	ldr	r3, [pc, #436]	; (80082b8 <ProcessMacCommands+0x390>)
 8008102:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008106:	f004 f835 	bl	800c174 <RegionRxParamSetupReq>
 800810a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800810e:	f000 0307 	and.w	r3, r0, #7
 8008112:	2b07      	cmp	r3, #7
 8008114:	d007      	beq.n	8008126 <ProcessMacCommands+0x1fe>
                macCmdPayload[0] = status;
 8008116:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800811a:	2201      	movs	r2, #1
 800811c:	a90b      	add	r1, sp, #44	; 0x2c
 800811e:	2005      	movs	r0, #5
 8008120:	f003 f824 	bl	800b16c <LoRaMacCommandsAddCmd>
                break;
 8008124:	e70c      	b.n	8007f40 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8008126:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800812a:	4b63      	ldr	r3, [pc, #396]	; (80082b8 <ProcessMacCommands+0x390>)
 800812c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008130:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8008134:	9a08      	ldr	r2, [sp, #32]
 8008136:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8008138:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800813a:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800813e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8008142:	e7e8      	b.n	8008116 <ProcessMacCommands+0x1ee>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008144:	4b5b      	ldr	r3, [pc, #364]	; (80082b4 <ProcessMacCommands+0x38c>)
 8008146:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800814a:	b17b      	cbz	r3, 800816c <ProcessMacCommands+0x244>
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	b17b      	cbz	r3, 8008170 <ProcessMacCommands+0x248>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8008150:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8008152:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8008156:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800815a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800815e:	2202      	movs	r2, #2
 8008160:	a90b      	add	r1, sp, #44	; 0x2c
 8008162:	2006      	movs	r0, #6
 8008164:	f003 f802 	bl	800b16c <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8008168:	464c      	mov	r4, r9
                break;
 800816a:	e6e9      	b.n	8007f40 <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800816c:	20ff      	movs	r0, #255	; 0xff
 800816e:	e7f0      	b.n	8008152 <ProcessMacCommands+0x22a>
 8008170:	20ff      	movs	r0, #255	; 0xff
 8008172:	e7ee      	b.n	8008152 <ProcessMacCommands+0x22a>
                status = 0x03;
 8008174:	2303      	movs	r3, #3
 8008176:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800817a:	1ca3      	adds	r3, r4, #2
 800817c:	b2db      	uxtb	r3, r3
 800817e:	f915 2009 	ldrsb.w	r2, [r5, r9]
 8008182:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 8008186:	aa07      	add	r2, sp, #28
 8008188:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800818a:	1ce2      	adds	r2, r4, #3
 800818c:	b2d2      	uxtb	r2, r2
 800818e:	5ceb      	ldrb	r3, [r5, r3]
 8008190:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008192:	1d21      	adds	r1, r4, #4
 8008194:	b2c9      	uxtb	r1, r1
 8008196:	5caa      	ldrb	r2, [r5, r2]
 8008198:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800819c:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800819e:	1d62      	adds	r2, r4, #5
 80081a0:	b2d2      	uxtb	r2, r2
 80081a2:	5c69      	ldrb	r1, [r5, r1]
 80081a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80081a8:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 80081aa:	2164      	movs	r1, #100	; 0x64
 80081ac:	fb01 f303 	mul.w	r3, r1, r3
 80081b0:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 80081b6:	3406      	adds	r4, #6
 80081b8:	b2e4      	uxtb	r4, r4
 80081ba:	56ab      	ldrsb	r3, [r5, r2]
 80081bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80081c0:	a905      	add	r1, sp, #20
 80081c2:	4b3d      	ldr	r3, [pc, #244]	; (80082b8 <ProcessMacCommands+0x390>)
 80081c4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80081c8:	f003 ffe2 	bl	800c190 <RegionNewChannelReq>
 80081cc:	b2c3      	uxtb	r3, r0
 80081ce:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80081d2:	2800      	cmp	r0, #0
 80081d4:	f6ff aeb4 	blt.w	8007f40 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 80081d8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80081dc:	2201      	movs	r2, #1
 80081de:	a90b      	add	r1, sp, #44	; 0x2c
 80081e0:	2007      	movs	r0, #7
 80081e2:	f002 ffc3 	bl	800b16c <LoRaMacCommandsAddCmd>
                break;
 80081e6:	e6ab      	b.n	8007f40 <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80081e8:	3402      	adds	r4, #2
 80081ea:	b2e4      	uxtb	r4, r4
 80081ec:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 80081f0:	f013 030f 	ands.w	r3, r3, #15
 80081f4:	d100      	bne.n	80081f8 <ProcessMacCommands+0x2d0>
                    delay++;
 80081f6:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80081f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80081fc:	fb02 f303 	mul.w	r3, r2, r3
 8008200:	4a2d      	ldr	r2, [pc, #180]	; (80082b8 <ProcessMacCommands+0x390>)
 8008202:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008204:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008208:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800820a:	2200      	movs	r2, #0
 800820c:	a90b      	add	r1, sp, #44	; 0x2c
 800820e:	2008      	movs	r0, #8
 8008210:	f002 ffac 	bl	800b16c <LoRaMacCommandsAddCmd>
                break;
 8008214:	e694      	b.n	8007f40 <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 8008216:	3402      	adds	r4, #2
 8008218:	b2e4      	uxtb	r4, r4
 800821a:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 800821e:	2200      	movs	r2, #0
 8008220:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8008224:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8008228:	f013 0f20 	tst.w	r3, #32
 800822c:	d002      	beq.n	8008234 <ProcessMacCommands+0x30c>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800822e:	2201      	movs	r2, #1
 8008230:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008234:	f013 0f10 	tst.w	r3, #16
 8008238:	d002      	beq.n	8008240 <ProcessMacCommands+0x318>
                    txParamSetupReq.UplinkDwellTime = 1;
 800823a:	2201      	movs	r2, #1
 800823c:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008240:	f003 030f 	and.w	r3, r3, #15
 8008244:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008248:	a903      	add	r1, sp, #12
 800824a:	4b1b      	ldr	r3, [pc, #108]	; (80082b8 <ProcessMacCommands+0x390>)
 800824c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008250:	f003 ffac 	bl	800c1ac <RegionTxParamSetupReq>
 8008254:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008258:	f43f ae72 	beq.w	8007f40 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800825c:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8008260:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80082b8 <ProcessMacCommands+0x390>
 8008264:	f889 a07c 	strb.w	sl, [r9, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8008268:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800826c:	f889 307d 	strb.w	r3, [r9, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008270:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008274:	4a12      	ldr	r2, [pc, #72]	; (80082c0 <ProcessMacCommands+0x398>)
 8008276:	5cd0      	ldrb	r0, [r2, r3]
 8008278:	f7f8 faa8 	bl	80007cc <__aeabi_ui2f>
 800827c:	f8c9 0080 	str.w	r0, [r9, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8008280:	2302      	movs	r3, #2
 8008282:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008286:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800828a:	a907      	add	r1, sp, #28
 800828c:	f899 0048 	ldrb.w	r0, [r9, #72]	; 0x48
 8008290:	f003 fec7 	bl	800c022 <RegionGetPhyParam>
 8008294:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008296:	b240      	sxtb	r0, r0
 8008298:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 800829c:	4298      	cmp	r0, r3
 800829e:	bfb8      	it	lt
 80082a0:	4618      	movlt	r0, r3
 80082a2:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80082a6:	2200      	movs	r2, #0
 80082a8:	a90b      	add	r1, sp, #44	; 0x2c
 80082aa:	2009      	movs	r0, #9
 80082ac:	f002 ff5e 	bl	800b16c <LoRaMacCommandsAddCmd>
                break;
 80082b0:	e646      	b.n	8007f40 <ProcessMacCommands+0x18>
 80082b2:	bf00      	nop
 80082b4:	20000620 	.word	0x20000620
 80082b8:	20008000 	.word	0x20008000
 80082bc:	cccccccd 	.word	0xcccccccd
 80082c0:	080122b8 	.word	0x080122b8
                status = 0x03;
 80082c4:	2303      	movs	r3, #3
 80082c6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 80082ca:	1ca3      	adds	r3, r4, #2
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	f815 2009 	ldrb.w	r2, [r5, r9]
 80082d2:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80082d6:	1ce1      	adds	r1, r4, #3
 80082d8:	b2c9      	uxtb	r1, r1
 80082da:	5ceb      	ldrb	r3, [r5, r3]
 80082dc:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80082de:	1d22      	adds	r2, r4, #4
 80082e0:	b2d2      	uxtb	r2, r2
 80082e2:	5c69      	ldrb	r1, [r5, r1]
 80082e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80082e8:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80082ea:	3405      	adds	r4, #5
 80082ec:	b2e4      	uxtb	r4, r4
 80082ee:	5caa      	ldrb	r2, [r5, r2]
 80082f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082f4:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 80082f6:	2264      	movs	r2, #100	; 0x64
 80082f8:	fb02 f303 	mul.w	r3, r2, r3
 80082fc:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80082fe:	a907      	add	r1, sp, #28
 8008300:	4b74      	ldr	r3, [pc, #464]	; (80084d4 <ProcessMacCommands+0x5ac>)
 8008302:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008306:	f003 ff5f 	bl	800c1c8 <RegionDlChannelReq>
 800830a:	b2c3      	uxtb	r3, r0
 800830c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8008310:	2800      	cmp	r0, #0
 8008312:	f6ff ae15 	blt.w	8007f40 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 8008316:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800831a:	2201      	movs	r2, #1
 800831c:	a90b      	add	r1, sp, #44	; 0x2c
 800831e:	200a      	movs	r0, #10
 8008320:	f002 ff24 	bl	800b16c <LoRaMacCommandsAddCmd>
                break;
 8008324:	e60c      	b.n	8007f40 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8008326:	200a      	movs	r0, #10
 8008328:	f003 f8e8 	bl	800b4fc <LoRaMacConfirmQueueIsCmdActive>
 800832c:	b908      	cbnz	r0, 8008332 <ProcessMacCommands+0x40a>
        switch( payload[macIndex++] )
 800832e:	464c      	mov	r4, r9
 8008330:	e606      	b.n	8007f40 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8008332:	210a      	movs	r1, #10
 8008334:	2000      	movs	r0, #0
 8008336:	f003 f895 	bl	800b464 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800833a:	a903      	add	r1, sp, #12
 800833c:	2300      	movs	r3, #0
 800833e:	9303      	str	r3, [sp, #12]
 8008340:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 8008342:	f10d 0a14 	add.w	sl, sp, #20
 8008346:	9305      	str	r3, [sp, #20]
 8008348:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800834a:	f10d 0b1c 	add.w	fp, sp, #28
 800834e:	9307      	str	r3, [sp, #28]
 8008350:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008352:	1ca0      	adds	r0, r4, #2
 8008354:	b2c0      	uxtb	r0, r0
 8008356:	f815 3009 	ldrb.w	r3, [r5, r9]
 800835a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800835c:	1ce2      	adds	r2, r4, #3
 800835e:	b2d2      	uxtb	r2, r2
 8008360:	5c28      	ldrb	r0, [r5, r0]
 8008362:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008366:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008368:	1d20      	adds	r0, r4, #4
 800836a:	b2c0      	uxtb	r0, r0
 800836c:	5caa      	ldrb	r2, [r5, r2]
 800836e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008372:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008374:	1d62      	adds	r2, r4, #5
 8008376:	b2d2      	uxtb	r2, r2
 8008378:	5c28      	ldrb	r0, [r5, r0]
 800837a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800837e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008380:	3406      	adds	r4, #6
 8008382:	b2e4      	uxtb	r4, r4
 8008384:	5caa      	ldrb	r2, [r5, r2]
 8008386:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800838a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800838e:	fb00 f202 	mul.w	r2, r0, r2
 8008392:	0a12      	lsrs	r2, r2, #8
 8008394:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8008398:	c903      	ldmia	r1, {r0, r1}
 800839a:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800839e:	4a4e      	ldr	r2, [pc, #312]	; (80084d8 <ProcessMacCommands+0x5b0>)
 80083a0:	441a      	add	r2, r3
 80083a2:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 80083a4:	4658      	mov	r0, fp
 80083a6:	f009 f843 	bl	8011430 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80083aa:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80084dc <ProcessMacCommands+0x5b4>
 80083ae:	f8d9 333c 	ldr.w	r3, [r9, #828]	; 0x33c
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	f8d9 3338 	ldr.w	r3, [r9, #824]	; 0x338
 80083b8:	e89a 0006 	ldmia.w	sl, {r1, r2}
 80083bc:	a80c      	add	r0, sp, #48	; 0x30
 80083be:	f008 fff6 	bl	80113ae <SysTimeSub>
 80083c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083c8:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80083cc:	4650      	mov	r0, sl
 80083ce:	f008 ffcf 	bl	8011370 <SysTimeAdd>
                    SysTimeSet( sysTime );
 80083d2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80083d6:	f009 f809 	bl	80113ec <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80083da:	f002 fe2d 	bl	800b038 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80083de:	2301      	movs	r3, #1
 80083e0:	f889 3430 	strb.w	r3, [r9, #1072]	; 0x430
 80083e4:	e5ac      	b.n	8007f40 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80083e6:	200d      	movs	r0, #13
 80083e8:	f003 f888 	bl	800b4fc <LoRaMacConfirmQueueIsCmdActive>
 80083ec:	b908      	cbnz	r0, 80083f2 <ProcessMacCommands+0x4ca>
        switch( payload[macIndex++] )
 80083ee:	464c      	mov	r4, r9
 80083f0:	e5a6      	b.n	8007f40 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80083f2:	210d      	movs	r1, #13
 80083f4:	2000      	movs	r0, #0
 80083f6:	f003 f835 	bl	800b464 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80083fa:	4b38      	ldr	r3, [pc, #224]	; (80084dc <ProcessMacCommands+0x5b4>)
 80083fc:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8008400:	3b04      	subs	r3, #4
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b01      	cmp	r3, #1
 8008406:	d801      	bhi.n	800840c <ProcessMacCommands+0x4e4>
        switch( payload[macIndex++] )
 8008408:	464c      	mov	r4, r9
 800840a:	e599      	b.n	8007f40 <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 800840c:	f002 fe10 	bl	800b030 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8008410:	464c      	mov	r4, r9
 8008412:	e595      	b.n	8007f40 <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 8008414:	1ca2      	adds	r2, r4, #2
 8008416:	b2d2      	uxtb	r2, r2
 8008418:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800841c:	1ce1      	adds	r1, r4, #3
 800841e:	b2c9      	uxtb	r1, r1
 8008420:	5caa      	ldrb	r2, [r5, r2]
 8008422:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008426:	1d22      	adds	r2, r4, #4
 8008428:	b2d2      	uxtb	r2, r2
 800842a:	5c69      	ldrb	r1, [r5, r1]
 800842c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8008430:	3405      	adds	r4, #5
 8008432:	b2e4      	uxtb	r4, r4
 8008434:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008436:	2164      	movs	r1, #100	; 0x64
 8008438:	fb03 f101 	mul.w	r1, r3, r1
 800843c:	f000 000f 	and.w	r0, r0, #15
 8008440:	f002 fdf7 	bl	800b032 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008444:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8008448:	2201      	movs	r2, #1
 800844a:	a90b      	add	r1, sp, #44	; 0x2c
 800844c:	2011      	movs	r0, #17
 800844e:	f002 fe8d 	bl	800b16c <LoRaMacCommandsAddCmd>
                break;
 8008452:	e575      	b.n	8007f40 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8008454:	200e      	movs	r0, #14
 8008456:	f003 f851 	bl	800b4fc <LoRaMacConfirmQueueIsCmdActive>
 800845a:	b908      	cbnz	r0, 8008460 <ProcessMacCommands+0x538>
        switch( payload[macIndex++] )
 800845c:	464c      	mov	r4, r9
 800845e:	e56f      	b.n	8007f40 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8008460:	210e      	movs	r1, #14
 8008462:	2000      	movs	r0, #0
 8008464:	f002 fffe 	bl	800b464 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008468:	1ca2      	adds	r2, r4, #2
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008470:	1ce3      	adds	r3, r4, #3
 8008472:	b2db      	uxtb	r3, r3
 8008474:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8008478:	3404      	adds	r4, #4
 800847a:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800847c:	4a18      	ldr	r2, [pc, #96]	; (80084e0 <ProcessMacCommands+0x5b8>)
 800847e:	6812      	ldr	r2, [r2, #0]
 8008480:	5ce9      	ldrb	r1, [r5, r3]
 8008482:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8008486:	f002 fdd6 	bl	800b036 <LoRaMacClassBBeaconTimingAns>
 800848a:	e559      	b.n	8007f40 <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 800848c:	1ca1      	adds	r1, r4, #2
 800848e:	b2c9      	uxtb	r1, r1
 8008490:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008494:	1ce2      	adds	r2, r4, #3
 8008496:	b2d2      	uxtb	r2, r2
 8008498:	5c69      	ldrb	r1, [r5, r1]
 800849a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800849e:	3404      	adds	r4, #4
 80084a0:	b2e4      	uxtb	r4, r4
 80084a2:	5caa      	ldrb	r2, [r5, r2]
 80084a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80084a8:	2064      	movs	r0, #100	; 0x64
 80084aa:	fb03 f000 	mul.w	r0, r3, r0
 80084ae:	f002 fdc4 	bl	800b03a <LoRaMacClassBBeaconFreqReq>
 80084b2:	b140      	cbz	r0, 80084c6 <ProcessMacCommands+0x59e>
                        macCmdPayload[0] = 1;
 80084b4:	2301      	movs	r3, #1
 80084b6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80084ba:	2201      	movs	r2, #1
 80084bc:	a90b      	add	r1, sp, #44	; 0x2c
 80084be:	2013      	movs	r0, #19
 80084c0:	f002 fe54 	bl	800b16c <LoRaMacCommandsAddCmd>
                break;
 80084c4:	e53c      	b.n	8007f40 <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80084cc:	e7f5      	b.n	80084ba <ProcessMacCommands+0x592>
}
 80084ce:	b00f      	add	sp, #60	; 0x3c
 80084d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d4:	20008000 	.word	0x20008000
 80084d8:	12d53d80 	.word	0x12d53d80
 80084dc:	20000620 	.word	0x20000620
 80084e0:	20000b28 	.word	0x20000b28

080084e4 <ProcessRadioRxDone>:
{
 80084e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084e8:	b0a5      	sub	sp, #148	; 0x94
    uint8_t *payload = RxDoneParams.Payload;
 80084ea:	4b9c      	ldr	r3, [pc, #624]	; (800875c <ProcessRadioRxDone+0x278>)
 80084ec:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 80084ee:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80084f0:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80084f4:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	9308      	str	r3, [sp, #32]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80084fc:	4a98      	ldr	r2, [pc, #608]	; (8008760 <ProcessRadioRxDone+0x27c>)
 80084fe:	f8d2 80e4 	ldr.w	r8, [r2, #228]	; 0xe4
    MacCtx.McpsConfirm.AckReceived = false;
 8008502:	4c98      	ldr	r4, [pc, #608]	; (8008764 <ProcessRadioRxDone+0x280>)
 8008504:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 8008508:	f8a4 947c 	strh.w	r9, [r4, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800850c:	f884 747e 	strb.w	r7, [r4, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8008510:	f894 2480 	ldrb.w	r2, [r4, #1152]	; 0x480
 8008514:	f884 247f 	strb.w	r2, [r4, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8008518:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800851c:	f884 341a 	strb.w	r3, [r4, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8008520:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 8008524:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 8008528:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 800852c:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 8008530:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008534:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008538:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800853c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008540:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    Radio.Sleep( );
 8008544:	4b88      	ldr	r3, [pc, #544]	; (8008768 <ProcessRadioRxDone+0x284>)
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800854a:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800854e:	f009 f85d 	bl	801160c <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008552:	4629      	mov	r1, r5
 8008554:	4630      	mov	r0, r6
 8008556:	f002 fd58 	bl	800b00a <LoRaMacClassBRxBeacon>
 800855a:	b9a0      	cbnz	r0, 8008586 <ProcessRadioRxDone+0xa2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800855c:	4b80      	ldr	r3, [pc, #512]	; (8008760 <ProcessRadioRxDone+0x27c>)
 800855e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008562:	2b01      	cmp	r3, #1
 8008564:	d016      	beq.n	8008594 <ProcessRadioRxDone+0xb0>
    if( size == 0 )
 8008566:	b395      	cbz	r5, 80085ce <ProcessRadioRxDone+0xea>
    macHdr.Value = payload[pktHeaderLen++];
 8008568:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800856a:	0963      	lsrs	r3, r4, #5
 800856c:	3b01      	subs	r3, #1
 800856e:	2b06      	cmp	r3, #6
 8008570:	f200 82b3 	bhi.w	8008ada <ProcessRadioRxDone+0x5f6>
 8008574:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008578:	02b10032 	.word	0x02b10032
 800857c:	02b100c6 	.word	0x02b100c6
 8008580:	02b100c2 	.word	0x02b100c2
 8008584:	028b      	.short	0x028b
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008586:	f8a4 9472 	strh.w	r9, [r4, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800858a:	f884 7474 	strb.w	r7, [r4, #1140]	; 0x474
}
 800858e:	b025      	add	sp, #148	; 0x94
 8008590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008594:	f002 fd3d 	bl	800b012 <LoRaMacClassBIsPingExpected>
 8008598:	b150      	cbz	r0, 80085b0 <ProcessRadioRxDone+0xcc>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800859a:	2000      	movs	r0, #0
 800859c:	f002 fd2e 	bl	800affc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80085a0:	2000      	movs	r0, #0
 80085a2:	f002 fd30 	bl	800b006 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80085a6:	4b6f      	ldr	r3, [pc, #444]	; (8008764 <ProcessRadioRxDone+0x280>)
 80085a8:	2204      	movs	r2, #4
 80085aa:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 80085ae:	e7da      	b.n	8008566 <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80085b0:	f002 fd31 	bl	800b016 <LoRaMacClassBIsMulticastExpected>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d0d6      	beq.n	8008566 <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80085b8:	2000      	movs	r0, #0
 80085ba:	f002 fd20 	bl	800affe <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80085be:	2000      	movs	r0, #0
 80085c0:	f002 fd22 	bl	800b008 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80085c4:	4b67      	ldr	r3, [pc, #412]	; (8008764 <ProcessRadioRxDone+0x280>)
 80085c6:	2205      	movs	r2, #5
 80085c8:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 80085cc:	e7cb      	b.n	8008566 <ProcessRadioRxDone+0x82>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80085ce:	4b65      	ldr	r3, [pc, #404]	; (8008764 <ProcessRadioRxDone+0x280>)
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 80085d6:	f7ff fc2d 	bl	8007e34 <PrepareRxDoneAbort>
        return;
 80085da:	e7d8      	b.n	800858e <ProcessRadioRxDone+0xaa>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80085dc:	2d10      	cmp	r5, #16
 80085de:	d92e      	bls.n	800863e <ProcessRadioRxDone+0x15a>
            macMsgJoinAccept.Buffer = payload;
 80085e0:	9609      	str	r6, [sp, #36]	; 0x24
            macMsgJoinAccept.BufSize = size;
 80085e2:	b2ed      	uxtb	r5, r5
 80085e4:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80085e8:	4b5d      	ldr	r3, [pc, #372]	; (8008760 <ProcessRadioRxDone+0x27c>)
 80085ea:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80085ee:	bb6b      	cbnz	r3, 800864c <ProcessRadioRxDone+0x168>
            SecureElementGetJoinEui( joinEui );
 80085f0:	a805      	add	r0, sp, #20
 80085f2:	f006 fcbf 	bl	800ef74 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 80085f6:	aa09      	add	r2, sp, #36	; 0x24
 80085f8:	a905      	add	r1, sp, #20
 80085fa:	20ff      	movs	r0, #255	; 0xff
 80085fc:	f003 fb14 	bl	800bc28 <LoRaMacCryptoHandleJoinAccept>
 8008600:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008602:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8008606:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800860a:	f88d 3010 	strb.w	r3, [sp, #16]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800860e:	4b54      	ldr	r3, [pc, #336]	; (8008760 <ProcessRadioRxDone+0x27c>)
 8008610:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8008614:	f88d 2011 	strb.w	r2, [sp, #17]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8008618:	2207      	movs	r2, #7
 800861a:	a904      	add	r1, sp, #16
 800861c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008620:	f003 fd30 	bl	800c084 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 8008624:	b904      	cbnz	r4, 8008628 <ProcessRadioRxDone+0x144>
 8008626:	b9c0      	cbnz	r0, 800865a <ProcessRadioRxDone+0x176>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008628:	2001      	movs	r0, #1
 800862a:	f002 ff67 	bl	800b4fc <LoRaMacConfirmQueueIsCmdActive>
 800862e:	2800      	cmp	r0, #0
 8008630:	f000 8247 	beq.w	8008ac2 <ProcessRadioRxDone+0x5de>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008634:	2101      	movs	r1, #1
 8008636:	2007      	movs	r0, #7
 8008638:	f002 ff14 	bl	800b464 <LoRaMacConfirmQueueSetStatus>
 800863c:	e241      	b.n	8008ac2 <ProcessRadioRxDone+0x5de>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800863e:	4b49      	ldr	r3, [pc, #292]	; (8008764 <ProcessRadioRxDone+0x280>)
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8008646:	f7ff fbf5 	bl	8007e34 <PrepareRxDoneAbort>
                return;
 800864a:	e7a0      	b.n	800858e <ProcessRadioRxDone+0xaa>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800864c:	4b45      	ldr	r3, [pc, #276]	; (8008764 <ProcessRadioRxDone+0x280>)
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8008654:	f7ff fbee 	bl	8007e34 <PrepareRxDoneAbort>
                return;
 8008658:	e799      	b.n	800858e <ProcessRadioRxDone+0xaa>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800865a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800865e:	4c40      	ldr	r4, [pc, #256]	; (8008760 <ProcessRadioRxDone+0x27c>)
 8008660:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008664:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8008668:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800866c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008670:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8008674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008678:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800867c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800867e:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 8008682:	2002      	movs	r0, #2
 8008684:	f006 fc84 	bl	800ef90 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008688:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 800868c:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8008690:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008694:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008698:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800869c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80086a0:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 80086a4:	65a3      	str	r3, [r4, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80086a6:	b90b      	cbnz	r3, 80086ac <ProcessRadioRxDone+0x1c8>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80086a8:	2201      	movs	r2, #1
 80086aa:	65a2      	str	r2, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80086ac:	4c2c      	ldr	r4, [pc, #176]	; (8008760 <ProcessRadioRxDone+0x27c>)
 80086ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086b4:	fb02 f303 	mul.w	r3, r2, r3
 80086b8:	65a3      	str	r3, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80086ba:	4413      	add	r3, r2
 80086bc:	65e3      	str	r3, [r4, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 80086be:	2601      	movs	r6, #1
 80086c0:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80086ca:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80086ce:	9322      	str	r3, [sp, #136]	; 0x88
                applyCFList.Size = size - 17;
 80086d0:	3d11      	subs	r5, #17
 80086d2:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80086d6:	a922      	add	r1, sp, #136	; 0x88
 80086d8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80086dc:	f003 fce2 	bl	800c0a4 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80086e0:	2302      	movs	r3, #2
 80086e2:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80086e6:	4630      	mov	r0, r6
 80086e8:	f002 ff08 	bl	800b4fc <LoRaMacConfirmQueueIsCmdActive>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	f000 81e8 	beq.w	8008ac2 <ProcessRadioRxDone+0x5de>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 80086f2:	4631      	mov	r1, r6
 80086f4:	2000      	movs	r0, #0
 80086f6:	f002 feb5 	bl	800b464 <LoRaMacConfirmQueueSetStatus>
 80086fa:	e1e2      	b.n	8008ac2 <ProcessRadioRxDone+0x5de>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80086fc:	4b19      	ldr	r3, [pc, #100]	; (8008764 <ProcessRadioRxDone+0x280>)
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008704:	4b16      	ldr	r3, [pc, #88]	; (8008760 <ProcessRadioRxDone+0x27c>)
 8008706:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800870a:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800870e:	4a15      	ldr	r2, [pc, #84]	; (8008764 <ProcessRadioRxDone+0x280>)
 8008710:	f992 241c 	ldrsb.w	r2, [r2, #1052]	; 0x41c
 8008714:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008718:	220d      	movs	r2, #13
 800871a:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800871e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008722:	b113      	cbz	r3, 800872a <ProcessRadioRxDone+0x246>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008724:	230e      	movs	r3, #14
 8008726:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800872a:	a920      	add	r1, sp, #128	; 0x80
 800872c:	4b0c      	ldr	r3, [pc, #48]	; (8008760 <ProcessRadioRxDone+0x27c>)
 800872e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008732:	f003 fc76 	bl	800c022 <RegionGetPhyParam>
 8008736:	901f      	str	r0, [sp, #124]	; 0x7c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008738:	f1a5 030d 	sub.w	r3, r5, #13
 800873c:	b21b      	sxth	r3, r3
 800873e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008742:	b200      	sxth	r0, r0
 8008744:	4283      	cmp	r3, r0
 8008746:	dc01      	bgt.n	800874c <ProcessRadioRxDone+0x268>
 8008748:	2d0b      	cmp	r5, #11
 800874a:	d80f      	bhi.n	800876c <ProcessRadioRxDone+0x288>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800874c:	4b05      	ldr	r3, [pc, #20]	; (8008764 <ProcessRadioRxDone+0x280>)
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8008754:	f7ff fb6e 	bl	8007e34 <PrepareRxDoneAbort>
                return;
 8008758:	e719      	b.n	800858e <ProcessRadioRxDone+0xaa>
 800875a:	bf00      	nop
 800875c:	20000b28 	.word	0x20000b28
 8008760:	20008000 	.word	0x20008000
 8008764:	20000620 	.word	0x20000620
 8008768:	08012954 	.word	0x08012954
            macMsgData.Buffer = payload;
 800876c:	9613      	str	r6, [sp, #76]	; 0x4c
            macMsgData.BufSize = size;
 800876e:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008772:	4bb0      	ldr	r3, [pc, #704]	; (8008a34 <ProcessRadioRxDone+0x550>)
 8008774:	931c      	str	r3, [sp, #112]	; 0x70
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008776:	23ff      	movs	r3, #255	; 0xff
 8008778:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800877c:	a813      	add	r0, sp, #76	; 0x4c
 800877e:	f003 fb21 	bl	800bdc4 <LoRaMacParserData>
 8008782:	2800      	cmp	r0, #0
 8008784:	d148      	bne.n	8008818 <ProcessRadioRxDone+0x334>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008786:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008788:	4bab      	ldr	r3, [pc, #684]	; (8008a38 <ProcessRadioRxDone+0x554>)
 800878a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800878e:	a905      	add	r1, sp, #20
 8008790:	a813      	add	r0, sp, #76	; 0x4c
 8008792:	f7ff f987 	bl	8007aa4 <DetermineFrameType>
 8008796:	4605      	mov	r5, r0
 8008798:	2800      	cmp	r0, #0
 800879a:	d144      	bne.n	8008826 <ProcessRadioRxDone+0x342>
            downLinkCounter = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	9308      	str	r3, [sp, #32]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d046      	beq.n	8008834 <ProcessRadioRxDone+0x350>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 80087a6:	f04f 0901 	mov.w	r9, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80087aa:	2d01      	cmp	r5, #1
 80087ac:	d108      	bne.n	80087c0 <ProcessRadioRxDone+0x2dc>
 80087ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d16d      	bne.n	8008892 <ProcessRadioRxDone+0x3ae>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80087b6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80087ba:	f013 0f60 	tst.w	r3, #96	; 0x60
 80087be:	d168      	bne.n	8008892 <ProcessRadioRxDone+0x3ae>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80087c0:	2315      	movs	r3, #21
 80087c2:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80087c6:	4e9d      	ldr	r6, [pc, #628]	; (8008a3c <ProcessRadioRxDone+0x558>)
 80087c8:	a920      	add	r1, sp, #128	; 0x80
 80087ca:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 80087ce:	f003 fc28 	bl	800c022 <RegionGetPhyParam>
 80087d2:	901f      	str	r0, [sp, #124]	; 0x7c
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 80087d4:	ab08      	add	r3, sp, #32
 80087d6:	9302      	str	r3, [sp, #8]
 80087d8:	f10d 031f 	add.w	r3, sp, #31
 80087dc:	9301      	str	r3, [sp, #4]
 80087de:	b280      	uxth	r0, r0
 80087e0:	9000      	str	r0, [sp, #0]
 80087e2:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 80087e6:	aa13      	add	r2, sp, #76	; 0x4c
 80087e8:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80087ec:	4648      	mov	r0, r9
 80087ee:	f7ff fb5f 	bl	8007eb0 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d06d      	beq.n	80088d2 <ProcessRadioRxDone+0x3ee>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80087f6:	2807      	cmp	r0, #7
 80087f8:	d052      	beq.n	80088a0 <ProcessRadioRxDone+0x3bc>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 80087fa:	2808      	cmp	r0, #8
 80087fc:	d064      	beq.n	80088c8 <ProcessRadioRxDone+0x3e4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80087fe:	4b8e      	ldr	r3, [pc, #568]	; (8008a38 <ProcessRadioRxDone+0x554>)
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008806:	9a08      	ldr	r2, [sp, #32]
 8008808:	4b8b      	ldr	r3, [pc, #556]	; (8008a38 <ProcessRadioRxDone+0x554>)
 800880a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800880e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
                PrepareRxDoneAbort( );
 8008812:	f7ff fb0f 	bl	8007e34 <PrepareRxDoneAbort>
                return;
 8008816:	e6ba      	b.n	800858e <ProcessRadioRxDone+0xaa>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008818:	4b87      	ldr	r3, [pc, #540]	; (8008a38 <ProcessRadioRxDone+0x554>)
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8008820:	f7ff fb08 	bl	8007e34 <PrepareRxDoneAbort>
                return;
 8008824:	e6b3      	b.n	800858e <ProcessRadioRxDone+0xaa>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008826:	4b84      	ldr	r3, [pc, #528]	; (8008a38 <ProcessRadioRxDone+0x554>)
 8008828:	2201      	movs	r2, #1
 800882a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800882e:	f7ff fb01 	bl	8007e34 <PrepareRxDoneAbort>
                return;
 8008832:	e6ac      	b.n	800858e <ProcessRadioRxDone+0xaa>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008834:	4618      	mov	r0, r3
 8008836:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800883a:	4a80      	ldr	r2, [pc, #512]	; (8008a3c <ProcessRadioRxDone+0x558>)
 800883c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008840:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8008844:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008846:	428a      	cmp	r2, r1
 8008848:	d002      	beq.n	8008850 <ProcessRadioRxDone+0x36c>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800884a:	3301      	adds	r3, #1
 800884c:	b2db      	uxtb	r3, r3
 800884e:	e7a8      	b.n	80087a2 <ProcessRadioRxDone+0x2be>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008850:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8008854:	4979      	ldr	r1, [pc, #484]	; (8008a3c <ProcessRadioRxDone+0x558>)
 8008856:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800885a:	f891 10e9 	ldrb.w	r1, [r1, #233]	; 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800885e:	2900      	cmp	r1, #0
 8008860:	d0f3      	beq.n	800884a <ProcessRadioRxDone+0x366>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8008862:	4b76      	ldr	r3, [pc, #472]	; (8008a3c <ProcessRadioRxDone+0x558>)
 8008864:	2130      	movs	r1, #48	; 0x30
 8008866:	fb01 3000 	mla	r0, r1, r0, r3
 800886a:	f890 90ea 	ldrb.w	r9, [r0, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800886e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8008872:	6809      	ldr	r1, [r1, #0]
 8008874:	9108      	str	r1, [sp, #32]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008876:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800887a:	2b02      	cmp	r3, #2
 800887c:	d002      	beq.n	8008884 <ProcessRadioRxDone+0x3a0>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800887e:	4690      	mov	r8, r2
                    multicast = 1;
 8008880:	2501      	movs	r5, #1
 8008882:	e792      	b.n	80087aa <ProcessRadioRxDone+0x2c6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008884:	4b6c      	ldr	r3, [pc, #432]	; (8008a38 <ProcessRadioRxDone+0x554>)
 8008886:	2103      	movs	r1, #3
 8008888:	f883 147f 	strb.w	r1, [r3, #1151]	; 0x47f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800888c:	4690      	mov	r8, r2
                    multicast = 1;
 800888e:	2501      	movs	r5, #1
 8008890:	e78b      	b.n	80087aa <ProcessRadioRxDone+0x2c6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008892:	4b69      	ldr	r3, [pc, #420]	; (8008a38 <ProcessRadioRxDone+0x554>)
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800889a:	f7ff facb 	bl	8007e34 <PrepareRxDoneAbort>
                return;
 800889e:	e676      	b.n	800858e <ProcessRadioRxDone+0xaa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80088a0:	4b65      	ldr	r3, [pc, #404]	; (8008a38 <ProcessRadioRxDone+0x554>)
 80088a2:	2208      	movs	r2, #8
 80088a4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 80088a8:	f896 312a 	ldrb.w	r3, [r6, #298]	; 0x12a
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1aa      	bne.n	8008806 <ProcessRadioRxDone+0x322>
 80088b0:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 80088b4:	2ca0      	cmp	r4, #160	; 0xa0
 80088b6:	d1a6      	bne.n	8008806 <ProcessRadioRxDone+0x322>
 80088b8:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80088ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80088bc:	429a      	cmp	r2, r3
 80088be:	d1a2      	bne.n	8008806 <ProcessRadioRxDone+0x322>
                        Nvm.MacGroup1.SrvAckRequested = true;
 80088c0:	2201      	movs	r2, #1
 80088c2:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
 80088c6:	e79e      	b.n	8008806 <ProcessRadioRxDone+0x322>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80088c8:	4b5b      	ldr	r3, [pc, #364]	; (8008a38 <ProcessRadioRxDone+0x554>)
 80088ca:	220a      	movs	r2, #10
 80088cc:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80088d0:	e799      	b.n	8008806 <ProcessRadioRxDone+0x322>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80088d2:	ab13      	add	r3, sp, #76	; 0x4c
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	9b08      	ldr	r3, [sp, #32]
 80088d8:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80088dc:	4641      	mov	r1, r8
 80088de:	4648      	mov	r0, r9
 80088e0:	f003 f8fa 	bl	800bad8 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d14a      	bne.n	800897e <ProcessRadioRxDone+0x49a>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80088e8:	4b53      	ldr	r3, [pc, #332]	; (8008a38 <ProcessRadioRxDone+0x554>)
 80088ea:	2100      	movs	r1, #0
 80088ec:	f883 1419 	strb.w	r1, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 80088f0:	f883 541a 	strb.w	r5, [r3, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 80088f4:	f8c3 1420 	str.w	r1, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 80088f8:	f883 1424 	strb.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80088fc:	9a08      	ldr	r2, [sp, #32]
 80088fe:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008902:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008906:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800890a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800890e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008912:	f883 1435 	strb.w	r1, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008916:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800891a:	f893 047f 	ldrb.w	r0, [r3, #1151]	; 0x47f
 800891e:	2801      	cmp	r0, #1
 8008920:	d93b      	bls.n	800899a <ProcessRadioRxDone+0x4b6>
            if( multicast == 1 )
 8008922:	2d01      	cmp	r5, #1
 8008924:	d03c      	beq.n	80089a0 <ProcessRadioRxDone+0x4bc>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008926:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800892a:	2ca0      	cmp	r4, #160	; 0xa0
 800892c:	d03d      	beq.n	80089aa <ProcessRadioRxDone+0x4c6>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800892e:	2300      	movs	r3, #0
 8008930:	4a42      	ldr	r2, [pc, #264]	; (8008a3c <ProcessRadioRxDone+0x558>)
 8008932:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008936:	4a40      	ldr	r2, [pc, #256]	; (8008a38 <ProcessRadioRxDone+0x554>)
 8008938:	f882 3418 	strb.w	r3, [r2, #1048]	; 0x418
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800893c:	4b3f      	ldr	r3, [pc, #252]	; (8008a3c <ProcessRadioRxDone+0x558>)
 800893e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008942:	b923      	cbnz	r3, 800894e <ProcessRadioRxDone+0x46a>
 8008944:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008948:	f013 0f10 	tst.w	r3, #16
 800894c:	d007      	beq.n	800895e <ProcessRadioRxDone+0x47a>
 800894e:	4b3b      	ldr	r3, [pc, #236]	; (8008a3c <ProcessRadioRxDone+0x558>)
 8008950:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008954:	b91b      	cbnz	r3, 800895e <ProcessRadioRxDone+0x47a>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8008956:	4b38      	ldr	r3, [pc, #224]	; (8008a38 <ProcessRadioRxDone+0x554>)
 8008958:	2201      	movs	r2, #1
 800895a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800895e:	4b36      	ldr	r3, [pc, #216]	; (8008a38 <ProcessRadioRxDone+0x554>)
 8008960:	f893 2434 	ldrb.w	r2, [r3, #1076]	; 0x434
 8008964:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 8008968:	f7ff facf 	bl	8007f0a <RemoveMacCommands>
            switch( fType )
 800896c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008970:	2b03      	cmp	r3, #3
 8008972:	f200 8085 	bhi.w	8008a80 <ProcessRadioRxDone+0x59c>
 8008976:	e8df f003 	tbb	[pc, r3]
 800897a:	4a27      	.short	0x4a27
 800897c:	7363      	.short	0x7363
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800897e:	2802      	cmp	r0, #2
 8008980:	d006      	beq.n	8008990 <ProcessRadioRxDone+0x4ac>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8008982:	4b2d      	ldr	r3, [pc, #180]	; (8008a38 <ProcessRadioRxDone+0x554>)
 8008984:	220c      	movs	r2, #12
 8008986:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800898a:	f7ff fa53 	bl	8007e34 <PrepareRxDoneAbort>
                return;
 800898e:	e5fe      	b.n	800858e <ProcessRadioRxDone+0xaa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8008990:	4b29      	ldr	r3, [pc, #164]	; (8008a38 <ProcessRadioRxDone+0x554>)
 8008992:	220b      	movs	r2, #11
 8008994:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8008998:	e7f7      	b.n	800898a <ProcessRadioRxDone+0x4a6>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800899a:	4b28      	ldr	r3, [pc, #160]	; (8008a3c <ProcessRadioRxDone+0x558>)
 800899c:	6299      	str	r1, [r3, #40]	; 0x28
 800899e:	e7c0      	b.n	8008922 <ProcessRadioRxDone+0x43e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 80089a0:	4b25      	ldr	r3, [pc, #148]	; (8008a38 <ProcessRadioRxDone+0x554>)
 80089a2:	2202      	movs	r2, #2
 80089a4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80089a8:	e7c8      	b.n	800893c <ProcessRadioRxDone+0x458>
                    Nvm.MacGroup1.SrvAckRequested = true;
 80089aa:	4b24      	ldr	r3, [pc, #144]	; (8008a3c <ProcessRadioRxDone+0x558>)
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80089b2:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80089b6:	b913      	cbnz	r3, 80089be <ProcessRadioRxDone+0x4da>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 80089b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80089ba:	4b20      	ldr	r3, [pc, #128]	; (8008a3c <ProcessRadioRxDone+0x558>)
 80089bc:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80089be:	4b1e      	ldr	r3, [pc, #120]	; (8008a38 <ProcessRadioRxDone+0x554>)
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80089c6:	e7b9      	b.n	800893c <ProcessRadioRxDone+0x458>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80089c8:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80089cc:	4c1a      	ldr	r4, [pc, #104]	; (8008a38 <ProcessRadioRxDone+0x554>)
 80089ce:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	463b      	mov	r3, r7
 80089d6:	f002 020f 	and.w	r2, r2, #15
 80089da:	2100      	movs	r1, #0
 80089dc:	a817      	add	r0, sp, #92	; 0x5c
 80089de:	f7ff faa3 	bl	8007f28 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80089e2:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 80089e6:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80089ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80089ec:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80089f0:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 80089f4:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 80089f8:	2301      	movs	r3, #1
 80089fa:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80089fe:	4a0e      	ldr	r2, [pc, #56]	; (8008a38 <ProcessRadioRxDone+0x554>)
 8008a00:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008a04:	f043 0302 	orr.w	r3, r3, #2
 8008a08:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8008a0c:	e059      	b.n	8008ac2 <ProcessRadioRxDone+0x5de>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008a0e:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8008a12:	4c09      	ldr	r4, [pc, #36]	; (8008a38 <ProcessRadioRxDone+0x554>)
 8008a14:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	463b      	mov	r3, r7
 8008a1c:	f002 020f 	and.w	r2, r2, #15
 8008a20:	2100      	movs	r1, #0
 8008a22:	a817      	add	r0, sp, #92	; 0x5c
 8008a24:	f7ff fa80 	bl	8007f28 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008a28:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8008a2c:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                    break;
 8008a30:	e7e5      	b.n	80089fe <ProcessRadioRxDone+0x51a>
 8008a32:	bf00      	nop
 8008a34:	20000858 	.word	0x20000858
 8008a38:	20000620 	.word	0x20000620
 8008a3c:	20008000 	.word	0x20008000
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8008a40:	4c33      	ldr	r4, [pc, #204]	; (8008b10 <ProcessRadioRxDone+0x62c>)
 8008a42:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	463b      	mov	r3, r7
 8008a4a:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8008a4e:	2100      	movs	r1, #0
 8008a50:	981c      	ldr	r0, [sp, #112]	; 0x70
 8008a52:	f7ff fa69 	bl	8007f28 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008a56:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8008a5a:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                    break;
 8008a5e:	e7ce      	b.n	80089fe <ProcessRadioRxDone+0x51a>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008a60:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8008a64:	4b2a      	ldr	r3, [pc, #168]	; (8008b10 <ProcessRadioRxDone+0x62c>)
 8008a66:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008a6a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008a6c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008a70:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8008a74:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 8008a7e:	e7be      	b.n	80089fe <ProcessRadioRxDone+0x51a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008a80:	4b23      	ldr	r3, [pc, #140]	; (8008b10 <ProcessRadioRxDone+0x62c>)
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 8008a88:	f7ff f9d4 	bl	8007e34 <PrepareRxDoneAbort>
                    break;
 8008a8c:	e7b7      	b.n	80089fe <ProcessRadioRxDone+0x51a>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8008a8e:	1e6a      	subs	r2, r5, #1
 8008a90:	4c1f      	ldr	r4, [pc, #124]	; (8008b10 <ProcessRadioRxDone+0x62c>)
 8008a92:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8008a96:	b292      	uxth	r2, r2
 8008a98:	1c71      	adds	r1, r6, #1
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	f006 fb87 	bl	800f1ae <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8008aac:	f8c4 7420 	str.w	r7, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8008ab0:	3d01      	subs	r5, #1
 8008ab2:	f884 5424 	strb.w	r5, [r4, #1060]	; 0x424
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008ab6:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8008aba:	f043 0302 	orr.w	r3, r3, #2
 8008abe:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    if( MacCtx.NodeAckRequested == true )
 8008ac2:	4b13      	ldr	r3, [pc, #76]	; (8008b10 <ProcessRadioRxDone+0x62c>)
 8008ac4:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8008ac8:	b173      	cbz	r3, 8008ae8 <ProcessRadioRxDone+0x604>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008aca:	4b11      	ldr	r3, [pc, #68]	; (8008b10 <ProcessRadioRxDone+0x62c>)
 8008acc:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8008ad0:	b17b      	cbz	r3, 8008af2 <ProcessRadioRxDone+0x60e>
            OnAckTimeoutTimerEvent( NULL );
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	f7ff f98e 	bl	8007df4 <OnAckTimeoutTimerEvent>
 8008ad8:	e00b      	b.n	8008af2 <ProcessRadioRxDone+0x60e>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008ada:	4b0d      	ldr	r3, [pc, #52]	; (8008b10 <ProcessRadioRxDone+0x62c>)
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 8008ae2:	f7ff f9a7 	bl	8007e34 <PrepareRxDoneAbort>
            break;
 8008ae6:	e7ec      	b.n	8008ac2 <ProcessRadioRxDone+0x5de>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008ae8:	4b0a      	ldr	r3, [pc, #40]	; (8008b14 <ProcessRadioRxDone+0x630>)
 8008aea:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d009      	beq.n	8008b06 <ProcessRadioRxDone+0x622>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008af2:	4a07      	ldr	r2, [pc, #28]	; (8008b10 <ProcessRadioRxDone+0x62c>)
 8008af4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008af8:	f043 0310 	orr.w	r3, r3, #16
 8008afc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8008b00:	f7fe ff4e 	bl	80079a0 <UpdateRxSlotIdleState>
 8008b04:	e543      	b.n	800858e <ProcessRadioRxDone+0xaa>
            OnAckTimeoutTimerEvent( NULL );
 8008b06:	2000      	movs	r0, #0
 8008b08:	f7ff f974 	bl	8007df4 <OnAckTimeoutTimerEvent>
 8008b0c:	e7f1      	b.n	8008af2 <ProcessRadioRxDone+0x60e>
 8008b0e:	bf00      	nop
 8008b10:	20000620 	.word	0x20000620
 8008b14:	20008000 	.word	0x20008000

08008b18 <ProcessRadioTxTimeout>:
{
 8008b18:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008b1a:	4b0f      	ldr	r3, [pc, #60]	; (8008b58 <ProcessRadioTxTimeout+0x40>)
 8008b1c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d002      	beq.n	8008b2a <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8008b24:	4b0d      	ldr	r3, [pc, #52]	; (8008b5c <ProcessRadioTxTimeout+0x44>)
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8008b2a:	f7fe ff39 	bl	80079a0 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008b2e:	4c0c      	ldr	r4, [pc, #48]	; (8008b60 <ProcessRadioTxTimeout+0x48>)
 8008b30:	2002      	movs	r0, #2
 8008b32:	f884 0435 	strb.w	r0, [r4, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008b36:	f002 fcc3 	bl	800b4c0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008b3a:	f894 3410 	ldrb.w	r3, [r4, #1040]	; 0x410
 8008b3e:	b113      	cbz	r3, 8008b46 <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 8008b40:	2201      	movs	r2, #1
 8008b42:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008b46:	4a06      	ldr	r2, [pc, #24]	; (8008b60 <ProcessRadioTxTimeout+0x48>)
 8008b48:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008b4c:	f043 0310 	orr.w	r3, r3, #16
 8008b50:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8008b54:	bd10      	pop	{r4, pc}
 8008b56:	bf00      	nop
 8008b58:	20008000 	.word	0x20008000
 8008b5c:	08012954 	.word	0x08012954
 8008b60:	20000620 	.word	0x20000620

08008b64 <CheckForClassBCollision>:
{
 8008b64:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008b66:	f002 fa52 	bl	800b00e <LoRaMacClassBIsBeaconExpected>
 8008b6a:	b978      	cbnz	r0, 8008b8c <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008b6c:	4b09      	ldr	r3, [pc, #36]	; (8008b94 <CheckForClassBCollision+0x30>)
 8008b6e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d001      	beq.n	8008b7a <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8008b76:	2000      	movs	r0, #0
}
 8008b78:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008b7a:	f002 fa4a 	bl	800b012 <LoRaMacClassBIsPingExpected>
 8008b7e:	b938      	cbnz	r0, 8008b90 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008b80:	f002 fa49 	bl	800b016 <LoRaMacClassBIsMulticastExpected>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d0f7      	beq.n	8008b78 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008b88:	200f      	movs	r0, #15
 8008b8a:	e7f5      	b.n	8008b78 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008b8c:	200e      	movs	r0, #14
 8008b8e:	e7f3      	b.n	8008b78 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008b90:	200f      	movs	r0, #15
 8008b92:	e7f1      	b.n	8008b78 <CheckForClassBCollision+0x14>
 8008b94:	20008000 	.word	0x20008000

08008b98 <HandleRadioRxErrorTimeout>:
{
 8008b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008b9e:	4b37      	ldr	r3, [pc, #220]	; (8008c7c <HandleRadioRxErrorTimeout+0xe4>)
 8008ba0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d002      	beq.n	8008bae <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8008ba8:	4b35      	ldr	r3, [pc, #212]	; (8008c80 <HandleRadioRxErrorTimeout+0xe8>)
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008bae:	f002 fa2e 	bl	800b00e <LoRaMacClassBIsBeaconExpected>
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	bb00      	cbnz	r0, 8008bf8 <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008bb6:	4b31      	ldr	r3, [pc, #196]	; (8008c7c <HandleRadioRxErrorTimeout+0xe4>)
 8008bb8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d022      	beq.n	8008c06 <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 8008bc0:	b9be      	cbnz	r6, 8008bf2 <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008bc2:	4b30      	ldr	r3, [pc, #192]	; (8008c84 <HandleRadioRxErrorTimeout+0xec>)
 8008bc4:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d13f      	bne.n	8008c4c <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 8008bcc:	4b2d      	ldr	r3, [pc, #180]	; (8008c84 <HandleRadioRxErrorTimeout+0xec>)
 8008bce:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8008bd2:	b113      	cbz	r3, 8008bda <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8008bd4:	4b2b      	ldr	r3, [pc, #172]	; (8008c84 <HandleRadioRxErrorTimeout+0xec>)
 8008bd6:	f883 5435 	strb.w	r5, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f002 fc70 	bl	800b4c0 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8008be0:	4b26      	ldr	r3, [pc, #152]	; (8008c7c <HandleRadioRxErrorTimeout+0xe4>)
 8008be2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008be4:	f008 fcdc 	bl	80115a0 <UTIL_TIMER_GetElapsedTime>
 8008be8:	4b26      	ldr	r3, [pc, #152]	; (8008c84 <HandleRadioRxErrorTimeout+0xec>)
 8008bea:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8008bee:	4298      	cmp	r0, r3
 8008bf0:	d220      	bcs.n	8008c34 <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 8008bf2:	f7fe fed5 	bl	80079a0 <UpdateRxSlotIdleState>
}
 8008bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8008bf8:	2002      	movs	r0, #2
 8008bfa:	f002 f9fe 	bl	800affa <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8008bfe:	2000      	movs	r0, #0
 8008c00:	f002 fa00 	bl	800b004 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8008c04:	e7d7      	b.n	8008bb6 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008c06:	f002 fa04 	bl	800b012 <LoRaMacClassBIsPingExpected>
 8008c0a:	4607      	mov	r7, r0
 8008c0c:	b950      	cbnz	r0, 8008c24 <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008c0e:	f002 fa02 	bl	800b016 <LoRaMacClassBIsMulticastExpected>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d0d4      	beq.n	8008bc0 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008c16:	2000      	movs	r0, #0
 8008c18:	f002 f9f1 	bl	800affe <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	f002 f9f3 	bl	800b008 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8008c22:	e7e6      	b.n	8008bf2 <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008c24:	2000      	movs	r0, #0
 8008c26:	f002 f9e9 	bl	800affc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	f002 f9eb 	bl	800b006 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8008c30:	463e      	mov	r6, r7
 8008c32:	e7ec      	b.n	8008c0e <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8008c34:	4c13      	ldr	r4, [pc, #76]	; (8008c84 <HandleRadioRxErrorTimeout+0xec>)
 8008c36:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8008c3a:	f008 fce7 	bl	801160c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008c3e:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8008c42:	f043 0310 	orr.w	r3, r3, #16
 8008c46:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
 8008c4a:	e7d2      	b.n	8008bf2 <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 8008c4c:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <HandleRadioRxErrorTimeout+0xec>)
 8008c4e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8008c52:	b113      	cbz	r3, 8008c5a <HandleRadioRxErrorTimeout+0xc2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8008c54:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <HandleRadioRxErrorTimeout+0xec>)
 8008c56:	f883 4435 	strb.w	r4, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f002 fc30 	bl	800b4c0 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008c60:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <HandleRadioRxErrorTimeout+0xe4>)
 8008c62:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d0c3      	beq.n	8008bf2 <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008c6a:	4a06      	ldr	r2, [pc, #24]	; (8008c84 <HandleRadioRxErrorTimeout+0xec>)
 8008c6c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008c70:	f043 0310 	orr.w	r3, r3, #16
 8008c74:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8008c78:	e7bb      	b.n	8008bf2 <HandleRadioRxErrorTimeout+0x5a>
 8008c7a:	bf00      	nop
 8008c7c:	20008000 	.word	0x20008000
 8008c80:	08012954 	.word	0x08012954
 8008c84:	20000620 	.word	0x20000620

08008c88 <ProcessRadioRxError>:
{
 8008c88:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008c8a:	2106      	movs	r1, #6
 8008c8c:	2005      	movs	r0, #5
 8008c8e:	f7ff ff83 	bl	8008b98 <HandleRadioRxErrorTimeout>
}
 8008c92:	bd08      	pop	{r3, pc}

08008c94 <ProcessRadioRxTimeout>:
{
 8008c94:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008c96:	2104      	movs	r1, #4
 8008c98:	2003      	movs	r0, #3
 8008c9a:	f7ff ff7d 	bl	8008b98 <HandleRadioRxErrorTimeout>
}
 8008c9e:	bd08      	pop	{r3, pc}

08008ca0 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ca0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008ca4:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8008ca6:	4a14      	ldr	r2, [pc, #80]	; (8008cf8 <LoRaMacHandleIrqEvents+0x58>)
 8008ca8:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8008caa:	2000      	movs	r0, #0
 8008cac:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cae:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8008cb2:	b303      	cbz	r3, 8008cf6 <LoRaMacHandleIrqEvents+0x56>
{
 8008cb4:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 8008cb6:	b2dc      	uxtb	r4, r3
 8008cb8:	f013 0f10 	tst.w	r3, #16
 8008cbc:	d10c      	bne.n	8008cd8 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 8008cbe:	f014 0f08 	tst.w	r4, #8
 8008cc2:	d10c      	bne.n	8008cde <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8008cc4:	f014 0f04 	tst.w	r4, #4
 8008cc8:	d10c      	bne.n	8008ce4 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 8008cca:	f014 0f02 	tst.w	r4, #2
 8008cce:	d10c      	bne.n	8008cea <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 8008cd0:	f014 0f01 	tst.w	r4, #1
 8008cd4:	d10c      	bne.n	8008cf0 <LoRaMacHandleIrqEvents+0x50>
}
 8008cd6:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 8008cd8:	f7ff f800 	bl	8007cdc <ProcessRadioTxDone>
 8008cdc:	e7ef      	b.n	8008cbe <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 8008cde:	f7ff fc01 	bl	80084e4 <ProcessRadioRxDone>
 8008ce2:	e7ef      	b.n	8008cc4 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8008ce4:	f7ff ff18 	bl	8008b18 <ProcessRadioTxTimeout>
 8008ce8:	e7ef      	b.n	8008cca <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 8008cea:	f7ff ffcd 	bl	8008c88 <ProcessRadioRxError>
 8008cee:	e7ef      	b.n	8008cd0 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 8008cf0:	f7ff ffd0 	bl	8008c94 <ProcessRadioRxTimeout>
}
 8008cf4:	e7ef      	b.n	8008cd6 <LoRaMacHandleIrqEvents+0x36>
 8008cf6:	4770      	bx	lr
 8008cf8:	2000061c 	.word	0x2000061c

08008cfc <LoRaMacHandleMlmeRequest>:
{
 8008cfc:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008cfe:	4b16      	ldr	r3, [pc, #88]	; (8008d58 <LoRaMacHandleMlmeRequest+0x5c>)
 8008d00:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008d04:	f013 0f04 	tst.w	r3, #4
 8008d08:	d100      	bne.n	8008d0c <LoRaMacHandleMlmeRequest+0x10>
}
 8008d0a:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008d0c:	2001      	movs	r0, #1
 8008d0e:	f002 fbf5 	bl	800b4fc <LoRaMacConfirmQueueIsCmdActive>
 8008d12:	b178      	cbz	r0, 8008d34 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8008d14:	2001      	movs	r0, #1
 8008d16:	f002 fbbb 	bl	800b490 <LoRaMacConfirmQueueGetStatus>
 8008d1a:	b918      	cbnz	r0, 8008d24 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8008d1c:	4b0e      	ldr	r3, [pc, #56]	; (8008d58 <LoRaMacHandleMlmeRequest+0x5c>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008d24:	4a0c      	ldr	r2, [pc, #48]	; (8008d58 <LoRaMacHandleMlmeRequest+0x5c>)
 8008d26:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008d2a:	f023 0302 	bic.w	r3, r3, #2
 8008d2e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8008d32:	e7ea      	b.n	8008d0a <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008d34:	2006      	movs	r0, #6
 8008d36:	f002 fbe1 	bl	800b4fc <LoRaMacConfirmQueueIsCmdActive>
 8008d3a:	b138      	cbz	r0, 8008d4c <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008d3c:	4a06      	ldr	r2, [pc, #24]	; (8008d58 <LoRaMacHandleMlmeRequest+0x5c>)
 8008d3e:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008d42:	f023 0302 	bic.w	r3, r3, #2
 8008d46:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8008d4a:	e7de      	b.n	8008d0a <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8008d4c:	2007      	movs	r0, #7
 8008d4e:	f002 fbd5 	bl	800b4fc <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d0d9      	beq.n	8008d0a <LoRaMacHandleMlmeRequest+0xe>
 8008d56:	e7f1      	b.n	8008d3c <LoRaMacHandleMlmeRequest+0x40>
 8008d58:	20000620 	.word	0x20000620

08008d5c <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 8008d5c:	4b14      	ldr	r3, [pc, #80]	; (8008db0 <AckTimeoutRetriesFinalize+0x54>)
 8008d5e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8008d62:	b12b      	cbz	r3, 8008d70 <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008d64:	4b12      	ldr	r3, [pc, #72]	; (8008db0 <AckTimeoutRetriesFinalize+0x54>)
 8008d66:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8008d6a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
 8008d6e:	4770      	bx	lr
{
 8008d70:	b500      	push	{lr}
 8008d72:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8008d74:	2302      	movs	r3, #2
 8008d76:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8008d7a:	4b0e      	ldr	r3, [pc, #56]	; (8008db4 <AckTimeoutRetriesFinalize+0x58>)
 8008d7c:	f503 7208 	add.w	r2, r3, #544	; 0x220
 8008d80:	9201      	str	r2, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8008d82:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 8008d86:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8008d88:	a901      	add	r1, sp, #4
 8008d8a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008d8e:	f003 f96c 	bl	800c06a <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8008d92:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <AckTimeoutRetriesFinalize+0x54>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 8008d9a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008d9e:	4b04      	ldr	r3, [pc, #16]	; (8008db0 <AckTimeoutRetriesFinalize+0x54>)
 8008da0:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8008da4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8008da8:	b005      	add	sp, #20
 8008daa:	f85d fb04 	ldr.w	pc, [sp], #4
 8008dae:	bf00      	nop
 8008db0:	20000620 	.word	0x20000620
 8008db4:	20008000 	.word	0x20008000

08008db8 <SerializeTxFrame>:
{
 8008db8:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 8008dba:	4b0f      	ldr	r3, [pc, #60]	; (8008df8 <SerializeTxFrame+0x40>)
 8008dbc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008dc0:	b11b      	cbz	r3, 8008dca <SerializeTxFrame+0x12>
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	d00a      	beq.n	8008ddc <SerializeTxFrame+0x24>
 8008dc6:	2003      	movs	r0, #3
}
 8008dc8:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008dca:	480c      	ldr	r0, [pc, #48]	; (8008dfc <SerializeTxFrame+0x44>)
 8008dcc:	f003 f859 	bl	800be82 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008dd0:	b968      	cbnz	r0, 8008dee <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008dd2:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <SerializeTxFrame+0x40>)
 8008dd4:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008dd8:	801a      	strh	r2, [r3, #0]
            break;
 8008dda:	e7f5      	b.n	8008dc8 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8008ddc:	4807      	ldr	r0, [pc, #28]	; (8008dfc <SerializeTxFrame+0x44>)
 8008dde:	f003 f886 	bl	800beee <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008de2:	b930      	cbnz	r0, 8008df2 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008de4:	4b04      	ldr	r3, [pc, #16]	; (8008df8 <SerializeTxFrame+0x40>)
 8008de6:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008dea:	801a      	strh	r2, [r3, #0]
            break;
 8008dec:	e7ec      	b.n	8008dc8 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008dee:	2011      	movs	r0, #17
 8008df0:	e7ea      	b.n	8008dc8 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008df2:	2011      	movs	r0, #17
 8008df4:	e7e8      	b.n	8008dc8 <SerializeTxFrame+0x10>
 8008df6:	bf00      	nop
 8008df8:	20000620 	.word	0x20000620
 8008dfc:	20000728 	.word	0x20000728

08008e00 <ComputeRxWindowParameters>:
{
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008e04:	4c1e      	ldr	r4, [pc, #120]	; (8008e80 <ComputeRxWindowParameters+0x80>)
 8008e06:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8008e0a:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 8008e0e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 8008e12:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 8008e16:	4630      	mov	r0, r6
 8008e18:	f003 fa14 	bl	800c244 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008e1c:	4d19      	ldr	r5, [pc, #100]	; (8008e84 <ComputeRxWindowParameters+0x84>)
 8008e1e:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008e26:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8008e2a:	b241      	sxtb	r1, r0
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f003 f954 	bl	800c0da <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008e32:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008e3a:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8008e3e:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 8008e42:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8008e46:	f003 f948 	bl	800c0da <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008e4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e4c:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 8008e50:	440b      	add	r3, r1
 8008e52:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008e56:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008e58:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8008e62:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	d007      	beq.n	8008e7a <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008e6a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008e6c:	4419      	add	r1, r3
 8008e6e:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008e72:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008e74:	440a      	add	r2, r1
 8008e76:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 8008e7a:	b002      	add	sp, #8
 8008e7c:	bd70      	pop	{r4, r5, r6, pc}
 8008e7e:	bf00      	nop
 8008e80:	20008000 	.word	0x20008000
 8008e84:	20000620 	.word	0x20000620

08008e88 <VerifyTxFrame>:
{
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008e90:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <VerifyTxFrame+0x40>)
 8008e92:	f893 412c 	ldrb.w	r4, [r3, #300]	; 0x12c
 8008e96:	b914      	cbnz	r4, 8008e9e <VerifyTxFrame+0x16>
}
 8008e98:	4620      	mov	r0, r4
 8008e9a:	b002      	add	sp, #8
 8008e9c:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008e9e:	a801      	add	r0, sp, #4
 8008ea0:	f002 f9f2 	bl	800b288 <LoRaMacCommandsGetSizeSerializedCmds>
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	b968      	cbnz	r0, 8008ec4 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8008ea8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008eac:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <VerifyTxFrame+0x40>)
 8008eae:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8008eb2:	4b06      	ldr	r3, [pc, #24]	; (8008ecc <VerifyTxFrame+0x44>)
 8008eb4:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 8008eb8:	f7fe fefe 	bl	8007cb8 <ValidatePayloadLength>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d1eb      	bne.n	8008e98 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8008ec0:	2408      	movs	r4, #8
 8008ec2:	e7e9      	b.n	8008e98 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008ec4:	2413      	movs	r4, #19
 8008ec6:	e7e7      	b.n	8008e98 <VerifyTxFrame+0x10>
 8008ec8:	20008000 	.word	0x20008000
 8008ecc:	20000620 	.word	0x20000620

08008ed0 <SecureFrame>:
{
 8008ed0:	b530      	push	{r4, r5, lr}
 8008ed2:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 8008ed8:	4b1a      	ldr	r3, [pc, #104]	; (8008f44 <SecureFrame+0x74>)
 8008eda:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008ede:	b133      	cbz	r3, 8008eee <SecureFrame+0x1e>
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	d00b      	beq.n	8008f00 <SecureFrame+0x30>
 8008ee8:	2003      	movs	r0, #3
}
 8008eea:	b003      	add	sp, #12
 8008eec:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008eee:	4816      	ldr	r0, [pc, #88]	; (8008f48 <SecureFrame+0x78>)
 8008ef0:	f002 fd82 	bl	800b9f8 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008ef4:	bb00      	cbnz	r0, 8008f38 <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008ef6:	4b13      	ldr	r3, [pc, #76]	; (8008f44 <SecureFrame+0x74>)
 8008ef8:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008efc:	801a      	strh	r2, [r3, #0]
            break;
 8008efe:	e7f4      	b.n	8008eea <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008f00:	a801      	add	r0, sp, #4
 8008f02:	f002 fd19 	bl	800b938 <LoRaMacCryptoGetFCntUp>
 8008f06:	b9c8      	cbnz	r0, 8008f3c <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8008f08:	4b0e      	ldr	r3, [pc, #56]	; (8008f44 <SecureFrame+0x74>)
 8008f0a:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8008f0e:	b923      	cbnz	r3, 8008f1a <SecureFrame+0x4a>
 8008f10:	4b0c      	ldr	r3, [pc, #48]	; (8008f44 <SecureFrame+0x74>)
 8008f12:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d902      	bls.n	8008f20 <SecureFrame+0x50>
                fCntUp -= 1;
 8008f1a:	9b01      	ldr	r3, [sp, #4]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8008f20:	4b09      	ldr	r3, [pc, #36]	; (8008f48 <SecureFrame+0x78>)
 8008f22:	4622      	mov	r2, r4
 8008f24:	4629      	mov	r1, r5
 8008f26:	9801      	ldr	r0, [sp, #4]
 8008f28:	f002 fd92 	bl	800ba50 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008f2c:	b940      	cbnz	r0, 8008f40 <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008f2e:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <SecureFrame+0x74>)
 8008f30:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008f34:	801a      	strh	r2, [r3, #0]
            break;
 8008f36:	e7d8      	b.n	8008eea <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008f38:	2011      	movs	r0, #17
 8008f3a:	e7d6      	b.n	8008eea <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8008f3c:	2012      	movs	r0, #18
 8008f3e:	e7d4      	b.n	8008eea <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008f40:	2011      	movs	r0, #17
 8008f42:	e7d2      	b.n	8008eea <SecureFrame+0x1a>
 8008f44:	20000620 	.word	0x20000620
 8008f48:	20000728 	.word	0x20000728

08008f4c <SendFrameOnChannel>:
{
 8008f4c:	b570      	push	{r4, r5, r6, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	4606      	mov	r6, r0
    int8_t txPower = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 8008f58:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008f5c:	4d34      	ldr	r5, [pc, #208]	; (8009030 <SendFrameOnChannel+0xe4>)
 8008f5e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 8008f62:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008f66:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 8008f6a:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8008f6e:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8008f72:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8008f74:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8008f78:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8008f7a:	4c2e      	ldr	r4, [pc, #184]	; (8009034 <SendFrameOnChannel+0xe8>)
 8008f7c:	8823      	ldrh	r3, [r4, #0]
 8008f7e:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8008f82:	f204 4314 	addw	r3, r4, #1044	; 0x414
 8008f86:	f10d 0207 	add.w	r2, sp, #7
 8008f8a:	a902      	add	r1, sp, #8
 8008f8c:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 8008f90:	f003 f8c5 	bl	800c11e <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	f884 3435 	strb.w	r3, [r4, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008f9a:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 8008f9e:	f884 3436 	strb.w	r3, [r4, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8008fa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008fa6:	f884 3437 	strb.w	r3, [r4, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 8008faa:	f8c4 6444 	str.w	r6, [r4, #1092]	; 0x444
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008fae:	f8d4 3414 	ldr.w	r3, [r4, #1044]	; 0x414
 8008fb2:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008fb6:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8008fba:	f002 f82e 	bl	800b01a <LoRaMacClassBIsBeaconModeActive>
 8008fbe:	bb58      	cbnz	r0, 8009018 <SendFrameOnChannel+0xcc>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008fc0:	4b1b      	ldr	r3, [pc, #108]	; (8009030 <SendFrameOnChannel+0xe4>)
 8008fc2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d02e      	beq.n	8009028 <SendFrameOnChannel+0xdc>
    LoRaMacClassBHaltBeaconing( );
 8008fca:	f002 f829 	bl	800b020 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8008fce:	4b18      	ldr	r3, [pc, #96]	; (8009030 <SendFrameOnChannel+0xe4>)
 8008fd0:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8008fd4:	4b17      	ldr	r3, [pc, #92]	; (8009034 <SendFrameOnChannel+0xe8>)
 8008fd6:	f893 1411 	ldrb.w	r1, [r3, #1041]	; 0x411
 8008fda:	b2c0      	uxtb	r0, r0
 8008fdc:	f7ff ff78 	bl	8008ed0 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	b9b0      	cbnz	r0, 8009012 <SendFrameOnChannel+0xc6>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008fe4:	4b13      	ldr	r3, [pc, #76]	; (8009034 <SendFrameOnChannel+0xe8>)
 8008fe6:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008fea:	f042 0202 	orr.w	r2, r2, #2
 8008fee:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 8008ff2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8008ff6:	b92b      	cbnz	r3, 8009004 <SendFrameOnChannel+0xb8>
        MacCtx.ChannelsNbTransCounter++;
 8008ff8:	4a0e      	ldr	r2, [pc, #56]	; (8009034 <SendFrameOnChannel+0xe8>)
 8008ffa:	f892 340c 	ldrb.w	r3, [r2, #1036]	; 0x40c
 8008ffe:	3301      	adds	r3, #1
 8009000:	f882 340c 	strb.w	r3, [r2, #1036]	; 0x40c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8009004:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <SendFrameOnChannel+0xec>)
 8009006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009008:	480a      	ldr	r0, [pc, #40]	; (8009034 <SendFrameOnChannel+0xe8>)
 800900a:	f830 1b02 	ldrh.w	r1, [r0], #2
 800900e:	b2c9      	uxtb	r1, r1
 8009010:	4798      	blx	r3
}
 8009012:	4620      	mov	r0, r4
 8009014:	b006      	add	sp, #24
 8009016:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8009018:	f8d4 0414 	ldr.w	r0, [r4, #1044]	; 0x414
 800901c:	f002 f80f 	bl	800b03e <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8009020:	2800      	cmp	r0, #0
 8009022:	d0cd      	beq.n	8008fc0 <SendFrameOnChannel+0x74>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8009024:	2410      	movs	r4, #16
 8009026:	e7f4      	b.n	8009012 <SendFrameOnChannel+0xc6>
        LoRaMacClassBStopRxSlots( );
 8009028:	f002 f80b 	bl	800b042 <LoRaMacClassBStopRxSlots>
 800902c:	e7cd      	b.n	8008fca <SendFrameOnChannel+0x7e>
 800902e:	bf00      	nop
 8009030:	20008000 	.word	0x20008000
 8009034:	20000620 	.word	0x20000620
 8009038:	08012954 	.word	0x08012954

0800903c <ScheduleTx>:
{
 800903c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009040:	b08c      	sub	sp, #48	; 0x30
 8009042:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 8009044:	f7ff fd8e 	bl	8008b64 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 8009048:	4604      	mov	r4, r0
 800904a:	b118      	cbz	r0, 8009054 <ScheduleTx+0x18>
}
 800904c:	4620      	mov	r0, r4
 800904e:	b00c      	add	sp, #48	; 0x30
 8009050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 8009054:	f7fe fcfe 	bl	8007a54 <CalculateBackOff>
    status = SerializeTxFrame( );
 8009058:	f7ff feae 	bl	8008db8 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800905c:	4604      	mov	r4, r0
 800905e:	2800      	cmp	r0, #0
 8009060:	d1f4      	bne.n	800904c <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8009062:	4e36      	ldr	r6, [pc, #216]	; (800913c <ScheduleTx+0x100>)
 8009064:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8009066:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009068:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800906c:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8009070:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8009074:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009078:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800907c:	4640      	mov	r0, r8
 800907e:	f008 f9f9 	bl	8011474 <SysTimeGetMcuTime>
 8009082:	af02      	add	r7, sp, #8
 8009084:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
 800908e:	e898 0006 	ldmia.w	r8, {r1, r2}
 8009092:	4638      	mov	r0, r7
 8009094:	f008 f98b 	bl	80113ae <SysTimeSub>
 8009098:	ab07      	add	r3, sp, #28
 800909a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800909e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80090a2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80090a4:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 80090a6:	2300      	movs	r3, #0
 80090a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 80090ac:	2301      	movs	r3, #1
 80090ae:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80090b2:	4b23      	ldr	r3, [pc, #140]	; (8009140 <ScheduleTx+0x104>)
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80090ba:	f896 312c 	ldrb.w	r3, [r6, #300]	; 0x12c
 80090be:	b92b      	cbnz	r3, 80090cc <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 80090c0:	2301      	movs	r3, #1
 80090c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 80090c6:	2300      	movs	r3, #0
 80090c8:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80090cc:	4a1c      	ldr	r2, [pc, #112]	; (8009140 <ScheduleTx+0x104>)
 80090ce:	481b      	ldr	r0, [pc, #108]	; (800913c <ScheduleTx+0x100>)
 80090d0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	f202 4384 	addw	r3, r2, #1156	; 0x484
 80090da:	f202 4211 	addw	r2, r2, #1041	; 0x411
 80090de:	a904      	add	r1, sp, #16
 80090e0:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 80090e4:	f003 f88e 	bl	800c204 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 80090e8:	b1c0      	cbz	r0, 800911c <ScheduleTx+0xe0>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 80090ea:	280b      	cmp	r0, #11
 80090ec:	d124      	bne.n	8009138 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80090ee:	4a14      	ldr	r2, [pc, #80]	; (8009140 <ScheduleTx+0x104>)
 80090f0:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
 80090f4:	b191      	cbz	r1, 800911c <ScheduleTx+0xe0>
                if( allowDelayedTx == true )
 80090f6:	b90d      	cbnz	r5, 80090fc <ScheduleTx+0xc0>
                return status;
 80090f8:	4604      	mov	r4, r0
 80090fa:	e7a7      	b.n	800904c <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80090fc:	4615      	mov	r5, r2
 80090fe:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 8009102:	f042 0220 	orr.w	r2, r2, #32
 8009106:	f8c5 2340 	str.w	r2, [r5, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800910a:	f505 755a 	add.w	r5, r5, #872	; 0x368
 800910e:	4628      	mov	r0, r5
 8009110:	f008 fb1c 	bl	801174c <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8009114:	4628      	mov	r0, r5
 8009116:	f008 fad3 	bl	80116c0 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800911a:	e797      	b.n	800904c <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800911c:	f7ff fe70 	bl	8008e00 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 8009120:	f7ff feb2 	bl	8008e88 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009124:	4604      	mov	r4, r0
 8009126:	2800      	cmp	r0, #0
 8009128:	d190      	bne.n	800904c <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <ScheduleTx+0x104>)
 800912c:	f893 0411 	ldrb.w	r0, [r3, #1041]	; 0x411
 8009130:	f7ff ff0c 	bl	8008f4c <SendFrameOnChannel>
 8009134:	4604      	mov	r4, r0
 8009136:	e789      	b.n	800904c <ScheduleTx+0x10>
            return status;
 8009138:	4604      	mov	r4, r0
 800913a:	e787      	b.n	800904c <ScheduleTx+0x10>
 800913c:	20008000 	.word	0x20008000
 8009140:	20000620 	.word	0x20000620

08009144 <OnTxDelayedTimerEvent>:
{
 8009144:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8009146:	4c11      	ldr	r4, [pc, #68]	; (800918c <OnTxDelayedTimerEvent+0x48>)
 8009148:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800914c:	f008 fa5e 	bl	801160c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009150:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009154:	f023 0320 	bic.w	r3, r3, #32
 8009158:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 800915c:	2001      	movs	r0, #1
 800915e:	f7ff ff6d 	bl	800903c <ScheduleTx>
 8009162:	b108      	cbz	r0, 8009168 <OnTxDelayedTimerEvent+0x24>
 8009164:	280b      	cmp	r0, #11
 8009166:	d100      	bne.n	800916a <OnTxDelayedTimerEvent+0x26>
}
 8009168:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800916a:	4b09      	ldr	r3, [pc, #36]	; (8009190 <OnTxDelayedTimerEvent+0x4c>)
 800916c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8009170:	f884 2436 	strb.w	r2, [r4, #1078]	; 0x436
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009174:	f894 240e 	ldrb.w	r2, [r4, #1038]	; 0x40e
 8009178:	f884 2439 	strb.w	r2, [r4, #1081]	; 0x439
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800917c:	2009      	movs	r0, #9
 800917e:	f884 0435 	strb.w	r0, [r4, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8009182:	f002 f99d 	bl	800b4c0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8009186:	f7fe fcf3 	bl	8007b70 <StopRetransmission>
}
 800918a:	e7ed      	b.n	8009168 <OnTxDelayedTimerEvent+0x24>
 800918c:	20000620 	.word	0x20000620
 8009190:	20008000 	.word	0x20008000

08009194 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009194:	4b23      	ldr	r3, [pc, #140]	; (8009224 <LoRaMacHandleMcpsRequest+0x90>)
 8009196:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800919a:	f013 0f01 	tst.w	r3, #1
 800919e:	d040      	beq.n	8009222 <LoRaMacHandleMcpsRequest+0x8e>
{
 80091a0:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80091a2:	4b20      	ldr	r3, [pc, #128]	; (8009224 <LoRaMacHandleMcpsRequest+0x90>)
 80091a4:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 80091a8:	b12b      	cbz	r3, 80091b6 <LoRaMacHandleMcpsRequest+0x22>
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d003      	beq.n	80091b6 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d007      	beq.n	80091c2 <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 80091b2:	2400      	movs	r4, #0
 80091b4:	e003      	b.n	80091be <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80091b6:	f7fe fc9f 	bl	8007af8 <CheckRetransUnconfirmedUplink>
 80091ba:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 80091bc:	b9a4      	cbnz	r4, 80091e8 <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 80091be:	b31c      	cbz	r4, 8009208 <LoRaMacHandleMcpsRequest+0x74>
}
 80091c0:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 80091c2:	4b18      	ldr	r3, [pc, #96]	; (8009224 <LoRaMacHandleMcpsRequest+0x90>)
 80091c4:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 80091c8:	b1e3      	cbz	r3, 8009204 <LoRaMacHandleMcpsRequest+0x70>
                stopRetransmission = CheckRetransConfirmedUplink( );
 80091ca:	f7fe fcb9 	bl	8007b40 <CheckRetransConfirmedUplink>
 80091ce:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80091d0:	4b15      	ldr	r3, [pc, #84]	; (8009228 <LoRaMacHandleMcpsRequest+0x94>)
 80091d2:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1f0      	bne.n	80091bc <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 80091da:	b910      	cbnz	r0, 80091e2 <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 80091dc:	f7fe fd20 	bl	8007c20 <AckTimeoutRetriesProcess>
 80091e0:	e7ec      	b.n	80091bc <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 80091e2:	f7ff fdbb 	bl	8008d5c <AckTimeoutRetriesFinalize>
 80091e6:	e7e9      	b.n	80091bc <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 80091e8:	4c0e      	ldr	r4, [pc, #56]	; (8009224 <LoRaMacHandleMcpsRequest+0x90>)
 80091ea:	f504 705a 	add.w	r0, r4, #872	; 0x368
 80091ee:	f008 fa0d 	bl	801160c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80091f2:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80091f6:	f023 0320 	bic.w	r3, r3, #32
 80091fa:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 80091fe:	f7fe fcb7 	bl	8007b70 <StopRetransmission>
 8009202:	e7dd      	b.n	80091c0 <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 8009204:	2401      	movs	r4, #1
 8009206:	e7da      	b.n	80091be <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009208:	4b06      	ldr	r3, [pc, #24]	; (8009224 <LoRaMacHandleMcpsRequest+0x90>)
 800920a:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800920e:	f36f 1204 	bfc	r2, #4, #1
 8009212:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 8009216:	2000      	movs	r0, #0
 8009218:	f883 040f 	strb.w	r0, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 800921c:	f7ff ff92 	bl	8009144 <OnTxDelayedTimerEvent>
}
 8009220:	e7ce      	b.n	80091c0 <LoRaMacHandleMcpsRequest+0x2c>
 8009222:	4770      	bx	lr
 8009224:	20000620 	.word	0x20000620
 8009228:	20008000 	.word	0x20008000

0800922c <LoRaMacHandleRequestEvents>:
{
 800922c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800922e:	4b22      	ldr	r3, [pc, #136]	; (80092b8 <LoRaMacHandleRequestEvents+0x8c>)
 8009230:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009234:	bb7b      	cbnz	r3, 8009296 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009236:	4b20      	ldr	r3, [pc, #128]	; (80092b8 <LoRaMacHandleRequestEvents+0x8c>)
 8009238:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 800923c:	f014 0501 	ands.w	r5, r4, #1
 8009240:	d005      	beq.n	800924e <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8009242:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009246:	f36f 0200 	bfc	r2, #0, #1
 800924a:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800924e:	4b1a      	ldr	r3, [pc, #104]	; (80092b8 <LoRaMacHandleRequestEvents+0x8c>)
 8009250:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009254:	f013 0f04 	tst.w	r3, #4
 8009258:	d006      	beq.n	8009268 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800925a:	4b17      	ldr	r3, [pc, #92]	; (80092b8 <LoRaMacHandleRequestEvents+0x8c>)
 800925c:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009260:	f36f 0282 	bfc	r2, #2, #1
 8009264:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009268:	2001      	movs	r0, #1
 800926a:	f7fe fbad 	bl	80079c8 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800926e:	b135      	cbz	r5, 800927e <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009270:	4811      	ldr	r0, [pc, #68]	; (80092b8 <LoRaMacHandleRequestEvents+0x8c>)
 8009272:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f200 4034 	addw	r0, r0, #1076	; 0x434
 800927c:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800927e:	f014 0f04 	tst.w	r4, #4
 8009282:	d109      	bne.n	8009298 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 8009284:	f001 fecd 	bl	800b022 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009288:	4b0b      	ldr	r3, [pc, #44]	; (80092b8 <LoRaMacHandleRequestEvents+0x8c>)
 800928a:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800928e:	f36f 1204 	bfc	r2, #4, #1
 8009292:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
}
 8009296:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009298:	4808      	ldr	r0, [pc, #32]	; (80092bc <LoRaMacHandleRequestEvents+0x90>)
 800929a:	f002 f93b 	bl	800b514 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800929e:	f002 f971 	bl	800b584 <LoRaMacConfirmQueueGetCnt>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d0ee      	beq.n	8009284 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80092a6:	4a04      	ldr	r2, [pc, #16]	; (80092b8 <LoRaMacHandleRequestEvents+0x8c>)
 80092a8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80092ac:	f043 0304 	orr.w	r3, r3, #4
 80092b0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80092b4:	e7e6      	b.n	8009284 <LoRaMacHandleRequestEvents+0x58>
 80092b6:	bf00      	nop
 80092b8:	20000620 	.word	0x20000620
 80092bc:	20000a68 	.word	0x20000a68

080092c0 <OpenContinuousRxCWindow>:
{
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80092c4:	4c14      	ldr	r4, [pc, #80]	; (8009318 <OpenContinuousRxCWindow+0x58>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80092c6:	4d15      	ldr	r5, [pc, #84]	; (800931c <OpenContinuousRxCWindow+0x5c>)
 80092c8:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 80092cc:	9600      	str	r6, [sp, #0]
 80092ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80092d0:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80092d4:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 80092d8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80092dc:	f002 fefd 	bl	800c0da <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80092e0:	2302      	movs	r3, #2
 80092e2:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80092e6:	2301      	movs	r3, #1
 80092e8:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80092ec:	f205 421c 	addw	r2, r5, #1052	; 0x41c
 80092f0:	4631      	mov	r1, r6
 80092f2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80092f6:	f002 ff02 	bl	800c0fe <RegionRxConfig>
 80092fa:	b158      	cbz	r0, 8009314 <OpenContinuousRxCWindow+0x54>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80092fc:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 8009300:	f885 345e 	strb.w	r3, [r5, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 8009304:	4b06      	ldr	r3, [pc, #24]	; (8009320 <OpenContinuousRxCWindow+0x60>)
 8009306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009308:	2000      	movs	r0, #0
 800930a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800930c:	f895 33f3 	ldrb.w	r3, [r5, #1011]	; 0x3f3
 8009310:	f885 3480 	strb.w	r3, [r5, #1152]	; 0x480
}
 8009314:	b002      	add	sp, #8
 8009316:	bd70      	pop	{r4, r5, r6, pc}
 8009318:	20008000 	.word	0x20008000
 800931c:	20000620 	.word	0x20000620
 8009320:	08012954 	.word	0x08012954

08009324 <RxWindowSetup>:
{
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8009328:	f008 f970 	bl	801160c <UTIL_TIMER_Stop>
    Radio.Standby( );
 800932c:	4b0c      	ldr	r3, [pc, #48]	; (8009360 <RxWindowSetup+0x3c>)
 800932e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009330:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009332:	4a0c      	ldr	r2, [pc, #48]	; (8009364 <RxWindowSetup+0x40>)
 8009334:	4621      	mov	r1, r4
 8009336:	4b0c      	ldr	r3, [pc, #48]	; (8009368 <RxWindowSetup+0x44>)
 8009338:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800933c:	f002 fedf 	bl	800c0fe <RegionRxConfig>
 8009340:	b160      	cbz	r0, 800935c <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8009342:	4d0a      	ldr	r5, [pc, #40]	; (800936c <RxWindowSetup+0x48>)
 8009344:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 8009348:	f885 345e 	strb.w	r3, [r5, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800934c:	4b04      	ldr	r3, [pc, #16]	; (8009360 <RxWindowSetup+0x3c>)
 800934e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009350:	4a05      	ldr	r2, [pc, #20]	; (8009368 <RxWindowSetup+0x44>)
 8009352:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8009354:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8009356:	7ce3      	ldrb	r3, [r4, #19]
 8009358:	f885 3480 	strb.w	r3, [r5, #1152]	; 0x480
}
 800935c:	bd38      	pop	{r3, r4, r5, pc}
 800935e:	bf00      	nop
 8009360:	08012954 	.word	0x08012954
 8009364:	20000a3c 	.word	0x20000a3c
 8009368:	20008000 	.word	0x20008000
 800936c:	20000620 	.word	0x20000620

08009370 <OnRxWindow2TimerEvent>:
{
 8009370:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009372:	4b11      	ldr	r3, [pc, #68]	; (80093b8 <OnRxWindow2TimerEvent+0x48>)
 8009374:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8009378:	b903      	cbnz	r3, 800937c <OnRxWindow2TimerEvent+0xc>
}
 800937a:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800937c:	480e      	ldr	r0, [pc, #56]	; (80093b8 <OnRxWindow2TimerEvent+0x48>)
 800937e:	f890 3411 	ldrb.w	r3, [r0, #1041]	; 0x411
 8009382:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009386:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <OnRxWindow2TimerEvent+0x4c>)
 8009388:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800938a:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800938e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8009392:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009396:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800939a:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800939e:	2300      	movs	r3, #0
 80093a0:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80093a4:	2301      	movs	r3, #1
 80093a6:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80093aa:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 80093ae:	f500 7066 	add.w	r0, r0, #920	; 0x398
 80093b2:	f7ff ffb7 	bl	8009324 <RxWindowSetup>
 80093b6:	e7e0      	b.n	800937a <OnRxWindow2TimerEvent+0xa>
 80093b8:	20000620 	.word	0x20000620
 80093bc:	20008000 	.word	0x20008000

080093c0 <OnRxWindow1TimerEvent>:
{
 80093c0:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80093c2:	480f      	ldr	r0, [pc, #60]	; (8009400 <OnRxWindow1TimerEvent+0x40>)
 80093c4:	f890 3411 	ldrb.w	r3, [r0, #1041]	; 0x411
 80093c8:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80093cc:	4b0d      	ldr	r3, [pc, #52]	; (8009404 <OnRxWindow1TimerEvent+0x44>)
 80093ce:	f993 2069 	ldrsb.w	r2, [r3, #105]	; 0x69
 80093d2:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80093d6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80093da:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80093de:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80093e2:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80093e6:	2300      	movs	r3, #0
 80093e8:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80093ec:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80093f0:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 80093f4:	f500 7060 	add.w	r0, r0, #896	; 0x380
 80093f8:	f7ff ff94 	bl	8009324 <RxWindowSetup>
}
 80093fc:	bd08      	pop	{r3, pc}
 80093fe:	bf00      	nop
 8009400:	20000620 	.word	0x20000620
 8009404:	20008000 	.word	0x20008000

08009408 <LoRaMacHandleNvm>:
{
 8009408:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800940a:	4b30      	ldr	r3, [pc, #192]	; (80094cc <LoRaMacHandleNvm+0xc4>)
 800940c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009410:	b103      	cbz	r3, 8009414 <LoRaMacHandleNvm+0xc>
}
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8009416:	2124      	movs	r1, #36	; 0x24
 8009418:	f005 feea 	bl	800f1f0 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800941c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800941e:	4283      	cmp	r3, r0
 8009420:	d052      	beq.n	80094c8 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 8009422:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8009424:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8009426:	211c      	movs	r1, #28
 8009428:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800942c:	f005 fee0 	bl	800f1f0 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8009430:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009432:	4283      	cmp	r3, r0
 8009434:	d002      	beq.n	800943c <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 8009436:	6460      	str	r0, [r4, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8009438:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800943c:	21fc      	movs	r1, #252	; 0xfc
 800943e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8009442:	f005 fed5 	bl	800f1f0 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8009446:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 800944a:	4283      	cmp	r3, r0
 800944c:	d003      	beq.n	8009456 <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800944e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8009452:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8009456:	21d4      	movs	r1, #212	; 0xd4
 8009458:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 800945c:	f005 fec8 	bl	800f1f0 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8009460:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8009464:	4283      	cmp	r3, r0
 8009466:	d003      	beq.n	8009470 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 8009468:	f8c4 021c 	str.w	r0, [r4, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800946c:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8009470:	2190      	movs	r1, #144	; 0x90
 8009472:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8009476:	f005 febb 	bl	800f1f0 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800947a:	f8d4 32b0 	ldr.w	r3, [r4, #688]	; 0x2b0
 800947e:	4283      	cmp	r3, r0
 8009480:	d003      	beq.n	800948a <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 8009482:	f8c4 02b0 	str.w	r0, [r4, #688]	; 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8009486:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800948a:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
 800948e:	f504 702d 	add.w	r0, r4, #692	; 0x2b4
 8009492:	f005 fead 	bl	800f1f0 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8009496:	f8d4 3754 	ldr.w	r3, [r4, #1876]	; 0x754
 800949a:	4283      	cmp	r3, r0
 800949c:	d003      	beq.n	80094a6 <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 800949e:	f8c4 0754 	str.w	r0, [r4, #1876]	; 0x754
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80094a2:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80094a6:	2114      	movs	r1, #20
 80094a8:	f504 60eb 	add.w	r0, r4, #1880	; 0x758
 80094ac:	f005 fea0 	bl	800f1f0 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 80094b0:	f8d4 376c 	ldr.w	r3, [r4, #1900]	; 0x76c
 80094b4:	4283      	cmp	r3, r0
 80094b6:	d003      	beq.n	80094c0 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 80094b8:	f8c4 076c 	str.w	r0, [r4, #1900]	; 0x76c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80094bc:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 80094c0:	4628      	mov	r0, r5
 80094c2:	f7fe fb95 	bl	8007bf0 <CallNvmDataChangeCallback>
 80094c6:	e7a4      	b.n	8009412 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80094c8:	2500      	movs	r5, #0
 80094ca:	e7ac      	b.n	8009426 <LoRaMacHandleNvm+0x1e>
 80094cc:	20000620 	.word	0x20000620

080094d0 <RestoreNvmData>:
{
 80094d0:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80094d2:	4b3d      	ldr	r3, [pc, #244]	; (80095c8 <RestoreNvmData+0xf8>)
 80094d4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d001      	beq.n	80094e0 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 80094dc:	2001      	movs	r0, #1
}
 80094de:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80094e0:	4c3a      	ldr	r4, [pc, #232]	; (80095cc <RestoreNvmData+0xfc>)
 80094e2:	2124      	movs	r1, #36	; 0x24
 80094e4:	4620      	mov	r0, r4
 80094e6:	f005 fe83 	bl	800f1f0 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 80094ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094ec:	4283      	cmp	r3, r0
 80094ee:	d001      	beq.n	80094f4 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80094f0:	2017      	movs	r0, #23
 80094f2:	e7f4      	b.n	80094de <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80094f4:	211c      	movs	r1, #28
 80094f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80094fa:	f005 fe79 	bl	800f1f0 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80094fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009500:	4283      	cmp	r3, r0
 8009502:	d001      	beq.n	8009508 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009504:	2017      	movs	r0, #23
 8009506:	e7ea      	b.n	80094de <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8009508:	21fc      	movs	r1, #252	; 0xfc
 800950a:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800950e:	f005 fe6f 	bl	800f1f0 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8009512:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8009516:	4283      	cmp	r3, r0
 8009518:	d001      	beq.n	800951e <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800951a:	2017      	movs	r0, #23
 800951c:	e7df      	b.n	80094de <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800951e:	21d4      	movs	r1, #212	; 0xd4
 8009520:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 8009524:	f005 fe64 	bl	800f1f0 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 8009528:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800952c:	4283      	cmp	r3, r0
 800952e:	d001      	beq.n	8009534 <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009530:	2017      	movs	r0, #23
 8009532:	e7d4      	b.n	80094de <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8009534:	2190      	movs	r1, #144	; 0x90
 8009536:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800953a:	f005 fe59 	bl	800f1f0 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800953e:	f8d4 32b0 	ldr.w	r3, [r4, #688]	; 0x2b0
 8009542:	4283      	cmp	r3, r0
 8009544:	d001      	beq.n	800954a <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009546:	2017      	movs	r0, #23
 8009548:	e7c9      	b.n	80094de <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800954a:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
 800954e:	f504 702d 	add.w	r0, r4, #692	; 0x2b4
 8009552:	f005 fe4d 	bl	800f1f0 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8009556:	f8d4 3754 	ldr.w	r3, [r4, #1876]	; 0x754
 800955a:	4283      	cmp	r3, r0
 800955c:	d001      	beq.n	8009562 <RestoreNvmData+0x92>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800955e:	2017      	movs	r0, #23
 8009560:	e7bd      	b.n	80094de <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8009562:	2114      	movs	r1, #20
 8009564:	f504 60eb 	add.w	r0, r4, #1880	; 0x758
 8009568:	f005 fe42 	bl	800f1f0 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800956c:	f8d4 376c 	ldr.w	r3, [r4, #1900]	; 0x76c
 8009570:	4283      	cmp	r3, r0
 8009572:	d001      	beq.n	8009578 <RestoreNvmData+0xa8>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009574:	2017      	movs	r0, #23
 8009576:	e7b2      	b.n	80094de <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8009578:	4625      	mov	r5, r4
 800957a:	4c15      	ldr	r4, [pc, #84]	; (80095d0 <RestoreNvmData+0x100>)
 800957c:	f44f 62ee 	mov.w	r2, #1904	; 0x770
 8009580:	4629      	mov	r1, r5
 8009582:	4620      	mov	r0, r4
 8009584:	f005 fe13 	bl	800f1ae <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8009588:	f44f 62ee 	mov.w	r2, #1904	; 0x770
 800958c:	2100      	movs	r1, #0
 800958e:	4628      	mov	r0, r5
 8009590:	f005 fe25 	bl	800f1de <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009594:	4b0c      	ldr	r3, [pc, #48]	; (80095c8 <RestoreNvmData+0xf8>)
 8009596:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 800959a:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800959e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80095a0:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80095a4:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 80095a8:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80095b2:	2202      	movs	r2, #2
 80095b4:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80095b8:	4b06      	ldr	r3, [pc, #24]	; (80095d4 <RestoreNvmData+0x104>)
 80095ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095bc:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
 80095c0:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 80095c2:	2000      	movs	r0, #0
 80095c4:	e78b      	b.n	80094de <RestoreNvmData+0xe>
 80095c6:	bf00      	nop
 80095c8:	20000620 	.word	0x20000620
 80095cc:	20008770 	.word	0x20008770
 80095d0:	20008000 	.word	0x20008000
 80095d4:	08012954 	.word	0x08012954

080095d8 <OnRadioRxTimeout>:
{
 80095d8:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80095da:	4a07      	ldr	r2, [pc, #28]	; (80095f8 <OnRadioRxTimeout+0x20>)
 80095dc:	7813      	ldrb	r3, [r2, #0]
 80095de:	f043 0301 	orr.w	r3, r3, #1
 80095e2:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 80095e4:	f7fe faec 	bl	8007bc0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 80095e8:	4b04      	ldr	r3, [pc, #16]	; (80095fc <OnRadioRxTimeout+0x24>)
 80095ea:	2201      	movs	r2, #1
 80095ec:	2100      	movs	r1, #0
 80095ee:	2002      	movs	r0, #2
 80095f0:	f007 fcba 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 80095f4:	bd08      	pop	{r3, pc}
 80095f6:	bf00      	nop
 80095f8:	2000061c 	.word	0x2000061c
 80095fc:	08012278 	.word	0x08012278

08009600 <OnRadioTxTimeout>:
{
 8009600:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8009602:	4a07      	ldr	r2, [pc, #28]	; (8009620 <OnRadioTxTimeout+0x20>)
 8009604:	7813      	ldrb	r3, [r2, #0]
 8009606:	f043 0304 	orr.w	r3, r3, #4
 800960a:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800960c:	f7fe fad8 	bl	8007bc0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8009610:	4b04      	ldr	r3, [pc, #16]	; (8009624 <OnRadioTxTimeout+0x24>)
 8009612:	2201      	movs	r2, #1
 8009614:	2100      	movs	r1, #0
 8009616:	2002      	movs	r0, #2
 8009618:	f007 fca6 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 800961c:	bd08      	pop	{r3, pc}
 800961e:	bf00      	nop
 8009620:	2000061c 	.word	0x2000061c
 8009624:	08012288 	.word	0x08012288

08009628 <OnRadioRxDone>:
{
 8009628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800962c:	4680      	mov	r8, r0
 800962e:	460f      	mov	r7, r1
 8009630:	4616      	mov	r6, r2
 8009632:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8009634:	f007 ffaa 	bl	801158c <UTIL_TIMER_GetCurrentTime>
 8009638:	4c0a      	ldr	r4, [pc, #40]	; (8009664 <OnRadioRxDone+0x3c>)
 800963a:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800963c:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 8009640:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 8009642:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 8009644:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8009646:	4a08      	ldr	r2, [pc, #32]	; (8009668 <OnRadioRxDone+0x40>)
 8009648:	7813      	ldrb	r3, [r2, #0]
 800964a:	f043 0308 	orr.w	r3, r3, #8
 800964e:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009650:	f7fe fab6 	bl	8007bc0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8009654:	4b05      	ldr	r3, [pc, #20]	; (800966c <OnRadioRxDone+0x44>)
 8009656:	2201      	movs	r2, #1
 8009658:	2100      	movs	r1, #0
 800965a:	2002      	movs	r0, #2
 800965c:	f007 fc84 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 8009660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009664:	20000b28 	.word	0x20000b28
 8009668:	2000061c 	.word	0x2000061c
 800966c:	08012298 	.word	0x08012298

08009670 <OnRadioTxDone>:
{
 8009670:	b510      	push	{r4, lr}
 8009672:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009674:	f007 ff8a 	bl	801158c <UTIL_TIMER_GetCurrentTime>
 8009678:	4b0c      	ldr	r3, [pc, #48]	; (80096ac <OnRadioTxDone+0x3c>)
 800967a:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800967c:	466c      	mov	r4, sp
 800967e:	4620      	mov	r0, r4
 8009680:	f007 fed6 	bl	8011430 <SysTimeGet>
 8009684:	4b0a      	ldr	r3, [pc, #40]	; (80096b0 <OnRadioTxDone+0x40>)
 8009686:	e894 0003 	ldmia.w	r4, {r0, r1}
 800968a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800968e:	4a09      	ldr	r2, [pc, #36]	; (80096b4 <OnRadioTxDone+0x44>)
 8009690:	7813      	ldrb	r3, [r2, #0]
 8009692:	f043 0310 	orr.w	r3, r3, #16
 8009696:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009698:	f7fe fa92 	bl	8007bc0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800969c:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <OnRadioTxDone+0x48>)
 800969e:	2201      	movs	r2, #1
 80096a0:	2100      	movs	r1, #0
 80096a2:	2002      	movs	r0, #2
 80096a4:	f007 fc60 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 80096a8:	b002      	add	sp, #8
 80096aa:	bd10      	pop	{r4, pc}
 80096ac:	20000b38 	.word	0x20000b38
 80096b0:	20000958 	.word	0x20000958
 80096b4:	2000061c 	.word	0x2000061c
 80096b8:	080122a8 	.word	0x080122a8

080096bc <ResetMacParameters>:
{
 80096bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096be:	b08f      	sub	sp, #60	; 0x3c
    if( isRejoin == false )
 80096c0:	b918      	cbnz	r0, 80096ca <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80096c2:	4b5b      	ldr	r3, [pc, #364]	; (8009830 <ResetMacParameters+0x174>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    Nvm.MacGroup1.AdrAckCounter = 0;
 80096ca:	4c59      	ldr	r4, [pc, #356]	; (8009830 <ResetMacParameters+0x174>)
 80096cc:	2500      	movs	r5, #0
 80096ce:	62a5      	str	r5, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 80096d0:	4e58      	ldr	r6, [pc, #352]	; (8009834 <ResetMacParameters+0x178>)
 80096d2:	f886 540c 	strb.w	r5, [r6, #1036]	; 0x40c
    MacCtx.AckTimeoutRetries = 1;
 80096d6:	2701      	movs	r7, #1
 80096d8:	f886 740d 	strb.w	r7, [r6, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 80096dc:	f886 740e 	strb.w	r7, [r6, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 80096e0:	f886 540f 	strb.w	r5, [r6, #1039]	; 0x40f
    Nvm.MacGroup2.MaxDCycle = 0;
 80096e4:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80096e8:	f8a4 711e 	strh.w	r7, [r4, #286]	; 0x11e
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80096ec:	f994 30dc 	ldrsb.w	r3, [r4, #220]	; 0xdc
 80096f0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80096f4:	f994 30dd 	ldrsb.w	r3, [r4, #221]	; 0xdd
 80096f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80096fc:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 8009700:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8009704:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8009708:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800970c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009710:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009714:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8009718:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800971c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009720:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8009724:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 8009728:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800972c:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8009730:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8009734:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8009738:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800973c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8009740:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8009744:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 8009748:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800974c:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 8009750:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 8009754:	f886 5410 	strb.w	r5, [r6, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 8009758:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800975c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8009760:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 8009764:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8009768:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800976c:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8009770:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8009774:	f884 5142 	strb.w	r5, [r4, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8009778:	f884 5143 	strb.w	r5, [r4, #323]	; 0x143
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800977c:	f88d 700c 	strb.w	r7, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009780:	f504 7308 	add.w	r3, r4, #544	; 0x220
 8009784:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009786:	f504 732d 	add.w	r3, r4, #692	; 0x2b4
 800978a:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800978c:	a901      	add	r1, sp, #4
 800978e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009792:	f002 fc6a 	bl	800c06a <RegionInitDefaults>
    MacCtx.Channel = 0;
 8009796:	f886 5411 	strb.w	r5, [r6, #1041]	; 0x411
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800979a:	f886 53cc 	strb.w	r5, [r6, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800979e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80097a0:	f8c6 33d0 	str.w	r3, [r6, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80097a4:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80097a8:	f886 33dc 	strb.w	r3, [r6, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80097ac:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 80097b0:	f886 33dd 	strb.w	r3, [r6, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80097b4:	f886 53de 	strb.w	r5, [r6, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80097b8:	f886 73df 	strb.w	r7, [r6, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80097bc:	f506 7478 	add.w	r4, r6, #992	; 0x3e0
 80097c0:	f506 7c73 	add.w	ip, r6, #972	; 0x3cc
 80097c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80097c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097ca:	f8dc 3000 	ldr.w	r3, [ip]
 80097ce:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80097d0:	f886 73f2 	strb.w	r7, [r6, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80097d4:	2302      	movs	r3, #2
 80097d6:	f886 33f3 	strb.w	r3, [r6, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 80097da:	950c      	str	r5, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 80097dc:	950d      	str	r5, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 80097de:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 80097e2:	b11b      	cbz	r3, 80097ec <ResetMacParameters+0x130>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80097ec:	4b11      	ldr	r3, [pc, #68]	; (8009834 <ResetMacParameters+0x178>)
 80097ee:	f203 425c 	addw	r2, r3, #1116	; 0x45c
 80097f2:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80097f4:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80097f8:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80097fa:	f503 6289 	add.w	r2, r3, #1096	; 0x448
 80097fe:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8009800:	f203 4381 	addw	r3, r3, #1153	; 0x481
 8009804:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8009806:	4a0a      	ldr	r2, [pc, #40]	; (8009830 <ResetMacParameters+0x174>)
 8009808:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 800980c:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800980e:	f102 0348 	add.w	r3, r2, #72	; 0x48
 8009812:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8009814:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 8009818:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800981a:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 800981e:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8009820:	f502 62eb 	add.w	r2, r2, #1880	; 0x758
 8009824:	a90c      	add	r1, sp, #48	; 0x30
 8009826:	a804      	add	r0, sp, #16
 8009828:	f001 fbe6 	bl	800aff8 <LoRaMacClassBInit>
}
 800982c:	b00f      	add	sp, #60	; 0x3c
 800982e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009830:	20008000 	.word	0x20008000
 8009834:	20000620 	.word	0x20000620

08009838 <SwitchClass>:
{
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800983c:	4b44      	ldr	r3, [pc, #272]	; (8009950 <SwitchClass+0x118>)
 800983e:	f893 5118 	ldrb.w	r5, [r3, #280]	; 0x118
 8009842:	2d01      	cmp	r5, #1
 8009844:	d06d      	beq.n	8009922 <SwitchClass+0xea>
 8009846:	2d02      	cmp	r5, #2
 8009848:	d073      	beq.n	8009932 <SwitchClass+0xfa>
 800984a:	b10d      	cbz	r5, 8009850 <SwitchClass+0x18>
 800984c:	2003      	movs	r0, #3
}
 800984e:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 8009850:	bb50      	cbnz	r0, 80098a8 <SwitchClass+0x70>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8009852:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8009856:	336c      	adds	r3, #108	; 0x6c
 8009858:	e893 0003 	ldmia.w	r3, {r0, r1}
 800985c:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 8009860:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 8009862:	2c01      	cmp	r4, #1
 8009864:	d022      	beq.n	80098ac <SwitchClass+0x74>
            if( deviceClass == CLASS_C )
 8009866:	2c02      	cmp	r4, #2
 8009868:	d1f1      	bne.n	800984e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800986a:	4b39      	ldr	r3, [pc, #228]	; (8009950 <SwitchClass+0x118>)
 800986c:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009870:	4e38      	ldr	r6, [pc, #224]	; (8009954 <SwitchClass+0x11c>)
 8009872:	f506 7478 	add.w	r4, r6, #992	; 0x3e0
 8009876:	f506 7c73 	add.w	ip, r6, #972	; 0x3cc
 800987a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800987e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009880:	f8dc 3000 	ldr.w	r3, [ip]
 8009884:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009886:	2302      	movs	r3, #2
 8009888:	f886 33f3 	strb.w	r3, [r6, #1011]	; 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800988c:	2300      	movs	r3, #0
 800988e:	2b00      	cmp	r3, #0
 8009890:	dd15      	ble.n	80098be <SwitchClass+0x86>
                MacCtx.NodeAckRequested = false;
 8009892:	4b30      	ldr	r3, [pc, #192]	; (8009954 <SwitchClass+0x11c>)
 8009894:	2200      	movs	r2, #0
 8009896:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                Radio.Sleep( );
 800989a:	4b2f      	ldr	r3, [pc, #188]	; (8009958 <SwitchClass+0x120>)
 800989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989e:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 80098a0:	f7ff fd0e 	bl	80092c0 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 80098a4:	4628      	mov	r0, r5
 80098a6:	e7d2      	b.n	800984e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80098a8:	2003      	movs	r0, #3
 80098aa:	e7da      	b.n	8009862 <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 80098ac:	4620      	mov	r0, r4
 80098ae:	f001 fbb9 	bl	800b024 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d1d7      	bne.n	8009866 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80098b6:	4b26      	ldr	r3, [pc, #152]	; (8009950 <SwitchClass+0x118>)
 80098b8:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 80098bc:	e7d3      	b.n	8009866 <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80098be:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80098c2:	4a23      	ldr	r2, [pc, #140]	; (8009950 <SwitchClass+0x118>)
 80098c4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80098c8:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 80098cc:	b132      	cbz	r2, 80098dc <SwitchClass+0xa4>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 80098ce:	4a20      	ldr	r2, [pc, #128]	; (8009950 <SwitchClass+0x118>)
 80098d0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80098d4:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80098d8:	2a02      	cmp	r2, #2
 80098da:	d002      	beq.n	80098e2 <SwitchClass+0xaa>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80098dc:	3301      	adds	r3, #1
 80098de:	b25b      	sxtb	r3, r3
 80098e0:	e7d5      	b.n	800988e <SwitchClass+0x56>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 80098e2:	4a1b      	ldr	r2, [pc, #108]	; (8009950 <SwitchClass+0x118>)
 80098e4:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 80098e8:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 80098ec:	6751      	str	r1, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 80098ee:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80098f2:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80098f6:	4b17      	ldr	r3, [pc, #92]	; (8009954 <SwitchClass+0x11c>)
 80098f8:	f893 0411 	ldrb.w	r0, [r3, #1041]	; 0x411
 80098fc:	f883 03e0 	strb.w	r0, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009900:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009904:	f892 107d 	ldrb.w	r1, [r2, #125]	; 0x7d
 8009908:	f883 13f0 	strb.w	r1, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800990c:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8009910:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009914:	2203      	movs	r2, #3
 8009916:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800991a:	2201      	movs	r2, #1
 800991c:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8009920:	e7b7      	b.n	8009892 <SwitchClass+0x5a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8009922:	f001 fb7f 	bl	800b024 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8009926:	2800      	cmp	r0, #0
 8009928:	d191      	bne.n	800984e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800992a:	4b09      	ldr	r3, [pc, #36]	; (8009950 <SwitchClass+0x118>)
 800992c:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 8009930:	e78d      	b.n	800984e <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 8009932:	b958      	cbnz	r0, 800994c <SwitchClass+0x114>
                MacCtx.RxSlot = RX_SLOT_NONE;
 8009934:	4b07      	ldr	r3, [pc, #28]	; (8009954 <SwitchClass+0x11c>)
 8009936:	2206      	movs	r2, #6
 8009938:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800993c:	4b04      	ldr	r3, [pc, #16]	; (8009950 <SwitchClass+0x118>)
 800993e:	f883 0118 	strb.w	r0, [r3, #280]	; 0x118
                Radio.Sleep( );
 8009942:	4b05      	ldr	r3, [pc, #20]	; (8009958 <SwitchClass+0x120>)
 8009944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009946:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8009948:	4620      	mov	r0, r4
 800994a:	e780      	b.n	800984e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800994c:	2003      	movs	r0, #3
 800994e:	e77e      	b.n	800984e <SwitchClass+0x16>
 8009950:	20008000 	.word	0x20008000
 8009954:	20000620 	.word	0x20000620
 8009958:	08012954 	.word	0x08012954

0800995c <SendReJoinReq>:
{
 800995c:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800995e:	28ff      	cmp	r0, #255	; 0xff
 8009960:	d003      	beq.n	800996a <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 8009962:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8009964:	f7ff fb6a 	bl	800903c <ScheduleTx>
}
 8009968:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800996a:	2000      	movs	r0, #0
 800996c:	f7ff ff64 	bl	8009838 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009970:	4d0a      	ldr	r5, [pc, #40]	; (800999c <SendReJoinReq+0x40>)
 8009972:	2400      	movs	r4, #0
 8009974:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009978:	1cab      	adds	r3, r5, #2
 800997a:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800997e:	23ff      	movs	r3, #255	; 0xff
 8009980:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8009984:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8009988:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800998c:	f005 faf2 	bl	800ef74 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8009990:	f505 708b 	add.w	r0, r5, #278	; 0x116
 8009994:	f005 fad0 	bl	800ef38 <SecureElementGetDevEui>
            allowDelayedTx = false;
 8009998:	4620      	mov	r0, r4
            break;
 800999a:	e7e3      	b.n	8009964 <SendReJoinReq+0x8>
 800999c:	20000620 	.word	0x20000620

080099a0 <SetTxContinuousWave>:
{
 80099a0:	b510      	push	{r4, lr}
 80099a2:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 80099a4:	4c11      	ldr	r4, [pc, #68]	; (80099ec <SetTxContinuousWave+0x4c>)
 80099a6:	f894 3411 	ldrb.w	r3, [r4, #1041]	; 0x411
 80099aa:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80099ae:	4b10      	ldr	r3, [pc, #64]	; (80099f0 <SetTxContinuousWave+0x50>)
 80099b0:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80099b4:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80099b8:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80099bc:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80099c0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80099c4:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80099c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80099ca:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 80099cc:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80099d0:	4669      	mov	r1, sp
 80099d2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80099d6:	f002 fc28 	bl	800c22a <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80099da:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80099de:	f043 0302 	orr.w	r3, r3, #2
 80099e2:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
}
 80099e6:	2000      	movs	r0, #0
 80099e8:	b004      	add	sp, #16
 80099ea:	bd10      	pop	{r4, pc}
 80099ec:	20000620 	.word	0x20000620
 80099f0:	20008000 	.word	0x20008000

080099f4 <PrepareFrame>:
{
 80099f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099f8:	b083      	sub	sp, #12
 80099fa:	4605      	mov	r5, r0
 80099fc:	460e      	mov	r6, r1
 80099fe:	4617      	mov	r7, r2
 8009a00:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 8009a04:	4959      	ldr	r1, [pc, #356]	; (8009b6c <PrepareFrame+0x178>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 8009a0a:	f881 2410 	strb.w	r2, [r1, #1040]	; 0x410
    uint32_t fCntUp = 0;
 8009a0e:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8009a10:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 8009a12:	4698      	mov	r8, r3
 8009a14:	b1cb      	cbz	r3, 8009a4a <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009a16:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8009b6c <PrepareFrame+0x178>
 8009a1a:	4622      	mov	r2, r4
 8009a1c:	4641      	mov	r1, r8
 8009a1e:	f509 709c 	add.w	r0, r9, #312	; 0x138
 8009a22:	f005 fbc4 	bl	800f1ae <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8009a26:	b2e0      	uxtb	r0, r4
 8009a28:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8009a2c:	782b      	ldrb	r3, [r5, #0]
 8009a2e:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 8009a32:	782b      	ldrb	r3, [r5, #0]
 8009a34:	095b      	lsrs	r3, r3, #5
 8009a36:	2b04      	cmp	r3, #4
 8009a38:	d009      	beq.n	8009a4e <PrepareFrame+0x5a>
 8009a3a:	2b07      	cmp	r3, #7
 8009a3c:	d079      	beq.n	8009b32 <PrepareFrame+0x13e>
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d009      	beq.n	8009a56 <PrepareFrame+0x62>
 8009a42:	2002      	movs	r0, #2
}
 8009a44:	b003      	add	sp, #12
 8009a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 8009a4a:	4614      	mov	r4, r2
 8009a4c:	e7e3      	b.n	8009a16 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 8009a4e:	4b47      	ldr	r3, [pc, #284]	; (8009b6c <PrepareFrame+0x178>)
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8009a56:	4b45      	ldr	r3, [pc, #276]	; (8009b6c <PrepareFrame+0x178>)
 8009a58:	2204      	movs	r2, #4
 8009a5a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8009a5e:	1c9a      	adds	r2, r3, #2
 8009a60:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009a64:	22ff      	movs	r2, #255	; 0xff
 8009a66:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8009a6a:	782a      	ldrb	r2, [r5, #0]
 8009a6c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8009a70:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8009a74:	4a3e      	ldr	r2, [pc, #248]	; (8009b70 <PrepareFrame+0x17c>)
 8009a76:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 8009a7a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009a7e:	7832      	ldrb	r2, [r6, #0]
 8009a80:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8009a84:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8009a88:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8009a8c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009a90:	a801      	add	r0, sp, #4
 8009a92:	f001 ff51 	bl	800b938 <LoRaMacCryptoGetFCntUp>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d15c      	bne.n	8009b54 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8009a9a:	9a01      	ldr	r2, [sp, #4]
 8009a9c:	4b33      	ldr	r3, [pc, #204]	; (8009b6c <PrepareFrame+0x178>)
 8009a9e:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = false;
 8009aa8:	f883 1438 	strb.w	r1, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8009aac:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009ab0:	4668      	mov	r0, sp
 8009ab2:	f001 fbe9 	bl	800b288 <LoRaMacCommandsGetSizeSerializedCmds>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d14e      	bne.n	8009b58 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 8009aba:	9b00      	ldr	r3, [sp, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d0c1      	beq.n	8009a44 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8009ac0:	4b2b      	ldr	r3, [pc, #172]	; (8009b70 <PrepareFrame+0x17c>)
 8009ac2:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8009ac6:	f7fe f8d7 	bl	8007c78 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009aca:	4b28      	ldr	r3, [pc, #160]	; (8009b6c <PrepareFrame+0x178>)
 8009acc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8009ad0:	b113      	cbz	r3, 8009ad8 <PrepareFrame+0xe4>
 8009ad2:	9a00      	ldr	r2, [sp, #0]
 8009ad4:	2a0f      	cmp	r2, #15
 8009ad6:	d915      	bls.n	8009b04 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009ad8:	b113      	cbz	r3, 8009ae0 <PrepareFrame+0xec>
 8009ada:	9b00      	ldr	r3, [sp, #0]
 8009adc:	2b0f      	cmp	r3, #15
 8009ade:	d821      	bhi.n	8009b24 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009ae0:	4a24      	ldr	r2, [pc, #144]	; (8009b74 <PrepareFrame+0x180>)
 8009ae2:	4669      	mov	r1, sp
 8009ae4:	f001 fbdc 	bl	800b2a0 <LoRaMacCommandsSerializeCmds>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d13b      	bne.n	8009b64 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8009aec:	4b1f      	ldr	r3, [pc, #124]	; (8009b6c <PrepareFrame+0x178>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8009af4:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 8009af8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8009afc:	9a00      	ldr	r2, [sp, #0]
 8009afe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8009b02:	e79f      	b.n	8009a44 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8009b04:	4a1c      	ldr	r2, [pc, #112]	; (8009b78 <PrepareFrame+0x184>)
 8009b06:	4669      	mov	r1, sp
 8009b08:	200f      	movs	r0, #15
 8009b0a:	f001 fbc9 	bl	800b2a0 <LoRaMacCommandsSerializeCmds>
 8009b0e:	bb28      	cbnz	r0, 8009b5c <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8009b10:	7833      	ldrb	r3, [r6, #0]
 8009b12:	9a00      	ldr	r2, [sp, #0]
 8009b14:	f362 0303 	bfi	r3, r2, #0, #4
 8009b18:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	4b13      	ldr	r3, [pc, #76]	; (8009b6c <PrepareFrame+0x178>)
 8009b1e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8009b22:	e78f      	b.n	8009a44 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009b24:	4a13      	ldr	r2, [pc, #76]	; (8009b74 <PrepareFrame+0x180>)
 8009b26:	4669      	mov	r1, sp
 8009b28:	f001 fbba 	bl	800b2a0 <LoRaMacCommandsSerializeCmds>
 8009b2c:	b1c0      	cbz	r0, 8009b60 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009b2e:	2013      	movs	r0, #19
 8009b30:	e788      	b.n	8009a44 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8009b32:	f1b8 0f00 	cmp.w	r8, #0
 8009b36:	d017      	beq.n	8009b68 <PrepareFrame+0x174>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d083      	beq.n	8009a44 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8009b3c:	4c0b      	ldr	r4, [pc, #44]	; (8009b6c <PrepareFrame+0x178>)
 8009b3e:	b282      	uxth	r2, r0
 8009b40:	4641      	mov	r1, r8
 8009b42:	1ce0      	adds	r0, r4, #3
 8009b44:	f005 fb33 	bl	800f1ae <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8009b48:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 8009b50:	2000      	movs	r0, #0
 8009b52:	e777      	b.n	8009a44 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009b54:	2012      	movs	r0, #18
 8009b56:	e775      	b.n	8009a44 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009b58:	2013      	movs	r0, #19
 8009b5a:	e773      	b.n	8009a44 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009b5c:	2013      	movs	r0, #19
 8009b5e:	e771      	b.n	8009a44 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8009b60:	200a      	movs	r0, #10
 8009b62:	e76f      	b.n	8009a44 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009b64:	2013      	movs	r0, #19
 8009b66:	e76d      	b.n	8009a44 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 8009b68:	2000      	movs	r0, #0
 8009b6a:	e76b      	b.n	8009a44 <PrepareFrame+0x50>
 8009b6c:	20000620 	.word	0x20000620
 8009b70:	20008000 	.word	0x20008000
 8009b74:	20000aa8 	.word	0x20000aa8
 8009b78:	20000738 	.word	0x20000738

08009b7c <Send>:
{
 8009b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b80:	b08a      	sub	sp, #40	; 0x28
 8009b82:	4617      	mov	r7, r2
 8009b84:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009b86:	4c42      	ldr	r4, [pc, #264]	; (8009c90 <Send+0x114>)
 8009b88:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8009b8c:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009b90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009b92:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009b94:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d077      	beq.n	8009c8c <Send+0x110>
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8009ba0:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8009ba4:	b90b      	cbnz	r3, 8009baa <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009bb0:	4837      	ldr	r0, [pc, #220]	; (8009c90 <Send+0x114>)
 8009bb2:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
 8009bb6:	f361 13c7 	bfi	r3, r1, #7, #1
 8009bba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009bbe:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d04f      	beq.n	8009c66 <Send+0xea>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8009bc6:	4b32      	ldr	r3, [pc, #200]	; (8009c90 <Send+0x114>)
 8009bc8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009bcc:	b12b      	cbz	r3, 8009bda <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 8009bce:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009bd2:	f043 0320 	orr.w	r3, r3, #32
 8009bd6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009be0:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009be4:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8009be6:	492a      	ldr	r1, [pc, #168]	; (8009c90 <Send+0x114>)
 8009be8:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 8009bec:	f8ad 3018 	strh.w	r3, [sp, #24]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8009bf0:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 8009bf4:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009bf8:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009bfc:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009c00:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 8009c04:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009c08:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 8009c0c:	f88d 301f 	strb.w	r3, [sp, #31]
    adrNext.Version = Nvm.MacGroup2.Version;
 8009c10:	f8d1 3128 	ldr.w	r3, [r1, #296]	; 0x128
 8009c14:	9303      	str	r3, [sp, #12]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009c16:	ab08      	add	r3, sp, #32
 8009c18:	f101 0238 	add.w	r2, r1, #56	; 0x38
 8009c1c:	3139      	adds	r1, #57	; 0x39
 8009c1e:	a803      	add	r0, sp, #12
 8009c20:	f001 f9e2 	bl	800afe8 <LoRaMacAdrCalcNext>
 8009c24:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009c28:	f360 1386 	bfi	r3, r0, #6, #1
 8009c2c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8009c30:	f8cd 8000 	str.w	r8, [sp]
 8009c34:	463b      	mov	r3, r7
 8009c36:	4632      	mov	r2, r6
 8009c38:	a909      	add	r1, sp, #36	; 0x24
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f7ff feda 	bl	80099f4 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8009c40:	4604      	mov	r4, r0
 8009c42:	b108      	cbz	r0, 8009c48 <Send+0xcc>
 8009c44:	280a      	cmp	r0, #10
 8009c46:	d104      	bne.n	8009c52 <Send+0xd6>
        status = ScheduleTx( allowDelayedTx );
 8009c48:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8009c4c:	f7ff f9f6 	bl	800903c <ScheduleTx>
 8009c50:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 8009c52:	b17c      	cbz	r4, 8009c74 <Send+0xf8>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8009c54:	4b0e      	ldr	r3, [pc, #56]	; (8009c90 <Send+0x114>)
 8009c56:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8009c5a:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 8009c5e:	4620      	mov	r0, r4
 8009c60:	b00a      	add	sp, #40	; 0x28
 8009c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 8009c66:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009c6a:	f043 0310 	orr.w	r3, r3, #16
 8009c6e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009c72:	e7a8      	b.n	8009bc6 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 8009c74:	4b06      	ldr	r3, [pc, #24]	; (8009c90 <Send+0x114>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8009c7c:	9a08      	ldr	r2, [sp, #32]
 8009c7e:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8009c80:	f001 fad0 	bl	800b224 <LoRaMacCommandsRemoveNoneStickyCmds>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d0ea      	beq.n	8009c5e <Send+0xe2>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009c88:	2413      	movs	r4, #19
 8009c8a:	e7e8      	b.n	8009c5e <Send+0xe2>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8009c8c:	2407      	movs	r4, #7
 8009c8e:	e7e6      	b.n	8009c5e <Send+0xe2>
 8009c90:	20008000 	.word	0x20008000

08009c94 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8009c94:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <LoRaMacIsBusy+0x28>)
 8009c96:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d007      	beq.n	8009cae <LoRaMacIsBusy+0x1a>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009c9e:	b943      	cbnz	r3, 8009cb2 <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8009ca0:	4b06      	ldr	r3, [pc, #24]	; (8009cbc <LoRaMacIsBusy+0x28>)
 8009ca2:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d005      	beq.n	8009cb6 <LoRaMacIsBusy+0x22>
    return true;
 8009caa:	2001      	movs	r0, #1
 8009cac:	4770      	bx	lr
        return false;
 8009cae:	2000      	movs	r0, #0
 8009cb0:	4770      	bx	lr
    return true;
 8009cb2:	2001      	movs	r0, #1
 8009cb4:	4770      	bx	lr
        return false;
 8009cb6:	2000      	movs	r0, #0
}
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	20000620 	.word	0x20000620

08009cc0 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8009cc0:	4b04      	ldr	r3, [pc, #16]	; (8009cd4 <LoRaMacIsStopped+0x14>)
 8009cc2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d001      	beq.n	8009cce <LoRaMacIsStopped+0xe>
    return false;
 8009cca:	2000      	movs	r0, #0
 8009ccc:	4770      	bx	lr
        return true;
 8009cce:	2001      	movs	r0, #1
}
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	20000620 	.word	0x20000620

08009cd8 <LoRaMacProcess>:
{
 8009cd8:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 8009cda:	f7fe ffe1 	bl	8008ca0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8009cde:	f001 f9b1 	bl	800b044 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8009ce2:	4b1f      	ldr	r3, [pc, #124]	; (8009d60 <LoRaMacProcess+0x88>)
 8009ce4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009ce8:	f013 0f10 	tst.w	r3, #16
 8009cec:	d10d      	bne.n	8009d0a <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 8009cee:	f7fd fe71 	bl	80079d4 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8009cf2:	4b1b      	ldr	r3, [pc, #108]	; (8009d60 <LoRaMacProcess+0x88>)
 8009cf4:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d022      	beq.n	8009d42 <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8009cfc:	4b18      	ldr	r3, [pc, #96]	; (8009d60 <LoRaMacProcess+0x88>)
 8009cfe:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009d02:	f013 0f20 	tst.w	r3, #32
 8009d06:	d11f      	bne.n	8009d48 <LoRaMacProcess+0x70>
}
 8009d08:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	f7fd fe5c 	bl	80079c8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8009d10:	f7fd fe8e 	bl	8007a30 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 8009d14:	f7fd ff78 	bl	8007c08 <IsRequestPending>
 8009d18:	b110      	cbz	r0, 8009d20 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8009d1a:	f7fe f8ab 	bl	8007e74 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 8009d1e:	b918      	cbnz	r0, 8009d28 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 8009d20:	f7fe ffec 	bl	8008cfc <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8009d24:	f7ff fa36 	bl	8009194 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 8009d28:	f7ff fa80 	bl	800922c <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009d2c:	2001      	movs	r0, #1
 8009d2e:	f7fd fe4b 	bl	80079c8 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8009d32:	4a0b      	ldr	r2, [pc, #44]	; (8009d60 <LoRaMacProcess+0x88>)
 8009d34:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009d38:	f043 0320 	orr.w	r3, r3, #32
 8009d3c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8009d40:	e7d5      	b.n	8009cee <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 8009d42:	f7ff fabd 	bl	80092c0 <OpenContinuousRxCWindow>
 8009d46:	e7d9      	b.n	8009cfc <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8009d48:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <LoRaMacProcess+0x88>)
 8009d4a:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009d4e:	f36f 1245 	bfc	r2, #5, #1
 8009d52:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        LoRaMacHandleNvm( &Nvm );
 8009d56:	4803      	ldr	r0, [pc, #12]	; (8009d64 <LoRaMacProcess+0x8c>)
 8009d58:	f7ff fb56 	bl	8009408 <LoRaMacHandleNvm>
}
 8009d5c:	e7d4      	b.n	8009d08 <LoRaMacProcess+0x30>
 8009d5e:	bf00      	nop
 8009d60:	20000620 	.word	0x20000620
 8009d64:	20008000 	.word	0x20008000

08009d68 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8009d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6c:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	f000 81a0 	beq.w	800a0b4 <LoRaMacInitialization+0x34c>
 8009d74:	4688      	mov	r8, r1
 8009d76:	4691      	mov	r9, r2
 8009d78:	4607      	mov	r7, r0
 8009d7a:	2900      	cmp	r1, #0
 8009d7c:	f000 819c 	beq.w	800a0b8 <LoRaMacInitialization+0x350>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009d80:	6803      	ldr	r3, [r0, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f000 819a 	beq.w	800a0bc <LoRaMacInitialization+0x354>
        ( primitives->MacMcpsIndication == NULL ) ||
 8009d88:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 8198 	beq.w	800a0c0 <LoRaMacInitialization+0x358>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8009d90:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 8196 	beq.w	800a0c4 <LoRaMacInitialization+0x35c>
        ( primitives->MacMlmeIndication == NULL ) )
 8009d98:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f000 8194 	beq.w	800a0c8 <LoRaMacInitialization+0x360>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8009da0:	4610      	mov	r0, r2
 8009da2:	f002 f935 	bl	800c010 <RegionIsActive>
 8009da6:	2800      	cmp	r0, #0
 8009da8:	f000 8190 	beq.w	800a0cc <LoRaMacInitialization+0x364>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8009dac:	4638      	mov	r0, r7
 8009dae:	f001 fb0b 	bl	800b3c8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8009db2:	4ccc      	ldr	r4, [pc, #816]	; (800a0e4 <LoRaMacInitialization+0x37c>)
 8009db4:	f44f 62ee 	mov.w	r2, #1904	; 0x770
 8009db8:	2100      	movs	r1, #0
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f005 fa0f 	bl	800f1de <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8009dc0:	4dc9      	ldr	r5, [pc, #804]	; (800a0e8 <LoRaMacInitialization+0x380>)
 8009dc2:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	4628      	mov	r0, r5
 8009dca:	f005 fa08 	bl	800f1de <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009dce:	f04f 0a01 	mov.w	sl, #1
 8009dd2:	f885 a40e 	strb.w	sl, [r5, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 8009dd6:	f885 a40d 	strb.w	sl, [r5, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8009dda:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8009dde:	2600      	movs	r6, #0
 8009de0:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8009de4:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8009de8:	4bc0      	ldr	r3, [pc, #768]	; (800a0ec <LoRaMacInitialization+0x384>)
 8009dea:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009dee:	230f      	movs	r3, #15
 8009df0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009df4:	a908      	add	r1, sp, #32
 8009df6:	4648      	mov	r0, r9
 8009df8:	f002 f913 	bl	800c022 <RegionGetPhyParam>
 8009dfc:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8009dfe:	1b80      	subs	r0, r0, r6
 8009e00:	bf18      	it	ne
 8009e02:	2001      	movne	r0, #1
 8009e04:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009e08:	f04f 0b0a 	mov.w	fp, #10
 8009e0c:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e10:	a908      	add	r1, sp, #32
 8009e12:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009e16:	f002 f904 	bl	800c022 <RegionGetPhyParam>
 8009e1a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8009e1c:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8009e20:	f04f 0906 	mov.w	r9, #6
 8009e24:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e28:	a908      	add	r1, sp, #32
 8009e2a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009e2e:	f002 f8f8 	bl	800c022 <RegionGetPhyParam>
 8009e32:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8009e34:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009e38:	2310      	movs	r3, #16
 8009e3a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e3e:	a908      	add	r1, sp, #32
 8009e40:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009e44:	f002 f8ed 	bl	800c022 <RegionGetPhyParam>
 8009e48:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009e4a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8009e4e:	2311      	movs	r3, #17
 8009e50:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e54:	a908      	add	r1, sp, #32
 8009e56:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009e5a:	f002 f8e2 	bl	800c022 <RegionGetPhyParam>
 8009e5e:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009e60:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009e64:	2312      	movs	r3, #18
 8009e66:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e6a:	a908      	add	r1, sp, #32
 8009e6c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009e70:	f002 f8d7 	bl	800c022 <RegionGetPhyParam>
 8009e74:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009e76:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8009e7a:	2313      	movs	r3, #19
 8009e7c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e80:	a908      	add	r1, sp, #32
 8009e82:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009e86:	f002 f8cc 	bl	800c022 <RegionGetPhyParam>
 8009e8a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009e8c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8009e90:	2314      	movs	r3, #20
 8009e92:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e96:	a908      	add	r1, sp, #32
 8009e98:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009e9c:	f002 f8c1 	bl	800c022 <RegionGetPhyParam>
 8009ea0:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009ea2:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8009ea6:	2317      	movs	r3, #23
 8009ea8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009eac:	a908      	add	r1, sp, #32
 8009eae:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009eb2:	f002 f8b6 	bl	800c022 <RegionGetPhyParam>
 8009eb6:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8009eb8:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8009ebc:	2318      	movs	r3, #24
 8009ebe:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009ec2:	a908      	add	r1, sp, #32
 8009ec4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009ec8:	f002 f8ab 	bl	800c022 <RegionGetPhyParam>
 8009ecc:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8009ece:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8009ed2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8009ed6:	2319      	movs	r3, #25
 8009ed8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009edc:	a908      	add	r1, sp, #32
 8009ede:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009ee2:	f002 f89e 	bl	800c022 <RegionGetPhyParam>
 8009ee6:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009ee8:	b2c0      	uxtb	r0, r0
 8009eea:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8009eee:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8009ef2:	231e      	movs	r3, #30
 8009ef4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009ef8:	a908      	add	r1, sp, #32
 8009efa:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009efe:	f002 f890 	bl	800c022 <RegionGetPhyParam>
 8009f02:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8009f04:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009f08:	231f      	movs	r3, #31
 8009f0a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f0e:	a908      	add	r1, sp, #32
 8009f10:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009f14:	f002 f885 	bl	800c022 <RegionGetPhyParam>
 8009f18:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8009f1a:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009f1e:	2320      	movs	r3, #32
 8009f20:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f24:	eb0d 0103 	add.w	r1, sp, r3
 8009f28:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009f2c:	f002 f879 	bl	800c022 <RegionGetPhyParam>
 8009f30:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009f32:	9b07      	ldr	r3, [sp, #28]
 8009f34:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009f38:	2321      	movs	r3, #33	; 0x21
 8009f3a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f3e:	a908      	add	r1, sp, #32
 8009f40:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009f44:	f002 f86d 	bl	800c022 <RegionGetPhyParam>
 8009f48:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8009f4a:	9b07      	ldr	r3, [sp, #28]
 8009f4c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8009f50:	230b      	movs	r3, #11
 8009f52:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f56:	a908      	add	r1, sp, #32
 8009f58:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009f5c:	f002 f861 	bl	800c022 <RegionGetPhyParam>
 8009f60:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8009f62:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8009f66:	230c      	movs	r3, #12
 8009f68:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f6c:	a908      	add	r1, sp, #32
 8009f6e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009f72:	f002 f856 	bl	800c022 <RegionGetPhyParam>
 8009f76:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8009f78:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8009f7c:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8009f80:	f8c4 b094 	str.w	fp, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8009f84:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8009f88:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8009f8c:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8009f90:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009f94:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8009f96:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8009f9a:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8009f9c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8009fa0:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8009fa2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8009fa6:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8009fa8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8009fac:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8009fae:	f884 a068 	strb.w	sl, [r4, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8009fb2:	f88d 6018 	strb.w	r6, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009fb6:	f504 7308 	add.w	r3, r4, #544	; 0x220
 8009fba:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009fbc:	f504 732d 	add.w	r3, r4, #692	; 0x2b4
 8009fc0:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009fc2:	a904      	add	r1, sp, #16
 8009fc4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009fc8:	f002 f84f 	bl	800c06a <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8009fcc:	f8c5 8348 	str.w	r8, [r5, #840]	; 0x348
    ResetMacParameters( false );
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f7ff fb73 	bl	80096bc <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8009fd6:	f884 a119 	strb.w	sl, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8009fda:	f8c5 7344 	str.w	r7, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8009fde:	f885 6481 	strb.w	r6, [r5, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8009fe2:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8009fe6:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009fe8:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8009fea:	9600      	str	r6, [sp, #0]
 8009fec:	4b40      	ldr	r3, [pc, #256]	; (800a0f0 <LoRaMacInitialization+0x388>)
 8009fee:	4632      	mov	r2, r6
 8009ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8009ff4:	f505 705a 	add.w	r0, r5, #872	; 0x368
 8009ff8:	f007 faaa 	bl	8011550 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8009ffc:	9600      	str	r6, [sp, #0]
 8009ffe:	4b3d      	ldr	r3, [pc, #244]	; (800a0f4 <LoRaMacInitialization+0x38c>)
 800a000:	4632      	mov	r2, r6
 800a002:	f04f 31ff 	mov.w	r1, #4294967295
 800a006:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800a00a:	f007 faa1 	bl	8011550 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a00e:	9600      	str	r6, [sp, #0]
 800a010:	4b39      	ldr	r3, [pc, #228]	; (800a0f8 <LoRaMacInitialization+0x390>)
 800a012:	4632      	mov	r2, r6
 800a014:	f04f 31ff 	mov.w	r1, #4294967295
 800a018:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800a01c:	f007 fa98 	bl	8011550 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800a020:	9600      	str	r6, [sp, #0]
 800a022:	4b36      	ldr	r3, [pc, #216]	; (800a0fc <LoRaMacInitialization+0x394>)
 800a024:	4632      	mov	r2, r6
 800a026:	f04f 31ff 	mov.w	r1, #4294967295
 800a02a:	f505 707d 	add.w	r0, r5, #1012	; 0x3f4
 800a02e:	f007 fa8f 	bl	8011550 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a032:	ae02      	add	r6, sp, #8
 800a034:	4630      	mov	r0, r6
 800a036:	f007 fa1d 	bl	8011474 <SysTimeGetMcuTime>
 800a03a:	f504 7390 	add.w	r3, r4, #288	; 0x120
 800a03e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a042:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a046:	4b2e      	ldr	r3, [pc, #184]	; (800a100 <LoRaMacInitialization+0x398>)
 800a048:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a04c:	4b2d      	ldr	r3, [pc, #180]	; (800a104 <LoRaMacInitialization+0x39c>)
 800a04e:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a052:	4b2d      	ldr	r3, [pc, #180]	; (800a108 <LoRaMacInitialization+0x3a0>)
 800a054:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a058:	4b2c      	ldr	r3, [pc, #176]	; (800a10c <LoRaMacInitialization+0x3a4>)
 800a05a:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a05e:	4b2c      	ldr	r3, [pc, #176]	; (800a110 <LoRaMacInitialization+0x3a8>)
 800a060:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800a064:	4b2b      	ldr	r3, [pc, #172]	; (800a114 <LoRaMacInitialization+0x3ac>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800a06c:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800a06e:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 800a072:	f004 fdbb 	bl	800ebec <SecureElementInit>
 800a076:	bb70      	cbnz	r0, 800a0d6 <LoRaMacInitialization+0x36e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800a078:	4620      	mov	r0, r4
 800a07a:	f001 fc3d 	bl	800b8f8 <LoRaMacCryptoInit>
 800a07e:	bb60      	cbnz	r0, 800a0da <LoRaMacInitialization+0x372>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a080:	f001 f866 	bl	800b150 <LoRaMacCommandsInit>
 800a084:	bb58      	cbnz	r0, 800a0de <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a086:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800a08a:	f001 fc9b 	bl	800b9c4 <LoRaMacCryptoSetMulticastReference>
 800a08e:	4604      	mov	r4, r0
 800a090:	2800      	cmp	r0, #0
 800a092:	d141      	bne.n	800a118 <LoRaMacInitialization+0x3b0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800a094:	4d1f      	ldr	r5, [pc, #124]	; (800a114 <LoRaMacInitialization+0x3ac>)
 800a096:	696b      	ldr	r3, [r5, #20]
 800a098:	4798      	blx	r3
 800a09a:	f005 f875 	bl	800f188 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a09e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a0a0:	4a10      	ldr	r2, [pc, #64]	; (800a0e4 <LoRaMacInitialization+0x37c>)
 800a0a2:	f892 0119 	ldrb.w	r0, [r2, #281]	; 0x119
 800a0a6:	4798      	blx	r3
    Radio.Sleep( );
 800a0a8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a0aa:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a0ac:	4650      	mov	r0, sl
 800a0ae:	f7fd fc8b 	bl	80079c8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800a0b2:	e00c      	b.n	800a0ce <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a0b4:	2403      	movs	r4, #3
 800a0b6:	e00a      	b.n	800a0ce <LoRaMacInitialization+0x366>
 800a0b8:	2403      	movs	r4, #3
 800a0ba:	e008      	b.n	800a0ce <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a0bc:	2403      	movs	r4, #3
 800a0be:	e006      	b.n	800a0ce <LoRaMacInitialization+0x366>
 800a0c0:	2403      	movs	r4, #3
 800a0c2:	e004      	b.n	800a0ce <LoRaMacInitialization+0x366>
 800a0c4:	2403      	movs	r4, #3
 800a0c6:	e002      	b.n	800a0ce <LoRaMacInitialization+0x366>
 800a0c8:	2403      	movs	r4, #3
 800a0ca:	e000      	b.n	800a0ce <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a0cc:	2409      	movs	r4, #9
}
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	b00b      	add	sp, #44	; 0x2c
 800a0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a0d6:	2411      	movs	r4, #17
 800a0d8:	e7f9      	b.n	800a0ce <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a0da:	2411      	movs	r4, #17
 800a0dc:	e7f7      	b.n	800a0ce <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a0de:	2413      	movs	r4, #19
 800a0e0:	e7f5      	b.n	800a0ce <LoRaMacInitialization+0x366>
 800a0e2:	bf00      	nop
 800a0e4:	20008000 	.word	0x20008000
 800a0e8:	20000620 	.word	0x20000620
 800a0ec:	01000300 	.word	0x01000300
 800a0f0:	08009145 	.word	0x08009145
 800a0f4:	080093c1 	.word	0x080093c1
 800a0f8:	08009371 	.word	0x08009371
 800a0fc:	08007df5 	.word	0x08007df5
 800a100:	08009671 	.word	0x08009671
 800a104:	08009629 	.word	0x08009629
 800a108:	08007bd9 	.word	0x08007bd9
 800a10c:	08009601 	.word	0x08009601
 800a110:	080095d9 	.word	0x080095d9
 800a114:	08012954 	.word	0x08012954
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a118:	2411      	movs	r4, #17
 800a11a:	e7d8      	b.n	800a0ce <LoRaMacInitialization+0x366>

0800a11c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800a11c:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800a11e:	2400      	movs	r4, #0
 800a120:	4b03      	ldr	r3, [pc, #12]	; (800a130 <LoRaMacStart+0x14>)
 800a122:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800a126:	f7fd fc3b 	bl	80079a0 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800a12a:	4620      	mov	r0, r4
 800a12c:	bd10      	pop	{r4, pc}
 800a12e:	bf00      	nop
 800a130:	20000620 	.word	0x20000620

0800a134 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800a134:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800a136:	f7ff fdad 	bl	8009c94 <LoRaMacIsBusy>
 800a13a:	b130      	cbz	r0, 800a14a <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800a13c:	4b0b      	ldr	r3, [pc, #44]	; (800a16c <LoRaMacStop+0x38>)
 800a13e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a142:	2b01      	cmp	r3, #1
 800a144:	d010      	beq.n	800a168 <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800a146:	2001      	movs	r0, #1
}
 800a148:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a14a:	4b09      	ldr	r3, [pc, #36]	; (800a170 <LoRaMacStop+0x3c>)
 800a14c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a150:	2b02      	cmp	r3, #2
 800a152:	d005      	beq.n	800a160 <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800a154:	4b05      	ldr	r3, [pc, #20]	; (800a16c <LoRaMacStop+0x38>)
 800a156:	2201      	movs	r2, #1
 800a158:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800a15c:	2000      	movs	r0, #0
 800a15e:	e7f3      	b.n	800a148 <LoRaMacStop+0x14>
            Radio.Sleep( );
 800a160:	4b04      	ldr	r3, [pc, #16]	; (800a174 <LoRaMacStop+0x40>)
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	4798      	blx	r3
 800a166:	e7f5      	b.n	800a154 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800a168:	2000      	movs	r0, #0
 800a16a:	e7ed      	b.n	800a148 <LoRaMacStop+0x14>
 800a16c:	20000620 	.word	0x20000620
 800a170:	20008000 	.word	0x20008000
 800a174:	08012954 	.word	0x08012954

0800a178 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800a178:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800a17a:	4c14      	ldr	r4, [pc, #80]	; (800a1cc <LoRaMacHalt+0x54>)
 800a17c:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a180:	f007 fa44 	bl	801160c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800a184:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800a188:	f007 fa40 	bl	801160c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a18c:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a190:	f007 fa3c 	bl	801160c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 800a194:	f504 707d 	add.w	r0, r4, #1012	; 0x3f4
 800a198:	f007 fa38 	bl	801160c <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800a19c:	f000 ff40 	bl	800b020 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800a1a0:	4b0b      	ldr	r3, [pc, #44]	; (800a1d0 <LoRaMacHalt+0x58>)
 800a1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800a1a6:	2500      	movs	r5, #0
 800a1a8:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800a1ac:	4e09      	ldr	r6, [pc, #36]	; (800a1d4 <LoRaMacHalt+0x5c>)
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f7ff f92a 	bl	8009408 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800a1b4:	f44f 62ee 	mov.w	r2, #1904	; 0x770
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	4807      	ldr	r0, [pc, #28]	; (800a1d8 <LoRaMacHalt+0x60>)
 800a1bc:	f004 fff7 	bl	800f1ae <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20000620 	.word	0x20000620
 800a1d0:	08012954 	.word	0x08012954
 800a1d4:	20008000 	.word	0x20008000
 800a1d8:	20008770 	.word	0x20008770

0800a1dc <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a1dc:	b530      	push	{r4, r5, lr}
 800a1de:	b089      	sub	sp, #36	; 0x24
 800a1e0:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a1e2:	4b2e      	ldr	r3, [pc, #184]	; (800a29c <LoRaMacQueryTxPossible+0xc0>)
 800a1e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1e6:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a1e8:	f993 00dd 	ldrsb.w	r0, [r3, #221]	; 0xdd
 800a1ec:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a1f0:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800a1f4:	f88d 3006 	strb.w	r3, [sp, #6]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800a1fc:	2900      	cmp	r1, #0
 800a1fe:	d047      	beq.n	800a290 <LoRaMacQueryTxPossible+0xb4>
 800a200:	460d      	mov	r5, r1
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800a202:	4b26      	ldr	r3, [pc, #152]	; (800a29c <LoRaMacQueryTxPossible+0xc0>)
 800a204:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800a208:	9103      	str	r1, [sp, #12]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800a20a:	2100      	movs	r1, #0
 800a20c:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a210:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800a214:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a218:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800a21a:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 800a21e:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800a222:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 800a226:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a22a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800a22e:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a232:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800a236:	f88d 201d 	strb.w	r2, [sp, #29]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a23a:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800a23e:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a242:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a246:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a24a:	ab02      	add	r3, sp, #8
 800a24c:	f10d 0206 	add.w	r2, sp, #6
 800a250:	f10d 0107 	add.w	r1, sp, #7
 800a254:	a803      	add	r0, sp, #12
 800a256:	f000 fec7 	bl	800afe8 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a25a:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800a25e:	f7fd fd0b 	bl	8007c78 <GetMaxAppPayloadWithoutFOptsLength>
 800a262:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a264:	4668      	mov	r0, sp
 800a266:	f001 f80f 	bl	800b288 <LoRaMacCommandsGetSizeSerializedCmds>
 800a26a:	b998      	cbnz	r0, 800a294 <LoRaMacQueryTxPossible+0xb8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a26c:	9b00      	ldr	r3, [sp, #0]
 800a26e:	2b0f      	cmp	r3, #15
 800a270:	d80a      	bhi.n	800a288 <LoRaMacQueryTxPossible+0xac>
 800a272:	786a      	ldrb	r2, [r5, #1]
 800a274:	4293      	cmp	r3, r2
 800a276:	d807      	bhi.n	800a288 <LoRaMacQueryTxPossible+0xac>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a27c:	9b00      	ldr	r3, [sp, #0]
 800a27e:	441c      	add	r4, r3
 800a280:	42a2      	cmp	r2, r4
 800a282:	d309      	bcc.n	800a298 <LoRaMacQueryTxPossible+0xbc>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a284:	b009      	add	sp, #36	; 0x24
 800a286:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a288:	2300      	movs	r3, #0
 800a28a:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a28c:	2008      	movs	r0, #8
 800a28e:	e7f9      	b.n	800a284 <LoRaMacQueryTxPossible+0xa8>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a290:	2003      	movs	r0, #3
 800a292:	e7f7      	b.n	800a284 <LoRaMacQueryTxPossible+0xa8>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a294:	2013      	movs	r0, #19
 800a296:	e7f5      	b.n	800a284 <LoRaMacQueryTxPossible+0xa8>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a298:	2008      	movs	r0, #8
 800a29a:	e7f3      	b.n	800a284 <LoRaMacQueryTxPossible+0xa8>
 800a29c:	20008000 	.word	0x20008000

0800a2a0 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	f000 8163 	beq.w	800a56c <LoRaMacMibGetRequestConfirm+0x2cc>
{
 800a2a6:	b510      	push	{r4, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800a2ac:	7800      	ldrb	r0, [r0, #0]
 800a2ae:	283f      	cmp	r0, #63	; 0x3f
 800a2b0:	f200 8158 	bhi.w	800a564 <LoRaMacMibGetRequestConfirm+0x2c4>
 800a2b4:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a2b8:	00460040 	.word	0x00460040
 800a2bc:	0051004c 	.word	0x0051004c
 800a2c0:	005c0056 	.word	0x005c0056
 800a2c4:	01560062 	.word	0x01560062
 800a2c8:	01560156 	.word	0x01560156
 800a2cc:	01560156 	.word	0x01560156
 800a2d0:	01560156 	.word	0x01560156
 800a2d4:	006a0156 	.word	0x006a0156
 800a2d8:	00760070 	.word	0x00760070
 800a2dc:	008b0083 	.word	0x008b0083
 800a2e0:	009b0093 	.word	0x009b0093
 800a2e4:	00a300b0 	.word	0x00a300b0
 800a2e8:	00c300bd 	.word	0x00c300bd
 800a2ec:	00cd00c8 	.word	0x00cd00c8
 800a2f0:	00d700d2 	.word	0x00d700d2
 800a2f4:	00e200dc 	.word	0x00e200dc
 800a2f8:	00e800ee 	.word	0x00e800ee
 800a2fc:	00f900f4 	.word	0x00f900f4
 800a300:	010d00ff 	.word	0x010d00ff
 800a304:	01090105 	.word	0x01090105
 800a308:	01130156 	.word	0x01130156
 800a30c:	01560156 	.word	0x01560156
 800a310:	01560156 	.word	0x01560156
 800a314:	01560156 	.word	0x01560156
 800a318:	01560156 	.word	0x01560156
 800a31c:	01560156 	.word	0x01560156
 800a320:	01560156 	.word	0x01560156
 800a324:	01560156 	.word	0x01560156
 800a328:	011c0156 	.word	0x011c0156
 800a32c:	01280122 	.word	0x01280122
 800a330:	0134012e 	.word	0x0134012e
 800a334:	0148013a 	.word	0x0148013a
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800a338:	4b8d      	ldr	r3, [pc, #564]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a33a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a33e:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800a340:	b004      	add	sp, #16
 800a342:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a344:	4b8a      	ldr	r3, [pc, #552]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a346:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800a34a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a34c:	2000      	movs	r0, #0
            break;
 800a34e:	e7f7      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800a350:	6860      	ldr	r0, [r4, #4]
 800a352:	f004 fdf1 	bl	800ef38 <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a356:	2000      	movs	r0, #0
            break;
 800a358:	e7f2      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800a35a:	6860      	ldr	r0, [r4, #4]
 800a35c:	f004 fe0a 	bl	800ef74 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a360:	2000      	movs	r0, #0
            break;
 800a362:	e7ed      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800a364:	4b82      	ldr	r3, [pc, #520]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a366:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800a36a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a36c:	2000      	movs	r0, #0
            break;
 800a36e:	e7e7      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800a370:	4b7f      	ldr	r3, [pc, #508]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a376:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a378:	2000      	movs	r0, #0
            break;
 800a37a:	e7e1      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800a37c:	1d21      	adds	r1, r4, #4
 800a37e:	4b7c      	ldr	r3, [pc, #496]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a380:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
 800a384:	f004 fe12 	bl	800efac <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a388:	2000      	movs	r0, #0
            break;
 800a38a:	e7d9      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800a38c:	4b78      	ldr	r3, [pc, #480]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a38e:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800a392:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a394:	2000      	movs	r0, #0
            break;
 800a396:	e7d3      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a398:	4b75      	ldr	r3, [pc, #468]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a39a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a39e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3a0:	2000      	movs	r0, #0
            break;
 800a3a2:	e7cd      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            getPhy.Attribute = PHY_CHANNELS;
 800a3a4:	231d      	movs	r3, #29
 800a3a6:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a3aa:	a902      	add	r1, sp, #8
 800a3ac:	4b70      	ldr	r3, [pc, #448]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a3ae:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a3b2:	f001 fe36 	bl	800c022 <RegionGetPhyParam>
 800a3b6:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800a3b8:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3ba:	2000      	movs	r0, #0
            break;
 800a3bc:	e7c0      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a3be:	3404      	adds	r4, #4
 800a3c0:	4b6c      	ldr	r3, [pc, #432]	; (800a574 <LoRaMacMibGetRequestConfirm+0x2d4>)
 800a3c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a3c6:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3ca:	2000      	movs	r0, #0
            break;
 800a3cc:	e7b8      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a3ce:	3404      	adds	r4, #4
 800a3d0:	4b69      	ldr	r3, [pc, #420]	; (800a578 <LoRaMacMibGetRequestConfirm+0x2d8>)
 800a3d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a3d6:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3da:	2000      	movs	r0, #0
            break;
 800a3dc:	e7b0      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800a3de:	3404      	adds	r4, #4
 800a3e0:	4b66      	ldr	r3, [pc, #408]	; (800a57c <LoRaMacMibGetRequestConfirm+0x2dc>)
 800a3e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a3e6:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3ea:	2000      	movs	r0, #0
            break;
 800a3ec:	e7a8      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a3ee:	3404      	adds	r4, #4
 800a3f0:	4b63      	ldr	r3, [pc, #396]	; (800a580 <LoRaMacMibGetRequestConfirm+0x2e0>)
 800a3f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a3f6:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3fa:	2000      	movs	r0, #0
            break;
 800a3fc:	e7a0      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a3fe:	231b      	movs	r3, #27
 800a400:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a404:	a902      	add	r1, sp, #8
 800a406:	4b5a      	ldr	r3, [pc, #360]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a408:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a40c:	f001 fe09 	bl	800c022 <RegionGetPhyParam>
 800a410:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800a412:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a414:	2000      	movs	r0, #0
            break;
 800a416:	e793      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a418:	231a      	movs	r3, #26
 800a41a:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a41e:	a902      	add	r1, sp, #8
 800a420:	4b53      	ldr	r3, [pc, #332]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a422:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a426:	f001 fdfc 	bl	800c022 <RegionGetPhyParam>
 800a42a:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800a42c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a42e:	2000      	movs	r0, #0
            break;
 800a430:	e786      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a432:	4b4f      	ldr	r3, [pc, #316]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a434:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800a438:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a43a:	2000      	movs	r0, #0
            break;
 800a43c:	e780      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800a43e:	4b4c      	ldr	r3, [pc, #304]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a442:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a444:	2000      	movs	r0, #0
            break;
 800a446:	e77b      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800a448:	4b49      	ldr	r3, [pc, #292]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a44a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a44c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a44e:	2000      	movs	r0, #0
            break;
 800a450:	e776      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800a452:	4b47      	ldr	r3, [pc, #284]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a456:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a458:	2000      	movs	r0, #0
            break;
 800a45a:	e771      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800a45c:	4b44      	ldr	r3, [pc, #272]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a45e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a460:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a462:	2000      	movs	r0, #0
            break;
 800a464:	e76c      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800a466:	4b42      	ldr	r3, [pc, #264]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a46a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a46c:	2000      	movs	r0, #0
            break;
 800a46e:	e767      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a470:	4b3f      	ldr	r3, [pc, #252]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a472:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800a476:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a478:	2000      	movs	r0, #0
            break;
 800a47a:	e761      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800a47c:	4b3c      	ldr	r3, [pc, #240]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a47e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a482:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a484:	2000      	movs	r0, #0
            break;
 800a486:	e75b      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a488:	4b39      	ldr	r3, [pc, #228]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a48a:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800a48e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a490:	2000      	movs	r0, #0
            break;
 800a492:	e755      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a494:	4b36      	ldr	r3, [pc, #216]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a496:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800a49a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a49c:	2000      	movs	r0, #0
            break;
 800a49e:	e74f      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800a4a0:	4b33      	ldr	r3, [pc, #204]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a4a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4a4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4a6:	2000      	movs	r0, #0
            break;
 800a4a8:	e74a      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800a4aa:	4b31      	ldr	r3, [pc, #196]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a4ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a4b0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4b2:	2000      	movs	r0, #0
            break;
 800a4b4:	e744      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a4b6:	4b2e      	ldr	r3, [pc, #184]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4bc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4be:	2000      	movs	r0, #0
            break;
 800a4c0:	e73e      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.Contexts = &Nvm;
 800a4c2:	4b2b      	ldr	r3, [pc, #172]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a4c4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4c6:	2000      	movs	r0, #0
            break;
 800a4c8:	e73a      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.BackupContexts = &NvmBackup;
 800a4ca:	4b2e      	ldr	r3, [pc, #184]	; (800a584 <LoRaMacMibGetRequestConfirm+0x2e4>)
 800a4cc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4ce:	2000      	movs	r0, #0
            break;
 800a4d0:	e736      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800a4d2:	4b27      	ldr	r3, [pc, #156]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a4d4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800a4d8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4da:	2000      	movs	r0, #0
            break;
 800a4dc:	e730      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800a4de:	4b24      	ldr	r3, [pc, #144]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a4e0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800a4e4:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800a4e6:	f001 febf 	bl	800c268 <RegionGetVersion>
 800a4ea:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4ec:	2000      	movs	r0, #0
            break;
 800a4ee:	e727      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800a4f0:	4b1f      	ldr	r3, [pc, #124]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4f8:	2000      	movs	r0, #0
            break;
 800a4fa:	e721      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800a4fc:	4b1c      	ldr	r3, [pc, #112]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a4fe:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800a502:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a504:	2000      	movs	r0, #0
            break;
 800a506:	e71b      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800a508:	4b19      	ldr	r3, [pc, #100]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a50a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800a50e:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a510:	2000      	movs	r0, #0
            break;
 800a512:	e715      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800a514:	4b16      	ldr	r3, [pc, #88]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a516:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800a51a:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a51c:	2000      	movs	r0, #0
            break;
 800a51e:	e70f      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800a520:	4b13      	ldr	r3, [pc, #76]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a522:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a526:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a528:	2000      	movs	r0, #0
            break;
 800a52a:	e709      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 800a52c:	4b10      	ldr	r3, [pc, #64]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a52e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a532:	b11b      	cbz	r3, 800a53c <LoRaMacMibGetRequestConfirm+0x29c>
 800a534:	2b06      	cmp	r3, #6
 800a536:	d001      	beq.n	800a53c <LoRaMacMibGetRequestConfirm+0x29c>
                status = LORAMAC_STATUS_ERROR;
 800a538:	2018      	movs	r0, #24
 800a53a:	e701      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
 800a53c:	4b0c      	ldr	r3, [pc, #48]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a53e:	f9b3 374c 	ldrsh.w	r3, [r3, #1868]	; 0x74c
 800a542:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a544:	2000      	movs	r0, #0
 800a546:	e6fb      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 800a548:	4b09      	ldr	r3, [pc, #36]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a54a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a54e:	b11b      	cbz	r3, 800a558 <LoRaMacMibGetRequestConfirm+0x2b8>
 800a550:	2b06      	cmp	r3, #6
 800a552:	d001      	beq.n	800a558 <LoRaMacMibGetRequestConfirm+0x2b8>
                status = LORAMAC_STATUS_ERROR;
 800a554:	2018      	movs	r0, #24
 800a556:	e6f3      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
 800a558:	4b05      	ldr	r3, [pc, #20]	; (800a570 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a55a:	f8d3 3750 	ldr.w	r3, [r3, #1872]	; 0x750
 800a55e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a560:	2000      	movs	r0, #0
 800a562:	e6ed      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800a564:	4620      	mov	r0, r4
 800a566:	f000 fd5f 	bl	800b028 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800a56a:	e6e9      	b.n	800a340 <LoRaMacMibGetRequestConfirm+0xa0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a56c:	2003      	movs	r0, #3
}
 800a56e:	4770      	bx	lr
 800a570:	20008000 	.word	0x20008000
 800a574:	2000806c 	.word	0x2000806c
 800a578:	200080b4 	.word	0x200080b4
 800a57c:	20008074 	.word	0x20008074
 800a580:	200080bc 	.word	0x200080bc
 800a584:	20008770 	.word	0x20008770

0800a588 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800a588:	b530      	push	{r4, r5, lr}
 800a58a:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800a58c:	2800      	cmp	r0, #0
 800a58e:	f000 829e 	beq.w	800aace <LoRaMacMibSetRequestConfirm+0x546>
 800a592:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a594:	4b9f      	ldr	r3, [pc, #636]	; (800a814 <LoRaMacMibSetRequestConfirm+0x28c>)
 800a596:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a59a:	f013 0f02 	tst.w	r3, #2
 800a59e:	f040 8298 	bne.w	800aad2 <LoRaMacMibSetRequestConfirm+0x54a>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800a5a2:	7804      	ldrb	r4, [r0, #0]
 800a5a4:	2c3f      	cmp	r4, #63	; 0x3f
 800a5a6:	f200 828e 	bhi.w	800aac6 <LoRaMacMibSetRequestConfirm+0x53e>
 800a5aa:	e8df f014 	tbh	[pc, r4, lsl #1]
 800a5ae:	0040      	.short	0x0040
 800a5b0:	004e0045 	.word	0x004e0045
 800a5b4:	005f0057 	.word	0x005f0057
 800a5b8:	006b0065 	.word	0x006b0065
 800a5bc:	0087007a 	.word	0x0087007a
 800a5c0:	00a10094 	.word	0x00a10094
 800a5c4:	00bb00ae 	.word	0x00bb00ae
 800a5c8:	00d500c8 	.word	0x00d500c8
 800a5cc:	00ed00e2 	.word	0x00ed00e2
 800a5d0:	00f3028c 	.word	0x00f3028c
 800a5d4:	013d0119 	.word	0x013d0119
 800a5d8:	0195016b 	.word	0x0195016b
 800a5dc:	01a50185 	.word	0x01a50185
 800a5e0:	01b501b0 	.word	0x01b501b0
 800a5e4:	01bf01ba 	.word	0x01bf01ba
 800a5e8:	01c901c4 	.word	0x01c901c4
 800a5ec:	020c01de 	.word	0x020c01de
 800a5f0:	022101f7 	.word	0x022101f7
 800a5f4:	02300228 	.word	0x02300228
 800a5f8:	023c0236 	.word	0x023c0236
 800a5fc:	0240028c 	.word	0x0240028c
 800a600:	028c028c 	.word	0x028c028c
 800a604:	028c028c 	.word	0x028c028c
 800a608:	028c028c 	.word	0x028c028c
 800a60c:	028c028c 	.word	0x028c028c
 800a610:	028c028c 	.word	0x028c028c
 800a614:	028c028c 	.word	0x028c028c
 800a618:	028c028c 	.word	0x028c028c
 800a61c:	028c028c 	.word	0x028c028c
 800a620:	02570251 	.word	0x02570251
 800a624:	0263025d 	.word	0x0263025d
 800a628:	026f0269 	.word	0x026f0269
 800a62c:	027e      	.short	0x027e
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800a62e:	7900      	ldrb	r0, [r0, #4]
 800a630:	f7ff f902 	bl	8009838 <SwitchClass>
 800a634:	4604      	mov	r4, r0
            break;
 800a636:	e24d      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800a638:	7903      	ldrb	r3, [r0, #4]
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	f000 824d 	beq.w	800aada <LoRaMacMibSetRequestConfirm+0x552>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800a640:	4a75      	ldr	r2, [pc, #468]	; (800a818 <LoRaMacMibSetRequestConfirm+0x290>)
 800a642:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a646:	2400      	movs	r4, #0
 800a648:	e244      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800a64a:	6840      	ldr	r0, [r0, #4]
 800a64c:	f004 fc66 	bl	800ef1c <SecureElementSetDevEui>
 800a650:	4604      	mov	r4, r0
 800a652:	2800      	cmp	r0, #0
 800a654:	f000 823e 	beq.w	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a658:	2403      	movs	r4, #3
 800a65a:	e23b      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800a65c:	6840      	ldr	r0, [r0, #4]
 800a65e:	f004 fc79 	bl	800ef54 <SecureElementSetJoinEui>
 800a662:	2800      	cmp	r0, #0
 800a664:	f040 8236 	bne.w	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a668:	4604      	mov	r4, r0
 800a66a:	e233      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800a66c:	7902      	ldrb	r2, [r0, #4]
 800a66e:	4b6a      	ldr	r3, [pc, #424]	; (800a818 <LoRaMacMibSetRequestConfirm+0x290>)
 800a670:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a674:	2400      	movs	r4, #0
            break;
 800a676:	e22d      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800a678:	6842      	ldr	r2, [r0, #4]
 800a67a:	4b67      	ldr	r3, [pc, #412]	; (800a818 <LoRaMacMibSetRequestConfirm+0x290>)
 800a67c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a680:	2400      	movs	r4, #0
            break;
 800a682:	e227      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800a684:	6841      	ldr	r1, [r0, #4]
 800a686:	4b64      	ldr	r3, [pc, #400]	; (800a818 <LoRaMacMibSetRequestConfirm+0x290>)
 800a688:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
 800a68c:	f004 fc80 	bl	800ef90 <SecureElementSetDevAddr>
 800a690:	4604      	mov	r4, r0
 800a692:	2800      	cmp	r0, #0
 800a694:	f040 8223 	bne.w	800aade <LoRaMacMibSetRequestConfirm+0x556>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800a698:	686a      	ldr	r2, [r5, #4]
 800a69a:	4b5f      	ldr	r3, [pc, #380]	; (800a818 <LoRaMacMibSetRequestConfirm+0x290>)
 800a69c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a6a0:	e218      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800a6a2:	6841      	ldr	r1, [r0, #4]
 800a6a4:	2900      	cmp	r1, #0
 800a6a6:	f000 821c 	beq.w	800aae2 <LoRaMacMibSetRequestConfirm+0x55a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	f001 fa9a 	bl	800bbe4 <LoRaMacCryptoSetKey>
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	f000 820e 	beq.w	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a6b8:	2411      	movs	r4, #17
 800a6ba:	e20b      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800a6bc:	6841      	ldr	r1, [r0, #4]
 800a6be:	2900      	cmp	r1, #0
 800a6c0:	f000 8211 	beq.w	800aae6 <LoRaMacMibSetRequestConfirm+0x55e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800a6c4:	2001      	movs	r0, #1
 800a6c6:	f001 fa8d 	bl	800bbe4 <LoRaMacCryptoSetKey>
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	f000 8201 	beq.w	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a6d2:	2411      	movs	r4, #17
 800a6d4:	e1fe      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800a6d6:	6841      	ldr	r1, [r0, #4]
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	f000 8206 	beq.w	800aaea <LoRaMacMibSetRequestConfirm+0x562>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800a6de:	2008      	movs	r0, #8
 800a6e0:	f001 fa80 	bl	800bbe4 <LoRaMacCryptoSetKey>
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	f000 81f4 	beq.w	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a6ec:	2411      	movs	r4, #17
 800a6ee:	e1f1      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800a6f0:	6841      	ldr	r1, [r0, #4]
 800a6f2:	2900      	cmp	r1, #0
 800a6f4:	f000 81fb 	beq.w	800aaee <LoRaMacMibSetRequestConfirm+0x566>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800a6f8:	2009      	movs	r0, #9
 800a6fa:	f001 fa73 	bl	800bbe4 <LoRaMacCryptoSetKey>
 800a6fe:	4604      	mov	r4, r0
 800a700:	2800      	cmp	r0, #0
 800a702:	f000 81e7 	beq.w	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a706:	2411      	movs	r4, #17
 800a708:	e1e4      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800a70a:	6841      	ldr	r1, [r0, #4]
 800a70c:	2900      	cmp	r1, #0
 800a70e:	f000 81f0 	beq.w	800aaf2 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800a712:	200c      	movs	r0, #12
 800a714:	f001 fa66 	bl	800bbe4 <LoRaMacCryptoSetKey>
 800a718:	4604      	mov	r4, r0
 800a71a:	2800      	cmp	r0, #0
 800a71c:	f000 81da 	beq.w	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a720:	2411      	movs	r4, #17
 800a722:	e1d7      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800a724:	6841      	ldr	r1, [r0, #4]
 800a726:	2900      	cmp	r1, #0
 800a728:	f000 81e5 	beq.w	800aaf6 <LoRaMacMibSetRequestConfirm+0x56e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800a72c:	200d      	movs	r0, #13
 800a72e:	f001 fa59 	bl	800bbe4 <LoRaMacCryptoSetKey>
 800a732:	4604      	mov	r4, r0
 800a734:	2800      	cmp	r0, #0
 800a736:	f000 81cd 	beq.w	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a73a:	2411      	movs	r4, #17
 800a73c:	e1ca      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800a73e:	6841      	ldr	r1, [r0, #4]
 800a740:	2900      	cmp	r1, #0
 800a742:	f000 81da 	beq.w	800aafa <LoRaMacMibSetRequestConfirm+0x572>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800a746:	200e      	movs	r0, #14
 800a748:	f001 fa4c 	bl	800bbe4 <LoRaMacCryptoSetKey>
 800a74c:	4604      	mov	r4, r0
 800a74e:	2800      	cmp	r0, #0
 800a750:	f000 81c0 	beq.w	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a754:	2411      	movs	r4, #17
 800a756:	e1bd      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800a758:	6841      	ldr	r1, [r0, #4]
 800a75a:	2900      	cmp	r1, #0
 800a75c:	f000 81cf 	beq.w	800aafe <LoRaMacMibSetRequestConfirm+0x576>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800a760:	200f      	movs	r0, #15
 800a762:	f001 fa3f 	bl	800bbe4 <LoRaMacCryptoSetKey>
 800a766:	4604      	mov	r4, r0
 800a768:	2800      	cmp	r0, #0
 800a76a:	f000 81b3 	beq.w	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a76e:	2411      	movs	r4, #17
 800a770:	e1b0      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800a772:	7900      	ldrb	r0, [r0, #4]
 800a774:	4b28      	ldr	r3, [pc, #160]	; (800a818 <LoRaMacMibSetRequestConfirm+0x290>)
 800a776:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a77a:	4c28      	ldr	r4, [pc, #160]	; (800a81c <LoRaMacMibSetRequestConfirm+0x294>)
 800a77c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a77e:	4798      	blx	r3
            Radio.Sleep( );
 800a780:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a782:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a784:	2400      	movs	r4, #0
            break;
 800a786:	e1a5      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800a788:	7902      	ldrb	r2, [r0, #4]
 800a78a:	4b23      	ldr	r3, [pc, #140]	; (800a818 <LoRaMacMibSetRequestConfirm+0x290>)
 800a78c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a790:	2400      	movs	r4, #0
            break;
 800a792:	e19f      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a794:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a798:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a79c:	4b1e      	ldr	r3, [pc, #120]	; (800a818 <LoRaMacMibSetRequestConfirm+0x290>)
 800a79e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800a7a2:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800a7a6:	2207      	movs	r2, #7
 800a7a8:	a901      	add	r1, sp, #4
 800a7aa:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a7ae:	f001 fc69 	bl	800c084 <RegionVerify>
 800a7b2:	b908      	cbnz	r0, 800a7b8 <LoRaMacMibSetRequestConfirm+0x230>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a7b4:	2403      	movs	r4, #3
 800a7b6:	e18d      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800a7b8:	686b      	ldr	r3, [r5, #4]
 800a7ba:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800a7bc:	2200      	movs	r2, #0
 800a7be:	a901      	add	r1, sp, #4
 800a7c0:	4b15      	ldr	r3, [pc, #84]	; (800a818 <LoRaMacMibSetRequestConfirm+0x290>)
 800a7c2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a7c6:	f001 fc5d 	bl	800c084 <RegionVerify>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	f000 81a0 	beq.w	800ab10 <LoRaMacMibSetRequestConfirm+0x588>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800a7d0:	4b13      	ldr	r3, [pc, #76]	; (800a820 <LoRaMacMibSetRequestConfirm+0x298>)
 800a7d2:	3504      	adds	r5, #4
 800a7d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a7d8:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7dc:	2400      	movs	r4, #0
 800a7de:	e179      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a7e0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a7e4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a7e8:	4b0b      	ldr	r3, [pc, #44]	; (800a818 <LoRaMacMibSetRequestConfirm+0x290>)
 800a7ea:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800a7ee:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a7f2:	2207      	movs	r2, #7
 800a7f4:	a901      	add	r1, sp, #4
 800a7f6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a7fa:	f001 fc43 	bl	800c084 <RegionVerify>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	f000 8188 	beq.w	800ab14 <LoRaMacMibSetRequestConfirm+0x58c>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800a804:	4b07      	ldr	r3, [pc, #28]	; (800a824 <LoRaMacMibSetRequestConfirm+0x29c>)
 800a806:	3504      	adds	r5, #4
 800a808:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a80c:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a810:	2400      	movs	r4, #0
 800a812:	e15f      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
 800a814:	20000620 	.word	0x20000620
 800a818:	20008000 	.word	0x20008000
 800a81c:	08012954 	.word	0x08012954
 800a820:	2000806c 	.word	0x2000806c
 800a824:	200080b4 	.word	0x200080b4
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a828:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a82c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a830:	4bb4      	ldr	r3, [pc, #720]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a832:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800a836:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a83a:	2207      	movs	r2, #7
 800a83c:	a901      	add	r1, sp, #4
 800a83e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a842:	f001 fc1f 	bl	800c084 <RegionVerify>
 800a846:	2800      	cmp	r0, #0
 800a848:	f000 8166 	beq.w	800ab18 <LoRaMacMibSetRequestConfirm+0x590>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800a84c:	4bad      	ldr	r3, [pc, #692]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a84e:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800a852:	3504      	adds	r5, #4
 800a854:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a858:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800a85c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a860:	2b02      	cmp	r3, #2
 800a862:	d001      	beq.n	800a868 <LoRaMacMibSetRequestConfirm+0x2e0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a864:	2400      	movs	r4, #0
 800a866:	e135      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800a868:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
 800a86c:	f893 412c 	ldrb.w	r4, [r3, #300]	; 0x12c
 800a870:	2c00      	cmp	r4, #0
 800a872:	f000 812f 	beq.w	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800a876:	4ba4      	ldr	r3, [pc, #656]	; (800ab08 <LoRaMacMibSetRequestConfirm+0x580>)
 800a878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87a:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800a87c:	f7fe fd20 	bl	80092c0 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a880:	2400      	movs	r4, #0
 800a882:	e127      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a884:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a888:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a88c:	4b9d      	ldr	r3, [pc, #628]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a88e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800a892:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a896:	2207      	movs	r2, #7
 800a898:	a901      	add	r1, sp, #4
 800a89a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a89e:	f001 fbf1 	bl	800c084 <RegionVerify>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	f000 813a 	beq.w	800ab1c <LoRaMacMibSetRequestConfirm+0x594>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800a8a8:	4b98      	ldr	r3, [pc, #608]	; (800ab0c <LoRaMacMibSetRequestConfirm+0x584>)
 800a8aa:	3504      	adds	r5, #4
 800a8ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a8b0:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8b4:	2400      	movs	r4, #0
 800a8b6:	e10d      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800a8b8:	6843      	ldr	r3, [r0, #4]
 800a8ba:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800a8c2:	a902      	add	r1, sp, #8
 800a8c4:	4b8f      	ldr	r3, [pc, #572]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a8c6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a8ca:	f001 fbf8 	bl	800c0be <RegionChanMaskSet>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	f000 8126 	beq.w	800ab20 <LoRaMacMibSetRequestConfirm+0x598>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8d4:	2400      	movs	r4, #0
 800a8d6:	e0fd      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800a8d8:	6843      	ldr	r3, [r0, #4]
 800a8da:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800a8e2:	a902      	add	r1, sp, #8
 800a8e4:	4b87      	ldr	r3, [pc, #540]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a8e6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a8ea:	f001 fbe8 	bl	800c0be <RegionChanMaskSet>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	f000 8118 	beq.w	800ab24 <LoRaMacMibSetRequestConfirm+0x59c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8f4:	2400      	movs	r4, #0
 800a8f6:	e0ed      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800a8f8:	7902      	ldrb	r2, [r0, #4]
 800a8fa:	1e53      	subs	r3, r2, #1
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b0e      	cmp	r3, #14
 800a900:	f200 8112 	bhi.w	800ab28 <LoRaMacMibSetRequestConfirm+0x5a0>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800a904:	4b7f      	ldr	r3, [pc, #508]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a906:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a90a:	2400      	movs	r4, #0
 800a90c:	e0e2      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800a90e:	6842      	ldr	r2, [r0, #4]
 800a910:	4b7c      	ldr	r3, [pc, #496]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a912:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a914:	2400      	movs	r4, #0
            break;
 800a916:	e0dd      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800a918:	6842      	ldr	r2, [r0, #4]
 800a91a:	4b7a      	ldr	r3, [pc, #488]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a91c:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a91e:	2400      	movs	r4, #0
            break;
 800a920:	e0d8      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800a922:	6842      	ldr	r2, [r0, #4]
 800a924:	4b77      	ldr	r3, [pc, #476]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a926:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a928:	2400      	movs	r4, #0
            break;
 800a92a:	e0d3      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800a92c:	6842      	ldr	r2, [r0, #4]
 800a92e:	4b75      	ldr	r3, [pc, #468]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a930:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a932:	2400      	movs	r4, #0
            break;
 800a934:	e0ce      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800a936:	6842      	ldr	r2, [r0, #4]
 800a938:	4b72      	ldr	r3, [pc, #456]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a93a:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a93c:	2400      	movs	r4, #0
            break;
 800a93e:	e0c9      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800a940:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a944:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800a948:	2206      	movs	r2, #6
 800a94a:	a901      	add	r1, sp, #4
 800a94c:	4b6d      	ldr	r3, [pc, #436]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a94e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a952:	f001 fb97 	bl	800c084 <RegionVerify>
 800a956:	2800      	cmp	r0, #0
 800a958:	f000 80e8 	beq.w	800ab2c <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800a95c:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a960:	4b68      	ldr	r3, [pc, #416]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a962:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a966:	2400      	movs	r4, #0
 800a968:	e0b4      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800a96a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a96e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a972:	4b64      	ldr	r3, [pc, #400]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a974:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800a978:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a97c:	2205      	movs	r2, #5
 800a97e:	a901      	add	r1, sp, #4
 800a980:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a984:	f001 fb7e 	bl	800c084 <RegionVerify>
 800a988:	2800      	cmp	r0, #0
 800a98a:	f000 80d1 	beq.w	800ab30 <LoRaMacMibSetRequestConfirm+0x5a8>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a98e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a992:	4b5c      	ldr	r3, [pc, #368]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a998:	2400      	movs	r4, #0
 800a99a:	e09b      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800a99c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a9a0:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800a9a4:	220a      	movs	r2, #10
 800a9a6:	a901      	add	r1, sp, #4
 800a9a8:	4b56      	ldr	r3, [pc, #344]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a9aa:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a9ae:	f001 fb69 	bl	800c084 <RegionVerify>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	f000 80be 	beq.w	800ab34 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800a9b8:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a9bc:	4b51      	ldr	r3, [pc, #324]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a9be:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9c2:	2400      	movs	r4, #0
 800a9c4:	e086      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800a9c6:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a9ca:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800a9ce:	2209      	movs	r2, #9
 800a9d0:	a901      	add	r1, sp, #4
 800a9d2:	4b4c      	ldr	r3, [pc, #304]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a9d4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a9d8:	f001 fb54 	bl	800c084 <RegionVerify>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	f000 80ab 	beq.w	800ab38 <LoRaMacMibSetRequestConfirm+0x5b0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800a9e2:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a9e6:	4b47      	ldr	r3, [pc, #284]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a9e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9ec:	2400      	movs	r4, #0
 800a9ee:	e071      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800a9f0:	6842      	ldr	r2, [r0, #4]
 800a9f2:	4b44      	ldr	r3, [pc, #272]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800a9f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800a9f8:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9fa:	2400      	movs	r4, #0
            break;
 800a9fc:	e06a      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800a9fe:	7902      	ldrb	r2, [r0, #4]
 800aa00:	4b40      	ldr	r3, [pc, #256]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800aa02:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800aa06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa0a:	2400      	movs	r4, #0
            break;
 800aa0c:	e062      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800aa0e:	6842      	ldr	r2, [r0, #4]
 800aa10:	4b3c      	ldr	r3, [pc, #240]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800aa12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa16:	2400      	movs	r4, #0
            break;
 800aa18:	e05c      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800aa1a:	6842      	ldr	r2, [r0, #4]
 800aa1c:	4b39      	ldr	r3, [pc, #228]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800aa1e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa22:	2400      	movs	r4, #0
            break;
 800aa24:	e056      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800aa26:	f7fe fd53 	bl	80094d0 <RestoreNvmData>
 800aa2a:	4604      	mov	r4, r0
            break;
 800aa2c:	e052      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800aa2e:	7983      	ldrb	r3, [r0, #6]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d901      	bls.n	800aa38 <LoRaMacMibSetRequestConfirm+0x4b0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aa34:	2403      	movs	r4, #3
 800aa36:	e04d      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800aa38:	6842      	ldr	r2, [r0, #4]
 800aa3a:	4b32      	ldr	r3, [pc, #200]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800aa3c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800aa40:	6840      	ldr	r0, [r0, #4]
 800aa42:	f000 ff71 	bl	800b928 <LoRaMacCryptoSetLrWanVersion>
 800aa46:	4604      	mov	r4, r0
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d043      	beq.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa4c:	2411      	movs	r4, #17
 800aa4e:	e041      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            break;
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800aa50:	6842      	ldr	r2, [r0, #4]
 800aa52:	4b2c      	ldr	r3, [pc, #176]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800aa54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa58:	2400      	movs	r4, #0
            break;
 800aa5a:	e03b      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800aa5c:	8882      	ldrh	r2, [r0, #4]
 800aa5e:	4b29      	ldr	r3, [pc, #164]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800aa60:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa64:	2400      	movs	r4, #0
            break;
 800aa66:	e035      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800aa68:	8882      	ldrh	r2, [r0, #4]
 800aa6a:	4b26      	ldr	r3, [pc, #152]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800aa6c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa70:	2400      	movs	r4, #0
            break;
 800aa72:	e02f      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800aa74:	8882      	ldrh	r2, [r0, #4]
 800aa76:	4b23      	ldr	r3, [pc, #140]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800aa78:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa7c:	2400      	movs	r4, #0
            break;
 800aa7e:	e029      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800aa80:	8882      	ldrh	r2, [r0, #4]
 800aa82:	4b20      	ldr	r3, [pc, #128]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800aa84:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa88:	2400      	movs	r4, #0
            break;
 800aa8a:	e023      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        }
        case MIB_RSSI_FREE_THRESHOLD:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 800aa8c:	4b1d      	ldr	r3, [pc, #116]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800aa8e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800aa92:	b11b      	cbz	r3, 800aa9c <LoRaMacMibSetRequestConfirm+0x514>
 800aa94:	2b06      	cmp	r3, #6
 800aa96:	d001      	beq.n	800aa9c <LoRaMacMibSetRequestConfirm+0x514>
            {
                status = LORAMAC_STATUS_ERROR;
 800aa98:	2418      	movs	r4, #24
 800aa9a:	e01b      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
 800aa9c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800aaa0:	4b18      	ldr	r3, [pc, #96]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800aaa2:	f8a3 274c 	strh.w	r2, [r3, #1868]	; 0x74c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaa6:	2400      	movs	r4, #0
 800aaa8:	e014      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            break;
        }
        case MIB_CARRIER_SENSE_TIME:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 800aaaa:	4b16      	ldr	r3, [pc, #88]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800aaac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800aab0:	b11b      	cbz	r3, 800aaba <LoRaMacMibSetRequestConfirm+0x532>
 800aab2:	2b06      	cmp	r3, #6
 800aab4:	d001      	beq.n	800aaba <LoRaMacMibSetRequestConfirm+0x532>
            {
                status = LORAMAC_STATUS_ERROR;
 800aab6:	2418      	movs	r4, #24
 800aab8:	e00c      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
            }
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
 800aaba:	686a      	ldr	r2, [r5, #4]
 800aabc:	4b11      	ldr	r3, [pc, #68]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x57c>)
 800aabe:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aac2:	2400      	movs	r4, #0
 800aac4:	e006      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
#endif
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800aac6:	f000 fab1 	bl	800b02c <LoRaMacMibClassBSetRequestConfirm>
 800aaca:	4604      	mov	r4, r0
            break;
 800aacc:	e002      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aace:	2403      	movs	r4, #3
 800aad0:	e000      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
        return LORAMAC_STATUS_BUSY;
 800aad2:	2401      	movs	r4, #1
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800aad4:	4620      	mov	r0, r4
 800aad6:	b005      	add	sp, #20
 800aad8:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aada:	2403      	movs	r4, #3
 800aadc:	e7fa      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aade:	2403      	movs	r4, #3
 800aae0:	e7f8      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aae2:	2403      	movs	r4, #3
 800aae4:	e7f6      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aae6:	2403      	movs	r4, #3
 800aae8:	e7f4      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aaea:	2403      	movs	r4, #3
 800aaec:	e7f2      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aaee:	2403      	movs	r4, #3
 800aaf0:	e7f0      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aaf2:	2403      	movs	r4, #3
 800aaf4:	e7ee      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aaf6:	2403      	movs	r4, #3
 800aaf8:	e7ec      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aafa:	2403      	movs	r4, #3
 800aafc:	e7ea      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aafe:	2403      	movs	r4, #3
 800ab00:	e7e8      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
 800ab02:	bf00      	nop
 800ab04:	20008000 	.word	0x20008000
 800ab08:	08012954 	.word	0x08012954
 800ab0c:	200080bc 	.word	0x200080bc
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab10:	2403      	movs	r4, #3
 800ab12:	e7df      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab14:	2403      	movs	r4, #3
 800ab16:	e7dd      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab18:	2403      	movs	r4, #3
 800ab1a:	e7db      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab1c:	2403      	movs	r4, #3
 800ab1e:	e7d9      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab20:	2403      	movs	r4, #3
 800ab22:	e7d7      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab24:	2403      	movs	r4, #3
 800ab26:	e7d5      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab28:	2403      	movs	r4, #3
 800ab2a:	e7d3      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab2c:	2403      	movs	r4, #3
 800ab2e:	e7d1      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab30:	2403      	movs	r4, #3
 800ab32:	e7cf      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab34:	2403      	movs	r4, #3
 800ab36:	e7cd      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab38:	2403      	movs	r4, #3
 800ab3a:	e7cb      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0x54c>

0800ab3c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	b084      	sub	sp, #16
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ab40:	2300      	movs	r3, #0
 800ab42:	f8ad 3008 	strh.w	r3, [sp, #8]

    if( mlmeRequest == NULL )
 800ab46:	2800      	cmp	r0, #0
 800ab48:	f000 80d0 	beq.w	800acec <LoRaMacMlmeRequest+0x1b0>
 800ab4c:	4605      	mov	r5, r0
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800ab4e:	f7ff f8a1 	bl	8009c94 <LoRaMacIsBusy>
 800ab52:	b118      	cbz	r0, 800ab5c <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800ab54:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800ab56:	4620      	mov	r0, r4
 800ab58:	b004      	add	sp, #16
 800ab5a:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800ab5c:	f000 fd18 	bl	800b590 <LoRaMacConfirmQueueIsFull>
 800ab60:	b108      	cbz	r0, 800ab66 <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 800ab62:	2401      	movs	r4, #1
 800ab64:	e7f7      	b.n	800ab56 <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ab66:	f000 fd0d 	bl	800b584 <LoRaMacConfirmQueueGetCnt>
 800ab6a:	b1f8      	cbz	r0, 800abac <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ab6c:	4b60      	ldr	r3, [pc, #384]	; (800acf0 <LoRaMacMlmeRequest+0x1b4>)
 800ab6e:	2101      	movs	r1, #1
 800ab70:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ab74:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800ab78:	f042 0204 	orr.w	r2, r2, #4
 800ab7c:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 800ab80:	782b      	ldrb	r3, [r5, #0]
 800ab82:	f88d 300c 	strb.w	r3, [sp, #12]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ab86:	f88d 100d 	strb.w	r1, [sp, #13]
    queueElement.RestrictCommonReadyToHandle = false;
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f88d 200f 	strb.w	r2, [sp, #15]
    switch( mlmeRequest->Type )
 800ab90:	461c      	mov	r4, r3
 800ab92:	3b01      	subs	r3, #1
 800ab94:	2b0d      	cmp	r3, #13
 800ab96:	f200 808f 	bhi.w	800acb8 <LoRaMacMlmeRequest+0x17c>
 800ab9a:	e8df f003 	tbb	[pc, r3]
 800ab9e:	8d0d      	.short	0x8d0d
 800aba0:	42388d8d 	.word	0x42388d8d
 800aba4:	508d8d47 	.word	0x508d8d47
 800aba8:	755f7e8d 	.word	0x755f7e8d
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800abac:	2214      	movs	r2, #20
 800abae:	2100      	movs	r1, #0
 800abb0:	4850      	ldr	r0, [pc, #320]	; (800acf4 <LoRaMacMlmeRequest+0x1b8>)
 800abb2:	f004 fb14 	bl	800f1de <memset1>
 800abb6:	e7d9      	b.n	800ab6c <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800abb8:	4b4d      	ldr	r3, [pc, #308]	; (800acf0 <LoRaMacMlmeRequest+0x1b4>)
 800abba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800abbe:	f013 0f20 	tst.w	r3, #32
 800abc2:	d1c8      	bne.n	800ab56 <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( false );
 800abc4:	2000      	movs	r0, #0
 800abc6:	f7fe fd79 	bl	80096bc <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800abca:	4c4b      	ldr	r4, [pc, #300]	; (800acf8 <LoRaMacMlmeRequest+0x1bc>)
 800abcc:	2200      	movs	r2, #0
 800abce:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800abd2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800abd6:	f001 fb05 	bl	800c1e4 <RegionAlternateDr>
 800abda:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800abde:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800abe2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800abe6:	2307      	movs	r3, #7
 800abe8:	f88d 300d 	strb.w	r3, [sp, #13]
            status = SendReJoinReq( JOIN_REQ );
 800abec:	20ff      	movs	r0, #255	; 0xff
 800abee:	f7fe feb5 	bl	800995c <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 800abf2:	4604      	mov	r4, r0
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d060      	beq.n	800acba <LoRaMacMlmeRequest+0x17e>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800abf8:	4e3f      	ldr	r6, [pc, #252]	; (800acf8 <LoRaMacMlmeRequest+0x1bc>)
 800abfa:	2201      	movs	r2, #1
 800abfc:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800ac00:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800ac04:	f001 faee 	bl	800c1e4 <RegionAlternateDr>
 800ac08:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800ac0c:	e055      	b.n	800acba <LoRaMacMlmeRequest+0x17e>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800ac0e:	2200      	movs	r2, #0
 800ac10:	a902      	add	r1, sp, #8
 800ac12:	2002      	movs	r0, #2
 800ac14:	f000 faaa 	bl	800b16c <LoRaMacCommandsAddCmd>
 800ac18:	4604      	mov	r4, r0
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d04d      	beq.n	800acba <LoRaMacMlmeRequest+0x17e>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ac1e:	2413      	movs	r4, #19
 800ac20:	e04b      	b.n	800acba <LoRaMacMlmeRequest+0x17e>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800ac22:	88a8      	ldrh	r0, [r5, #4]
 800ac24:	f7fe febc 	bl	80099a0 <SetTxContinuousWave>
 800ac28:	4604      	mov	r4, r0
            break;
 800ac2a:	e046      	b.n	800acba <LoRaMacMlmeRequest+0x17e>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800ac2c:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800ac30:	b2d2      	uxtb	r2, r2
 800ac32:	68a9      	ldr	r1, [r5, #8]
 800ac34:	88a8      	ldrh	r0, [r5, #4]
 800ac36:	f7fc ff1f 	bl	8007a78 <SetTxContinuousWave1>
 800ac3a:	4604      	mov	r4, r0
            break;
 800ac3c:	e03d      	b.n	800acba <LoRaMacMlmeRequest+0x17e>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800ac3e:	a901      	add	r1, sp, #4
 800ac40:	200d      	movs	r0, #13
 800ac42:	f000 fadf 	bl	800b204 <LoRaMacCommandsGetCmd>
 800ac46:	4604      	mov	r4, r0
 800ac48:	b3b8      	cbz	r0, 800acba <LoRaMacMlmeRequest+0x17e>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	a902      	add	r1, sp, #8
 800ac4e:	200d      	movs	r0, #13
 800ac50:	f000 fa8c 	bl	800b16c <LoRaMacCommandsAddCmd>
 800ac54:	4604      	mov	r4, r0
 800ac56:	b380      	cbz	r0, 800acba <LoRaMacMlmeRequest+0x17e>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ac58:	2413      	movs	r4, #19
            break;
 800ac5a:	e02e      	b.n	800acba <LoRaMacMlmeRequest+0x17e>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800ac5c:	4b26      	ldr	r3, [pc, #152]	; (800acf8 <LoRaMacMlmeRequest+0x1bc>)
 800ac5e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ac62:	b10b      	cbz	r3, 800ac68 <LoRaMacMlmeRequest+0x12c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ac64:	2402      	movs	r4, #2
 800ac66:	e028      	b.n	800acba <LoRaMacMlmeRequest+0x17e>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800ac68:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800ac6a:	f004 0007 	and.w	r0, r4, #7
 800ac6e:	f000 f9d6 	bl	800b01e <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800ac72:	f88d 4008 	strb.w	r4, [sp, #8]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800ac76:	2201      	movs	r2, #1
 800ac78:	a902      	add	r1, sp, #8
 800ac7a:	2010      	movs	r0, #16
 800ac7c:	f000 fa76 	bl	800b16c <LoRaMacCommandsAddCmd>
 800ac80:	4604      	mov	r4, r0
 800ac82:	b1d0      	cbz	r0, 800acba <LoRaMacMlmeRequest+0x17e>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ac84:	2413      	movs	r4, #19
 800ac86:	e018      	b.n	800acba <LoRaMacMlmeRequest+0x17e>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800ac88:	2200      	movs	r2, #0
 800ac8a:	a902      	add	r1, sp, #8
 800ac8c:	2012      	movs	r0, #18
 800ac8e:	f000 fa6d 	bl	800b16c <LoRaMacCommandsAddCmd>
 800ac92:	4604      	mov	r4, r0
 800ac94:	b188      	cbz	r0, 800acba <LoRaMacMlmeRequest+0x17e>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ac96:	2413      	movs	r4, #19
 800ac98:	e00f      	b.n	800acba <LoRaMacMlmeRequest+0x17e>
            queueElement.RestrictCommonReadyToHandle = true;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f88d 300f 	strb.w	r3, [sp, #15]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800aca0:	f000 f9ae 	bl	800b000 <LoRaMacClassBIsAcquisitionInProgress>
 800aca4:	b108      	cbz	r0, 800acaa <LoRaMacMlmeRequest+0x16e>
                status = LORAMAC_STATUS_BUSY;
 800aca6:	2401      	movs	r4, #1
 800aca8:	e007      	b.n	800acba <LoRaMacMlmeRequest+0x17e>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800acaa:	f000 f9a6 	bl	800affa <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800acae:	2000      	movs	r0, #0
 800acb0:	f000 f9a8 	bl	800b004 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800acb4:	2400      	movs	r4, #0
 800acb6:	e000      	b.n	800acba <LoRaMacMlmeRequest+0x17e>
    switch( mlmeRequest->Type )
 800acb8:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800acba:	4b0d      	ldr	r3, [pc, #52]	; (800acf0 <LoRaMacMlmeRequest+0x1b4>)
 800acbc:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800acc0:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800acc2:	b17c      	cbz	r4, 800ace4 <LoRaMacMlmeRequest+0x1a8>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800acc4:	f000 fc5e 	bl	800b584 <LoRaMacConfirmQueueGetCnt>
 800acc8:	2800      	cmp	r0, #0
 800acca:	f47f af44 	bne.w	800ab56 <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 800acce:	4b08      	ldr	r3, [pc, #32]	; (800acf0 <LoRaMacMlmeRequest+0x1b4>)
 800acd0:	2100      	movs	r1, #0
 800acd2:	f883 1410 	strb.w	r1, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800acd6:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800acda:	f361 0282 	bfi	r2, r1, #2, #1
 800acde:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800ace2:	e738      	b.n	800ab56 <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 800ace4:	a803      	add	r0, sp, #12
 800ace6:	f000 fb83 	bl	800b3f0 <LoRaMacConfirmQueueAdd>
 800acea:	e734      	b.n	800ab56 <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800acec:	2403      	movs	r4, #3
 800acee:	e732      	b.n	800ab56 <LoRaMacMlmeRequest+0x1a>
 800acf0:	20000620 	.word	0x20000620
 800acf4:	20000a68 	.word	0x20000a68
 800acf8:	20008000 	.word	0x20008000

0800acfc <LoRaMacMcpsRequest>:
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800acfc:	2800      	cmp	r0, #0
 800acfe:	f000 80b0 	beq.w	800ae62 <LoRaMacMcpsRequest+0x166>
{
 800ad02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad06:	b088      	sub	sp, #32
 800ad08:	460d      	mov	r5, r1
 800ad0a:	f04f 0800 	mov.w	r8, #0
 800ad0e:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 800ad10:	f7fe ffc0 	bl	8009c94 <LoRaMacIsBusy>
 800ad14:	4606      	mov	r6, r0
 800ad16:	b118      	cbz	r0, 800ad20 <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800ad18:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800ad1a:	b008      	add	sp, #32
 800ad1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 800ad20:	4641      	mov	r1, r8
 800ad22:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800ad26:	4f51      	ldr	r7, [pc, #324]	; (800ae6c <LoRaMacMcpsRequest+0x170>)
 800ad28:	2214      	movs	r2, #20
 800ad2a:	f207 4034 	addw	r0, r7, #1076	; 0x434
 800ad2e:	f004 fa56 	bl	800f1de <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	f887 3435 	strb.w	r3, [r7, #1077]	; 0x435
    MacCtx.AckTimeoutRetriesCounter = 1;
 800ad38:	f887 340e 	strb.w	r3, [r7, #1038]	; 0x40e
    switch( mcpsRequest->Type )
 800ad3c:	7823      	ldrb	r3, [r4, #0]
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d059      	beq.n	800adf6 <LoRaMacMcpsRequest+0xfa>
 800ad42:	2b03      	cmp	r3, #3
 800ad44:	d06f      	beq.n	800ae26 <LoRaMacMcpsRequest+0x12a>
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d042      	beq.n	800add0 <LoRaMacMcpsRequest+0xd4>
 800ad4a:	2700      	movs	r7, #0
 800ad4c:	46ba      	mov	sl, r7
 800ad4e:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ad50:	2302      	movs	r3, #2
 800ad52:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ad56:	4b46      	ldr	r3, [pc, #280]	; (800ae70 <LoRaMacMcpsRequest+0x174>)
 800ad58:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ad5c:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ad60:	a906      	add	r1, sp, #24
 800ad62:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ad66:	f001 f95c 	bl	800c022 <RegionGetPhyParam>
 800ad6a:	9005      	str	r0, [sp, #20]
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800ad6c:	b240      	sxtb	r0, r0
 800ad6e:	42b8      	cmp	r0, r7
 800ad70:	bfb8      	it	lt
 800ad72:	4638      	movlt	r0, r7
    if( readyToSend == true )
 800ad74:	2e00      	cmp	r6, #0
 800ad76:	d06e      	beq.n	800ae56 <LoRaMacMcpsRequest+0x15a>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800ad78:	4b3d      	ldr	r3, [pc, #244]	; (800ae70 <LoRaMacMcpsRequest+0x174>)
 800ad7a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800ad7e:	b99b      	cbnz	r3, 800ada8 <LoRaMacMcpsRequest+0xac>
            verify.DatarateParams.Datarate = datarate;
 800ad80:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ad84:	4b3a      	ldr	r3, [pc, #232]	; (800ae70 <LoRaMacMcpsRequest+0x174>)
 800ad86:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ad8a:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ad8e:	2205      	movs	r2, #5
 800ad90:	a903      	add	r1, sp, #12
 800ad92:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ad96:	f001 f975 	bl	800c084 <RegionVerify>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d063      	beq.n	800ae66 <LoRaMacMcpsRequest+0x16a>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ad9e:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 800ada2:	4b33      	ldr	r3, [pc, #204]	; (800ae70 <LoRaMacMcpsRequest+0x174>)
 800ada4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800ada8:	9500      	str	r5, [sp, #0]
 800adaa:	4643      	mov	r3, r8
 800adac:	4652      	mov	r2, sl
 800adae:	4649      	mov	r1, r9
 800adb0:	a804      	add	r0, sp, #16
 800adb2:	f7fe fee3 	bl	8009b7c <Send>
        if( status == LORAMAC_STATUS_OK )
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d148      	bne.n	800ae4c <LoRaMacMcpsRequest+0x150>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800adba:	7822      	ldrb	r2, [r4, #0]
 800adbc:	4b2b      	ldr	r3, [pc, #172]	; (800ae6c <LoRaMacMcpsRequest+0x170>)
 800adbe:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800adc2:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800adc6:	f042 0201 	orr.w	r2, r2, #1
 800adca:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800adce:	e043      	b.n	800ae58 <LoRaMacMcpsRequest+0x15c>
            MacCtx.AckTimeoutRetries = 1;
 800add0:	2601      	movs	r6, #1
 800add2:	f887 640d 	strb.w	r6, [r7, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800add6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800adda:	2202      	movs	r2, #2
 800addc:	f362 1347 	bfi	r3, r2, #5, #3
 800ade0:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800ade4:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800ade8:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800adec:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800adf0:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 800adf4:	e7ac      	b.n	800ad50 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800adf6:	7be3      	ldrb	r3, [r4, #15]
 800adf8:	2b08      	cmp	r3, #8
 800adfa:	bf28      	it	cs
 800adfc:	2308      	movcs	r3, #8
 800adfe:	4a1b      	ldr	r2, [pc, #108]	; (800ae6c <LoRaMacMcpsRequest+0x170>)
 800ae00:	f882 340d 	strb.w	r3, [r2, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800ae04:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ae08:	2204      	movs	r2, #4
 800ae0a:	f362 1347 	bfi	r3, r2, #5, #3
 800ae0e:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800ae12:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800ae16:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800ae1a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800ae1e:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 800ae22:	2601      	movs	r6, #1
            break;
 800ae24:	e794      	b.n	800ad50 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 800ae26:	2601      	movs	r6, #1
 800ae28:	4b10      	ldr	r3, [pc, #64]	; (800ae6c <LoRaMacMcpsRequest+0x170>)
 800ae2a:	f883 640d 	strb.w	r6, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800ae2e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ae32:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800ae36:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800ae3a:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800ae3e:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800ae42:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 800ae46:	f04f 0900 	mov.w	r9, #0
            break;
 800ae4a:	e781      	b.n	800ad50 <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 800ae4c:	4b07      	ldr	r3, [pc, #28]	; (800ae6c <LoRaMacMcpsRequest+0x170>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 800ae54:	e000      	b.n	800ae58 <LoRaMacMcpsRequest+0x15c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ae56:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <LoRaMacMcpsRequest+0x170>)
 800ae5a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800ae5e:	6123      	str	r3, [r4, #16]
    return status;
 800ae60:	e75b      	b.n	800ad1a <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ae62:	2003      	movs	r0, #3
}
 800ae64:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800ae66:	2003      	movs	r0, #3
 800ae68:	e757      	b.n	800ad1a <LoRaMacMcpsRequest+0x1e>
 800ae6a:	bf00      	nop
 800ae6c:	20000620 	.word	0x20000620
 800ae70:	20008000 	.word	0x20008000

0800ae74 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800ae74:	b510      	push	{r4, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800ae7a:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800ae7e:	220f      	movs	r2, #15
 800ae80:	a901      	add	r1, sp, #4
 800ae82:	4b09      	ldr	r3, [pc, #36]	; (800aea8 <LoRaMacTestSetDutyCycleOn+0x34>)
 800ae84:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ae88:	f001 f8fc 	bl	800c084 <RegionVerify>
 800ae8c:	b148      	cbz	r0, 800aea2 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800ae8e:	4b06      	ldr	r3, [pc, #24]	; (800aea8 <LoRaMacTestSetDutyCycleOn+0x34>)
 800ae90:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800ae94:	4a05      	ldr	r2, [pc, #20]	; (800aeac <LoRaMacTestSetDutyCycleOn+0x38>)
 800ae96:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ae9a:	f043 0320 	orr.w	r3, r3, #32
 800ae9e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800aea2:	b002      	add	sp, #8
 800aea4:	bd10      	pop	{r4, pc}
 800aea6:	bf00      	nop
 800aea8:	20008000 	.word	0x20008000
 800aeac:	20000620 	.word	0x20000620

0800aeb0 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800aeb0:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800aeb2:	f7ff f93f 	bl	800a134 <LoRaMacStop>
 800aeb6:	b110      	cbz	r0, 800aebe <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800aeb8:	2401      	movs	r4, #1
    }
}
 800aeba:	4620      	mov	r0, r4
 800aebc:	bd38      	pop	{r3, r4, r5, pc}
 800aebe:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800aec0:	4d0c      	ldr	r5, [pc, #48]	; (800aef4 <LoRaMacDeInitialization+0x44>)
 800aec2:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800aec6:	f006 fba1 	bl	801160c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800aeca:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800aece:	f006 fb9d 	bl	801160c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800aed2:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800aed6:	f006 fb99 	bl	801160c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.AckTimeoutTimer );
 800aeda:	f505 707d 	add.w	r0, r5, #1012	; 0x3f4
 800aede:	f006 fb95 	bl	801160c <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800aee2:	f000 f89d 	bl	800b020 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800aee6:	2000      	movs	r0, #0
 800aee8:	f7fe fbe8 	bl	80096bc <ResetMacParameters>
        Radio.Sleep( );
 800aeec:	4b02      	ldr	r3, [pc, #8]	; (800aef8 <LoRaMacDeInitialization+0x48>)
 800aeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef0:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800aef2:	e7e2      	b.n	800aeba <LoRaMacDeInitialization+0xa>
 800aef4:	20000620 	.word	0x20000620
 800aef8:	08012954 	.word	0x08012954

0800aefc <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800aefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af00:	b089      	sub	sp, #36	; 0x24
 800af02:	460f      	mov	r7, r1
 800af04:	4616      	mov	r6, r2
 800af06:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800af08:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800af0c:	f990 b011 	ldrsb.w	fp, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800af10:	6883      	ldr	r3, [r0, #8]
 800af12:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 800af14:	f890 8005 	ldrb.w	r8, [r0, #5]
 800af18:	f1b8 0f00 	cmp.w	r8, #0
 800af1c:	d107      	bne.n	800af2e <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 800af1e:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800af22:	f886 b000 	strb.w	fp, [r6]
    return adrAckReq;
}
 800af26:	4640      	mov	r0, r8
 800af28:	b009      	add	sp, #36	; 0x24
 800af2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2e:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800af30:	2302      	movs	r3, #2
 800af32:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800af36:	7c83      	ldrb	r3, [r0, #18]
 800af38:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800af3c:	a906      	add	r1, sp, #24
 800af3e:	7cc0      	ldrb	r0, [r0, #19]
 800af40:	f001 f86f 	bl	800c022 <RegionGetPhyParam>
 800af44:	9005      	str	r0, [sp, #20]
        minTxDatarate = phyParam.Value;
 800af46:	fa4f fa80 	sxtb.w	sl, r0
        datarate = MAX( datarate, minTxDatarate );
 800af4a:	464a      	mov	r2, r9
 800af4c:	45d1      	cmp	r9, sl
 800af4e:	bfb8      	it	lt
 800af50:	4652      	movlt	r2, sl
 800af52:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800af54:	45d1      	cmp	r9, sl
 800af56:	dc04      	bgt.n	800af62 <CalcNextV10X+0x66>
            *adrAckCounter = 0;
 800af58:	2300      	movs	r3, #0
 800af5a:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800af5c:	4691      	mov	r9, r2
            adrAckReq = false;
 800af5e:	4698      	mov	r8, r3
 800af60:	e7dd      	b.n	800af1e <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800af62:	68a2      	ldr	r2, [r4, #8]
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	429a      	cmp	r2, r3
 800af68:	d201      	bcs.n	800af6e <CalcNextV10X+0x72>
                adrAckReq = false;
 800af6a:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800af6e:	89e1      	ldrh	r1, [r4, #14]
 800af70:	440b      	add	r3, r1
 800af72:	429a      	cmp	r2, r3
 800af74:	d202      	bcs.n	800af7c <CalcNextV10X+0x80>
        datarate = MAX( datarate, minTxDatarate );
 800af76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800af7a:	e7d0      	b.n	800af1e <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800af7c:	2308      	movs	r3, #8
 800af7e:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800af82:	a906      	add	r1, sp, #24
 800af84:	7ce0      	ldrb	r0, [r4, #19]
 800af86:	f001 f84c 	bl	800c022 <RegionGetPhyParam>
 800af8a:	9005      	str	r0, [sp, #20]
                txPower = phyParam.Value;
 800af8c:	fa4f fb80 	sxtb.w	fp, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800af90:	68a3      	ldr	r3, [r4, #8]
 800af92:	89e2      	ldrh	r2, [r4, #14]
 800af94:	fbb3 f1f2 	udiv	r1, r3, r2
 800af98:	fb02 3311 	mls	r3, r2, r1, r3
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d002      	beq.n	800afa6 <CalcNextV10X+0xaa>
        datarate = MAX( datarate, minTxDatarate );
 800afa0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800afa4:	e7bb      	b.n	800af1e <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800afa6:	2322      	movs	r3, #34	; 0x22
 800afa8:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800afac:	9b01      	ldr	r3, [sp, #4]
 800afae:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800afb2:	7ca3      	ldrb	r3, [r4, #18]
 800afb4:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800afb8:	a906      	add	r1, sp, #24
 800afba:	7ce0      	ldrb	r0, [r4, #19]
 800afbc:	f001 f831 	bl	800c022 <RegionGetPhyParam>
 800afc0:	9005      	str	r0, [sp, #20]
                    datarate = phyParam.Value;
 800afc2:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800afc6:	45ca      	cmp	sl, r9
 800afc8:	d1a9      	bne.n	800af1e <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800afca:	f894 8004 	ldrb.w	r8, [r4, #4]
 800afce:	f1b8 0f00 	cmp.w	r8, #0
 800afd2:	d0a4      	beq.n	800af1e <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800afd4:	2302      	movs	r3, #2
 800afd6:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800afda:	a902      	add	r1, sp, #8
 800afdc:	7ce0      	ldrb	r0, [r4, #19]
 800afde:	f001 f844 	bl	800c06a <RegionInitDefaults>
                        adrAckReq = false;
 800afe2:	f04f 0800 	mov.w	r8, #0
 800afe6:	e79a      	b.n	800af1e <CalcNextV10X+0x22>

0800afe8 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800afe8:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800afea:	7884      	ldrb	r4, [r0, #2]
 800afec:	b10c      	cbz	r4, 800aff2 <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800afee:	2000      	movs	r0, #0
}
 800aff0:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800aff2:	f7ff ff83 	bl	800aefc <CalcNextV10X>
 800aff6:	e7fb      	b.n	800aff0 <LoRaMacAdrCalcNext+0x8>

0800aff8 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800aff8:	4770      	bx	lr

0800affa <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800affa:	4770      	bx	lr

0800affc <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800affc:	4770      	bx	lr

0800affe <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800affe:	4770      	bx	lr

0800b000 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b000:	2000      	movs	r0, #0
 800b002:	4770      	bx	lr

0800b004 <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b004:	4770      	bx	lr

0800b006 <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b006:	4770      	bx	lr

0800b008 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b008:	4770      	bx	lr

0800b00a <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b00a:	2000      	movs	r0, #0
 800b00c:	4770      	bx	lr

0800b00e <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b00e:	2000      	movs	r0, #0
 800b010:	4770      	bx	lr

0800b012 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b012:	2000      	movs	r0, #0
 800b014:	4770      	bx	lr

0800b016 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b016:	2000      	movs	r0, #0
 800b018:	4770      	bx	lr

0800b01a <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b01a:	2000      	movs	r0, #0
 800b01c:	4770      	bx	lr

0800b01e <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b01e:	4770      	bx	lr

0800b020 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b020:	4770      	bx	lr

0800b022 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b022:	4770      	bx	lr

0800b024 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b024:	2002      	movs	r0, #2
 800b026:	4770      	bx	lr

0800b028 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b028:	2002      	movs	r0, #2
 800b02a:	4770      	bx	lr

0800b02c <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b02c:	2002      	movs	r0, #2
 800b02e:	4770      	bx	lr

0800b030 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b030:	4770      	bx	lr

0800b032 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b032:	2000      	movs	r0, #0
 800b034:	4770      	bx	lr

0800b036 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b036:	4770      	bx	lr

0800b038 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b038:	4770      	bx	lr

0800b03a <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b03a:	2000      	movs	r0, #0
 800b03c:	4770      	bx	lr

0800b03e <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b03e:	2000      	movs	r0, #0
 800b040:	4770      	bx	lr

0800b042 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b042:	4770      	bx	lr

0800b044 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b044:	4770      	bx	lr

0800b046 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b046:	2300      	movs	r3, #0
 800b048:	2b0f      	cmp	r3, #15
 800b04a:	d804      	bhi.n	800b056 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800b04c:	5cc2      	ldrb	r2, [r0, r3]
 800b04e:	b922      	cbnz	r2, 800b05a <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b050:	3301      	adds	r3, #1
 800b052:	b29b      	uxth	r3, r3
 800b054:	e7f8      	b.n	800b048 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800b056:	2001      	movs	r0, #1
 800b058:	4770      	bx	lr
            return false;
 800b05a:	2000      	movs	r0, #0
}
 800b05c:	4770      	bx	lr
	...

0800b060 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800b060:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800b062:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800b064:	0123      	lsls	r3, r4, #4
 800b066:	3308      	adds	r3, #8
 800b068:	4d06      	ldr	r5, [pc, #24]	; (800b084 <MallocNewMacCommandSlot+0x24>)
 800b06a:	441d      	add	r5, r3
 800b06c:	4628      	mov	r0, r5
 800b06e:	f7ff ffea 	bl	800b046 <IsSlotFree>
 800b072:	b920      	cbnz	r0, 800b07e <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800b074:	3401      	adds	r4, #1
 800b076:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800b078:	2c0f      	cmp	r4, #15
 800b07a:	d1f3      	bne.n	800b064 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800b07c:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800b07e:	4628      	mov	r0, r5
 800b080:	bd38      	pop	{r3, r4, r5, pc}
 800b082:	bf00      	nop
 800b084:	20000b3c 	.word	0x20000b3c

0800b088 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800b088:	b120      	cbz	r0, 800b094 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800b08a:	2200      	movs	r2, #0
 800b08c:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800b08e:	6042      	str	r2, [r0, #4]

    return true;
 800b090:	2001      	movs	r0, #1
 800b092:	4770      	bx	lr
        return false;
 800b094:	2000      	movs	r0, #0
}
 800b096:	4770      	bx	lr

0800b098 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b098:	4603      	mov	r3, r0
 800b09a:	b160      	cbz	r0, 800b0b6 <LinkedListAdd+0x1e>
 800b09c:	b169      	cbz	r1, 800b0ba <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800b09e:	6802      	ldr	r2, [r0, #0]
 800b0a0:	b13a      	cbz	r2, 800b0b2 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800b0a2:	685a      	ldr	r2, [r3, #4]
 800b0a4:	b102      	cbz	r2, 800b0a8 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800b0a6:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800b0ac:	6059      	str	r1, [r3, #4]

    return true;
 800b0ae:	2001      	movs	r0, #1
 800b0b0:	4770      	bx	lr
        list->First = element;
 800b0b2:	6001      	str	r1, [r0, #0]
 800b0b4:	e7f5      	b.n	800b0a2 <LinkedListAdd+0xa>
        return false;
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	4770      	bx	lr
 800b0ba:	2000      	movs	r0, #0
}
 800b0bc:	4770      	bx	lr

0800b0be <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b0be:	b160      	cbz	r0, 800b0da <LinkedListGetPrevious+0x1c>
 800b0c0:	b161      	cbz	r1, 800b0dc <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800b0c2:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800b0c4:	4281      	cmp	r1, r0
 800b0c6:	d102      	bne.n	800b0ce <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800b0c8:	2000      	movs	r0, #0
    }

    return curElement;
}
 800b0ca:	4770      	bx	lr
            curElement = curElement->Next;
 800b0cc:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d0fb      	beq.n	800b0ca <LinkedListGetPrevious+0xc>
 800b0d2:	6803      	ldr	r3, [r0, #0]
 800b0d4:	428b      	cmp	r3, r1
 800b0d6:	d1f9      	bne.n	800b0cc <LinkedListGetPrevious+0xe>
 800b0d8:	4770      	bx	lr
 800b0da:	4770      	bx	lr
        return NULL;
 800b0dc:	4608      	mov	r0, r1
 800b0de:	4770      	bx	lr

0800b0e0 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b0e0:	b1b8      	cbz	r0, 800b112 <LinkedListRemove+0x32>
{
 800b0e2:	b538      	push	{r3, r4, r5, lr}
 800b0e4:	460c      	mov	r4, r1
 800b0e6:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800b0e8:	b1a9      	cbz	r1, 800b116 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800b0ea:	f7ff ffe8 	bl	800b0be <LinkedListGetPrevious>

    if( list->First == element )
 800b0ee:	682b      	ldr	r3, [r5, #0]
 800b0f0:	42a3      	cmp	r3, r4
 800b0f2:	d009      	beq.n	800b108 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800b0f4:	686b      	ldr	r3, [r5, #4]
 800b0f6:	42a3      	cmp	r3, r4
 800b0f8:	d009      	beq.n	800b10e <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800b0fa:	b108      	cbz	r0, 800b100 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800b100:	2300      	movs	r3, #0
 800b102:	6023      	str	r3, [r4, #0]

    return true;
 800b104:	2001      	movs	r0, #1
}
 800b106:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800b108:	6823      	ldr	r3, [r4, #0]
 800b10a:	602b      	str	r3, [r5, #0]
 800b10c:	e7f2      	b.n	800b0f4 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800b10e:	6068      	str	r0, [r5, #4]
 800b110:	e7f3      	b.n	800b0fa <LinkedListRemove+0x1a>
        return false;
 800b112:	2000      	movs	r0, #0
}
 800b114:	4770      	bx	lr
        return false;
 800b116:	2000      	movs	r0, #0
 800b118:	e7f5      	b.n	800b106 <LinkedListRemove+0x26>

0800b11a <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800b11a:	2805      	cmp	r0, #5
 800b11c:	d006      	beq.n	800b12c <IsSticky+0x12>
 800b11e:	d307      	bcc.n	800b130 <IsSticky+0x16>
 800b120:	3808      	subs	r0, #8
 800b122:	b2c0      	uxtb	r0, r0
 800b124:	2802      	cmp	r0, #2
 800b126:	d905      	bls.n	800b134 <IsSticky+0x1a>
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800b128:	2000      	movs	r0, #0
 800b12a:	4770      	bx	lr
    switch( cid )
 800b12c:	2001      	movs	r0, #1
 800b12e:	4770      	bx	lr
            return false;
 800b130:	2000      	movs	r0, #0
 800b132:	4770      	bx	lr
    switch( cid )
 800b134:	2001      	movs	r0, #1
    }
}
 800b136:	4770      	bx	lr

0800b138 <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800b138:	2000      	movs	r0, #0
 800b13a:	4770      	bx	lr

0800b13c <FreeMacCommandSlot>:
    if( slot == NULL )
 800b13c:	b130      	cbz	r0, 800b14c <FreeMacCommandSlot+0x10>
{
 800b13e:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b140:	2210      	movs	r2, #16
 800b142:	2100      	movs	r1, #0
 800b144:	f004 f84b 	bl	800f1de <memset1>
    return true;
 800b148:	2001      	movs	r0, #1
}
 800b14a:	bd08      	pop	{r3, pc}
        return false;
 800b14c:	2000      	movs	r0, #0
}
 800b14e:	4770      	bx	lr

0800b150 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800b150:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800b152:	4c05      	ldr	r4, [pc, #20]	; (800b168 <LoRaMacCommandsInit+0x18>)
 800b154:	22fc      	movs	r2, #252	; 0xfc
 800b156:	2100      	movs	r1, #0
 800b158:	4620      	mov	r0, r4
 800b15a:	f004 f840 	bl	800f1de <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800b15e:	4620      	mov	r0, r4
 800b160:	f7ff ff92 	bl	800b088 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b164:	2000      	movs	r0, #0
 800b166:	bd10      	pop	{r4, pc}
 800b168:	20000b3c 	.word	0x20000b3c

0800b16c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800b16c:	b321      	cbz	r1, 800b1b8 <LoRaMacCommandsAddCmd+0x4c>
{
 800b16e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b170:	4605      	mov	r5, r0
 800b172:	4614      	mov	r4, r2
 800b174:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800b176:	f7ff ff73 	bl	800b060 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800b17a:	4606      	mov	r6, r0
 800b17c:	b1f0      	cbz	r0, 800b1bc <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800b17e:	4601      	mov	r1, r0
 800b180:	4810      	ldr	r0, [pc, #64]	; (800b1c4 <LoRaMacCommandsAddCmd+0x58>)
 800b182:	f7ff ff89 	bl	800b098 <LinkedListAdd>
 800b186:	b1d8      	cbz	r0, 800b1c0 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800b188:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800b18a:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b18c:	b2a2      	uxth	r2, r4
 800b18e:	4639      	mov	r1, r7
 800b190:	1d70      	adds	r0, r6, #5
 800b192:	f004 f80c 	bl	800f1ae <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800b196:	4628      	mov	r0, r5
 800b198:	f7ff ffbf 	bl	800b11a <IsSticky>
 800b19c:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f7ff ffca 	bl	800b138 <IsConfirmationRequired>
 800b1a4:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b1a6:	4b07      	ldr	r3, [pc, #28]	; (800b1c4 <LoRaMacCommandsAddCmd+0x58>)
 800b1a8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800b1ac:	4414      	add	r4, r2
 800b1ae:	3401      	adds	r4, #1
 800b1b0:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800b1b4:	2000      	movs	r0, #0
}
 800b1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b1b8:	2001      	movs	r0, #1
}
 800b1ba:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800b1bc:	2002      	movs	r0, #2
 800b1be:	e7fa      	b.n	800b1b6 <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800b1c0:	2005      	movs	r0, #5
 800b1c2:	e7f8      	b.n	800b1b6 <LoRaMacCommandsAddCmd+0x4a>
 800b1c4:	20000b3c 	.word	0x20000b3c

0800b1c8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800b1c8:	b1a0      	cbz	r0, 800b1f4 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800b1ca:	b510      	push	{r4, lr}
 800b1cc:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	480b      	ldr	r0, [pc, #44]	; (800b200 <LoRaMacCommandsRemoveCmd+0x38>)
 800b1d2:	f7ff ff85 	bl	800b0e0 <LinkedListRemove>
 800b1d6:	b178      	cbz	r0, 800b1f8 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b1d8:	68a1      	ldr	r1, [r4, #8]
 800b1da:	4a09      	ldr	r2, [pc, #36]	; (800b200 <LoRaMacCommandsRemoveCmd+0x38>)
 800b1dc:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800b1e0:	1a5b      	subs	r3, r3, r1
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f7ff ffa7 	bl	800b13c <FreeMacCommandSlot>
 800b1ee:	b128      	cbz	r0, 800b1fc <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b1f0:	2000      	movs	r0, #0
}
 800b1f2:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b1f4:	2001      	movs	r0, #1
}
 800b1f6:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800b1f8:	2003      	movs	r0, #3
 800b1fa:	e7fa      	b.n	800b1f2 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800b1fc:	2005      	movs	r0, #5
 800b1fe:	e7f8      	b.n	800b1f2 <LoRaMacCommandsRemoveCmd+0x2a>
 800b200:	20000b3c 	.word	0x20000b3c

0800b204 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b204:	4b06      	ldr	r3, [pc, #24]	; (800b220 <LoRaMacCommandsGetCmd+0x1c>)
 800b206:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800b208:	e000      	b.n	800b20c <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800b20a:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800b20c:	b113      	cbz	r3, 800b214 <LoRaMacCommandsGetCmd+0x10>
 800b20e:	791a      	ldrb	r2, [r3, #4]
 800b210:	4282      	cmp	r2, r0
 800b212:	d1fa      	bne.n	800b20a <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800b214:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800b216:	b10b      	cbz	r3, 800b21c <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800b218:	2000      	movs	r0, #0
 800b21a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800b21c:	2003      	movs	r0, #3
}
 800b21e:	4770      	bx	lr
 800b220:	20000b3c 	.word	0x20000b3c

0800b224 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b224:	4b0a      	ldr	r3, [pc, #40]	; (800b250 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800b226:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b228:	b120      	cbz	r0, 800b234 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800b22a:	7b03      	ldrb	r3, [r0, #12]
 800b22c:	b11b      	cbz	r3, 800b236 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800b22e:	6800      	ldr	r0, [r0, #0]
 800b230:	e7fa      	b.n	800b228 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b232:	bd10      	pop	{r4, pc}
 800b234:	4770      	bx	lr
{
 800b236:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800b238:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800b23a:	f7ff ffc5 	bl	800b1c8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800b23e:	4620      	mov	r0, r4
    while( curElement != NULL )
 800b240:	2800      	cmp	r0, #0
 800b242:	d0f6      	beq.n	800b232 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800b244:	7b03      	ldrb	r3, [r0, #12]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d0f6      	beq.n	800b238 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800b24a:	6800      	ldr	r0, [r0, #0]
 800b24c:	e7f8      	b.n	800b240 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800b24e:	bf00      	nop
 800b250:	20000b3c 	.word	0x20000b3c

0800b254 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800b254:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b256:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800b258:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b25a:	e000      	b.n	800b25e <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800b25c:	4634      	mov	r4, r6
    while( curElement != NULL )
 800b25e:	b17c      	cbz	r4, 800b280 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800b260:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800b262:	7925      	ldrb	r5, [r4, #4]
 800b264:	4628      	mov	r0, r5
 800b266:	f7ff ff58 	bl	800b11a <IsSticky>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	d0f6      	beq.n	800b25c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800b26e:	4628      	mov	r0, r5
 800b270:	f7ff ff62 	bl	800b138 <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800b274:	2800      	cmp	r0, #0
 800b276:	d1f1      	bne.n	800b25c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800b278:	4620      	mov	r0, r4
 800b27a:	f7ff ffa5 	bl	800b1c8 <LoRaMacCommandsRemoveCmd>
 800b27e:	e7ed      	b.n	800b25c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b280:	2000      	movs	r0, #0
 800b282:	bd70      	pop	{r4, r5, r6, pc}
 800b284:	20000b3c 	.word	0x20000b3c

0800b288 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800b288:	b128      	cbz	r0, 800b296 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800b28a:	4a04      	ldr	r2, [pc, #16]	; (800b29c <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800b28c:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800b290:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800b292:	2000      	movs	r0, #0
 800b294:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b296:	2001      	movs	r0, #1
}
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	20000b3c 	.word	0x20000b3c

0800b2a0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800b2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800b2a4:	4b16      	ldr	r3, [pc, #88]	; (800b300 <LoRaMacCommandsSerializeCmds+0x60>)
 800b2a6:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800b2a8:	b32a      	cbz	r2, 800b2f6 <LoRaMacCommandsSerializeCmds+0x56>
 800b2aa:	4607      	mov	r7, r0
 800b2ac:	4688      	mov	r8, r1
 800b2ae:	4616      	mov	r6, r2
 800b2b0:	b319      	cbz	r1, 800b2fa <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800b2b2:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800b2b4:	b194      	cbz	r4, 800b2dc <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800b2b6:	1a7a      	subs	r2, r7, r1
 800b2b8:	68a3      	ldr	r3, [r4, #8]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d30d      	bcc.n	800b2dc <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800b2c0:	1c4d      	adds	r5, r1, #1
 800b2c2:	b2ed      	uxtb	r5, r5
 800b2c4:	7923      	ldrb	r3, [r4, #4]
 800b2c6:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800b2c8:	8922      	ldrh	r2, [r4, #8]
 800b2ca:	1d61      	adds	r1, r4, #5
 800b2cc:	1970      	adds	r0, r6, r5
 800b2ce:	f003 ff6e 	bl	800f1ae <memcpy1>
            itr += curElement->PayloadSize;
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	441d      	add	r5, r3
 800b2d6:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800b2d8:	6824      	ldr	r4, [r4, #0]
 800b2da:	e7eb      	b.n	800b2b4 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800b2dc:	b12c      	cbz	r4, 800b2ea <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800b2de:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f7ff ff71 	bl	800b1c8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800b2e6:	462c      	mov	r4, r5
 800b2e8:	e7f8      	b.n	800b2dc <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	f7ff ffcc 	bl	800b288 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800b2f0:	2000      	movs	r0, #0
}
 800b2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b2f6:	2001      	movs	r0, #1
 800b2f8:	e7fb      	b.n	800b2f2 <LoRaMacCommandsSerializeCmds+0x52>
 800b2fa:	2001      	movs	r0, #1
 800b2fc:	e7f9      	b.n	800b2f2 <LoRaMacCommandsSerializeCmds+0x52>
 800b2fe:	bf00      	nop
 800b300:	20000b3c 	.word	0x20000b3c

0800b304 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800b304:	1e83      	subs	r3, r0, #2
 800b306:	2b11      	cmp	r3, #17
 800b308:	d80a      	bhi.n	800b320 <LoRaMacCommandsGetCmdSize+0x1c>
 800b30a:	e8df f003 	tbb	[pc, r3]
 800b30e:	0b23      	.short	0x0b23
 800b310:	110f240d 	.word	0x110f240d
 800b314:	09171513 	.word	0x09171513
 800b318:	09091909 	.word	0x09091909
 800b31c:	211f1d1b 	.word	0x211f1d1b
 800b320:	2000      	movs	r0, #0
 800b322:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800b324:	2005      	movs	r0, #5
            break;
 800b326:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800b328:	2002      	movs	r0, #2
            break;
 800b32a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800b32c:	2001      	movs	r0, #1
            break;
 800b32e:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800b330:	2006      	movs	r0, #6
            break;
 800b332:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800b334:	2002      	movs	r0, #2
            break;
 800b336:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800b338:	2002      	movs	r0, #2
            break;
 800b33a:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800b33c:	2005      	movs	r0, #5
            break;
 800b33e:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800b340:	2006      	movs	r0, #6
            break;
 800b342:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800b344:	2001      	movs	r0, #1
            break;
 800b346:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800b348:	2005      	movs	r0, #5
            break;
 800b34a:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800b34c:	2004      	movs	r0, #4
            break;
 800b34e:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800b350:	2004      	movs	r0, #4
            break;
 800b352:	4770      	bx	lr
            cidSize = 3;
 800b354:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800b356:	4770      	bx	lr

0800b358 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b358:	4b03      	ldr	r3, [pc, #12]	; (800b368 <IncreaseBufferPointer+0x10>)
 800b35a:	4298      	cmp	r0, r3
 800b35c:	d001      	beq.n	800b362 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800b35e:	3004      	adds	r0, #4
 800b360:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b362:	4802      	ldr	r0, [pc, #8]	; (800b36c <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	20000c54 	.word	0x20000c54
 800b36c:	20000c44 	.word	0x20000c44

0800b370 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800b370:	b108      	cbz	r0, 800b376 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800b372:	2000      	movs	r0, #0
 800b374:	4770      	bx	lr
        return true;
 800b376:	2001      	movs	r0, #1
}
 800b378:	4770      	bx	lr

0800b37a <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800b37a:	2804      	cmp	r0, #4
 800b37c:	d801      	bhi.n	800b382 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800b37e:	2000      	movs	r0, #0
 800b380:	4770      	bx	lr
        return true;
 800b382:	2001      	movs	r0, #1
}
 800b384:	4770      	bx	lr
	...

0800b388 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38a:	4606      	mov	r6, r0
 800b38c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b38e:	4b0d      	ldr	r3, [pc, #52]	; (800b3c4 <GetElement+0x3c>)
 800b390:	f893 7020 	ldrb.w	r7, [r3, #32]
 800b394:	4638      	mov	r0, r7
 800b396:	f7ff ffeb 	bl	800b370 <IsListEmpty>
 800b39a:	b970      	cbnz	r0, 800b3ba <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b39c:	2500      	movs	r5, #0
 800b39e:	42af      	cmp	r7, r5
 800b3a0:	d909      	bls.n	800b3b6 <GetElement+0x2e>
    {
        if( element->Request == request )
 800b3a2:	7823      	ldrb	r3, [r4, #0]
 800b3a4:	42b3      	cmp	r3, r6
 800b3a6:	d00a      	beq.n	800b3be <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f7ff ffd5 	bl	800b358 <IncreaseBufferPointer>
 800b3ae:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b3b0:	3501      	adds	r5, #1
 800b3b2:	b2ed      	uxtb	r5, r5
 800b3b4:	e7f3      	b.n	800b39e <GetElement+0x16>
    }

    return NULL;
 800b3b6:	2000      	movs	r0, #0
}
 800b3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	e7fc      	b.n	800b3b8 <GetElement+0x30>
            return element;
 800b3be:	4620      	mov	r0, r4
 800b3c0:	e7fa      	b.n	800b3b8 <GetElement+0x30>
 800b3c2:	bf00      	nop
 800b3c4:	20000c38 	.word	0x20000c38

0800b3c8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800b3c8:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800b3ca:	4c08      	ldr	r4, [pc, #32]	; (800b3ec <LoRaMacConfirmQueueInit+0x24>)
 800b3cc:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b3d4:	f104 000c 	add.w	r0, r4, #12
 800b3d8:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b3da:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800b3dc:	2214      	movs	r2, #20
 800b3de:	21ff      	movs	r1, #255	; 0xff
 800b3e0:	f003 fefd 	bl	800f1de <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800b3ea:	bd10      	pop	{r4, pc}
 800b3ec:	20000c38 	.word	0x20000c38

0800b3f0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800b3f0:	b538      	push	{r3, r4, r5, lr}
 800b3f2:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b3f4:	4b0f      	ldr	r3, [pc, #60]	; (800b434 <LoRaMacConfirmQueueAdd+0x44>)
 800b3f6:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b3fa:	f7ff ffbe 	bl	800b37a <IsListFull>
 800b3fe:	b9b8      	cbnz	r0, 800b430 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800b400:	4c0c      	ldr	r4, [pc, #48]	; (800b434 <LoRaMacConfirmQueueAdd+0x44>)
 800b402:	68a3      	ldr	r3, [r4, #8]
 800b404:	782a      	ldrb	r2, [r5, #0]
 800b406:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800b408:	68a3      	ldr	r3, [r4, #8]
 800b40a:	786a      	ldrb	r2, [r5, #1]
 800b40c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800b40e:	68a3      	ldr	r3, [r4, #8]
 800b410:	78ea      	ldrb	r2, [r5, #3]
 800b412:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800b414:	68a3      	ldr	r3, [r4, #8]
 800b416:	2200      	movs	r2, #0
 800b418:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800b41a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b41e:	3301      	adds	r3, #1
 800b420:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800b424:	68a0      	ldr	r0, [r4, #8]
 800b426:	f7ff ff97 	bl	800b358 <IncreaseBufferPointer>
 800b42a:	60a0      	str	r0, [r4, #8]

    return true;
 800b42c:	2001      	movs	r0, #1
}
 800b42e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b430:	2000      	movs	r0, #0
 800b432:	e7fc      	b.n	800b42e <LoRaMacConfirmQueueAdd+0x3e>
 800b434:	20000c38 	.word	0x20000c38

0800b438 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800b438:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b43a:	4b09      	ldr	r3, [pc, #36]	; (800b460 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b43c:	f893 4020 	ldrb.w	r4, [r3, #32]
 800b440:	4620      	mov	r0, r4
 800b442:	f7ff ff95 	bl	800b370 <IsListEmpty>
 800b446:	b948      	cbnz	r0, 800b45c <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800b448:	4d05      	ldr	r5, [pc, #20]	; (800b460 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b44a:	3c01      	subs	r4, #1
 800b44c:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800b450:	6868      	ldr	r0, [r5, #4]
 800b452:	f7ff ff81 	bl	800b358 <IncreaseBufferPointer>
 800b456:	6068      	str	r0, [r5, #4]

    return true;
 800b458:	2001      	movs	r0, #1
}
 800b45a:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b45c:	2000      	movs	r0, #0
 800b45e:	e7fc      	b.n	800b45a <LoRaMacConfirmQueueRemoveFirst+0x22>
 800b460:	20000c38 	.word	0x20000c38

0800b464 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800b464:	b538      	push	{r3, r4, r5, lr}
 800b466:	4605      	mov	r5, r0
 800b468:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b46a:	4b08      	ldr	r3, [pc, #32]	; (800b48c <LoRaMacConfirmQueueSetStatus+0x28>)
 800b46c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b470:	f7ff ff7e 	bl	800b370 <IsListEmpty>
 800b474:	b948      	cbnz	r0, 800b48a <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b476:	4b05      	ldr	r3, [pc, #20]	; (800b48c <LoRaMacConfirmQueueSetStatus+0x28>)
 800b478:	689a      	ldr	r2, [r3, #8]
 800b47a:	6859      	ldr	r1, [r3, #4]
 800b47c:	4620      	mov	r0, r4
 800b47e:	f7ff ff83 	bl	800b388 <GetElement>
        if( element != NULL )
 800b482:	b110      	cbz	r0, 800b48a <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800b484:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800b486:	2201      	movs	r2, #1
 800b488:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800b48a:	bd38      	pop	{r3, r4, r5, pc}
 800b48c:	20000c38 	.word	0x20000c38

0800b490 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800b490:	b510      	push	{r4, lr}
 800b492:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b494:	4b09      	ldr	r3, [pc, #36]	; (800b4bc <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b496:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b49a:	f7ff ff69 	bl	800b370 <IsListEmpty>
 800b49e:	b940      	cbnz	r0, 800b4b2 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b4a0:	4b06      	ldr	r3, [pc, #24]	; (800b4bc <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b4a2:	689a      	ldr	r2, [r3, #8]
 800b4a4:	6859      	ldr	r1, [r3, #4]
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f7ff ff6e 	bl	800b388 <GetElement>
        if( element != NULL )
 800b4ac:	b118      	cbz	r0, 800b4b6 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800b4ae:	7840      	ldrb	r0, [r0, #1]
 800b4b0:	e000      	b.n	800b4b4 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b4b2:	2001      	movs	r0, #1
}
 800b4b4:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b4b6:	2001      	movs	r0, #1
 800b4b8:	e7fc      	b.n	800b4b4 <LoRaMacConfirmQueueGetStatus+0x24>
 800b4ba:	bf00      	nop
 800b4bc:	20000c38 	.word	0x20000c38

0800b4c0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800b4c4:	4b0c      	ldr	r3, [pc, #48]	; (800b4f8 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b4c6:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800b4c8:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b4cc:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b4d0:	f7ff ff4e 	bl	800b370 <IsListEmpty>
 800b4d4:	b150      	cbz	r0, 800b4ec <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800b4d6:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f7ff ff3b 	bl	800b358 <IncreaseBufferPointer>
 800b4e2:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800b4e4:	4b04      	ldr	r3, [pc, #16]	; (800b4f8 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	4283      	cmp	r3, r0
 800b4ea:	d0f4      	beq.n	800b4d6 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800b4ec:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800b4ee:	78e3      	ldrb	r3, [r4, #3]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1f3      	bne.n	800b4dc <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800b4f4:	e7f0      	b.n	800b4d8 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800b4f6:	bf00      	nop
 800b4f8:	20000c38 	.word	0x20000c38

0800b4fc <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800b4fc:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800b4fe:	4b04      	ldr	r3, [pc, #16]	; (800b510 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800b500:	689a      	ldr	r2, [r3, #8]
 800b502:	6859      	ldr	r1, [r3, #4]
 800b504:	f7ff ff40 	bl	800b388 <GetElement>
 800b508:	b100      	cbz	r0, 800b50c <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800b50a:	2001      	movs	r0, #1
    }
    return false;
}
 800b50c:	bd08      	pop	{r3, pc}
 800b50e:	bf00      	nop
 800b510:	20000c38 	.word	0x20000c38

0800b514 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800b514:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b516:	b083      	sub	sp, #12
 800b518:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800b51a:	4b19      	ldr	r3, [pc, #100]	; (800b580 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800b51c:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800b520:	2204      	movs	r2, #4
 800b522:	2100      	movs	r1, #0
 800b524:	eb0d 0002 	add.w	r0, sp, r2
 800b528:	f003 fe59 	bl	800f1de <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800b52c:	2400      	movs	r4, #0
 800b52e:	e00d      	b.n	800b54c <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800b530:	781a      	ldrb	r2, [r3, #0]
 800b532:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800b536:	785a      	ldrb	r2, [r3, #1]
 800b538:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800b53c:	78db      	ldrb	r3, [r3, #3]
 800b53e:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800b542:	f7ff ff79 	bl	800b438 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800b546:	b1a5      	cbz	r5, 800b572 <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800b548:	3401      	adds	r4, #1
 800b54a:	b2e4      	uxtb	r4, r4
 800b54c:	42bc      	cmp	r4, r7
 800b54e:	d214      	bcs.n	800b57a <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800b550:	4b0b      	ldr	r3, [pc, #44]	; (800b580 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	7812      	ldrb	r2, [r2, #0]
 800b556:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800b558:	685a      	ldr	r2, [r3, #4]
 800b55a:	7852      	ldrb	r2, [r2, #1]
 800b55c:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800b562:	2d00      	cmp	r5, #0
 800b564:	d0e4      	beq.n	800b530 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800b566:	4b06      	ldr	r3, [pc, #24]	; (800b580 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	4630      	mov	r0, r6
 800b56e:	4798      	blx	r3
 800b570:	e7e7      	b.n	800b542 <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800b572:	a801      	add	r0, sp, #4
 800b574:	f7ff ff3c 	bl	800b3f0 <LoRaMacConfirmQueueAdd>
 800b578:	e7e6      	b.n	800b548 <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800b57a:	b003      	add	sp, #12
 800b57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b57e:	bf00      	nop
 800b580:	20000c38 	.word	0x20000c38

0800b584 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800b584:	4b01      	ldr	r3, [pc, #4]	; (800b58c <LoRaMacConfirmQueueGetCnt+0x8>)
 800b586:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b58a:	4770      	bx	lr
 800b58c:	20000c38 	.word	0x20000c38

0800b590 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800b590:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b592:	4b03      	ldr	r3, [pc, #12]	; (800b5a0 <LoRaMacConfirmQueueIsFull+0x10>)
 800b594:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b598:	f7ff feef 	bl	800b37a <IsListFull>
    }
    else
    {
        return false;
    }
}
 800b59c:	bd08      	pop	{r3, pc}
 800b59e:	bf00      	nop
 800b5a0:	20000c38 	.word	0x20000c38

0800b5a4 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800b5a4:	b410      	push	{r4}
 800b5a6:	9c01      	ldr	r4, [sp, #4]
 800b5a8:	9902      	ldr	r1, [sp, #8]
 800b5aa:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800b5ac:	b1da      	cbz	r2, 800b5e6 <PrepareB0+0x42>
 800b5ae:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800b5b0:	2049      	movs	r0, #73	; 0x49
 800b5b2:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800b5b8:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800b5ba:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800b5bc:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800b5be:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800b5c0:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800b5c2:	0a23      	lsrs	r3, r4, #8
 800b5c4:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800b5c6:	0c23      	lsrs	r3, r4, #16
 800b5c8:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800b5ca:	0e24      	lsrs	r4, r4, #24
 800b5cc:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800b5ce:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800b5d0:	0a0b      	lsrs	r3, r1, #8
 800b5d2:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800b5d4:	0c0b      	lsrs	r3, r1, #16
 800b5d6:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800b5d8:	0e09      	lsrs	r1, r1, #24
 800b5da:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800b5dc:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800b5de:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b5e2:	bc10      	pop	{r4}
 800b5e4:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b5e6:	200a      	movs	r0, #10
 800b5e8:	e7fb      	b.n	800b5e2 <PrepareB0+0x3e>
	...

0800b5ec <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d80e      	bhi.n	800b610 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800b5f2:	469c      	mov	ip, r3
 800b5f4:	4a07      	ldr	r2, [pc, #28]	; (800b614 <GetKeyAddrItem+0x28>)
 800b5f6:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800b5fa:	4282      	cmp	r2, r0
 800b5fc:	d002      	beq.n	800b604 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b5fe:	3301      	adds	r3, #1
 800b600:	b2db      	uxtb	r3, r3
 800b602:	e7f4      	b.n	800b5ee <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800b604:	4b03      	ldr	r3, [pc, #12]	; (800b614 <GetKeyAddrItem+0x28>)
 800b606:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800b60a:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800b60c:	2000      	movs	r0, #0
 800b60e:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800b610:	200c      	movs	r0, #12
}
 800b612:	4770      	bx	lr
 800b614:	20000100 	.word	0x20000100

0800b618 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800b618:	b1f1      	cbz	r1, 800b658 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800b61a:	3801      	subs	r0, #1
 800b61c:	2803      	cmp	r0, #3
 800b61e:	d81d      	bhi.n	800b65c <GetLastFcntDown+0x44>
 800b620:	e8df f000 	tbb	[pc, r0]
 800b624:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800b628:	4a0d      	ldr	r2, [pc, #52]	; (800b660 <GetLastFcntDown+0x48>)
 800b62a:	6812      	ldr	r2, [r2, #0]
 800b62c:	6912      	ldr	r2, [r2, #16]
 800b62e:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800b630:	2000      	movs	r0, #0
            break;
 800b632:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800b634:	4a0a      	ldr	r2, [pc, #40]	; (800b660 <GetLastFcntDown+0x48>)
 800b636:	6812      	ldr	r2, [r2, #0]
 800b638:	6952      	ldr	r2, [r2, #20]
 800b63a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800b63c:	2000      	movs	r0, #0
            break;
 800b63e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800b640:	4a07      	ldr	r2, [pc, #28]	; (800b660 <GetLastFcntDown+0x48>)
 800b642:	6812      	ldr	r2, [r2, #0]
 800b644:	6992      	ldr	r2, [r2, #24]
 800b646:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800b648:	2000      	movs	r0, #0
            break;
 800b64a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800b64c:	4a04      	ldr	r2, [pc, #16]	; (800b660 <GetLastFcntDown+0x48>)
 800b64e:	6812      	ldr	r2, [r2, #0]
 800b650:	69d2      	ldr	r2, [r2, #28]
 800b652:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800b654:	2000      	movs	r0, #0
            break;
 800b656:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b658:	200a      	movs	r0, #10
 800b65a:	4770      	bx	lr
    switch( fCntID )
 800b65c:	2005      	movs	r0, #5
}
 800b65e:	4770      	bx	lr
 800b660:	20000c5c 	.word	0x20000c5c

0800b664 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800b664:	b510      	push	{r4, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800b66e:	a901      	add	r1, sp, #4
 800b670:	f7ff ffd2 	bl	800b618 <GetLastFcntDown>
 800b674:	b948      	cbnz	r0, 800b68a <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800b676:	9b01      	ldr	r3, [sp, #4]
 800b678:	42a3      	cmp	r3, r4
 800b67a:	d309      	bcc.n	800b690 <CheckFCntDown+0x2c>
 800b67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b680:	d001      	beq.n	800b686 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800b682:	2000      	movs	r0, #0
 800b684:	e002      	b.n	800b68c <CheckFCntDown+0x28>
        return true;
 800b686:	2001      	movs	r0, #1
 800b688:	e000      	b.n	800b68c <CheckFCntDown+0x28>
        return false;
 800b68a:	2000      	movs	r0, #0
    }
}
 800b68c:	b002      	add	sp, #8
 800b68e:	bd10      	pop	{r4, pc}
        return true;
 800b690:	2001      	movs	r0, #1
 800b692:	e7fb      	b.n	800b68c <CheckFCntDown+0x28>

0800b694 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800b694:	3801      	subs	r0, #1
 800b696:	2803      	cmp	r0, #3
 800b698:	d815      	bhi.n	800b6c6 <UpdateFCntDown+0x32>
 800b69a:	e8df f000 	tbb	[pc, r0]
 800b69e:	0702      	.short	0x0702
 800b6a0:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800b6a2:	4b09      	ldr	r3, [pc, #36]	; (800b6c8 <UpdateFCntDown+0x34>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800b6a8:	6219      	str	r1, [r3, #32]
            break;
 800b6aa:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800b6ac:	4b06      	ldr	r3, [pc, #24]	; (800b6c8 <UpdateFCntDown+0x34>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800b6b2:	6219      	str	r1, [r3, #32]
            break;
 800b6b4:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800b6b6:	4b04      	ldr	r3, [pc, #16]	; (800b6c8 <UpdateFCntDown+0x34>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800b6bc:	6219      	str	r1, [r3, #32]
            break;
 800b6be:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800b6c0:	4b01      	ldr	r3, [pc, #4]	; (800b6c8 <UpdateFCntDown+0x34>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800b6c6:	4770      	bx	lr
 800b6c8:	20000c5c 	.word	0x20000c5c

0800b6cc <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800b6cc:	4b0a      	ldr	r3, [pc, #40]	; (800b6f8 <ResetFCnts+0x2c>)
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800b6d4:	f04f 31ff 	mov.w	r1, #4294967295
 800b6d8:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800b6da:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800b6dc:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800b6de:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	dd00      	ble.n	800b6e6 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800b6e4:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800b6e6:	1d99      	adds	r1, r3, #6
 800b6e8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f0:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	e7f4      	b.n	800b6e0 <ResetFCnts+0x14>
 800b6f6:	bf00      	nop
 800b6f8:	20000c5c 	.word	0x20000c5c

0800b6fc <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800b6fc:	4b03      	ldr	r3, [pc, #12]	; (800b70c <IsJoinNonce10xOk+0x10>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800b702:	4283      	cmp	r3, r0
 800b704:	bf2c      	ite	cs
 800b706:	2000      	movcs	r0, #0
 800b708:	2001      	movcc	r0, #1
 800b70a:	4770      	bx	lr
 800b70c:	20000c5c 	.word	0x20000c5c

0800b710 <ComputeCmacB0>:
{
 800b710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b714:	b088      	sub	sp, #32
 800b716:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800b718:	b1f0      	cbz	r0, 800b758 <ComputeCmacB0+0x48>
 800b71a:	460c      	mov	r4, r1
 800b71c:	4615      	mov	r5, r2
 800b71e:	461a      	mov	r2, r3
 800b720:	4680      	mov	r8, r0
 800b722:	b1de      	cbz	r6, 800b75c <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b724:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b728:	d81a      	bhi.n	800b760 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800b72a:	af04      	add	r7, sp, #16
 800b72c:	9702      	str	r7, [sp, #8]
 800b72e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b730:	9301      	str	r3, [sp, #4]
 800b732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b734:	9300      	str	r3, [sp, #0]
 800b736:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800b73a:	4629      	mov	r1, r5
 800b73c:	4620      	mov	r0, r4
 800b73e:	f7ff ff31 	bl	800b5a4 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800b742:	9600      	str	r6, [sp, #0]
 800b744:	462b      	mov	r3, r5
 800b746:	4622      	mov	r2, r4
 800b748:	4641      	mov	r1, r8
 800b74a:	4638      	mov	r0, r7
 800b74c:	f003 fadc 	bl	800ed08 <SecureElementComputeAesCmac>
 800b750:	b940      	cbnz	r0, 800b764 <ComputeCmacB0+0x54>
}
 800b752:	b008      	add	sp, #32
 800b754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b758:	200a      	movs	r0, #10
 800b75a:	e7fa      	b.n	800b752 <ComputeCmacB0+0x42>
 800b75c:	200a      	movs	r0, #10
 800b75e:	e7f8      	b.n	800b752 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800b760:	200e      	movs	r0, #14
 800b762:	e7f6      	b.n	800b752 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b764:	200f      	movs	r0, #15
 800b766:	e7f4      	b.n	800b752 <ComputeCmacB0+0x42>

0800b768 <DeriveSessionKey10x>:
{
 800b768:	b510      	push	{r4, lr}
 800b76a:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800b76c:	2400      	movs	r4, #0
 800b76e:	9400      	str	r4, [sp, #0]
 800b770:	9401      	str	r4, [sp, #4]
 800b772:	9402      	str	r4, [sp, #8]
 800b774:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800b776:	2808      	cmp	r0, #8
 800b778:	d003      	beq.n	800b782 <DeriveSessionKey10x+0x1a>
 800b77a:	2809      	cmp	r0, #9
 800b77c:	d025      	beq.n	800b7ca <DeriveSessionKey10x+0x62>
 800b77e:	200b      	movs	r0, #11
 800b780:	e021      	b.n	800b7c6 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800b782:	2401      	movs	r4, #1
 800b784:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800b788:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800b78c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b790:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800b794:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800b798:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800b79c:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800b7a0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b7a4:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800b7a8:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800b7ac:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800b7b0:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800b7b4:	0a1b      	lsrs	r3, r3, #8
 800b7b6:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	2101      	movs	r1, #1
 800b7be:	4668      	mov	r0, sp
 800b7c0:	f003 fb40 	bl	800ee44 <SecureElementDeriveAndStoreKey>
 800b7c4:	b928      	cbnz	r0, 800b7d2 <DeriveSessionKey10x+0x6a>
}
 800b7c6:	b004      	add	sp, #16
 800b7c8:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800b7ca:	2402      	movs	r4, #2
 800b7cc:	f88d 4000 	strb.w	r4, [sp]
            break;
 800b7d0:	e7da      	b.n	800b788 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b7d2:	200f      	movs	r0, #15
 800b7d4:	e7f7      	b.n	800b7c6 <DeriveSessionKey10x+0x5e>

0800b7d6 <PayloadEncrypt>:
{
 800b7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7da:	b088      	sub	sp, #32
 800b7dc:	4690      	mov	r8, r2
 800b7de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d052      	beq.n	800b88a <PayloadEncrypt+0xb4>
 800b7e4:	460d      	mov	r5, r1
 800b7e6:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800b7e8:	2600      	movs	r6, #0
 800b7ea:	9604      	str	r6, [sp, #16]
 800b7ec:	9605      	str	r6, [sp, #20]
 800b7ee:	9606      	str	r6, [sp, #24]
 800b7f0:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800b7f2:	9600      	str	r6, [sp, #0]
 800b7f4:	9601      	str	r6, [sp, #4]
 800b7f6:	9602      	str	r6, [sp, #8]
 800b7f8:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800b7fa:	2701      	movs	r7, #1
 800b7fc:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800b800:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800b804:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800b808:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800b80c:	0a19      	lsrs	r1, r3, #8
 800b80e:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800b812:	0c19      	lsrs	r1, r3, #16
 800b814:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800b818:	0e1b      	lsrs	r3, r3, #24
 800b81a:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800b81e:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800b822:	0a13      	lsrs	r3, r2, #8
 800b824:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800b828:	0c13      	lsrs	r3, r2, #16
 800b82a:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800b82e:	0e12      	lsrs	r2, r2, #24
 800b830:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800b834:	e014      	b.n	800b860 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800b836:	18f2      	adds	r2, r6, r3
 800b838:	5ca0      	ldrb	r0, [r4, r2]
 800b83a:	f103 0120 	add.w	r1, r3, #32
 800b83e:	4469      	add	r1, sp
 800b840:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800b844:	4048      	eors	r0, r1
 800b846:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800b848:	3301      	adds	r3, #1
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	462a      	mov	r2, r5
 800b84e:	2d10      	cmp	r5, #16
 800b850:	bfa8      	it	ge
 800b852:	2210      	movge	r2, #16
 800b854:	4293      	cmp	r3, r2
 800b856:	dbee      	blt.n	800b836 <PayloadEncrypt+0x60>
        size -= 16;
 800b858:	3d10      	subs	r5, #16
 800b85a:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800b85c:	3610      	adds	r6, #16
 800b85e:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800b860:	2d00      	cmp	r5, #0
 800b862:	dd0e      	ble.n	800b882 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800b864:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800b868:	3701      	adds	r7, #1
 800b86a:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800b86c:	ab04      	add	r3, sp, #16
 800b86e:	4642      	mov	r2, r8
 800b870:	2110      	movs	r1, #16
 800b872:	4668      	mov	r0, sp
 800b874:	f003 fa6d 	bl	800ed52 <SecureElementAesEncrypt>
 800b878:	4603      	mov	r3, r0
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d0e6      	beq.n	800b84c <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b87e:	200f      	movs	r0, #15
 800b880:	e000      	b.n	800b884 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800b882:	2000      	movs	r0, #0
}
 800b884:	b008      	add	sp, #32
 800b886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b88a:	200a      	movs	r0, #10
 800b88c:	e7fa      	b.n	800b884 <PayloadEncrypt+0xae>

0800b88e <VerifyCmacB0>:
    if( msg == 0 )
 800b88e:	b368      	cbz	r0, 800b8ec <VerifyCmacB0+0x5e>
{
 800b890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b894:	b0c8      	sub	sp, #288	; 0x120
 800b896:	460c      	mov	r4, r1
 800b898:	4615      	mov	r5, r2
 800b89a:	461e      	mov	r6, r3
 800b89c:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b89e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b8a2:	d825      	bhi.n	800b8f0 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800b8a4:	af04      	add	r7, sp, #16
 800b8a6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	f003 fc96 	bl	800f1de <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800b8b2:	9702      	str	r7, [sp, #8]
 800b8b4:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800b8b6:	9301      	str	r3, [sp, #4]
 800b8b8:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800b8ba:	9300      	str	r3, [sp, #0]
 800b8bc:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800b8c0:	4632      	mov	r2, r6
 800b8c2:	4629      	mov	r1, r5
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f7ff fe6d 	bl	800b5a4 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800b8ca:	4622      	mov	r2, r4
 800b8cc:	4641      	mov	r1, r8
 800b8ce:	a808      	add	r0, sp, #32
 800b8d0:	f003 fc6d 	bl	800f1ae <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800b8d4:	462b      	mov	r3, r5
 800b8d6:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800b8d8:	f104 0110 	add.w	r1, r4, #16
 800b8dc:	4638      	mov	r0, r7
 800b8de:	f003 fa22 	bl	800ed26 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800b8e2:	b130      	cbz	r0, 800b8f2 <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800b8e4:	2801      	cmp	r0, #1
 800b8e6:	d004      	beq.n	800b8f2 <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b8e8:	200f      	movs	r0, #15
 800b8ea:	e002      	b.n	800b8f2 <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b8ec:	200a      	movs	r0, #10
}
 800b8ee:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800b8f0:	200e      	movs	r0, #14
}
 800b8f2:	b048      	add	sp, #288	; 0x120
 800b8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b8f8 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800b8f8:	b188      	cbz	r0, 800b91e <LoRaMacCryptoInit+0x26>
{
 800b8fa:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800b8fc:	4c09      	ldr	r4, [pc, #36]	; (800b924 <LoRaMacCryptoInit+0x2c>)
 800b8fe:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800b900:	2228      	movs	r2, #40	; 0x28
 800b902:	2100      	movs	r1, #0
 800b904:	f003 fc6b 	bl	800f1de <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800b908:	6823      	ldr	r3, [r4, #0]
 800b90a:	2201      	movs	r2, #1
 800b90c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800b90e:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800b910:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800b912:	2400      	movs	r4, #0
 800b914:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800b916:	f7ff fed9 	bl	800b6cc <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800b91a:	4620      	mov	r0, r4
}
 800b91c:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800b91e:	2009      	movs	r0, #9
}
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	20000c5c 	.word	0x20000c5c

0800b928 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800b928:	4b02      	ldr	r3, [pc, #8]	; (800b934 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800b92e:	2000      	movs	r0, #0
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	20000c5c 	.word	0x20000c5c

0800b938 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800b938:	b130      	cbz	r0, 800b948 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800b93a:	4b04      	ldr	r3, [pc, #16]	; (800b94c <LoRaMacCryptoGetFCntUp+0x14>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	3301      	adds	r3, #1
 800b942:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800b944:	2000      	movs	r0, #0
 800b946:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b948:	200a      	movs	r0, #10
}
 800b94a:	4770      	bx	lr
 800b94c:	20000c5c 	.word	0x20000c5c

0800b950 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800b950:	b570      	push	{r4, r5, r6, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 800b956:	2200      	movs	r2, #0
 800b958:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800b95a:	b363      	cbz	r3, 800b9b6 <LoRaMacCryptoGetFCntDown+0x66>
 800b95c:	460d      	mov	r5, r1
 800b95e:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800b960:	a901      	add	r1, sp, #4
 800b962:	f7ff fe59 	bl	800b618 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800b966:	b9b8      	cbnz	r0, 800b998 <LoRaMacCryptoGetFCntDown+0x48>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800b968:	9b01      	ldr	r3, [sp, #4]
 800b96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b96e:	d015      	beq.n	800b99c <LoRaMacCryptoGetFCntDown+0x4c>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800b970:	b29a      	uxth	r2, r3
 800b972:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800b974:	2a00      	cmp	r2, #0
 800b976:	dd13      	ble.n	800b9a0 <LoRaMacCryptoGetFCntDown+0x50>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800b978:	4413      	add	r3, r2
 800b97a:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800b97c:	4b10      	ldr	r3, [pc, #64]	; (800b9c0 <LoRaMacCryptoGetFCntDown+0x70>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	789a      	ldrb	r2, [r3, #2]
 800b982:	b94a      	cbnz	r2, 800b998 <LoRaMacCryptoGetFCntDown+0x48>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800b984:	6833      	ldr	r3, [r6, #0]
 800b986:	9901      	ldr	r1, [sp, #4]
 800b988:	1a5b      	subs	r3, r3, r1
 800b98a:	eb61 0101 	sbc.w	r1, r1, r1
 800b98e:	42ab      	cmp	r3, r5
 800b990:	f171 0100 	sbcs.w	r1, r1, #0
 800b994:	da11      	bge.n	800b9ba <LoRaMacCryptoGetFCntDown+0x6a>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800b996:	4610      	mov	r0, r2
}
 800b998:	b002      	add	sp, #8
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800b99c:	6034      	str	r4, [r6, #0]
 800b99e:	e7ed      	b.n	800b97c <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800b9a0:	b132      	cbz	r2, 800b9b0 <LoRaMacCryptoGetFCntDown+0x60>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800b9a2:	0c1b      	lsrs	r3, r3, #16
 800b9a4:	041b      	lsls	r3, r3, #16
 800b9a6:	4423      	add	r3, r4
 800b9a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b9ac:	6033      	str	r3, [r6, #0]
 800b9ae:	e7e5      	b.n	800b97c <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800b9b0:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800b9b2:	2007      	movs	r0, #7
 800b9b4:	e7f0      	b.n	800b998 <LoRaMacCryptoGetFCntDown+0x48>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b9b6:	200a      	movs	r0, #10
 800b9b8:	e7ee      	b.n	800b998 <LoRaMacCryptoGetFCntDown+0x48>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800b9ba:	2008      	movs	r0, #8
 800b9bc:	e7ec      	b.n	800b998 <LoRaMacCryptoGetFCntDown+0x48>
 800b9be:	bf00      	nop
 800b9c0:	20000c5c 	.word	0x20000c5c

0800b9c4 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800b9c4:	4601      	mov	r1, r0
 800b9c6:	b908      	cbnz	r0, 800b9cc <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b9c8:	200a      	movs	r0, #10
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b9ca:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	dd01      	ble.n	800b9d6 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800b9d6:	4a07      	ldr	r2, [pc, #28]	; (800b9f4 <LoRaMacCryptoSetMulticastReference+0x30>)
 800b9d8:	6812      	ldr	r2, [r2, #0]
 800b9da:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800b9de:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800b9e2:	f103 0c06 	add.w	ip, r3, #6
 800b9e6:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800b9ea:	3204      	adds	r2, #4
 800b9ec:	6242      	str	r2, [r0, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	e7ed      	b.n	800b9ce <LoRaMacCryptoSetMulticastReference+0xa>
 800b9f2:	bf00      	nop
 800b9f4:	20000c5c 	.word	0x20000c5c

0800b9f8 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800b9f8:	b300      	cbz	r0, 800ba3c <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 800b9fa:	b510      	push	{r4, lr}
 800b9fc:	b084      	sub	sp, #16
 800b9fe:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800ba00:	2300      	movs	r3, #0
 800ba02:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800ba04:	a803      	add	r0, sp, #12
 800ba06:	f003 fa7b 	bl	800ef00 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800ba0a:	4b10      	ldr	r3, [pc, #64]	; (800ba4c <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ba12:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800ba14:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ba16:	4620      	mov	r0, r4
 800ba18:	f000 fa33 	bl	800be82 <LoRaMacSerializerJoinRequest>
 800ba1c:	b980      	cbnz	r0, 800ba40 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800ba1e:	4623      	mov	r3, r4
 800ba20:	f853 1b18 	ldr.w	r1, [r3], #24
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	2301      	movs	r3, #1
 800ba28:	2213      	movs	r2, #19
 800ba2a:	f003 f96d 	bl	800ed08 <SecureElementComputeAesCmac>
 800ba2e:	b950      	cbnz	r0, 800ba46 <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ba30:	4620      	mov	r0, r4
 800ba32:	f000 fa26 	bl	800be82 <LoRaMacSerializerJoinRequest>
 800ba36:	b120      	cbz	r0, 800ba42 <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ba38:	2011      	movs	r0, #17
 800ba3a:	e002      	b.n	800ba42 <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ba3c:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ba3e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ba40:	2011      	movs	r0, #17
}
 800ba42:	b004      	add	sp, #16
 800ba44:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ba46:	200f      	movs	r0, #15
 800ba48:	e7fb      	b.n	800ba42 <LoRaMacCryptoPrepareJoinRequest+0x4a>
 800ba4a:	bf00      	nop
 800ba4c:	20000c5c 	.word	0x20000c5c

0800ba50 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d036      	beq.n	800bac2 <LoRaMacCryptoSecureMessage+0x72>
{
 800ba54:	b530      	push	{r4, r5, lr}
 800ba56:	b085      	sub	sp, #20
 800ba58:	4604      	mov	r4, r0
 800ba5a:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800ba5c:	4b1d      	ldr	r3, [pc, #116]	; (800bad4 <LoRaMacCryptoSecureMessage+0x84>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	4283      	cmp	r3, r0
 800ba64:	d82f      	bhi.n	800bac6 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800ba66:	f895 2020 	ldrb.w	r2, [r5, #32]
 800ba6a:	b342      	cbz	r2, 800babe <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800ba6c:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800ba6e:	42a3      	cmp	r3, r4
 800ba70:	d209      	bcs.n	800ba86 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800ba72:	9401      	str	r4, [sp, #4]
 800ba74:	2300      	movs	r3, #0
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	68ab      	ldr	r3, [r5, #8]
 800ba7a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800ba7e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ba80:	f7ff fea9 	bl	800b7d6 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ba84:	bb10      	cbnz	r0, 800bacc <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ba86:	4628      	mov	r0, r5
 800ba88:	f000 fa31 	bl	800beee <LoRaMacSerializerData>
 800ba8c:	b9e8      	cbnz	r0, 800baca <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ba8e:	7929      	ldrb	r1, [r5, #4]
 800ba90:	3904      	subs	r1, #4
 800ba92:	462b      	mov	r3, r5
 800ba94:	f853 0b2c 	ldr.w	r0, [r3], #44
 800ba98:	9303      	str	r3, [sp, #12]
 800ba9a:	9402      	str	r4, [sp, #8]
 800ba9c:	68ab      	ldr	r3, [r5, #8]
 800ba9e:	9301      	str	r3, [sp, #4]
 800baa0:	2300      	movs	r3, #0
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	2208      	movs	r2, #8
 800baa6:	b289      	uxth	r1, r1
 800baa8:	f7ff fe32 	bl	800b710 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800baac:	b970      	cbnz	r0, 800bacc <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800baae:	4628      	mov	r0, r5
 800bab0:	f000 fa1d 	bl	800beee <LoRaMacSerializerData>
 800bab4:	b960      	cbnz	r0, 800bad0 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800bab6:	4b07      	ldr	r3, [pc, #28]	; (800bad4 <LoRaMacCryptoSecureMessage+0x84>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800babc:	e006      	b.n	800bacc <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800babe:	2208      	movs	r2, #8
 800bac0:	e7d5      	b.n	800ba6e <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bac2:	200a      	movs	r0, #10
}
 800bac4:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800bac6:	2006      	movs	r0, #6
 800bac8:	e000      	b.n	800bacc <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800baca:	2011      	movs	r0, #17
}
 800bacc:	b005      	add	sp, #20
 800bace:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bad0:	2011      	movs	r0, #17
 800bad2:	e7fb      	b.n	800bacc <LoRaMacCryptoSecureMessage+0x7c>
 800bad4:	20000c5c 	.word	0x20000c5c

0800bad8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800bad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800badc:	b087      	sub	sp, #28
 800bade:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800bae0:	2e00      	cmp	r6, #0
 800bae2:	d049      	beq.n	800bb78 <LoRaMacCryptoUnsecureMessage+0xa0>
 800bae4:	4605      	mov	r5, r0
 800bae6:	4688      	mov	r8, r1
 800bae8:	4617      	mov	r7, r2
 800baea:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800baec:	4619      	mov	r1, r3
 800baee:	4610      	mov	r0, r2
 800baf0:	f7ff fdb8 	bl	800b664 <CheckFCntDown>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d041      	beq.n	800bb7c <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800baf8:	4630      	mov	r0, r6
 800bafa:	f000 f963 	bl	800bdc4 <LoRaMacParserData>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d141      	bne.n	800bb86 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800bb02:	a905      	add	r1, sp, #20
 800bb04:	4628      	mov	r0, r5
 800bb06:	f7ff fd71 	bl	800b5ec <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bb0a:	4605      	mov	r5, r0
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d136      	bne.n	800bb7e <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800bb10:	9b05      	ldr	r3, [sp, #20]
 800bb12:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800bb16:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800bb18:	68b3      	ldr	r3, [r6, #8]
 800bb1a:	4543      	cmp	r3, r8
 800bb1c:	d135      	bne.n	800bb8a <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800bb1e:	7b33      	ldrb	r3, [r6, #12]
 800bb20:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800bb24:	491a      	ldr	r1, [pc, #104]	; (800bb90 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800bb26:	6809      	ldr	r1, [r1, #0]
 800bb28:	7889      	ldrb	r1, [r1, #2]
 800bb2a:	b901      	cbnz	r1, 800bb2e <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800bb2c:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800bb2e:	7931      	ldrb	r1, [r6, #4]
 800bb30:	3904      	subs	r1, #4
 800bb32:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800bb34:	9003      	str	r0, [sp, #12]
 800bb36:	9402      	str	r4, [sp, #8]
 800bb38:	f8cd 8004 	str.w	r8, [sp, #4]
 800bb3c:	2001      	movs	r0, #1
 800bb3e:	9000      	str	r0, [sp, #0]
 800bb40:	b289      	uxth	r1, r1
 800bb42:	6830      	ldr	r0, [r6, #0]
 800bb44:	f7ff fea3 	bl	800b88e <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bb48:	4605      	mov	r5, r0
 800bb4a:	b9c0      	cbnz	r0, 800bb7e <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800bb4c:	f896 3020 	ldrb.w	r3, [r6, #32]
 800bb50:	b90b      	cbnz	r3, 800bb56 <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800bb52:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800bb56:	9401      	str	r4, [sp, #4]
 800bb58:	2301      	movs	r3, #1
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	4643      	mov	r3, r8
 800bb5e:	464a      	mov	r2, r9
 800bb60:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800bb64:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800bb66:	f7ff fe36 	bl	800b7d6 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bb6a:	4605      	mov	r5, r0
 800bb6c:	b938      	cbnz	r0, 800bb7e <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800bb6e:	4621      	mov	r1, r4
 800bb70:	4638      	mov	r0, r7
 800bb72:	f7ff fd8f 	bl	800b694 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800bb76:	e002      	b.n	800bb7e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bb78:	250a      	movs	r5, #10
 800bb7a:	e000      	b.n	800bb7e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800bb7c:	2506      	movs	r5, #6
}
 800bb7e:	4628      	mov	r0, r5
 800bb80:	b007      	add	sp, #28
 800bb82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800bb86:	2510      	movs	r5, #16
 800bb88:	e7f9      	b.n	800bb7e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800bb8a:	2502      	movs	r5, #2
 800bb8c:	e7f7      	b.n	800bb7e <LoRaMacCryptoUnsecureMessage+0xa6>
 800bb8e:	bf00      	nop
 800bb90:	20000c5c 	.word	0x20000c5c

0800bb94 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800bb94:	b500      	push	{lr}
 800bb96:	b085      	sub	sp, #20
 800bb98:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	9301      	str	r3, [sp, #4]
 800bba0:	9302      	str	r3, [sp, #8]
 800bba2:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800bba4:	290b      	cmp	r1, #11
 800bba6:	d007      	beq.n	800bbb8 <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 800bba8:	290c      	cmp	r1, #12
 800bbaa:	d013      	beq.n	800bbd4 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 800bbac:	290a      	cmp	r1, #10
 800bbae:	d00c      	beq.n	800bbca <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 800bbb0:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bbb2:	b005      	add	sp, #20
 800bbb4:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 800bbb8:	2801      	cmp	r0, #1
 800bbba:	d001      	beq.n	800bbc0 <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	e00a      	b.n	800bbd6 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 800bbc0:	2320      	movs	r3, #32
 800bbc2:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	e005      	b.n	800bbd6 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 800bbca:	2330      	movs	r3, #48	; 0x30
 800bbcc:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800bbd0:	2100      	movs	r1, #0
            break;
 800bbd2:	e000      	b.n	800bbd6 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 800bbd4:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800bbd6:	4668      	mov	r0, sp
 800bbd8:	f003 f934 	bl	800ee44 <SecureElementDeriveAndStoreKey>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d0e8      	beq.n	800bbb2 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bbe0:	200f      	movs	r0, #15
 800bbe2:	e7e6      	b.n	800bbb2 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

0800bbe4 <LoRaMacCryptoSetKey>:
{
 800bbe4:	b510      	push	{r4, lr}
 800bbe6:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800bbe8:	f003 f8ea 	bl	800edc0 <SecureElementSetKey>
 800bbec:	b998      	cbnz	r0, 800bc16 <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800bbee:	b104      	cbz	r4, 800bbf2 <LoRaMacCryptoSetKey+0xe>
}
 800bbf0:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800bbf2:	4b0c      	ldr	r3, [pc, #48]	; (800bc24 <LoRaMacCryptoSetKey+0x40>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	210b      	movs	r1, #11
 800bbf8:	7898      	ldrb	r0, [r3, #2]
 800bbfa:	f7ff ffcb 	bl	800bb94 <LoRaMacCryptoDeriveLifeTimeKey>
 800bbfe:	b960      	cbnz	r0, 800bc1a <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800bc00:	210c      	movs	r1, #12
 800bc02:	f7ff ffc7 	bl	800bb94 <LoRaMacCryptoDeriveLifeTimeKey>
 800bc06:	b950      	cbnz	r0, 800bc1e <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800bc08:	210a      	movs	r1, #10
 800bc0a:	f7ff ffc3 	bl	800bb94 <LoRaMacCryptoDeriveLifeTimeKey>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d0ee      	beq.n	800bbf0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bc12:	200f      	movs	r0, #15
 800bc14:	e7ec      	b.n	800bbf0 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bc16:	200f      	movs	r0, #15
 800bc18:	e7ea      	b.n	800bbf0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bc1a:	200f      	movs	r0, #15
 800bc1c:	e7e8      	b.n	800bbf0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bc1e:	200f      	movs	r0, #15
 800bc20:	e7e6      	b.n	800bbf0 <LoRaMacCryptoSetKey+0xc>
 800bc22:	bf00      	nop
 800bc24:	20000c5c 	.word	0x20000c5c

0800bc28 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800bc28:	2a00      	cmp	r2, #0
 800bc2a:	d06c      	beq.n	800bd06 <LoRaMacCryptoHandleJoinAccept+0xde>
{
 800bc2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc2e:	b08f      	sub	sp, #60	; 0x3c
 800bc30:	4607      	mov	r7, r0
 800bc32:	460d      	mov	r5, r1
 800bc34:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800bc36:	2900      	cmp	r1, #0
 800bc38:	d067      	beq.n	800bd0a <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800bc3a:	2600      	movs	r6, #0
 800bc3c:	9605      	str	r6, [sp, #20]
 800bc3e:	221d      	movs	r2, #29
 800bc40:	4631      	mov	r1, r6
 800bc42:	a806      	add	r0, sp, #24
 800bc44:	f005 ff44 	bl	8011ad0 <memset>
    uint8_t versionMinor         = 0;
 800bc48:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800bc4c:	4b33      	ldr	r3, [pc, #204]	; (800bd1c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800bc52:	f10d 0313 	add.w	r3, sp, #19
 800bc56:	9302      	str	r3, [sp, #8]
 800bc58:	ab05      	add	r3, sp, #20
 800bc5a:	9301      	str	r3, [sp, #4]
 800bc5c:	7923      	ldrb	r3, [r4, #4]
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	6823      	ldr	r3, [r4, #0]
 800bc62:	4632      	mov	r2, r6
 800bc64:	4629      	mov	r1, r5
 800bc66:	4638      	mov	r0, r7
 800bc68:	f003 f90c 	bl	800ee84 <SecureElementProcessJoinAccept>
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d14e      	bne.n	800bd0e <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800bc70:	7922      	ldrb	r2, [r4, #4]
 800bc72:	a905      	add	r1, sp, #20
 800bc74:	6820      	ldr	r0, [r4, #0]
 800bc76:	f003 fa9a 	bl	800f1ae <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f000 f850 	bl	800bd20 <LoRaMacParserJoinAccept>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	d147      	bne.n	800bd14 <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800bc84:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800bc86:	79e3      	ldrb	r3, [r4, #7]
 800bc88:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800bc8c:	7a23      	ldrb	r3, [r4, #8]
 800bc8e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800bc92:	4628      	mov	r0, r5
 800bc94:	f7ff fd32 	bl	800b6fc <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d03d      	beq.n	800bd18 <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800bc9c:	4b1f      	ldr	r3, [pc, #124]	; (800bd1c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800bca2:	210b      	movs	r1, #11
 800bca4:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800bca8:	f7ff ff74 	bl	800bb94 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bcac:	bb80      	cbnz	r0, 800bd10 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800bcae:	210c      	movs	r1, #12
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	f7ff ff6f 	bl	800bb94 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bcb6:	bb58      	cbnz	r0, 800bd10 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800bcb8:	210a      	movs	r1, #10
 800bcba:	2000      	movs	r0, #0
 800bcbc:	f7ff ff6a 	bl	800bb94 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bcc0:	bb30      	cbnz	r0, 800bd10 <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 800bcc2:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800bcc4:	7aa2      	ldrb	r2, [r4, #10]
 800bcc6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800bcca:	7ae2      	ldrb	r2, [r4, #11]
 800bccc:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800bcd0:	4633      	mov	r3, r6
 800bcd2:	4622      	mov	r2, r4
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	2009      	movs	r0, #9
 800bcd8:	f7ff fd46 	bl	800b768 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bcdc:	b9c0      	cbnz	r0, 800bd10 <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800bcde:	4633      	mov	r3, r6
 800bce0:	4622      	mov	r2, r4
 800bce2:	4629      	mov	r1, r5
 800bce4:	2008      	movs	r0, #8
 800bce6:	f7ff fd3f 	bl	800b768 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bcea:	b988      	cbnz	r0, 800bd10 <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800bcec:	4b0b      	ldr	r3, [pc, #44]	; (800bd1c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800bcf4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800bcfa:	f04f 32ff 	mov.w	r2, #4294967295
 800bcfe:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800bd00:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800bd02:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800bd04:	e004      	b.n	800bd10 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd06:	200a      	movs	r0, #10
}
 800bd08:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd0a:	200a      	movs	r0, #10
 800bd0c:	e000      	b.n	800bd10 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bd0e:	200f      	movs	r0, #15
}
 800bd10:	b00f      	add	sp, #60	; 0x3c
 800bd12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800bd14:	2010      	movs	r0, #16
 800bd16:	e7fb      	b.n	800bd10 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800bd18:	2003      	movs	r0, #3
 800bd1a:	e7f9      	b.n	800bd10 <LoRaMacCryptoHandleJoinAccept+0xe8>
 800bd1c:	20000c5c 	.word	0x20000c5c

0800bd20 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d049      	beq.n	800bdb8 <LoRaMacParserJoinAccept+0x98>
{
 800bd24:	b510      	push	{r4, lr}
 800bd26:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bd28:	6801      	ldr	r1, [r0, #0]
 800bd2a:	2900      	cmp	r1, #0
 800bd2c:	d046      	beq.n	800bdbc <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800bd2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd32:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800bd34:	2203      	movs	r2, #3
 800bd36:	3006      	adds	r0, #6
 800bd38:	f003 fa39 	bl	800f1ae <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f850 1b09 	ldr.w	r1, [r0], #9
 800bd42:	2203      	movs	r2, #3
 800bd44:	3104      	adds	r1, #4
 800bd46:	f003 fa32 	bl	800f1ae <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800bd4a:	6821      	ldr	r1, [r4, #0]
 800bd4c:	79cb      	ldrb	r3, [r1, #7]
 800bd4e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800bd50:	7a0a      	ldrb	r2, [r1, #8]
 800bd52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bd56:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800bd58:	7a4a      	ldrb	r2, [r1, #9]
 800bd5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd5e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800bd60:	7a8a      	ldrb	r2, [r1, #10]
 800bd62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bd66:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800bd68:	7acb      	ldrb	r3, [r1, #11]
 800bd6a:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800bd6c:	7b0b      	ldrb	r3, [r1, #12]
 800bd6e:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800bd70:	7923      	ldrb	r3, [r4, #4]
 800bd72:	2b21      	cmp	r3, #33	; 0x21
 800bd74:	d018      	beq.n	800bda8 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800bd76:	2b11      	cmp	r3, #17
 800bd78:	dc22      	bgt.n	800bdc0 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800bd7a:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800bd7c:	6821      	ldr	r1, [r4, #0]
 800bd7e:	f102 0c01 	add.w	ip, r2, #1
 800bd82:	5c8b      	ldrb	r3, [r1, r2]
 800bd84:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800bd86:	1c90      	adds	r0, r2, #2
 800bd88:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800bd8c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800bd90:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800bd92:	3203      	adds	r2, #3
 800bd94:	5c08      	ldrb	r0, [r1, r0]
 800bd96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd9a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800bd9c:	5c8a      	ldrb	r2, [r1, r2]
 800bd9e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bda2:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800bda4:	2000      	movs	r0, #0
}
 800bda6:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800bda8:	2210      	movs	r2, #16
 800bdaa:	310d      	adds	r1, #13
 800bdac:	f104 0012 	add.w	r0, r4, #18
 800bdb0:	f003 f9fd 	bl	800f1ae <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800bdb4:	221d      	movs	r2, #29
 800bdb6:	e7e1      	b.n	800bd7c <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800bdb8:	2002      	movs	r0, #2
}
 800bdba:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800bdbc:	2002      	movs	r0, #2
 800bdbe:	e7f2      	b.n	800bda6 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800bdc0:	2001      	movs	r0, #1
 800bdc2:	e7f0      	b.n	800bda6 <LoRaMacParserJoinAccept+0x86>

0800bdc4 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d058      	beq.n	800be7a <LoRaMacParserData+0xb6>
{
 800bdc8:	b510      	push	{r4, lr}
 800bdca:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bdcc:	6801      	ldr	r1, [r0, #0]
 800bdce:	2900      	cmp	r1, #0
 800bdd0:	d055      	beq.n	800be7e <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800bdd2:	780b      	ldrb	r3, [r1, #0]
 800bdd4:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800bdd6:	784b      	ldrb	r3, [r1, #1]
 800bdd8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800bdda:	788a      	ldrb	r2, [r1, #2]
 800bddc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bde0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800bde2:	78ca      	ldrb	r2, [r1, #3]
 800bde4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bde8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800bdea:	790a      	ldrb	r2, [r1, #4]
 800bdec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bdf0:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800bdf2:	794b      	ldrb	r3, [r1, #5]
 800bdf4:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800bdf6:	798b      	ldrb	r3, [r1, #6]
 800bdf8:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800bdfa:	79ca      	ldrb	r2, [r1, #7]
 800bdfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800be00:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800be02:	7b02      	ldrb	r2, [r0, #12]
 800be04:	f002 020f 	and.w	r2, r2, #15
 800be08:	3108      	adds	r1, #8
 800be0a:	3010      	adds	r0, #16
 800be0c:	f003 f9cf 	bl	800f1ae <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800be10:	7b23      	ldrb	r3, [r4, #12]
 800be12:	f003 030f 	and.w	r3, r3, #15
 800be16:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800be1a:	2200      	movs	r2, #0
 800be1c:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800be20:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800be24:	7922      	ldrb	r2, [r4, #4]
 800be26:	1a11      	subs	r1, r2, r0
 800be28:	2904      	cmp	r1, #4
 800be2a:	dc16      	bgt.n	800be5a <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800be2c:	6822      	ldr	r2, [r4, #0]
 800be2e:	7923      	ldrb	r3, [r4, #4]
 800be30:	441a      	add	r2, r3
 800be32:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800be36:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800be38:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800be3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800be40:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800be42:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800be46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800be4a:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800be4c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800be50:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800be54:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800be56:	2000      	movs	r0, #0
}
 800be58:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800be5a:	6821      	ldr	r1, [r4, #0]
 800be5c:	3309      	adds	r3, #9
 800be5e:	5c08      	ldrb	r0, [r1, r0]
 800be60:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800be64:	1ad2      	subs	r2, r2, r3
 800be66:	b2d2      	uxtb	r2, r2
 800be68:	3a04      	subs	r2, #4
 800be6a:	b2d2      	uxtb	r2, r2
 800be6c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800be70:	4419      	add	r1, r3
 800be72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800be74:	f003 f99b 	bl	800f1ae <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800be78:	e7d8      	b.n	800be2c <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800be7a:	2002      	movs	r0, #2
}
 800be7c:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800be7e:	2002      	movs	r0, #2
 800be80:	e7ea      	b.n	800be58 <LoRaMacParserData+0x94>

0800be82 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800be82:	b370      	cbz	r0, 800bee2 <LoRaMacSerializerJoinRequest+0x60>
{
 800be84:	b510      	push	{r4, lr}
 800be86:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800be88:	6803      	ldr	r3, [r0, #0]
 800be8a:	b363      	cbz	r3, 800bee6 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800be8c:	7902      	ldrb	r2, [r0, #4]
 800be8e:	2a16      	cmp	r2, #22
 800be90:	d92b      	bls.n	800beea <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800be92:	7942      	ldrb	r2, [r0, #5]
 800be94:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800be96:	4601      	mov	r1, r0
 800be98:	f851 0b06 	ldr.w	r0, [r1], #6
 800be9c:	2208      	movs	r2, #8
 800be9e:	3001      	adds	r0, #1
 800bea0:	f003 f990 	bl	800f1c4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800bea4:	4621      	mov	r1, r4
 800bea6:	f851 0b0e 	ldr.w	r0, [r1], #14
 800beaa:	2208      	movs	r2, #8
 800beac:	3009      	adds	r0, #9
 800beae:	f003 f989 	bl	800f1c4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800beb2:	8ae2      	ldrh	r2, [r4, #22]
 800beb4:	6823      	ldr	r3, [r4, #0]
 800beb6:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800beb8:	8ae3      	ldrh	r3, [r4, #22]
 800beba:	6822      	ldr	r2, [r4, #0]
 800bebc:	0a1b      	lsrs	r3, r3, #8
 800bebe:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800bec0:	69a2      	ldr	r2, [r4, #24]
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800bec6:	69a3      	ldr	r3, [r4, #24]
 800bec8:	0a1b      	lsrs	r3, r3, #8
 800beca:	6822      	ldr	r2, [r4, #0]
 800becc:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800bece:	8b62      	ldrh	r2, [r4, #26]
 800bed0:	6823      	ldr	r3, [r4, #0]
 800bed2:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800bed4:	7ee2      	ldrb	r2, [r4, #27]
 800bed6:	6823      	ldr	r3, [r4, #0]
 800bed8:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800beda:	2317      	movs	r3, #23
 800bedc:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800bede:	2000      	movs	r0, #0
}
 800bee0:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800bee2:	2001      	movs	r0, #1
}
 800bee4:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800bee6:	2001      	movs	r0, #1
 800bee8:	e7fa      	b.n	800bee0 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800beea:	2002      	movs	r0, #2
 800beec:	e7f8      	b.n	800bee0 <LoRaMacSerializerJoinRequest+0x5e>

0800beee <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800beee:	2800      	cmp	r0, #0
 800bef0:	d066      	beq.n	800bfc0 <LoRaMacSerializerData+0xd2>
{
 800bef2:	b538      	push	{r3, r4, r5, lr}
 800bef4:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bef6:	6801      	ldr	r1, [r0, #0]
 800bef8:	2900      	cmp	r1, #0
 800befa:	d063      	beq.n	800bfc4 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800befc:	7b02      	ldrb	r2, [r0, #12]
 800befe:	f002 020f 	and.w	r2, r2, #15
 800bf02:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800bf06:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bf0a:	b10b      	cbz	r3, 800bf10 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800bf0c:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800bf10:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800bf12:	3304      	adds	r3, #4
 800bf14:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800bf16:	7922      	ldrb	r2, [r4, #4]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d355      	bcc.n	800bfc8 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800bf1c:	7963      	ldrb	r3, [r4, #5]
 800bf1e:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800bf20:	68a2      	ldr	r2, [r4, #8]
 800bf22:	6823      	ldr	r3, [r4, #0]
 800bf24:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800bf26:	68a3      	ldr	r3, [r4, #8]
 800bf28:	0a1b      	lsrs	r3, r3, #8
 800bf2a:	6822      	ldr	r2, [r4, #0]
 800bf2c:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800bf2e:	8962      	ldrh	r2, [r4, #10]
 800bf30:	6823      	ldr	r3, [r4, #0]
 800bf32:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800bf34:	7ae2      	ldrb	r2, [r4, #11]
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	7b22      	ldrb	r2, [r4, #12]
 800bf3e:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800bf40:	89e2      	ldrh	r2, [r4, #14]
 800bf42:	6823      	ldr	r3, [r4, #0]
 800bf44:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800bf46:	89e3      	ldrh	r3, [r4, #14]
 800bf48:	6822      	ldr	r2, [r4, #0]
 800bf4a:	0a1b      	lsrs	r3, r3, #8
 800bf4c:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800bf4e:	4621      	mov	r1, r4
 800bf50:	f851 0b10 	ldr.w	r0, [r1], #16
 800bf54:	7b22      	ldrb	r2, [r4, #12]
 800bf56:	f002 020f 	and.w	r2, r2, #15
 800bf5a:	3008      	adds	r0, #8
 800bf5c:	f003 f927 	bl	800f1ae <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800bf60:	7b23      	ldrb	r3, [r4, #12]
 800bf62:	f003 030f 	and.w	r3, r3, #15
 800bf66:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800bf6a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800bf6e:	b12a      	cbz	r2, 800bf7c <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800bf70:	6822      	ldr	r2, [r4, #0]
 800bf72:	f894 1020 	ldrb.w	r1, [r4, #32]
 800bf76:	5551      	strb	r1, [r2, r5]
 800bf78:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800bf7c:	6820      	ldr	r0, [r4, #0]
 800bf7e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800bf82:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bf84:	4428      	add	r0, r5
 800bf86:	f003 f912 	bl	800f1ae <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800bf8a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bf8e:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800bf90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800bf92:	6821      	ldr	r1, [r4, #0]
 800bf94:	1c5a      	adds	r2, r3, #1
 800bf96:	b292      	uxth	r2, r2
 800bf98:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800bf9a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bf9c:	0a08      	lsrs	r0, r1, #8
 800bf9e:	6825      	ldr	r5, [r4, #0]
 800bfa0:	1c99      	adds	r1, r3, #2
 800bfa2:	b289      	uxth	r1, r1
 800bfa4:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800bfa6:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800bfa8:	6820      	ldr	r0, [r4, #0]
 800bfaa:	1cda      	adds	r2, r3, #3
 800bfac:	b292      	uxth	r2, r2
 800bfae:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800bfb0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800bfb4:	6821      	ldr	r1, [r4, #0]
 800bfb6:	3304      	adds	r3, #4
 800bfb8:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800bfba:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800bfbc:	2000      	movs	r0, #0
}
 800bfbe:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800bfc0:	2001      	movs	r0, #1
}
 800bfc2:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800bfc4:	2001      	movs	r0, #1
 800bfc6:	e7fa      	b.n	800bfbe <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800bfc8:	2002      	movs	r0, #2
 800bfca:	e7f8      	b.n	800bfbe <LoRaMacSerializerData+0xd0>

0800bfcc <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800bfcc:	4b02      	ldr	r3, [pc, #8]	; (800bfd8 <NvmDataMgmtEvent+0xc>)
 800bfce:	881a      	ldrh	r2, [r3, #0]
 800bfd0:	4310      	orrs	r0, r2
 800bfd2:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	20000c60 	.word	0x20000c60

0800bfdc <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800bfdc:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800bfde:	4b06      	ldr	r3, [pc, #24]	; (800bff8 <NvmDataMgmtStoreBegin+0x1c>)
 800bfe0:	881b      	ldrh	r3, [r3, #0]
 800bfe2:	b11b      	cbz	r3, 800bfec <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800bfe4:	f7fe f8a6 	bl	800a134 <LoRaMacStop>
 800bfe8:	b918      	cbnz	r0, 800bff2 <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800bfea:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800bfec:	f06f 0001 	mvn.w	r0, #1
 800bff0:	e7fb      	b.n	800bfea <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800bff2:	f06f 0002 	mvn.w	r0, #2
 800bff6:	e7f8      	b.n	800bfea <NvmDataMgmtStoreBegin+0xe>
 800bff8:	20000c60 	.word	0x20000c60

0800bffc <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800bffc:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800bffe:	2400      	movs	r4, #0
 800c000:	4b02      	ldr	r3, [pc, #8]	; (800c00c <NvmDataMgmtStoreEnd+0x10>)
 800c002:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800c004:	f7fe f88a 	bl	800a11c <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c008:	4620      	mov	r0, r4
 800c00a:	bd10      	pop	{r4, pc}
 800c00c:	20000c60 	.word	0x20000c60

0800c010 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800c010:	b128      	cbz	r0, 800c01e <RegionIsActive+0xe>
 800c012:	2805      	cmp	r0, #5
 800c014:	d001      	beq.n	800c01a <RegionIsActive+0xa>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800c016:	2000      	movs	r0, #0
        }
    }
}
 800c018:	4770      	bx	lr
    switch( region )
 800c01a:	2001      	movs	r0, #1
 800c01c:	4770      	bx	lr
 800c01e:	2001      	movs	r0, #1
 800c020:	4770      	bx	lr

0800c022 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800c022:	b500      	push	{lr}
 800c024:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 800c026:	2300      	movs	r3, #0
 800c028:	9300      	str	r3, [sp, #0]
    switch( region )
 800c02a:	b120      	cbz	r0, 800c036 <RegionGetPhyParam+0x14>
 800c02c:	2805      	cmp	r0, #5
 800c02e:	d00a      	beq.n	800c046 <RegionGetPhyParam+0x24>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800c030:	9b00      	ldr	r3, [sp, #0]
 800c032:	9301      	str	r3, [sp, #4]
 800c034:	e003      	b.n	800c03e <RegionGetPhyParam+0x1c>
        AS923_GET_PHY_PARAM( );
 800c036:	4608      	mov	r0, r1
 800c038:	f000 f960 	bl	800c2fc <RegionAS923GetPhyParam>
 800c03c:	9001      	str	r0, [sp, #4]
        }
    }
}
 800c03e:	9801      	ldr	r0, [sp, #4]
 800c040:	b003      	add	sp, #12
 800c042:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_GET_PHY_PARAM( );
 800c046:	4608      	mov	r0, r1
 800c048:	f001 fbb2 	bl	800d7b0 <RegionEU868GetPhyParam>
 800c04c:	9001      	str	r0, [sp, #4]
 800c04e:	e7f6      	b.n	800c03e <RegionGetPhyParam+0x1c>

0800c050 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800c050:	b508      	push	{r3, lr}
    switch( region )
 800c052:	b110      	cbz	r0, 800c05a <RegionSetBandTxDone+0xa>
 800c054:	2805      	cmp	r0, #5
 800c056:	d004      	beq.n	800c062 <RegionSetBandTxDone+0x12>
        default:
        {
            return;
        }
    }
}
 800c058:	bd08      	pop	{r3, pc}
        AS923_SET_BAND_TX_DONE( );
 800c05a:	4608      	mov	r0, r1
 800c05c:	f000 fa5a 	bl	800c514 <RegionAS923SetBandTxDone>
 800c060:	e7fa      	b.n	800c058 <RegionSetBandTxDone+0x8>
        EU868_SET_BAND_TX_DONE( );
 800c062:	4608      	mov	r0, r1
 800c064:	f001 fc66 	bl	800d934 <RegionEU868SetBandTxDone>
 800c068:	e7f6      	b.n	800c058 <RegionSetBandTxDone+0x8>

0800c06a <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800c06a:	b508      	push	{r3, lr}
    switch( region )
 800c06c:	b110      	cbz	r0, 800c074 <RegionInitDefaults+0xa>
 800c06e:	2805      	cmp	r0, #5
 800c070:	d004      	beq.n	800c07c <RegionInitDefaults+0x12>
        default:
        {
            break;
        }
    }
}
 800c072:	bd08      	pop	{r3, pc}
        AS923_INIT_DEFAULTS( );
 800c074:	4608      	mov	r0, r1
 800c076:	f000 fa6b 	bl	800c550 <RegionAS923InitDefaults>
 800c07a:	e7fa      	b.n	800c072 <RegionInitDefaults+0x8>
        EU868_INIT_DEFAULTS( );
 800c07c:	4608      	mov	r0, r1
 800c07e:	f001 fc77 	bl	800d970 <RegionEU868InitDefaults>
}
 800c082:	e7f6      	b.n	800c072 <RegionInitDefaults+0x8>

0800c084 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c084:	b508      	push	{r3, lr}
 800c086:	460b      	mov	r3, r1
 800c088:	4611      	mov	r1, r2
    switch( region )
 800c08a:	b118      	cbz	r0, 800c094 <RegionVerify+0x10>
 800c08c:	2805      	cmp	r0, #5
 800c08e:	d005      	beq.n	800c09c <RegionVerify+0x18>
 800c090:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c092:	bd08      	pop	{r3, pc}
        AS923_VERIFY( );
 800c094:	4618      	mov	r0, r3
 800c096:	f000 fab5 	bl	800c604 <RegionAS923Verify>
 800c09a:	e7fa      	b.n	800c092 <RegionVerify+0xe>
        EU868_VERIFY( );
 800c09c:	4618      	mov	r0, r3
 800c09e:	f001 fcd3 	bl	800da48 <RegionEU868Verify>
 800c0a2:	e7f6      	b.n	800c092 <RegionVerify+0xe>

0800c0a4 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800c0a4:	b508      	push	{r3, lr}
    switch( region )
 800c0a6:	b110      	cbz	r0, 800c0ae <RegionApplyCFList+0xa>
 800c0a8:	2805      	cmp	r0, #5
 800c0aa:	d004      	beq.n	800c0b6 <RegionApplyCFList+0x12>
        default:
        {
            break;
        }
    }
}
 800c0ac:	bd08      	pop	{r3, pc}
        AS923_APPLY_CF_LIST( );
 800c0ae:	4608      	mov	r0, r1
 800c0b0:	f000 fe70 	bl	800cd94 <RegionAS923ApplyCFList>
 800c0b4:	e7fa      	b.n	800c0ac <RegionApplyCFList+0x8>
        EU868_APPLY_CF_LIST( );
 800c0b6:	4608      	mov	r0, r1
 800c0b8:	f002 f898 	bl	800e1ec <RegionEU868ApplyCFList>
}
 800c0bc:	e7f6      	b.n	800c0ac <RegionApplyCFList+0x8>

0800c0be <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800c0be:	b508      	push	{r3, lr}
    switch( region )
 800c0c0:	b118      	cbz	r0, 800c0ca <RegionChanMaskSet+0xc>
 800c0c2:	2805      	cmp	r0, #5
 800c0c4:	d005      	beq.n	800c0d2 <RegionChanMaskSet+0x14>
 800c0c6:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c0c8:	bd08      	pop	{r3, pc}
        AS923_CHAN_MASK_SET( );
 800c0ca:	4608      	mov	r0, r1
 800c0cc:	f000 faec 	bl	800c6a8 <RegionAS923ChanMaskSet>
 800c0d0:	e7fa      	b.n	800c0c8 <RegionChanMaskSet+0xa>
        EU868_CHAN_MASK_SET( );
 800c0d2:	4608      	mov	r0, r1
 800c0d4:	f001 fcfe 	bl	800dad4 <RegionEU868ChanMaskSet>
 800c0d8:	e7f6      	b.n	800c0c8 <RegionChanMaskSet+0xa>

0800c0da <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c0da:	b508      	push	{r3, lr}
 800c0dc:	468c      	mov	ip, r1
 800c0de:	4611      	mov	r1, r2
 800c0e0:	461a      	mov	r2, r3
    switch( region )
 800c0e2:	b110      	cbz	r0, 800c0ea <RegionComputeRxWindowParameters+0x10>
 800c0e4:	2805      	cmp	r0, #5
 800c0e6:	d005      	beq.n	800c0f4 <RegionComputeRxWindowParameters+0x1a>
        default:
        {
            break;
        }
    }
}
 800c0e8:	bd08      	pop	{r3, pc}
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c0ea:	9b02      	ldr	r3, [sp, #8]
 800c0ec:	4660      	mov	r0, ip
 800c0ee:	f000 faf9 	bl	800c6e4 <RegionAS923ComputeRxWindowParameters>
 800c0f2:	e7f9      	b.n	800c0e8 <RegionComputeRxWindowParameters+0xe>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c0f4:	9b02      	ldr	r3, [sp, #8]
 800c0f6:	4660      	mov	r0, ip
 800c0f8:	f001 fd0a 	bl	800db10 <RegionEU868ComputeRxWindowParameters>
}
 800c0fc:	e7f4      	b.n	800c0e8 <RegionComputeRxWindowParameters+0xe>

0800c0fe <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c0fe:	b508      	push	{r3, lr}
 800c100:	460b      	mov	r3, r1
 800c102:	4611      	mov	r1, r2
    switch( region )
 800c104:	b118      	cbz	r0, 800c10e <RegionRxConfig+0x10>
 800c106:	2805      	cmp	r0, #5
 800c108:	d005      	beq.n	800c116 <RegionRxConfig+0x18>
 800c10a:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c10c:	bd08      	pop	{r3, pc}
        AS923_RX_CONFIG( );
 800c10e:	4618      	mov	r0, r3
 800c110:	f000 fb1e 	bl	800c750 <RegionAS923RxConfig>
 800c114:	e7fa      	b.n	800c10c <RegionRxConfig+0xe>
        EU868_RX_CONFIG( );
 800c116:	4618      	mov	r0, r3
 800c118:	f001 fd30 	bl	800db7c <RegionEU868RxConfig>
 800c11c:	e7f6      	b.n	800c10c <RegionRxConfig+0xe>

0800c11e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c11e:	b508      	push	{r3, lr}
 800c120:	468c      	mov	ip, r1
 800c122:	4611      	mov	r1, r2
 800c124:	461a      	mov	r2, r3
    switch( region )
 800c126:	b118      	cbz	r0, 800c130 <RegionTxConfig+0x12>
 800c128:	2805      	cmp	r0, #5
 800c12a:	d005      	beq.n	800c138 <RegionTxConfig+0x1a>
 800c12c:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c12e:	bd08      	pop	{r3, pc}
        AS923_TX_CONFIG( );
 800c130:	4660      	mov	r0, ip
 800c132:	f000 fb91 	bl	800c858 <RegionAS923TxConfig>
 800c136:	e7fa      	b.n	800c12e <RegionTxConfig+0x10>
        EU868_TX_CONFIG( );
 800c138:	4660      	mov	r0, ip
 800c13a:	f001 fda3 	bl	800dc84 <RegionEU868TxConfig>
 800c13e:	e7f6      	b.n	800c12e <RegionTxConfig+0x10>

0800c140 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c140:	b500      	push	{lr}
 800c142:	b083      	sub	sp, #12
 800c144:	468c      	mov	ip, r1
 800c146:	4611      	mov	r1, r2
 800c148:	461a      	mov	r2, r3
    switch( region )
 800c14a:	b128      	cbz	r0, 800c158 <RegionLinkAdrReq+0x18>
 800c14c:	2805      	cmp	r0, #5
 800c14e:	d00a      	beq.n	800c166 <RegionLinkAdrReq+0x26>
 800c150:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c152:	b003      	add	sp, #12
 800c154:	f85d fb04 	ldr.w	pc, [sp], #4
        AS923_LINK_ADR_REQ( );
 800c158:	9b05      	ldr	r3, [sp, #20]
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	9b04      	ldr	r3, [sp, #16]
 800c15e:	4660      	mov	r0, ip
 800c160:	f000 fc12 	bl	800c988 <RegionAS923LinkAdrReq>
 800c164:	e7f5      	b.n	800c152 <RegionLinkAdrReq+0x12>
        EU868_LINK_ADR_REQ( );
 800c166:	9b05      	ldr	r3, [sp, #20]
 800c168:	9300      	str	r3, [sp, #0]
 800c16a:	9b04      	ldr	r3, [sp, #16]
 800c16c:	4660      	mov	r0, ip
 800c16e:	f001 fe21 	bl	800ddb4 <RegionEU868LinkAdrReq>
 800c172:	e7ee      	b.n	800c152 <RegionLinkAdrReq+0x12>

0800c174 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800c174:	b508      	push	{r3, lr}
    switch( region )
 800c176:	b118      	cbz	r0, 800c180 <RegionRxParamSetupReq+0xc>
 800c178:	2805      	cmp	r0, #5
 800c17a:	d005      	beq.n	800c188 <RegionRxParamSetupReq+0x14>
 800c17c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c17e:	bd08      	pop	{r3, pc}
        AS923_RX_PARAM_SETUP_REQ( );
 800c180:	4608      	mov	r0, r1
 800c182:	f000 fcc7 	bl	800cb14 <RegionAS923RxParamSetupReq>
 800c186:	e7fa      	b.n	800c17e <RegionRxParamSetupReq+0xa>
        EU868_RX_PARAM_SETUP_REQ( );
 800c188:	4608      	mov	r0, r1
 800c18a:	f001 fed9 	bl	800df40 <RegionEU868RxParamSetupReq>
 800c18e:	e7f6      	b.n	800c17e <RegionRxParamSetupReq+0xa>

0800c190 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800c190:	b508      	push	{r3, lr}
    switch( region )
 800c192:	b118      	cbz	r0, 800c19c <RegionNewChannelReq+0xc>
 800c194:	2805      	cmp	r0, #5
 800c196:	d005      	beq.n	800c1a4 <RegionNewChannelReq+0x14>
 800c198:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c19a:	bd08      	pop	{r3, pc}
        AS923_NEW_CHANNEL_REQ( );
 800c19c:	4608      	mov	r0, r1
 800c19e:	f000 fe3a 	bl	800ce16 <RegionAS923NewChannelReq>
 800c1a2:	e7fa      	b.n	800c19a <RegionNewChannelReq+0xa>
        EU868_NEW_CHANNEL_REQ( );
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	f002 f862 	bl	800e26e <RegionEU868NewChannelReq>
 800c1aa:	e7f6      	b.n	800c19a <RegionNewChannelReq+0xa>

0800c1ac <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800c1ac:	b508      	push	{r3, lr}
    switch( region )
 800c1ae:	b118      	cbz	r0, 800c1b8 <RegionTxParamSetupReq+0xc>
 800c1b0:	2805      	cmp	r0, #5
 800c1b2:	d005      	beq.n	800c1c0 <RegionTxParamSetupReq+0x14>
 800c1b4:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c1b6:	bd08      	pop	{r3, pc}
        AS923_TX_PARAM_SETUP_REQ( );
 800c1b8:	4608      	mov	r0, r1
 800c1ba:	f000 fcc8 	bl	800cb4e <RegionAS923TxParamSetupReq>
 800c1be:	e7fa      	b.n	800c1b6 <RegionTxParamSetupReq+0xa>
        EU868_TX_PARAM_SETUP_REQ( );
 800c1c0:	4608      	mov	r0, r1
 800c1c2:	f001 fee1 	bl	800df88 <RegionEU868TxParamSetupReq>
 800c1c6:	e7f6      	b.n	800c1b6 <RegionTxParamSetupReq+0xa>

0800c1c8 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800c1c8:	b508      	push	{r3, lr}
    switch( region )
 800c1ca:	b118      	cbz	r0, 800c1d4 <RegionDlChannelReq+0xc>
 800c1cc:	2805      	cmp	r0, #5
 800c1ce:	d005      	beq.n	800c1dc <RegionDlChannelReq+0x14>
 800c1d0:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c1d2:	bd08      	pop	{r3, pc}
        AS923_DL_CHANNEL_REQ( );
 800c1d4:	4608      	mov	r0, r1
 800c1d6:	f000 fcbd 	bl	800cb54 <RegionAS923DlChannelReq>
 800c1da:	e7fa      	b.n	800c1d2 <RegionDlChannelReq+0xa>
        EU868_DL_CHANNEL_REQ( );
 800c1dc:	4608      	mov	r0, r1
 800c1de:	f001 fed7 	bl	800df90 <RegionEU868DlChannelReq>
 800c1e2:	e7f6      	b.n	800c1d2 <RegionDlChannelReq+0xa>

0800c1e4 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800c1e4:	b508      	push	{r3, lr}
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	4611      	mov	r1, r2
    switch( region )
 800c1ea:	b118      	cbz	r0, 800c1f4 <RegionAlternateDr+0x10>
 800c1ec:	2805      	cmp	r0, #5
 800c1ee:	d005      	beq.n	800c1fc <RegionAlternateDr+0x18>
 800c1f0:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c1f2:	bd08      	pop	{r3, pc}
        AS923_ALTERNATE_DR( );
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 fcd3 	bl	800cba0 <RegionAS923AlternateDr>
 800c1fa:	e7fa      	b.n	800c1f2 <RegionAlternateDr+0xe>
        EU868_ALTERNATE_DR( );
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f001 fef3 	bl	800dfe8 <RegionEU868AlternateDr>
 800c202:	e7f6      	b.n	800c1f2 <RegionAlternateDr+0xe>

0800c204 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c204:	b508      	push	{r3, lr}
 800c206:	468c      	mov	ip, r1
 800c208:	4611      	mov	r1, r2
 800c20a:	461a      	mov	r2, r3
    switch( region )
 800c20c:	b118      	cbz	r0, 800c216 <RegionNextChannel+0x12>
 800c20e:	2805      	cmp	r0, #5
 800c210:	d006      	beq.n	800c220 <RegionNextChannel+0x1c>
 800c212:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800c214:	bd08      	pop	{r3, pc}
        AS923_NEXT_CHANNEL( );
 800c216:	9b02      	ldr	r3, [sp, #8]
 800c218:	4660      	mov	r0, ip
 800c21a:	f000 fcc3 	bl	800cba4 <RegionAS923NextChannel>
 800c21e:	e7f9      	b.n	800c214 <RegionNextChannel+0x10>
        EU868_NEXT_CHANNEL( );
 800c220:	9b02      	ldr	r3, [sp, #8]
 800c222:	4660      	mov	r0, ip
 800c224:	f001 fee2 	bl	800dfec <RegionEU868NextChannel>
 800c228:	e7f4      	b.n	800c214 <RegionNextChannel+0x10>

0800c22a <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800c22a:	b508      	push	{r3, lr}
    switch( region )
 800c22c:	b110      	cbz	r0, 800c234 <RegionSetContinuousWave+0xa>
 800c22e:	2805      	cmp	r0, #5
 800c230:	d004      	beq.n	800c23c <RegionSetContinuousWave+0x12>
        default:
        {
            break;
        }
    }
}
 800c232:	bd08      	pop	{r3, pc}
        AS923_SET_CONTINUOUS_WAVE( );
 800c234:	4608      	mov	r0, r1
 800c236:	f000 fe19 	bl	800ce6c <RegionAS923SetContinuousWave>
 800c23a:	e7fa      	b.n	800c232 <RegionSetContinuousWave+0x8>
        EU868_SET_CONTINUOUS_WAVE( );
 800c23c:	4608      	mov	r0, r1
 800c23e:	f002 f841 	bl	800e2c4 <RegionEU868SetContinuousWave>
}
 800c242:	e7f6      	b.n	800c232 <RegionSetContinuousWave+0x8>

0800c244 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c244:	b508      	push	{r3, lr}
 800c246:	468c      	mov	ip, r1
 800c248:	4611      	mov	r1, r2
 800c24a:	461a      	mov	r2, r3
    switch( region )
 800c24c:	b118      	cbz	r0, 800c256 <RegionApplyDrOffset+0x12>
 800c24e:	2805      	cmp	r0, #5
 800c250:	d005      	beq.n	800c25e <RegionApplyDrOffset+0x1a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800c252:	b2c8      	uxtb	r0, r1
 800c254:	e002      	b.n	800c25c <RegionApplyDrOffset+0x18>
        AS923_APPLY_DR_OFFSET( );
 800c256:	4660      	mov	r0, ip
 800c258:	f000 fe36 	bl	800cec8 <RegionAS923ApplyDrOffset>
        }
    }
}
 800c25c:	bd08      	pop	{r3, pc}
        EU868_APPLY_DR_OFFSET( );
 800c25e:	4660      	mov	r0, ip
 800c260:	f002 f85e 	bl	800e320 <RegionEU868ApplyDrOffset>
 800c264:	e7fa      	b.n	800c25c <RegionApplyDrOffset+0x18>
	...

0800c268 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800c268:	4800      	ldr	r0, [pc, #0]	; (800c26c <RegionGetVersion+0x4>)
 800c26a:	4770      	bx	lr
 800c26c:	01010003 	.word	0x01010003

0800c270 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800c270:	b510      	push	{r4, lr}
 800c272:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800c274:	4b05      	ldr	r3, [pc, #20]	; (800c28c <VerifyRfFreq+0x1c>)
 800c276:	6a1b      	ldr	r3, [r3, #32]
 800c278:	4798      	blx	r3
 800c27a:	b120      	cbz	r0, 800c286 <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 800c27c:	4b04      	ldr	r3, [pc, #16]	; (800c290 <VerifyRfFreq+0x20>)
 800c27e:	4423      	add	r3, r4
 800c280:	4a04      	ldr	r2, [pc, #16]	; (800c294 <VerifyRfFreq+0x24>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d800      	bhi.n	800c288 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 800c286:	bd10      	pop	{r4, pc}
        return false;
 800c288:	2000      	movs	r0, #0
 800c28a:	e7fc      	b.n	800c286 <VerifyRfFreq+0x16>
 800c28c:	08012954 	.word	0x08012954
 800c290:	c9763540 	.word	0xc9763540
 800c294:	00c65d40 	.word	0x00c65d40

0800c298 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	4605      	mov	r5, r0
 800c29e:	460c      	mov	r4, r1
    int8_t phyDr = DataratesAS923[datarate];
 800c2a0:	4b13      	ldr	r3, [pc, #76]	; (800c2f0 <GetTimeOnAir+0x58>)
 800c2a2:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 800c2a4:	4913      	ldr	r1, [pc, #76]	; (800c2f4 <GetTimeOnAir+0x5c>)
 800c2a6:	f001 f9b9 	bl	800d61c <RegionCommonGetBandwidth>
 800c2aa:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800c2ac:	2d07      	cmp	r5, #7
 800c2ae:	d00e      	beq.n	800c2ce <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800c2b0:	4b11      	ldr	r3, [pc, #68]	; (800c2f8 <GetTimeOnAir+0x60>)
 800c2b2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800c2b4:	2001      	movs	r0, #1
 800c2b6:	9003      	str	r0, [sp, #12]
 800c2b8:	b2e4      	uxtb	r4, r4
 800c2ba:	9402      	str	r4, [sp, #8]
 800c2bc:	2300      	movs	r3, #0
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	2308      	movs	r3, #8
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	4632      	mov	r2, r6
 800c2c8:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800c2ca:	b004      	add	sp, #16
 800c2cc:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800c2ce:	4b0a      	ldr	r3, [pc, #40]	; (800c2f8 <GetTimeOnAir+0x60>)
 800c2d0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	9303      	str	r3, [sp, #12]
 800c2d6:	b2e4      	uxtb	r4, r4
 800c2d8:	9402      	str	r4, [sp, #8]
 800c2da:	2000      	movs	r0, #0
 800c2dc:	9001      	str	r0, [sp, #4]
 800c2de:	2305      	movs	r3, #5
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2e8:	fb06 f202 	mul.w	r2, r6, r2
 800c2ec:	47a8      	blx	r5
 800c2ee:	e7ec      	b.n	800c2ca <GetTimeOnAir+0x32>
 800c2f0:	080122e8 	.word	0x080122e8
 800c2f4:	080122c8 	.word	0x080122c8
 800c2f8:	08012954 	.word	0x08012954

0800c2fc <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 800c2fc:	b500      	push	{lr}
 800c2fe:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800c300:	2300      	movs	r3, #0
 800c302:	9304      	str	r3, [sp, #16]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 800c304:	7803      	ldrb	r3, [r0, #0]
 800c306:	3b01      	subs	r3, #1
 800c308:	2b38      	cmp	r3, #56	; 0x38
 800c30a:	d846      	bhi.n	800c39a <RegionAS923GetPhyParam+0x9e>
 800c30c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c310:	003e0039 	.word	0x003e0039
 800c314:	00450045 	.word	0x00450045
 800c318:	00430045 	.word	0x00430045
 800c31c:	00450045 	.word	0x00450045
 800c320:	00450045 	.word	0x00450045
 800c324:	00670064 	.word	0x00670064
 800c328:	0078006a 	.word	0x0078006a
 800c32c:	00860045 	.word	0x00860045
 800c330:	008e008a 	.word	0x008e008a
 800c334:	00960092 	.word	0x00960092
 800c338:	009e009a 	.word	0x009e009a
 800c33c:	00a70045 	.word	0x00a70045
 800c340:	00ad00aa 	.word	0x00ad00aa
 800c344:	00b900b3 	.word	0x00b900b3
 800c348:	00c000bc 	.word	0x00c000bc
 800c34c:	00c600c3 	.word	0x00c600c3
 800c350:	004a00ca 	.word	0x004a00ca
 800c354:	00450045 	.word	0x00450045
 800c358:	00450045 	.word	0x00450045
 800c35c:	00450045 	.word	0x00450045
 800c360:	00450045 	.word	0x00450045
 800c364:	00450045 	.word	0x00450045
 800c368:	00450045 	.word	0x00450045
 800c36c:	00cd0045 	.word	0x00cd0045
 800c370:	00d700d0 	.word	0x00d700d0
 800c374:	00450045 	.word	0x00450045
 800c378:	00dd00da 	.word	0x00dd00da
 800c37c:	00e00045 	.word	0x00e00045
 800c380:	00e6      	.short	0x00e6
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 800c382:	78c3      	ldrb	r3, [r0, #3]
 800c384:	b14b      	cbz	r3, 800c39a <RegionAS923GetPhyParam+0x9e>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 800c386:	2302      	movs	r3, #2
 800c388:	9304      	str	r3, [sp, #16]
 800c38a:	e006      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            }
            break;
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 800c38c:	7883      	ldrb	r3, [r0, #2]
 800c38e:	b123      	cbz	r3, 800c39a <RegionAS923GetPhyParam+0x9e>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 800c390:	2302      	movs	r3, #2
 800c392:	9304      	str	r3, [sp, #16]
 800c394:	e001      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 800c396:	2302      	movs	r3, #2
 800c398:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 800c39a:	9804      	ldr	r0, [sp, #16]
 800c39c:	9005      	str	r0, [sp, #20]
}
 800c39e:	b007      	add	sp, #28
 800c3a0:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800c3a4:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c3a8:	f88d 3004 	strb.w	r3, [sp, #4]
 800c3ac:	2307      	movs	r3, #7
 800c3ae:	f88d 3005 	strb.w	r3, [sp, #5]
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 800c3b2:	7883      	ldrb	r3, [r0, #2]
 800c3b4:	b103      	cbz	r3, 800c3b8 <RegionAS923GetPhyParam+0xbc>
 800c3b6:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c3b8:	f88d 3006 	strb.w	r3, [sp, #6]
 800c3bc:	2310      	movs	r3, #16
 800c3be:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800c3c2:	4b4a      	ldr	r3, [pc, #296]	; (800c4ec <RegionAS923GetPhyParam+0x1f0>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c3ca:	9202      	str	r2, [sp, #8]
 800c3cc:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800c3ce:	a801      	add	r0, sp, #4
 800c3d0:	f001 f901 	bl	800d5d6 <RegionCommonGetNextLowerTxDr>
 800c3d4:	9004      	str	r0, [sp, #16]
            break;
 800c3d6:	e7e0      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800c3d8:	2340      	movs	r3, #64	; 0x40
 800c3da:	9304      	str	r3, [sp, #16]
            break;
 800c3dc:	e7dd      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800c3de:	2320      	movs	r3, #32
 800c3e0:	9304      	str	r3, [sp, #16]
            break;
 800c3e2:	e7da      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            if( getPhy->UplinkDwellTime == 0 )
 800c3e4:	7883      	ldrb	r3, [r0, #2]
 800c3e6:	b92b      	cbnz	r3, 800c3f4 <RegionAS923GetPhyParam+0xf8>
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 800c3e8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c3ec:	4a40      	ldr	r2, [pc, #256]	; (800c4f0 <RegionAS923GetPhyParam+0x1f4>)
 800c3ee:	5cd3      	ldrb	r3, [r2, r3]
 800c3f0:	9304      	str	r3, [sp, #16]
 800c3f2:	e7d2      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 800c3f4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c3f8:	4a3e      	ldr	r2, [pc, #248]	; (800c4f4 <RegionAS923GetPhyParam+0x1f8>)
 800c3fa:	5cd3      	ldrb	r3, [r2, r3]
 800c3fc:	9304      	str	r3, [sp, #16]
 800c3fe:	e7cc      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            if( getPhy->UplinkDwellTime == 0 )
 800c400:	7883      	ldrb	r3, [r0, #2]
 800c402:	b92b      	cbnz	r3, 800c410 <RegionAS923GetPhyParam+0x114>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 800c404:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c408:	4a3b      	ldr	r2, [pc, #236]	; (800c4f8 <RegionAS923GetPhyParam+0x1fc>)
 800c40a:	5cd3      	ldrb	r3, [r2, r3]
 800c40c:	9304      	str	r3, [sp, #16]
 800c40e:	e7c4      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 800c410:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c414:	4a37      	ldr	r2, [pc, #220]	; (800c4f4 <RegionAS923GetPhyParam+0x1f8>)
 800c416:	5cd3      	ldrb	r3, [r2, r3]
 800c418:	9304      	str	r3, [sp, #16]
 800c41a:	e7be      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_MAX_RX_WINDOW;
 800c41c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c420:	9304      	str	r3, [sp, #16]
            break;
 800c422:	e7ba      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800c424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c428:	9304      	str	r3, [sp, #16]
            break;
 800c42a:	e7b6      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800c42c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c430:	9304      	str	r3, [sp, #16]
            break;
 800c432:	e7b2      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800c434:	f241 3388 	movw	r3, #5000	; 0x1388
 800c438:	9304      	str	r3, [sp, #16]
            break;
 800c43a:	e7ae      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800c43c:	f241 7370 	movw	r3, #6000	; 0x1770
 800c440:	9304      	str	r3, [sp, #16]
            break;
 800c442:	e7aa      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800c444:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c448:	9304      	str	r3, [sp, #16]
            break;
 800c44a:	e7a6      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800c44c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c450:	482a      	ldr	r0, [pc, #168]	; (800c4fc <RegionAS923GetPhyParam+0x200>)
 800c452:	f002 fe9f 	bl	800f194 <randr>
 800c456:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800c45a:	9004      	str	r0, [sp, #16]
            break;
 800c45c:	e79d      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 800c45e:	4b28      	ldr	r3, [pc, #160]	; (800c500 <RegionAS923GetPhyParam+0x204>)
 800c460:	9304      	str	r3, [sp, #16]
            break;
 800c462:	e79a      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_RX_WND_2_DR;
 800c464:	2302      	movs	r3, #2
 800c466:	9304      	str	r3, [sp, #16]
            break;
 800c468:	e797      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c46a:	4b20      	ldr	r3, [pc, #128]	; (800c4ec <RegionAS923GetPhyParam+0x1f0>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800c472:	9304      	str	r3, [sp, #16]
            break;
 800c474:	e791      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800c476:	4b1d      	ldr	r3, [pc, #116]	; (800c4ec <RegionAS923GetPhyParam+0x1f0>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800c47e:	9304      	str	r3, [sp, #16]
            break;
 800c480:	e78b      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 800c482:	2310      	movs	r3, #16
 800c484:	9304      	str	r3, [sp, #16]
            break;
 800c486:	e788      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800c488:	4b18      	ldr	r3, [pc, #96]	; (800c4ec <RegionAS923GetPhyParam+0x1f0>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	9304      	str	r3, [sp, #16]
            break;
 800c48e:	e784      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 800c490:	2301      	movs	r3, #1
 800c492:	9304      	str	r3, [sp, #16]
            break;
 800c494:	e781      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 800c496:	2301      	movs	r3, #1
 800c498:	9304      	str	r3, [sp, #16]
            break;
 800c49a:	e77e      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 800c49c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800c4a0:	9304      	str	r3, [sp, #16]
            break;
 800c4a2:	e77a      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 800c4a4:	4b17      	ldr	r3, [pc, #92]	; (800c504 <RegionAS923GetPhyParam+0x208>)
 800c4a6:	9304      	str	r3, [sp, #16]
            break;
 800c4a8:	e777      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 800c4aa:	4b17      	ldr	r3, [pc, #92]	; (800c508 <RegionAS923GetPhyParam+0x20c>)
 800c4ac:	9304      	str	r3, [sp, #16]
            break;
 800c4ae:	e774      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 800c4b0:	2311      	movs	r3, #17
 800c4b2:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 800c4b6:	2302      	movs	r3, #2
 800c4b8:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800c4bc:	e76d      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 800c4be:	2303      	movs	r3, #3
 800c4c0:	9304      	str	r3, [sp, #16]
            break;
 800c4c2:	e76a      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
 800c4c4:	4b10      	ldr	r3, [pc, #64]	; (800c508 <RegionAS923GetPhyParam+0x20c>)
 800c4c6:	9304      	str	r3, [sp, #16]
            break;
 800c4c8:	e767      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 800c4ca:	2303      	movs	r3, #3
 800c4cc:	9304      	str	r3, [sp, #16]
            break;
 800c4ce:	e764      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 800c4d0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c4d4:	4a0d      	ldr	r2, [pc, #52]	; (800c50c <RegionAS923GetPhyParam+0x210>)
 800c4d6:	5cd3      	ldrb	r3, [r2, r3]
 800c4d8:	9304      	str	r3, [sp, #16]
            break;
 800c4da:	e75e      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 800c4dc:	490c      	ldr	r1, [pc, #48]	; (800c510 <RegionAS923GetPhyParam+0x214>)
 800c4de:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800c4e2:	f001 f89b 	bl	800d61c <RegionCommonGetBandwidth>
 800c4e6:	9004      	str	r0, [sp, #16]
            break;
 800c4e8:	e757      	b.n	800c39a <RegionAS923GetPhyParam+0x9e>
 800c4ea:	bf00      	nop
 800c4ec:	20000c68 	.word	0x20000c68
 800c4f0:	080122f8 	.word	0x080122f8
 800c4f4:	08012300 	.word	0x08012300
 800c4f8:	08012308 	.word	0x08012308
 800c4fc:	fffffc18 	.word	0xfffffc18
 800c500:	3706ea00 	.word	0x3706ea00
 800c504:	4009999a 	.word	0x4009999a
 800c508:	3709f740 	.word	0x3709f740
 800c50c:	080122e8 	.word	0x080122e8
 800c510:	080122c8 	.word	0x080122c8

0800c514 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800c514:	b510      	push	{r4, lr}
 800c516:	b082      	sub	sp, #8
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800c518:	4b0b      	ldr	r3, [pc, #44]	; (800c548 <RegionAS923SetBandTxDone+0x34>)
 800c51a:	681c      	ldr	r4, [r3, #0]
 800c51c:	4b0b      	ldr	r3, [pc, #44]	; (800c54c <RegionAS923SetBandTxDone+0x38>)
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	7803      	ldrb	r3, [r0, #0]
 800c522:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c526:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c52a:	7a5b      	ldrb	r3, [r3, #9]
 800c52c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800c530:	6903      	ldr	r3, [r0, #16]
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	68c3      	ldr	r3, [r0, #12]
 800c536:	7842      	ldrb	r2, [r0, #1]
 800c538:	6881      	ldr	r1, [r0, #8]
 800c53a:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800c53e:	f000 fe23 	bl	800d188 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 800c542:	b002      	add	sp, #8
 800c544:	bd10      	pop	{r4, pc}
 800c546:	bf00      	nop
 800c548:	20000c64 	.word	0x20000c64
 800c54c:	20000c68 	.word	0x20000c68

0800c550 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 800c550:	b510      	push	{r4, lr}
 800c552:	b086      	sub	sp, #24
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 800c554:	2364      	movs	r3, #100	; 0x64
 800c556:	f8ad 3000 	strh.w	r3, [sp]
 800c55a:	2300      	movs	r3, #0
 800c55c:	f88d 3002 	strb.w	r3, [sp, #2]
 800c560:	9301      	str	r3, [sp, #4]
 800c562:	9302      	str	r3, [sp, #8]
 800c564:	9303      	str	r3, [sp, #12]
 800c566:	9304      	str	r3, [sp, #16]
 800c568:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        AS923_BAND0
    };

    switch( params->Type )
 800c56c:	7a03      	ldrb	r3, [r0, #8]
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d02b      	beq.n	800c5ca <RegionAS923InitDefaults+0x7a>
 800c572:	2b02      	cmp	r3, #2
 800c574:	d036      	beq.n	800c5e4 <RegionAS923InitDefaults+0x94>
 800c576:	b10b      	cbz	r3, 800c57c <RegionAS923InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_AS923 */
}
 800c578:	b006      	add	sp, #24
 800c57a:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800c57c:	6803      	ldr	r3, [r0, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d0fa      	beq.n	800c578 <RegionAS923InitDefaults+0x28>
 800c582:	6842      	ldr	r2, [r0, #4]
 800c584:	2a00      	cmp	r2, #0
 800c586:	d0f7      	beq.n	800c578 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800c588:	491b      	ldr	r1, [pc, #108]	; (800c5f8 <RegionAS923InitDefaults+0xa8>)
 800c58a:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800c58c:	4c1b      	ldr	r4, [pc, #108]	; (800c5fc <RegionAS923InitDefaults+0xac>)
 800c58e:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 800c590:	2218      	movs	r2, #24
 800c592:	4669      	mov	r1, sp
 800c594:	4618      	mov	r0, r3
 800c596:	f002 fe0a 	bl	800f1ae <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 800c59a:	6824      	ldr	r4, [r4, #0]
 800c59c:	4b18      	ldr	r3, [pc, #96]	; (800c600 <RegionAS923InitDefaults+0xb0>)
 800c59e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 800c5a6:	f104 0c0c 	add.w	ip, r4, #12
 800c5aa:	330c      	adds	r3, #12
 800c5ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5b0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 800c5b4:	2303      	movs	r3, #3
 800c5b6:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 800c5c0:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 800c5c4:	f000 fdd1 	bl	800d16a <RegionCommonChanMaskCopy>
            break;
 800c5c8:	e7d6      	b.n	800c578 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800c5ca:	4b0c      	ldr	r3, [pc, #48]	; (800c5fc <RegionAS923InitDefaults+0xac>)
 800c5cc:	6818      	ldr	r0, [r3, #0]
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800c5d2:	6103      	str	r3, [r0, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800c5da:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800c5de:	f000 fdc4 	bl	800d16a <RegionCommonChanMaskCopy>
            break;
 800c5e2:	e7c9      	b.n	800c578 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800c5e4:	4b05      	ldr	r3, [pc, #20]	; (800c5fc <RegionAS923InitDefaults+0xac>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800c5ec:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800c5f0:	430a      	orrs	r2, r1
 800c5f2:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800c5f6:	e7bf      	b.n	800c578 <RegionAS923InitDefaults+0x28>
 800c5f8:	20000c64 	.word	0x20000c64
 800c5fc:	20000c68 	.word	0x20000c68
 800c600:	08011c5c 	.word	0x08011c5c

0800c604 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c604:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( phyAttribute )
 800c606:	290a      	cmp	r1, #10
 800c608:	d84b      	bhi.n	800c6a2 <RegionAS923Verify+0x9e>
 800c60a:	e8df f001 	tbb	[pc, r1]
 800c60e:	4a06      	.short	0x4a06
 800c610:	0a4a4a4a 	.word	0x0a4a4a4a
 800c614:	404a2a20 	.word	0x404a2a20
 800c618:	40          	.byte	0x40
 800c619:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800c61a:	6800      	ldr	r0, [r0, #0]
 800c61c:	f7ff fe28 	bl	800c270 <VerifyRfFreq>
 800c620:	e040      	b.n	800c6a4 <RegionAS923Verify+0xa0>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800c622:	7883      	ldrb	r3, [r0, #2]
 800c624:	b94b      	cbnz	r3, 800c63a <RegionAS923Verify+0x36>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 800c626:	2207      	movs	r2, #7
 800c628:	2100      	movs	r1, #0
 800c62a:	f990 0000 	ldrsb.w	r0, [r0]
 800c62e:	f000 fd28 	bl	800d082 <RegionCommonValueInRange>
 800c632:	3800      	subs	r0, #0
 800c634:	bf18      	it	ne
 800c636:	2001      	movne	r0, #1
 800c638:	e034      	b.n	800c6a4 <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 800c63a:	2207      	movs	r2, #7
 800c63c:	2102      	movs	r1, #2
 800c63e:	f990 0000 	ldrsb.w	r0, [r0]
 800c642:	f000 fd1e 	bl	800d082 <RegionCommonValueInRange>
 800c646:	3800      	subs	r0, #0
 800c648:	bf18      	it	ne
 800c64a:	2001      	movne	r0, #1
 800c64c:	e02a      	b.n	800c6a4 <RegionAS923Verify+0xa0>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800c64e:	2205      	movs	r2, #5
 800c650:	2100      	movs	r1, #0
 800c652:	f990 0000 	ldrsb.w	r0, [r0]
 800c656:	f000 fd14 	bl	800d082 <RegionCommonValueInRange>
 800c65a:	3800      	subs	r0, #0
 800c65c:	bf18      	it	ne
 800c65e:	2001      	movne	r0, #1
 800c660:	e020      	b.n	800c6a4 <RegionAS923Verify+0xa0>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 800c662:	7843      	ldrb	r3, [r0, #1]
 800c664:	b94b      	cbnz	r3, 800c67a <RegionAS923Verify+0x76>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 800c666:	2207      	movs	r2, #7
 800c668:	2100      	movs	r1, #0
 800c66a:	f990 0000 	ldrsb.w	r0, [r0]
 800c66e:	f000 fd08 	bl	800d082 <RegionCommonValueInRange>
 800c672:	3800      	subs	r0, #0
 800c674:	bf18      	it	ne
 800c676:	2001      	movne	r0, #1
 800c678:	e014      	b.n	800c6a4 <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 800c67a:	2207      	movs	r2, #7
 800c67c:	2102      	movs	r1, #2
 800c67e:	f990 0000 	ldrsb.w	r0, [r0]
 800c682:	f000 fcfe 	bl	800d082 <RegionCommonValueInRange>
 800c686:	3800      	subs	r0, #0
 800c688:	bf18      	it	ne
 800c68a:	2001      	movne	r0, #1
 800c68c:	e00a      	b.n	800c6a4 <RegionAS923Verify+0xa0>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800c68e:	2207      	movs	r2, #7
 800c690:	2100      	movs	r1, #0
 800c692:	f990 0000 	ldrsb.w	r0, [r0]
 800c696:	f000 fcf4 	bl	800d082 <RegionCommonValueInRange>
 800c69a:	3800      	subs	r0, #0
 800c69c:	bf18      	it	ne
 800c69e:	2001      	movne	r0, #1
 800c6a0:	e000      	b.n	800c6a4 <RegionAS923Verify+0xa0>
    switch( phyAttribute )
 800c6a2:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 800c6a4:	bd08      	pop	{r3, pc}
	...

0800c6a8 <RegionAS923ChanMaskSet>:
    }
#endif /* REGION_AS923 */
}

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800c6a8:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 800c6aa:	7903      	ldrb	r3, [r0, #4]
 800c6ac:	b11b      	cbz	r3, 800c6b6 <RegionAS923ChanMaskSet+0xe>
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d00b      	beq.n	800c6ca <RegionAS923ChanMaskSet+0x22>
 800c6b2:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 800c6b4:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800c6b6:	4b0a      	ldr	r3, [pc, #40]	; (800c6e0 <RegionAS923ChanMaskSet+0x38>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	6801      	ldr	r1, [r0, #0]
 800c6be:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800c6c2:	f000 fd52 	bl	800d16a <RegionCommonChanMaskCopy>
    return true;
 800c6c6:	2001      	movs	r0, #1
            break;
 800c6c8:	e7f4      	b.n	800c6b4 <RegionAS923ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800c6ca:	4b05      	ldr	r3, [pc, #20]	; (800c6e0 <RegionAS923ChanMaskSet+0x38>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	6801      	ldr	r1, [r0, #0]
 800c6d2:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800c6d6:	f000 fd48 	bl	800d16a <RegionCommonChanMaskCopy>
    return true;
 800c6da:	2001      	movs	r0, #1
            break;
 800c6dc:	e7ea      	b.n	800c6b4 <RegionAS923ChanMaskSet+0xc>
 800c6de:	bf00      	nop
 800c6e0:	20000c68 	.word	0x20000c68

0800c6e4 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	460e      	mov	r6, r1
 800c6ea:	4617      	mov	r7, r2
 800c6ec:	461c      	mov	r4, r3
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800c6ee:	2807      	cmp	r0, #7
 800c6f0:	bfa8      	it	ge
 800c6f2:	2007      	movge	r0, #7
 800c6f4:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 800c6f6:	4913      	ldr	r1, [pc, #76]	; (800c744 <RegionAS923ComputeRxWindowParameters+0x60>)
 800c6f8:	f000 ff90 	bl	800d61c <RegionCommonGetBandwidth>
 800c6fc:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800c6fe:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800c702:	2b07      	cmp	r3, #7
 800c704:	d017      	beq.n	800c736 <RegionAS923ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800c706:	4a0f      	ldr	r2, [pc, #60]	; (800c744 <RegionAS923ComputeRxWindowParameters+0x60>)
 800c708:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c70c:	4a0e      	ldr	r2, [pc, #56]	; (800c748 <RegionAS923ComputeRxWindowParameters+0x64>)
 800c70e:	5cd0      	ldrb	r0, [r2, r3]
 800c710:	f000 fe52 	bl	800d3b8 <RegionCommonComputeSymbolTimeLoRa>
 800c714:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800c716:	4b0d      	ldr	r3, [pc, #52]	; (800c74c <RegionAS923ComputeRxWindowParameters+0x68>)
 800c718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c71a:	4798      	blx	r3
 800c71c:	4603      	mov	r3, r0
 800c71e:	f104 020c 	add.w	r2, r4, #12
 800c722:	9201      	str	r2, [sp, #4]
 800c724:	3408      	adds	r4, #8
 800c726:	9400      	str	r4, [sp, #0]
 800c728:	463a      	mov	r2, r7
 800c72a:	4631      	mov	r1, r6
 800c72c:	4628      	mov	r0, r5
 800c72e:	f000 fe51 	bl	800d3d4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 800c732:	b003      	add	sp, #12
 800c734:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 800c736:	4a04      	ldr	r2, [pc, #16]	; (800c748 <RegionAS923ComputeRxWindowParameters+0x64>)
 800c738:	5cd0      	ldrb	r0, [r2, r3]
 800c73a:	f000 fe45 	bl	800d3c8 <RegionCommonComputeSymbolTimeFsk>
 800c73e:	4605      	mov	r5, r0
 800c740:	e7e9      	b.n	800c716 <RegionAS923ComputeRxWindowParameters+0x32>
 800c742:	bf00      	nop
 800c744:	080122c8 	.word	0x080122c8
 800c748:	080122e8 	.word	0x080122e8
 800c74c:	08012954 	.word	0x08012954

0800c750 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c754:	b08a      	sub	sp, #40	; 0x28
 800c756:	4604      	mov	r4, r0
 800c758:	460f      	mov	r7, r1
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800c75a:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800c75e:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800c762:	4b37      	ldr	r3, [pc, #220]	; (800c840 <RegionAS923RxConfig+0xf0>)
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	4798      	blx	r3
 800c768:	2800      	cmp	r0, #0
 800c76a:	d167      	bne.n	800c83c <RegionAS923RxConfig+0xec>
 800c76c:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800c76e:	7ce3      	ldrb	r3, [r4, #19]
 800c770:	b983      	cbnz	r3, 800c794 <RegionAS923RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800c772:	4b34      	ldr	r3, [pc, #208]	; (800c844 <RegionAS923RxConfig+0xf4>)
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	7823      	ldrb	r3, [r4, #0]
 800c778:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c77c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800c780:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c784:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c788:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800c78c:	f1b8 0f00 	cmp.w	r8, #0
 800c790:	d100      	bne.n	800c794 <RegionAS923RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800c792:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 800c794:	4b2c      	ldr	r3, [pc, #176]	; (800c848 <RegionAS923RxConfig+0xf8>)
 800c796:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800c79a:	4b29      	ldr	r3, [pc, #164]	; (800c840 <RegionAS923RxConfig+0xf0>)
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	4640      	mov	r0, r8
 800c7a0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800c7a2:	2d07      	cmp	r5, #7
 800c7a4:	d02b      	beq.n	800c7fe <RegionAS923RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800c7a6:	4b26      	ldr	r3, [pc, #152]	; (800c840 <RegionAS923RxConfig+0xf0>)
 800c7a8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800c7ac:	7ca3      	ldrb	r3, [r4, #18]
 800c7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b0:	2601      	movs	r6, #1
 800c7b2:	9608      	str	r6, [sp, #32]
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	9307      	str	r3, [sp, #28]
 800c7b8:	9306      	str	r3, [sp, #24]
 800c7ba:	9305      	str	r3, [sp, #20]
 800c7bc:	9304      	str	r3, [sp, #16]
 800c7be:	9303      	str	r3, [sp, #12]
 800c7c0:	8922      	ldrh	r2, [r4, #8]
 800c7c2:	9202      	str	r2, [sp, #8]
 800c7c4:	2208      	movs	r2, #8
 800c7c6:	9201      	str	r2, [sp, #4]
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	4633      	mov	r3, r6
 800c7cc:	464a      	mov	r2, r9
 800c7ce:	78a1      	ldrb	r1, [r4, #2]
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800c7d4:	7c63      	ldrb	r3, [r4, #17]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d02d      	beq.n	800c836 <RegionAS923RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 800c7da:	4b1c      	ldr	r3, [pc, #112]	; (800c84c <RegionAS923RxConfig+0xfc>)
 800c7dc:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800c7de:	4b18      	ldr	r3, [pc, #96]	; (800c840 <RegionAS923RxConfig+0xf0>)
 800c7e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7e2:	310d      	adds	r1, #13
 800c7e4:	b2c9      	uxtb	r1, r1
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800c7ea:	462a      	mov	r2, r5
 800c7ec:	4641      	mov	r1, r8
 800c7ee:	7ce0      	ldrb	r0, [r4, #19]
 800c7f0:	f000 ff26 	bl	800d640 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800c7f4:	703d      	strb	r5, [r7, #0]
    return true;
 800c7f6:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 800c7f8:	b00a      	add	sp, #40	; 0x28
 800c7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800c7fe:	4b10      	ldr	r3, [pc, #64]	; (800c840 <RegionAS923RxConfig+0xf0>)
 800c800:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800c804:	7ca3      	ldrb	r3, [r4, #18]
 800c806:	9309      	str	r3, [sp, #36]	; 0x24
 800c808:	2000      	movs	r0, #0
 800c80a:	9008      	str	r0, [sp, #32]
 800c80c:	9007      	str	r0, [sp, #28]
 800c80e:	9006      	str	r0, [sp, #24]
 800c810:	2301      	movs	r3, #1
 800c812:	9305      	str	r3, [sp, #20]
 800c814:	9004      	str	r0, [sp, #16]
 800c816:	9003      	str	r0, [sp, #12]
 800c818:	8923      	ldrh	r3, [r4, #8]
 800c81a:	9302      	str	r3, [sp, #8]
 800c81c:	2305      	movs	r3, #5
 800c81e:	9301      	str	r3, [sp, #4]
 800c820:	4b0b      	ldr	r3, [pc, #44]	; (800c850 <RegionAS923RxConfig+0x100>)
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	4603      	mov	r3, r0
 800c826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c82a:	fb02 f209 	mul.w	r2, r2, r9
 800c82e:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c832:	47d0      	blx	sl
 800c834:	e7ce      	b.n	800c7d4 <RegionAS923RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 800c836:	4b07      	ldr	r3, [pc, #28]	; (800c854 <RegionAS923RxConfig+0x104>)
 800c838:	5d59      	ldrb	r1, [r3, r5]
 800c83a:	e7d0      	b.n	800c7de <RegionAS923RxConfig+0x8e>
        return false;
 800c83c:	2000      	movs	r0, #0
 800c83e:	e7db      	b.n	800c7f8 <RegionAS923RxConfig+0xa8>
 800c840:	08012954 	.word	0x08012954
 800c844:	20000c68 	.word	0x20000c68
 800c848:	080122e8 	.word	0x080122e8
 800c84c:	08012308 	.word	0x08012308
 800c850:	00014585 	.word	0x00014585
 800c854:	080122f8 	.word	0x080122f8

0800c858 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c85c:	b08d      	sub	sp, #52	; 0x34
 800c85e:	4604      	mov	r4, r0
 800c860:	460f      	mov	r7, r1
 800c862:	4690      	mov	r8, r2
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800c864:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c868:	4a42      	ldr	r2, [pc, #264]	; (800c974 <RegionAS923TxConfig+0x11c>)
 800c86a:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800c86e:	4b42      	ldr	r3, [pc, #264]	; (800c978 <RegionAS923TxConfig+0x120>)
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	4d42      	ldr	r5, [pc, #264]	; (800c97c <RegionAS923TxConfig+0x124>)
 800c874:	6829      	ldr	r1, [r5, #0]
 800c876:	7803      	ldrb	r3, [r0, #0]
 800c878:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c87c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800c880:	7a4b      	ldrb	r3, [r1, #9]
 800c882:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c886:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c88a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800c88e:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800c892:	f000 febf 	bl	800d614 <RegionCommonLimitTxPower>
 800c896:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 800c898:	4939      	ldr	r1, [pc, #228]	; (800c980 <RegionAS923TxConfig+0x128>)
 800c89a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800c89e:	f000 febd 	bl	800d61c <RegionCommonGetBandwidth>
 800c8a2:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800c8a4:	68a2      	ldr	r2, [r4, #8]
 800c8a6:	6861      	ldr	r1, [r4, #4]
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	f000 fdcf 	bl	800d44c <RegionCommonComputeTxPower>
 800c8ae:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800c8b0:	4b34      	ldr	r3, [pc, #208]	; (800c984 <RegionAS923TxConfig+0x12c>)
 800c8b2:	68da      	ldr	r2, [r3, #12]
 800c8b4:	6829      	ldr	r1, [r5, #0]
 800c8b6:	7823      	ldrb	r3, [r4, #0]
 800c8b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c8bc:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800c8c0:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800c8c2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800c8c6:	2b07      	cmp	r3, #7
 800c8c8:	d031      	beq.n	800c92e <RegionAS923TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800c8ca:	4b2e      	ldr	r3, [pc, #184]	; (800c984 <RegionAS923TxConfig+0x12c>)
 800c8cc:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800c8d0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800c8d4:	9308      	str	r3, [sp, #32]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	9207      	str	r2, [sp, #28]
 800c8da:	9206      	str	r2, [sp, #24]
 800c8dc:	9205      	str	r2, [sp, #20]
 800c8de:	2501      	movs	r5, #1
 800c8e0:	9504      	str	r5, [sp, #16]
 800c8e2:	9203      	str	r2, [sp, #12]
 800c8e4:	2308      	movs	r3, #8
 800c8e6:	9302      	str	r3, [sp, #8]
 800c8e8:	9501      	str	r5, [sp, #4]
 800c8ea:	f8cd a000 	str.w	sl, [sp]
 800c8ee:	464b      	mov	r3, r9
 800c8f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800c8f6:	4b21      	ldr	r3, [pc, #132]	; (800c97c <RegionAS923TxConfig+0x124>)
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	7823      	ldrb	r3, [r4, #0]
 800c8fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c900:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800c904:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c908:	f000 febc 	bl	800d684 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800c90c:	89a1      	ldrh	r1, [r4, #12]
 800c90e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800c912:	f7ff fcc1 	bl	800c298 <GetTimeOnAir>
 800c916:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800c91a:	4b1a      	ldr	r3, [pc, #104]	; (800c984 <RegionAS923TxConfig+0x12c>)
 800c91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c91e:	7b21      	ldrb	r1, [r4, #12]
 800c920:	4628      	mov	r0, r5
 800c922:	4798      	blx	r3

    *txPower = txPowerLimited;
 800c924:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 800c926:	2001      	movs	r0, #1
 800c928:	b00d      	add	sp, #52	; 0x34
 800c92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800c92e:	4b15      	ldr	r3, [pc, #84]	; (800c984 <RegionAS923TxConfig+0x12c>)
 800c930:	69dd      	ldr	r5, [r3, #28]
 800c932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c936:	fb03 f30a 	mul.w	r3, r3, sl
 800c93a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800c93e:	9208      	str	r2, [sp, #32]
 800c940:	f04f 0a00 	mov.w	sl, #0
 800c944:	f8cd a01c 	str.w	sl, [sp, #28]
 800c948:	f8cd a018 	str.w	sl, [sp, #24]
 800c94c:	f8cd a014 	str.w	sl, [sp, #20]
 800c950:	2201      	movs	r2, #1
 800c952:	9204      	str	r2, [sp, #16]
 800c954:	f8cd a00c 	str.w	sl, [sp, #12]
 800c958:	2205      	movs	r2, #5
 800c95a:	9202      	str	r2, [sp, #8]
 800c95c:	f8cd a004 	str.w	sl, [sp, #4]
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	464b      	mov	r3, r9
 800c964:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800c968:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c96a:	4650      	mov	r0, sl
 800c96c:	47a8      	blx	r5
        modem = MODEM_FSK;
 800c96e:	4655      	mov	r5, sl
 800c970:	e7c1      	b.n	800c8f6 <RegionAS923TxConfig+0x9e>
 800c972:	bf00      	nop
 800c974:	080122e8 	.word	0x080122e8
 800c978:	20000c64 	.word	0x20000c64
 800c97c:	20000c68 	.word	0x20000c68
 800c980:	080122c8 	.word	0x080122c8
 800c984:	08012954 	.word	0x08012954

0800c988 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c98c:	b08f      	sub	sp, #60	; 0x3c
 800c98e:	4605      	mov	r5, r0
 800c990:	4689      	mov	r9, r1
 800c992:	4690      	mov	r8, r2
 800c994:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800c996:	2400      	movs	r4, #0
 800c998:	940c      	str	r4, [sp, #48]	; 0x30
 800c99a:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800c99e:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800c9a2:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800c9a4:	e030      	b.n	800ca08 <RegionAS923LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 800c9a6:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800c9aa:	2607      	movs	r6, #7
 800c9ac:	e012      	b.n	800c9d4 <RegionAS923LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800c9ae:	4a58      	ldr	r2, [pc, #352]	; (800cb10 <RegionAS923LinkAdrReq+0x188>)
 800c9b0:	6812      	ldr	r2, [r2, #0]
 800c9b2:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800c9b6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c9ba:	b13a      	cbz	r2, 800c9cc <RegionAS923LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800c9bc:	2201      	movs	r2, #1
 800c9be:	fa02 f20c 	lsl.w	r2, r2, ip
 800c9c2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800c9c6:	430a      	orrs	r2, r1
 800c9c8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 800c9cc:	f10c 0c01 	add.w	ip, ip, #1
 800c9d0:	fa5f fc8c 	uxtb.w	ip, ip
 800c9d4:	f1bc 0f0f 	cmp.w	ip, #15
 800c9d8:	d816      	bhi.n	800ca08 <RegionAS923LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800c9da:	2b06      	cmp	r3, #6
 800c9dc:	d0e7      	beq.n	800c9ae <RegionAS923LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800c9de:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800c9e2:	fa4e fe0c 	asr.w	lr, lr, ip
 800c9e6:	f01e 0f01 	tst.w	lr, #1
 800c9ea:	d0ef      	beq.n	800c9cc <RegionAS923LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800c9ec:	4a48      	ldr	r2, [pc, #288]	; (800cb10 <RegionAS923LinkAdrReq+0x188>)
 800c9ee:	6812      	ldr	r2, [r2, #0]
 800c9f0:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800c9f4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800c9f8:	2a00      	cmp	r2, #0
 800c9fa:	d1e7      	bne.n	800c9cc <RegionAS923LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800c9fc:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800ca00:	e7e4      	b.n	800c9cc <RegionAS923LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800ca02:	2606      	movs	r6, #6
 800ca04:	e000      	b.n	800ca08 <RegionAS923LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800ca06:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ca08:	7a2b      	ldrb	r3, [r5, #8]
 800ca0a:	42a3      	cmp	r3, r4
 800ca0c:	d919      	bls.n	800ca42 <RegionAS923LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800ca0e:	6868      	ldr	r0, [r5, #4]
 800ca10:	a90c      	add	r1, sp, #48	; 0x30
 800ca12:	4420      	add	r0, r4
 800ca14:	f000 fc5a 	bl	800d2cc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800ca18:	4603      	mov	r3, r0
 800ca1a:	b190      	cbz	r0, 800ca42 <RegionAS923LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 800ca1c:	4423      	add	r3, r4
 800ca1e:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 800ca20:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800ca24:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800ca28:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ca2c:	b90b      	cbnz	r3, 800ca32 <RegionAS923LinkAdrReq+0xaa>
 800ca2e:	2a00      	cmp	r2, #0
 800ca30:	d0e7      	beq.n	800ca02 <RegionAS923LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800ca32:	1e5a      	subs	r2, r3, #1
 800ca34:	b2d2      	uxtb	r2, r2
 800ca36:	2a04      	cmp	r2, #4
 800ca38:	d9e5      	bls.n	800ca06 <RegionAS923LinkAdrReq+0x7e>
 800ca3a:	2b06      	cmp	r3, #6
 800ca3c:	d9b3      	bls.n	800c9a6 <RegionAS923LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800ca3e:	2606      	movs	r6, #6
 800ca40:	e7e2      	b.n	800ca08 <RegionAS923LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ca42:	2302      	movs	r3, #2
 800ca44:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800ca48:	7a6b      	ldrb	r3, [r5, #9]
 800ca4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionAS923GetPhyParam( &getPhy );
 800ca4e:	a80a      	add	r0, sp, #40	; 0x28
 800ca50:	f7ff fc54 	bl	800c2fc <RegionAS923GetPhyParam>
 800ca54:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800ca56:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800ca5a:	7aab      	ldrb	r3, [r5, #10]
 800ca5c:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800ca60:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800ca64:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800ca68:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800ca6c:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800ca70:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ca74:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800ca78:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800ca7c:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800ca80:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800ca84:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800ca88:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800ca8c:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 800ca90:	2310      	movs	r3, #16
 800ca92:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800ca96:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800ca9a:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800ca9c:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 800caa0:	2307      	movs	r3, #7
 800caa2:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800caa6:	4a1a      	ldr	r2, [pc, #104]	; (800cb10 <RegionAS923LinkAdrReq+0x188>)
 800caa8:	6812      	ldr	r2, [r2, #0]
 800caaa:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 800caac:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 800cab0:	2300      	movs	r3, #0
 800cab2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800cab6:	682b      	ldr	r3, [r5, #0]
 800cab8:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800caba:	ab0c      	add	r3, sp, #48	; 0x30
 800cabc:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800cac0:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800cac4:	a801      	add	r0, sp, #4
 800cac6:	f000 fc1f 	bl	800d308 <RegionCommonLinkAdrReqVerifyParams>
 800caca:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800cacc:	2807      	cmp	r0, #7
 800cace:	d010      	beq.n	800caf2 <RegionAS923LinkAdrReq+0x16a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800cad0:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800cad4:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800cad8:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800cadc:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800cae0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800cae4:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800cae6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cae8:	701c      	strb	r4, [r3, #0]

#endif /* REGION_AS923 */
    return status;
}
 800caea:	4628      	mov	r0, r5
 800caec:	b00f      	add	sp, #60	; 0x3c
 800caee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800caf2:	4e07      	ldr	r6, [pc, #28]	; (800cb10 <RegionAS923LinkAdrReq+0x188>)
 800caf4:	6830      	ldr	r0, [r6, #0]
 800caf6:	220c      	movs	r2, #12
 800caf8:	2100      	movs	r1, #0
 800cafa:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800cafe:	f002 fb6e 	bl	800f1de <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800cb02:	6833      	ldr	r3, [r6, #0]
 800cb04:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800cb08:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 800cb0c:	e7e0      	b.n	800cad0 <RegionAS923LinkAdrReq+0x148>
 800cb0e:	bf00      	nop
 800cb10:	20000c68 	.word	0x20000c68

0800cb14 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800cb18:	6840      	ldr	r0, [r0, #4]
 800cb1a:	f7ff fba9 	bl	800c270 <VerifyRfFreq>
 800cb1e:	b1a0      	cbz	r0, 800cb4a <RegionAS923RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 800cb20:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 800cb22:	2207      	movs	r2, #7
 800cb24:	2100      	movs	r1, #0
 800cb26:	f994 0000 	ldrsb.w	r0, [r4]
 800cb2a:	f000 faaa 	bl	800d082 <RegionCommonValueInRange>
 800cb2e:	b908      	cbnz	r0, 800cb34 <RegionAS923RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800cb30:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 800cb34:	2207      	movs	r2, #7
 800cb36:	2100      	movs	r1, #0
 800cb38:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800cb3c:	f000 faa1 	bl	800d082 <RegionCommonValueInRange>
 800cb40:	b908      	cbnz	r0, 800cb46 <RegionAS923RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800cb42:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_AS923 */
    return status;
}
 800cb46:	4628      	mov	r0, r5
 800cb48:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800cb4a:	2506      	movs	r5, #6
 800cb4c:	e7e9      	b.n	800cb22 <RegionAS923RxParamSetupReq+0xe>

0800cb4e <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 800cb4e:	2000      	movs	r0, #0
 800cb50:	4770      	bx	lr
	...

0800cb54 <RegionAS923DlChannelReq>:
int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    uint8_t status = 0x03;

#if defined( REGION_AS923 )
    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800cb54:	7803      	ldrb	r3, [r0, #0]
 800cb56:	2b0f      	cmp	r3, #15
 800cb58:	d901      	bls.n	800cb5e <RegionAS923DlChannelReq+0xa>
    {
        return 0;
 800cb5a:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_AS923 */
    return status;
}
 800cb5c:	4770      	bx	lr
{
 800cb5e:	b510      	push	{r4, lr}
 800cb60:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800cb62:	6840      	ldr	r0, [r0, #4]
 800cb64:	f7ff fb84 	bl	800c270 <VerifyRfFreq>
 800cb68:	b170      	cbz	r0, 800cb88 <RegionAS923DlChannelReq+0x34>
    uint8_t status = 0x03;
 800cb6a:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800cb6c:	4b0b      	ldr	r3, [pc, #44]	; (800cb9c <RegionAS923DlChannelReq+0x48>)
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	7823      	ldrb	r3, [r4, #0]
 800cb72:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800cb76:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800cb7a:	b909      	cbnz	r1, 800cb80 <RegionAS923DlChannelReq+0x2c>
        status &= 0xFD;
 800cb7c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    if( status == 0x03 )
 800cb80:	2803      	cmp	r0, #3
 800cb82:	d003      	beq.n	800cb8c <RegionAS923DlChannelReq+0x38>
    return status;
 800cb84:	b240      	sxtb	r0, r0
}
 800cb86:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800cb88:	2002      	movs	r0, #2
 800cb8a:	e7ef      	b.n	800cb6c <RegionAS923DlChannelReq+0x18>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800cb8c:	6861      	ldr	r1, [r4, #4]
 800cb8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cb92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cb96:	6051      	str	r1, [r2, #4]
 800cb98:	e7f4      	b.n	800cb84 <RegionAS923DlChannelReq+0x30>
 800cb9a:	bf00      	nop
 800cb9c:	20000c68 	.word	0x20000c68

0800cba0 <RegionAS923AlternateDr>:
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
#else
    return -1;
#endif /* REGION_AS923 */
}
 800cba0:	2002      	movs	r0, #2
 800cba2:	4770      	bx	lr

0800cba4 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800cba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cba6:	b097      	sub	sp, #92	; 0x5c
 800cba8:	4604      	mov	r4, r0
 800cbaa:	460f      	mov	r7, r1
 800cbac:	4616      	mov	r6, r2
 800cbae:	461d      	mov	r5, r3
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800cbb6:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800cbba:	9111      	str	r1, [sp, #68]	; 0x44
 800cbbc:	9112      	str	r1, [sp, #72]	; 0x48
 800cbbe:	9113      	str	r1, [sp, #76]	; 0x4c
 800cbc0:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 800cbc2:	2303      	movs	r3, #3
 800cbc4:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800cbc8:	4b34      	ldr	r3, [pc, #208]	; (800cc9c <RegionAS923NextChannel+0xf8>)
 800cbca:	6818      	ldr	r0, [r3, #0]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800cbd2:	f000 fab4 	bl	800d13e <RegionCommonCountChannels>
 800cbd6:	b938      	cbnz	r0, 800cbe8 <RegionAS923NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800cbd8:	4b30      	ldr	r3, [pc, #192]	; (800cc9c <RegionAS923NextChannel+0xf8>)
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800cbe0:	f043 0303 	orr.w	r3, r3, #3
 800cbe4:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800cbe8:	7a63      	ldrb	r3, [r4, #9]
 800cbea:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800cbee:	7a23      	ldrb	r3, [r4, #8]
 800cbf0:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800cbf4:	4b29      	ldr	r3, [pc, #164]	; (800cc9c <RegionAS923NextChannel+0xf8>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 800cbfc:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800cbfe:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800cc00:	4b27      	ldr	r3, [pc, #156]	; (800cca0 <RegionAS923NextChannel+0xfc>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 800cc06:	2310      	movs	r3, #16
 800cc08:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800cc0c:	f10d 030a 	add.w	r3, sp, #10
 800cc10:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800cc12:	6823      	ldr	r3, [r4, #0]
 800cc14:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800cc16:	6863      	ldr	r3, [r4, #4]
 800cc18:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800cc1a:	7aa3      	ldrb	r3, [r4, #10]
 800cc1c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 800cc20:	2301      	movs	r3, #1
 800cc22:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800cc26:	ab0c      	add	r3, sp, #48	; 0x30
 800cc28:	f104 020c 	add.w	r2, r4, #12
 800cc2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc30:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800cc34:	7d23      	ldrb	r3, [r4, #20]
 800cc36:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800cc3a:	8ae1      	ldrh	r1, [r4, #22]
 800cc3c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800cc40:	f7ff fb2a 	bl	800c298 <GetTimeOnAir>
 800cc44:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800cc46:	ab03      	add	r3, sp, #12
 800cc48:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800cc4a:	9601      	str	r6, [sp, #4]
 800cc4c:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800cc56:	aa11      	add	r2, sp, #68	; 0x44
 800cc58:	4629      	mov	r1, r5
 800cc5a:	a809      	add	r0, sp, #36	; 0x24
 800cc5c:	f000 fc71 	bl	800d542 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800cc60:	4604      	mov	r4, r0
 800cc62:	b120      	cbz	r0, 800cc6e <RegionAS923NextChannel+0xca>
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800cc64:	280c      	cmp	r0, #12
 800cc66:	d00f      	beq.n	800cc88 <RegionAS923NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 800cc68:	4620      	mov	r0, r4
 800cc6a:	b017      	add	sp, #92	; 0x5c
 800cc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800cc6e:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800cc72:	3901      	subs	r1, #1
 800cc74:	f002 fa8e 	bl	800f194 <randr>
 800cc78:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800cc7c:	eb0d 0003 	add.w	r0, sp, r3
 800cc80:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800cc84:	703b      	strb	r3, [r7, #0]
 800cc86:	e7ef      	b.n	800cc68 <RegionAS923NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800cc88:	4b04      	ldr	r3, [pc, #16]	; (800cc9c <RegionAS923NextChannel+0xf8>)
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800cc90:	f043 0303 	orr.w	r3, r3, #3
 800cc94:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 800cc98:	e7e6      	b.n	800cc68 <RegionAS923NextChannel+0xc4>
 800cc9a:	bf00      	nop
 800cc9c:	20000c68 	.word	0x20000c68
 800cca0:	20000c64 	.word	0x20000c64

0800cca4 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800cca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_AS923 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800cca6:	7905      	ldrb	r5, [r0, #4]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800cca8:	2d01      	cmp	r5, #1
 800ccaa:	d94a      	bls.n	800cd42 <RegionAS923ChannelAdd+0x9e>
 800ccac:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 800ccae:	2d0f      	cmp	r5, #15
 800ccb0:	d849      	bhi.n	800cd46 <RegionAS923ChannelAdd+0xa2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800ccb2:	6803      	ldr	r3, [r0, #0]
 800ccb4:	7a18      	ldrb	r0, [r3, #8]
 800ccb6:	f340 0003 	sbfx	r0, r0, #0, #4
 800ccba:	2207      	movs	r2, #7
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	b240      	sxtb	r0, r0
 800ccc0:	f000 f9df 	bl	800d082 <RegionCommonValueInRange>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	d038      	beq.n	800cd3a <RegionAS923ChannelAdd+0x96>
    bool drInvalid = false;
 800ccc8:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	7a18      	ldrb	r0, [r3, #8]
 800ccce:	f340 1003 	sbfx	r0, r0, #4, #4
 800ccd2:	2207      	movs	r2, #7
 800ccd4:	2100      	movs	r1, #0
 800ccd6:	b240      	sxtb	r0, r0
 800ccd8:	f000 f9d3 	bl	800d082 <RegionCommonValueInRange>
 800ccdc:	b900      	cbnz	r0, 800cce0 <RegionAS923ChannelAdd+0x3c>
    {
        drInvalid = true;
 800ccde:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800cce0:	6821      	ldr	r1, [r4, #0]
 800cce2:	7a0b      	ldrb	r3, [r1, #8]
 800cce4:	f343 0203 	sbfx	r2, r3, #0, #4
 800cce8:	b252      	sxtb	r2, r2
 800ccea:	f343 1303 	sbfx	r3, r3, #4, #4
 800ccee:	b25b      	sxtb	r3, r3
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	dd00      	ble.n	800ccf6 <RegionAS923ChannelAdd+0x52>
    {
        drInvalid = true;
 800ccf4:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800ccf6:	6808      	ldr	r0, [r1, #0]
 800ccf8:	f7ff faba 	bl	800c270 <VerifyRfFreq>
 800ccfc:	b1f8      	cbz	r0, 800cd3e <RegionAS923ChannelAdd+0x9a>
    bool freqInvalid = false;
 800ccfe:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800cd00:	b106      	cbz	r6, 800cd04 <RegionAS923ChannelAdd+0x60>
 800cd02:	bb13      	cbnz	r3, 800cd4a <RegionAS923ChannelAdd+0xa6>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800cd04:	bb1e      	cbnz	r6, 800cd4e <RegionAS923ChannelAdd+0xaa>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800cd06:	bb23      	cbnz	r3, 800cd52 <RegionAS923ChannelAdd+0xae>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800cd08:	4f13      	ldr	r7, [pc, #76]	; (800cd58 <RegionAS923ChannelAdd+0xb4>)
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	006e      	lsls	r6, r5, #1
 800cd0e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800cd12:	220c      	movs	r2, #12
 800cd14:	6821      	ldr	r1, [r4, #0]
 800cd16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cd1a:	f002 fa48 	bl	800f1ae <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 800cd1e:	683a      	ldr	r2, [r7, #0]
 800cd20:	442e      	add	r6, r5
 800cd22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd26:	2000      	movs	r0, #0
 800cd28:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	40ab      	lsls	r3, r5
 800cd2e:	f8b2 1480 	ldrh.w	r1, [r2, #1152]	; 0x480
 800cd32:	430b      	orrs	r3, r1
 800cd34:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 800cd38:	e006      	b.n	800cd48 <RegionAS923ChannelAdd+0xa4>
        drInvalid = true;
 800cd3a:	2601      	movs	r6, #1
 800cd3c:	e7c5      	b.n	800ccca <RegionAS923ChannelAdd+0x26>
            freqInvalid = true;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e7de      	b.n	800cd00 <RegionAS923ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800cd42:	2006      	movs	r0, #6
 800cd44:	e000      	b.n	800cd48 <RegionAS923ChannelAdd+0xa4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cd46:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 800cd48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800cd4a:	2006      	movs	r0, #6
 800cd4c:	e7fc      	b.n	800cd48 <RegionAS923ChannelAdd+0xa4>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800cd4e:	2005      	movs	r0, #5
 800cd50:	e7fa      	b.n	800cd48 <RegionAS923ChannelAdd+0xa4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800cd52:	2004      	movs	r0, #4
 800cd54:	e7f8      	b.n	800cd48 <RegionAS923ChannelAdd+0xa4>
 800cd56:	bf00      	nop
 800cd58:	20000c68 	.word	0x20000c68

0800cd5c <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 800cd5c:	7801      	ldrb	r1, [r0, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800cd5e:	2901      	cmp	r1, #1
 800cd60:	d913      	bls.n	800cd8a <RegionAS923ChannelsRemove+0x2e>
{
 800cd62:	b508      	push	{r3, lr}
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800cd64:	4b0a      	ldr	r3, [pc, #40]	; (800cd90 <RegionAS923ChannelsRemove+0x34>)
 800cd66:	6818      	ldr	r0, [r3, #0]
 800cd68:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800cd6c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800cd70:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cd74:	2200      	movs	r2, #0
 800cd76:	f840 200c 	str.w	r2, [r0, ip]
 800cd7a:	605a      	str	r2, [r3, #4]
 800cd7c:	609a      	str	r2, [r3, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 800cd7e:	2210      	movs	r2, #16
 800cd80:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800cd84:	f000 f9bf 	bl	800d106 <RegionCommonChanDisable>
#else
    return false;
#endif /* REGION_AS923 */
}
 800cd88:	bd08      	pop	{r3, pc}
        return false;
 800cd8a:	2000      	movs	r0, #0
}
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	20000c68 	.word	0x20000c68

0800cd94 <RegionAS923ApplyCFList>:
{
 800cd94:	b570      	push	{r4, r5, r6, lr}
 800cd96:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800cd98:	2350      	movs	r3, #80	; 0x50
 800cd9a:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800cd9e:	7903      	ldrb	r3, [r0, #4]
 800cda0:	2b10      	cmp	r3, #16
 800cda2:	d136      	bne.n	800ce12 <RegionAS923ApplyCFList+0x7e>
 800cda4:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800cda6:	6803      	ldr	r3, [r0, #0]
 800cda8:	7bdd      	ldrb	r5, [r3, #15]
 800cdaa:	2d00      	cmp	r5, #0
 800cdac:	d131      	bne.n	800ce12 <RegionAS923ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800cdae:	2402      	movs	r4, #2
 800cdb0:	e01b      	b.n	800cdea <RegionAS923ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800cdb2:	6832      	ldr	r2, [r6, #0]
 800cdb4:	5d53      	ldrb	r3, [r2, r5]
 800cdb6:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800cdb8:	442a      	add	r2, r5
 800cdba:	7851      	ldrb	r1, [r2, #1]
 800cdbc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cdc0:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800cdc2:	7892      	ldrb	r2, [r2, #2]
 800cdc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdc8:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800cdca:	2264      	movs	r2, #100	; 0x64
 800cdcc:	fb02 f303 	mul.w	r3, r2, r3
 800cdd0:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	9304      	str	r3, [sp, #16]
 800cdd6:	e011      	b.n	800cdfc <RegionAS923ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800cdd8:	f88d 4000 	strb.w	r4, [sp]
            RegionAS923ChannelsRemove( &channelRemove );
 800cddc:	4668      	mov	r0, sp
 800cdde:	f7ff ffbd 	bl	800cd5c <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800cde2:	3503      	adds	r5, #3
 800cde4:	b2ed      	uxtb	r5, r5
 800cde6:	3401      	adds	r4, #1
 800cde8:	b2e4      	uxtb	r4, r4
 800cdea:	2c0f      	cmp	r4, #15
 800cdec:	d811      	bhi.n	800ce12 <RegionAS923ApplyCFList+0x7e>
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 800cdee:	2c06      	cmp	r4, #6
 800cdf0:	d9df      	bls.n	800cdb2 <RegionAS923ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800cdf6:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800cdfa:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800cdfc:	9b03      	ldr	r3, [sp, #12]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d0ea      	beq.n	800cdd8 <RegionAS923ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800ce02:	ab03      	add	r3, sp, #12
 800ce04:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800ce06:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionAS923ChannelAdd( &channelAdd );
 800ce0a:	a801      	add	r0, sp, #4
 800ce0c:	f7ff ff4a 	bl	800cca4 <RegionAS923ChannelAdd>
 800ce10:	e7e7      	b.n	800cde2 <RegionAS923ApplyCFList+0x4e>
}
 800ce12:	b006      	add	sp, #24
 800ce14:	bd70      	pop	{r4, r5, r6, pc}

0800ce16 <RegionAS923NewChannelReq>:
{
 800ce16:	b500      	push	{lr}
 800ce18:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800ce1a:	6803      	ldr	r3, [r0, #0]
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	b952      	cbnz	r2, 800ce36 <RegionAS923NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800ce20:	7903      	ldrb	r3, [r0, #4]
 800ce22:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 800ce26:	a801      	add	r0, sp, #4
 800ce28:	f7ff ff98 	bl	800cd5c <RegionAS923ChannelsRemove>
 800ce2c:	b1d0      	cbz	r0, 800ce64 <RegionAS923NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800ce2e:	2003      	movs	r0, #3
}
 800ce30:	b005      	add	sp, #20
 800ce32:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800ce36:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800ce38:	7903      	ldrb	r3, [r0, #4]
 800ce3a:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800ce3e:	a802      	add	r0, sp, #8
 800ce40:	f7ff ff30 	bl	800cca4 <RegionAS923ChannelAdd>
 800ce44:	2806      	cmp	r0, #6
 800ce46:	d80b      	bhi.n	800ce60 <RegionAS923NewChannelReq+0x4a>
 800ce48:	e8df f000 	tbb	[pc, r0]
 800ce4c:	0a0a0a04 	.word	0x0a0a0a04
 800ce50:	060e      	.short	0x060e
 800ce52:	08          	.byte	0x08
 800ce53:	00          	.byte	0x00
 800ce54:	2003      	movs	r0, #3
 800ce56:	e7eb      	b.n	800ce30 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFD;
 800ce58:	2001      	movs	r0, #1
                break;
 800ce5a:	e7e9      	b.n	800ce30 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 800ce5c:	2000      	movs	r0, #0
                break;
 800ce5e:	e7e7      	b.n	800ce30 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 800ce60:	2000      	movs	r0, #0
                break;
 800ce62:	e7e5      	b.n	800ce30 <RegionAS923NewChannelReq+0x1a>
            status &= 0xFC;
 800ce64:	2000      	movs	r0, #0
 800ce66:	e7e3      	b.n	800ce30 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFE;
 800ce68:	2002      	movs	r0, #2
 800ce6a:	e7e1      	b.n	800ce30 <RegionAS923NewChannelReq+0x1a>

0800ce6c <RegionAS923SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionAS923SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800ce6c:	b538      	push	{r3, r4, r5, lr}
 800ce6e:	4604      	mov	r4, r0
#if defined( REGION_AS923 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800ce70:	4b12      	ldr	r3, [pc, #72]	; (800cebc <RegionAS923SetContinuousWave+0x50>)
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	4d12      	ldr	r5, [pc, #72]	; (800cec0 <RegionAS923SetContinuousWave+0x54>)
 800ce76:	6829      	ldr	r1, [r5, #0]
 800ce78:	7803      	ldrb	r3, [r0, #0]
 800ce7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ce7e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800ce82:	7a4b      	ldrb	r3, [r1, #9]
 800ce84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ce88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ce8c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800ce90:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800ce94:	f000 fbbe 	bl	800d614 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800ce98:	682a      	ldr	r2, [r5, #0]
 800ce9a:	7823      	ldrb	r3, [r4, #0]
 800ce9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cea0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800cea4:	68a2      	ldr	r2, [r4, #8]
 800cea6:	6861      	ldr	r1, [r4, #4]
 800cea8:	f000 fad0 	bl	800d44c <RegionCommonComputeTxPower>
 800ceac:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800ceae:	4b05      	ldr	r3, [pc, #20]	; (800cec4 <RegionAS923SetContinuousWave+0x58>)
 800ceb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb2:	89a2      	ldrh	r2, [r4, #12]
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	4798      	blx	r3
#endif /* REGION_AS923 */
}
 800ceb8:	bd38      	pop	{r3, r4, r5, pc}
 800ceba:	bf00      	nop
 800cebc:	20000c64 	.word	0x20000c64
 800cec0:	20000c68 	.word	0x20000c68
 800cec4:	08012954 	.word	0x08012954

0800cec8 <RegionAS923ApplyDrOffset>:
#if defined( REGION_AS923 )
    // Initialize minDr for a downlink dwell time configuration of 0
    int8_t minDr = DR_0;

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
 800cec8:	2801      	cmp	r0, #1
 800ceca:	d00b      	beq.n	800cee4 <RegionAS923ApplyDrOffset+0x1c>
    int8_t minDr = DR_0;
 800cecc:	2000      	movs	r0, #0
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 800cece:	4b06      	ldr	r3, [pc, #24]	; (800cee8 <RegionAS923ApplyDrOffset+0x20>)
 800ced0:	569b      	ldrsb	r3, [r3, r2]
 800ced2:	1ac9      	subs	r1, r1, r3
 800ced4:	4288      	cmp	r0, r1
 800ced6:	bfb8      	it	lt
 800ced8:	4608      	movlt	r0, r1
 800ceda:	2805      	cmp	r0, #5
 800cedc:	bfa8      	it	ge
 800cede:	2005      	movge	r0, #5
#else
    return 0;
#endif /* REGION_AS923 */

}
 800cee0:	b2c0      	uxtb	r0, r0
 800cee2:	4770      	bx	lr
        minDr = AS923_DWELL_LIMIT_DATARATE;
 800cee4:	2002      	movs	r0, #2
 800cee6:	e7f2      	b.n	800cece <RegionAS923ApplyDrOffset+0x6>
 800cee8:	080122f0 	.word	0x080122f0

0800ceec <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800ceec:	b082      	sub	sp, #8
 800ceee:	f10d 0c08 	add.w	ip, sp, #8
 800cef2:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800cef6:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800cef8:	b971      	cbnz	r1, 800cf18 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800cefa:	4613      	mov	r3, r2
 800cefc:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800cf00:	d306      	bcc.n	800cf10 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800cf02:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d80a      	bhi.n	800cf20 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800cf0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cf0e:	e000      	b.n	800cf12 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800cf10:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800cf12:	4298      	cmp	r0, r3
 800cf14:	bf38      	it	cc
 800cf16:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800cf18:	b900      	cbnz	r0, 800cf1c <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800cf1a:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800cf1c:	b002      	add	sp, #8
 800cf1e:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800cf20:	f242 7310 	movw	r3, #10000	; 0x2710
 800cf24:	e7f5      	b.n	800cf12 <GetDutyCycle+0x26>

0800cf26 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800cf26:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800cf28:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800cf2a:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800cf2c:	e001      	b.n	800cf32 <CountChannels+0xc>
 800cf2e:	3301      	adds	r3, #1
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	428b      	cmp	r3, r1
 800cf34:	d207      	bcs.n	800cf46 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800cf36:	2201      	movs	r2, #1
 800cf38:	409a      	lsls	r2, r3
 800cf3a:	ea32 020c 	bics.w	r2, r2, ip
 800cf3e:	d1f6      	bne.n	800cf2e <CountChannels+0x8>
        {
            nbActiveBits++;
 800cf40:	3001      	adds	r0, #1
 800cf42:	b2c0      	uxtb	r0, r0
 800cf44:	e7f3      	b.n	800cf2e <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800cf46:	4770      	bx	lr

0800cf48 <SetMaxTimeCredits>:
{
 800cf48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf4c:	b089      	sub	sp, #36	; 0x24
 800cf4e:	4604      	mov	r4, r0
 800cf50:	460e      	mov	r6, r1
 800cf52:	ad02      	add	r5, sp, #8
 800cf54:	e885 000c 	stmia.w	r5, {r2, r3}
 800cf58:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800cf5c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800cf60:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cf64:	f004 fa9c 	bl	80114a0 <SysTimeToMs>
 800cf68:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	9304      	str	r3, [sp, #16]
 800cf6e:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800cf70:	e895 000c 	ldmia.w	r5, {r2, r3}
 800cf74:	4631      	mov	r1, r6
 800cf76:	4620      	mov	r0, r4
 800cf78:	f7ff ffb8 	bl	800ceec <GetDutyCycle>
 800cf7c:	4605      	mov	r5, r0
    if( joined == false )
 800cf7e:	2e00      	cmp	r6, #0
 800cf80:	d14c      	bne.n	800d01c <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800cf82:	2864      	cmp	r0, #100	; 0x64
 800cf84:	d025      	beq.n	800cfd2 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800cf86:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cf8a:	d025      	beq.n	800cfd8 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800cf8c:	4e27      	ldr	r6, [pc, #156]	; (800d02c <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800cf8e:	68a1      	ldr	r1, [r4, #8]
 800cf90:	a806      	add	r0, sp, #24
 800cf92:	f004 faa5 	bl	80114e0 <SysTimeFromMs>
 800cf96:	9b07      	ldr	r3, [sp, #28]
 800cf98:	9300      	str	r3, [sp, #0]
 800cf9a:	9b06      	ldr	r3, [sp, #24]
 800cf9c:	aa02      	add	r2, sp, #8
 800cf9e:	ca06      	ldmia	r2, {r1, r2}
 800cfa0:	a804      	add	r0, sp, #16
 800cfa2:	f004 fa04 	bl	80113ae <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800cfa6:	f1b8 0f00 	cmp.w	r8, #0
 800cfaa:	d102      	bne.n	800cfb2 <SetMaxTimeCredits+0x6a>
 800cfac:	f1b9 0f00 	cmp.w	r9, #0
 800cfb0:	d002      	beq.n	800cfb8 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800cfb2:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800cfb4:	42b3      	cmp	r3, r6
 800cfb6:	d012      	beq.n	800cfde <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800cfb8:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800cfba:	9b02      	ldr	r3, [sp, #8]
 800cfbc:	4a1c      	ldr	r2, [pc, #112]	; (800d030 <SetMaxTimeCredits+0xe8>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d812      	bhi.n	800cfe8 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800cfc2:	6863      	ldr	r3, [r4, #4]
 800cfc4:	b903      	cbnz	r3, 800cfc8 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800cfc6:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800cfc8:	6126      	str	r6, [r4, #16]
}
 800cfca:	4628      	mov	r0, r5
 800cfcc:	b009      	add	sp, #36	; 0x24
 800cfce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800cfd2:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800cfd4:	4e17      	ldr	r6, [pc, #92]	; (800d034 <SetMaxTimeCredits+0xec>)
 800cfd6:	e7da      	b.n	800cf8e <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800cfd8:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800cfda:	4e17      	ldr	r6, [pc, #92]	; (800d038 <SetMaxTimeCredits+0xf0>)
 800cfdc:	e7d7      	b.n	800cf8e <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800cfde:	9a04      	ldr	r2, [sp, #16]
 800cfe0:	4b16      	ldr	r3, [pc, #88]	; (800d03c <SetMaxTimeCredits+0xf4>)
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d9ed      	bls.n	800cfc2 <SetMaxTimeCredits+0x7a>
 800cfe6:	e7e7      	b.n	800cfb8 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800cfe8:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800cfec:	3b30      	subs	r3, #48	; 0x30
 800cfee:	4a14      	ldr	r2, [pc, #80]	; (800d040 <SetMaxTimeCredits+0xf8>)
 800cff0:	fba2 2303 	umull	r2, r3, r2, r3
 800cff4:	0c1b      	lsrs	r3, r3, #16
 800cff6:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800cff8:	4a12      	ldr	r2, [pc, #72]	; (800d044 <SetMaxTimeCredits+0xfc>)
 800cffa:	fb02 f303 	mul.w	r3, r2, r3
 800cffe:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800d000:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800d004:	3330      	adds	r3, #48	; 0x30
 800d006:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800d008:	2300      	movs	r3, #0
 800d00a:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800d00e:	ab04      	add	r3, sp, #16
 800d010:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d014:	f004 fa44 	bl	80114a0 <SysTimeToMs>
 800d018:	60a0      	str	r0, [r4, #8]
 800d01a:	e7d2      	b.n	800cfc2 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800d01c:	f1b8 0f00 	cmp.w	r8, #0
 800d020:	d102      	bne.n	800d028 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800d022:	4e04      	ldr	r6, [pc, #16]	; (800d034 <SetMaxTimeCredits+0xec>)
 800d024:	60e6      	str	r6, [r4, #12]
 800d026:	e7cc      	b.n	800cfc2 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800d028:	4e02      	ldr	r6, [pc, #8]	; (800d034 <SetMaxTimeCredits+0xec>)
 800d02a:	e7ca      	b.n	800cfc2 <SetMaxTimeCredits+0x7a>
 800d02c:	02932e00 	.word	0x02932e00
 800d030:	0001ec2f 	.word	0x0001ec2f
 800d034:	001b7740 	.word	0x001b7740
 800d038:	0112a880 	.word	0x0112a880
 800d03c:	0001517f 	.word	0x0001517f
 800d040:	c22e4507 	.word	0xc22e4507
 800d044:	00015180 	.word	0x00015180

0800d048 <UpdateTimeCredits>:
{
 800d048:	b570      	push	{r4, r5, r6, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	4604      	mov	r4, r0
 800d04e:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800d050:	9301      	str	r3, [sp, #4]
 800d052:	9200      	str	r2, [sp, #0]
 800d054:	ab06      	add	r3, sp, #24
 800d056:	cb0c      	ldmia	r3, {r2, r3}
 800d058:	f7ff ff76 	bl	800cf48 <SetMaxTimeCredits>
 800d05c:	4605      	mov	r5, r0
    if( joined == true )
 800d05e:	b94e      	cbnz	r6, 800d074 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800d060:	68e2      	ldr	r2, [r4, #12]
 800d062:	6923      	ldr	r3, [r4, #16]
 800d064:	429a      	cmp	r2, r3
 800d066:	d900      	bls.n	800d06a <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800d068:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800d06a:	9b08      	ldr	r3, [sp, #32]
 800d06c:	6063      	str	r3, [r4, #4]
}
 800d06e:	4628      	mov	r0, r5
 800d070:	b002      	add	sp, #8
 800d072:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800d074:	6860      	ldr	r0, [r4, #4]
 800d076:	f004 fa93 	bl	80115a0 <UTIL_TIMER_GetElapsedTime>
 800d07a:	68e3      	ldr	r3, [r4, #12]
 800d07c:	4403      	add	r3, r0
 800d07e:	60e3      	str	r3, [r4, #12]
 800d080:	e7ee      	b.n	800d060 <UpdateTimeCredits+0x18>

0800d082 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800d082:	4288      	cmp	r0, r1
 800d084:	db03      	blt.n	800d08e <RegionCommonValueInRange+0xc>
 800d086:	4290      	cmp	r0, r2
 800d088:	dd03      	ble.n	800d092 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800d08a:	2000      	movs	r0, #0
 800d08c:	4770      	bx	lr
 800d08e:	2000      	movs	r0, #0
 800d090:	4770      	bx	lr
        return 1;
 800d092:	2001      	movs	r0, #1
}
 800d094:	4770      	bx	lr

0800d096 <RegionCommonChanVerifyDr>:
{
 800d096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d09a:	4682      	mov	sl, r0
 800d09c:	460e      	mov	r6, r1
 800d09e:	4690      	mov	r8, r2
 800d0a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800d0a4:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	4640      	mov	r0, r8
 800d0ac:	f7ff ffe9 	bl	800d082 <RegionCommonValueInRange>
 800d0b0:	b338      	cbz	r0, 800d102 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800d0b2:	2500      	movs	r5, #0
 800d0b4:	462f      	mov	r7, r5
 800d0b6:	e01e      	b.n	800d0f6 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800d0b8:	3401      	adds	r4, #1
 800d0ba:	b2e4      	uxtb	r4, r4
 800d0bc:	2c0f      	cmp	r4, #15
 800d0be:	d816      	bhi.n	800d0ee <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800d0c0:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800d0c4:	4123      	asrs	r3, r4
 800d0c6:	f013 0f01 	tst.w	r3, #1
 800d0ca:	d0f5      	beq.n	800d0b8 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800d0cc:	193b      	adds	r3, r7, r4
 800d0ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d0d2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d0d6:	7a19      	ldrb	r1, [r3, #8]
 800d0d8:	090a      	lsrs	r2, r1, #4
 800d0da:	f001 010f 	and.w	r1, r1, #15
 800d0de:	4640      	mov	r0, r8
 800d0e0:	f7ff ffcf 	bl	800d082 <RegionCommonValueInRange>
 800d0e4:	2801      	cmp	r0, #1
 800d0e6:	d1e7      	bne.n	800d0b8 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800d0e8:	2001      	movs	r0, #1
}
 800d0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	b2ff      	uxtb	r7, r7
 800d0f2:	3501      	adds	r5, #1
 800d0f4:	b2ed      	uxtb	r5, r5
 800d0f6:	4557      	cmp	r7, sl
 800d0f8:	d201      	bcs.n	800d0fe <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800d0fa:	2400      	movs	r4, #0
 800d0fc:	e7de      	b.n	800d0bc <RegionCommonChanVerifyDr+0x26>
    return false;
 800d0fe:	2000      	movs	r0, #0
 800d100:	e7f3      	b.n	800d0ea <RegionCommonChanVerifyDr+0x54>
        return false;
 800d102:	2000      	movs	r0, #0
 800d104:	e7f1      	b.n	800d0ea <RegionCommonChanVerifyDr+0x54>

0800d106 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800d106:	0913      	lsrs	r3, r2, #4
 800d108:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800d10c:	d313      	bcc.n	800d136 <RegionCommonChanDisable+0x30>
{
 800d10e:	b500      	push	{lr}
 800d110:	4684      	mov	ip, r0
 800d112:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800d116:	4291      	cmp	r1, r2
 800d118:	d20f      	bcs.n	800d13a <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800d11a:	f001 030f 	and.w	r3, r1, #15
 800d11e:	2001      	movs	r0, #1
 800d120:	fa00 f303 	lsl.w	r3, r0, r3
 800d124:	43db      	mvns	r3, r3
 800d126:	b21b      	sxth	r3, r3
 800d128:	f83c 201e 	ldrh.w	r2, [ip, lr, lsl #1]
 800d12c:	4013      	ands	r3, r2
 800d12e:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 800d132:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 800d136:	2000      	movs	r0, #0
}
 800d138:	4770      	bx	lr
        return false;
 800d13a:	2000      	movs	r0, #0
 800d13c:	e7f9      	b.n	800d132 <RegionCommonChanDisable+0x2c>

0800d13e <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800d13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800d140:	b188      	cbz	r0, 800d166 <RegionCommonCountChannels+0x28>
 800d142:	460c      	mov	r4, r1
 800d144:	4616      	mov	r6, r2
 800d146:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800d148:	2500      	movs	r5, #0
 800d14a:	e008      	b.n	800d15e <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800d14c:	2110      	movs	r1, #16
 800d14e:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800d152:	f7ff fee8 	bl	800cf26 <CountChannels>
 800d156:	4405      	add	r5, r0
 800d158:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800d15a:	3401      	adds	r4, #1
 800d15c:	b2e4      	uxtb	r4, r4
 800d15e:	42b4      	cmp	r4, r6
 800d160:	d3f4      	bcc.n	800d14c <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800d162:	4628      	mov	r0, r5
 800d164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800d166:	2500      	movs	r5, #0
 800d168:	e7fb      	b.n	800d162 <RegionCommonCountChannels+0x24>

0800d16a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800d16a:	4684      	mov	ip, r0
 800d16c:	b158      	cbz	r0, 800d186 <RegionCommonChanMaskCopy+0x1c>
 800d16e:	b109      	cbz	r1, 800d174 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800d170:	2300      	movs	r3, #0
 800d172:	e006      	b.n	800d182 <RegionCommonChanMaskCopy+0x18>
 800d174:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800d176:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800d17a:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800d17e:	3301      	adds	r3, #1
 800d180:	b2db      	uxtb	r3, r3
 800d182:	4293      	cmp	r3, r2
 800d184:	d3f7      	bcc.n	800d176 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800d186:	4770      	bx	lr

0800d188 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800d188:	b082      	sub	sp, #8
 800d18a:	b538      	push	{r3, r4, r5, lr}
 800d18c:	4604      	mov	r4, r0
 800d18e:	460d      	mov	r5, r1
 800d190:	4611      	mov	r1, r2
 800d192:	aa04      	add	r2, sp, #16
 800d194:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800d198:	ca0c      	ldmia	r2, {r2, r3}
 800d19a:	f7ff fea7 	bl	800ceec <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800d19e:	68e3      	ldr	r3, [r4, #12]
 800d1a0:	fb05 f100 	mul.w	r1, r5, r0
 800d1a4:	428b      	cmp	r3, r1
 800d1a6:	d905      	bls.n	800d1b4 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800d1a8:	1a5b      	subs	r3, r3, r1
 800d1aa:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800d1ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1b0:	b002      	add	sp, #8
 800d1b2:	4770      	bx	lr
        band->TimeCredits = 0;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	60e3      	str	r3, [r4, #12]
}
 800d1b8:	e7f8      	b.n	800d1ac <RegionCommonSetBandTxDone+0x24>
	...

0800d1bc <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800d1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c0:	b089      	sub	sp, #36	; 0x24
 800d1c2:	4607      	mov	r7, r0
 800d1c4:	468b      	mov	fp, r1
 800d1c6:	4691      	mov	r9, r2
 800d1c8:	4698      	mov	r8, r3
 800d1ca:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800d1ce:	f004 f9dd 	bl	801158c <UTIL_TIMER_GetCurrentTime>
 800d1d2:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800d1d4:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800d1d6:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1dc:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800d1de:	e005      	b.n	800d1ec <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800d1e4:	441e      	add	r6, r3
 800d1e6:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800d1e8:	3401      	adds	r4, #1
 800d1ea:	b2e4      	uxtb	r4, r4
 800d1ec:	454c      	cmp	r4, r9
 800d1ee:	d25d      	bcs.n	800d2ac <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800d1f0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800d1f4:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800d1f8:	9b04      	ldr	r3, [sp, #16]
 800d1fa:	9302      	str	r3, [sp, #8]
 800d1fc:	ab13      	add	r3, sp, #76	; 0x4c
 800d1fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d202:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d206:	4653      	mov	r3, sl
 800d208:	4642      	mov	r2, r8
 800d20a:	4639      	mov	r1, r7
 800d20c:	4628      	mov	r0, r5
 800d20e:	f7ff ff1b 	bl	800d048 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800d212:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d214:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800d218:	68ea      	ldr	r2, [r5, #12]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d2e0      	bcs.n	800d1e0 <RegionCommonUpdateBandTimeOff+0x24>
 800d21e:	f1b8 0f00 	cmp.w	r8, #0
 800d222:	d101      	bne.n	800d228 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800d224:	2f00      	cmp	r7, #0
 800d226:	d1db      	bne.n	800d1e0 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800d228:	2100      	movs	r1, #0
 800d22a:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 800d22c:	6929      	ldr	r1, [r5, #16]
 800d22e:	4299      	cmp	r1, r3
 800d230:	d307      	bcc.n	800d242 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800d232:	1a9b      	subs	r3, r3, r2
 800d234:	9a05      	ldr	r2, [sp, #20]
 800d236:	429a      	cmp	r2, r3
 800d238:	bf28      	it	cs
 800d23a:	461a      	movcs	r2, r3
 800d23c:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800d23e:	3601      	adds	r6, #1
 800d240:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800d242:	2f00      	cmp	r7, #0
 800d244:	d1d0      	bne.n	800d1e8 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800d246:	2300      	movs	r3, #0
 800d248:	9306      	str	r3, [sp, #24]
 800d24a:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800d24e:	2864      	cmp	r0, #100	; 0x64
 800d250:	d024      	beq.n	800d29c <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800d252:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d256:	d025      	beq.n	800d2a4 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800d258:	4b19      	ldr	r3, [pc, #100]	; (800d2c0 <RegionCommonUpdateBandTimeOff+0x104>)
 800d25a:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800d25c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d25e:	4a18      	ldr	r2, [pc, #96]	; (800d2c0 <RegionCommonUpdateBandTimeOff+0x104>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d90c      	bls.n	800d27e <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800d264:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800d268:	3b30      	subs	r3, #48	; 0x30
 800d26a:	4a16      	ldr	r2, [pc, #88]	; (800d2c4 <RegionCommonUpdateBandTimeOff+0x108>)
 800d26c:	fba2 2303 	umull	r2, r3, r2, r3
 800d270:	0c1b      	lsrs	r3, r3, #16
 800d272:	4a15      	ldr	r2, [pc, #84]	; (800d2c8 <RegionCommonUpdateBandTimeOff+0x10c>)
 800d274:	fb03 2202 	mla	r2, r3, r2, r2
 800d278:	9b06      	ldr	r3, [sp, #24]
 800d27a:	4413      	add	r3, r2
 800d27c:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800d27e:	ad06      	add	r5, sp, #24
 800d280:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d282:	9300      	str	r3, [sp, #0]
 800d284:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d286:	e895 0006 	ldmia.w	r5, {r1, r2}
 800d28a:	4628      	mov	r0, r5
 800d28c:	f004 f88f 	bl	80113ae <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800d290:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d294:	f004 f904 	bl	80114a0 <SysTimeToMs>
 800d298:	9005      	str	r0, [sp, #20]
 800d29a:	e7a5      	b.n	800d1e8 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800d29c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800d2a0:	9306      	str	r3, [sp, #24]
 800d2a2:	e7db      	b.n	800d25c <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800d2a4:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800d2a8:	9306      	str	r3, [sp, #24]
 800d2aa:	e7d7      	b.n	800d25c <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800d2ac:	b11e      	cbz	r6, 800d2b6 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800d2ae:	9805      	ldr	r0, [sp, #20]
 800d2b0:	b009      	add	sp, #36	; 0x24
 800d2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800d2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ba:	9305      	str	r3, [sp, #20]
 800d2bc:	e7f7      	b.n	800d2ae <RegionCommonUpdateBandTimeOff+0xf2>
 800d2be:	bf00      	nop
 800d2c0:	0001ec30 	.word	0x0001ec30
 800d2c4:	c22e4507 	.word	0xc22e4507
 800d2c8:	00015180 	.word	0x00015180

0800d2cc <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d2cc:	7803      	ldrb	r3, [r0, #0]
 800d2ce:	2b03      	cmp	r3, #3
 800d2d0:	d001      	beq.n	800d2d6 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800d2d2:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800d2d4:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800d2d6:	7842      	ldrb	r2, [r0, #1]
 800d2d8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d2dc:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d2de:	f003 030f 	and.w	r3, r3, #15
 800d2e2:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d2e4:	0913      	lsrs	r3, r2, #4
 800d2e6:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800d2e8:	7883      	ldrb	r3, [r0, #2]
 800d2ea:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800d2ec:	78c2      	ldrb	r2, [r0, #3]
 800d2ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d2f2:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800d2f4:	7903      	ldrb	r3, [r0, #4]
 800d2f6:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d2f8:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800d2fc:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800d2fe:	f003 030f 	and.w	r3, r3, #15
 800d302:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800d304:	2005      	movs	r0, #5
 800d306:	4770      	bx	lr

0800d308 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800d308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30c:	b085      	sub	sp, #20
 800d30e:	4604      	mov	r4, r0
 800d310:	4688      	mov	r8, r1
 800d312:	4617      	mov	r7, r2
 800d314:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800d316:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800d318:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800d31c:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800d320:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800d324:	7943      	ldrb	r3, [r0, #5]
 800d326:	b92b      	cbnz	r3, 800d334 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800d328:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800d32c:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800d330:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800d334:	b355      	cbz	r5, 800d38c <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800d336:	f1ba 0f0f 	cmp.w	sl, #15
 800d33a:	d114      	bne.n	800d366 <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800d33c:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800d340:	f1b9 0f0f 	cmp.w	r9, #15
 800d344:	d020      	beq.n	800d388 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800d346:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800d34a:	9303      	str	r3, [sp, #12]
 800d34c:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800d350:	461c      	mov	r4, r3
 800d352:	4619      	mov	r1, r3
 800d354:	4648      	mov	r0, r9
 800d356:	f7ff fe94 	bl	800d082 <RegionCommonValueInRange>
 800d35a:	b9b8      	cbnz	r0, 800d38c <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800d35c:	454c      	cmp	r4, r9
 800d35e:	dc21      	bgt.n	800d3a4 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800d360:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800d364:	e012      	b.n	800d38c <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800d366:	69a3      	ldr	r3, [r4, #24]
 800d368:	9301      	str	r3, [sp, #4]
 800d36a:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d374:	4652      	mov	r2, sl
 800d376:	6921      	ldr	r1, [r4, #16]
 800d378:	7b20      	ldrb	r0, [r4, #12]
 800d37a:	f7ff fe8c 	bl	800d096 <RegionCommonChanVerifyDr>
 800d37e:	2800      	cmp	r0, #0
 800d380:	d1de      	bne.n	800d340 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800d382:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800d386:	e7db      	b.n	800d340 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800d388:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800d38c:	2d07      	cmp	r5, #7
 800d38e:	d00c      	beq.n	800d3aa <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800d390:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800d394:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800d398:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800d39c:	4628      	mov	r0, r5
 800d39e:	b005      	add	sp, #20
 800d3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800d3a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d3a8:	e7f0      	b.n	800d38c <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800d3aa:	f1bb 0f00 	cmp.w	fp, #0
 800d3ae:	d1ef      	bne.n	800d390 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800d3b0:	f04f 0b01 	mov.w	fp, #1
 800d3b4:	e7ec      	b.n	800d390 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800d3b8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800d3b8:	4b02      	ldr	r3, [pc, #8]	; (800d3c4 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800d3ba:	fa03 f000 	lsl.w	r0, r3, r0
}
 800d3be:	fbb0 f0f1 	udiv	r0, r0, r1
 800d3c2:	4770      	bx	lr
 800d3c4:	000f4240 	.word	0x000f4240

0800d3c8 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800d3c8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800d3cc:	fbb3 f0f0 	udiv	r0, r3, r0
 800d3d0:	4770      	bx	lr
	...

0800d3d4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800d3d4:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800d3d6:	f1a1 0c04 	sub.w	ip, r1, #4
 800d3da:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800d3de:	fb0e f202 	mul.w	r2, lr, r2
 800d3e2:	fb00 220c 	mla	r2, r0, ip, r2
 800d3e6:	0052      	lsls	r2, r2, #1
 800d3e8:	d021      	beq.n	800d42e <RegionCommonComputeRxWindowParameters+0x5a>
 800d3ea:	4402      	add	r2, r0
 800d3ec:	3a01      	subs	r2, #1
 800d3ee:	fbb2 f2f0 	udiv	r2, r2, r0
 800d3f2:	4291      	cmp	r1, r2
 800d3f4:	bf38      	it	cc
 800d3f6:	4611      	movcc	r1, r2
 800d3f8:	9a01      	ldr	r2, [sp, #4]
 800d3fa:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800d3fc:	0082      	lsls	r2, r0, #2
 800d3fe:	fb01 f000 	mul.w	r0, r1, r0
 800d402:	b1b8      	cbz	r0, 800d434 <RegionCommonComputeRxWindowParameters+0x60>
 800d404:	3001      	adds	r0, #1
 800d406:	0840      	lsrs	r0, r0, #1
 800d408:	1a12      	subs	r2, r2, r0
 800d40a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d40e:	fb01 2313 	mls	r3, r1, r3, r2
 800d412:	2b00      	cmp	r3, #0
 800d414:	dd10      	ble.n	800d438 <RegionCommonComputeRxWindowParameters+0x64>
 800d416:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800d41a:	4a0b      	ldr	r2, [pc, #44]	; (800d448 <RegionCommonComputeRxWindowParameters+0x74>)
 800d41c:	fb82 1203 	smull	r1, r2, r2, r3
 800d420:	17db      	asrs	r3, r3, #31
 800d422:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800d426:	9a02      	ldr	r2, [sp, #8]
 800d428:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800d42a:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800d42e:	fbb2 f2f0 	udiv	r2, r2, r0
 800d432:	e7de      	b.n	800d3f2 <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800d434:	0840      	lsrs	r0, r0, #1
 800d436:	e7e7      	b.n	800d408 <RegionCommonComputeRxWindowParameters+0x34>
 800d438:	4a03      	ldr	r2, [pc, #12]	; (800d448 <RegionCommonComputeRxWindowParameters+0x74>)
 800d43a:	fb82 1203 	smull	r1, r2, r2, r3
 800d43e:	17db      	asrs	r3, r3, #31
 800d440:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800d444:	e7ef      	b.n	800d426 <RegionCommonComputeRxWindowParameters+0x52>
 800d446:	bf00      	nop
 800d448:	10624dd3 	.word	0x10624dd3

0800d44c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800d44c:	b538      	push	{r3, r4, r5, lr}
 800d44e:	460d      	mov	r5, r1
 800d450:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800d452:	0040      	lsls	r0, r0, #1
 800d454:	f7f3 f9ba 	bl	80007cc <__aeabi_ui2f>
 800d458:	4601      	mov	r1, r0
 800d45a:	4628      	mov	r0, r5
 800d45c:	f7f3 f904 	bl	8000668 <__aeabi_fsub>
 800d460:	4621      	mov	r1, r4
 800d462:	f7f3 f901 	bl	8000668 <__aeabi_fsub>
 800d466:	f7f2 fff3 	bl	8000450 <__aeabi_f2d>
 800d46a:	f004 fb5d 	bl	8011b28 <floor>
 800d46e:	f7f3 f8cf 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800d472:	b240      	sxtb	r0, r0
 800d474:	bd38      	pop	{r3, r4, r5, pc}

0800d476 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800d476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47a:	b083      	sub	sp, #12
 800d47c:	4605      	mov	r5, r0
 800d47e:	468b      	mov	fp, r1
 800d480:	9200      	str	r2, [sp, #0]
 800d482:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d484:	2600      	movs	r6, #0
 800d486:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800d488:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800d48a:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d48c:	e049      	b.n	800d522 <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800d48e:	7a3a      	ldrb	r2, [r7, #8]
 800d490:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800d494:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800d498:	b252      	sxtb	r2, r2
 800d49a:	b249      	sxtb	r1, r1
 800d49c:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800d4a0:	f7ff fdef 	bl	800d082 <RegionCommonValueInRange>
 800d4a4:	b178      	cbz	r0, 800d4c6 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800d4a6:	68ea      	ldr	r2, [r5, #12]
 800d4a8:	7a7b      	ldrb	r3, [r7, #9]
 800d4aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d4ae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d4b2:	7d13      	ldrb	r3, [r2, #20]
 800d4b4:	b353      	cbz	r3, 800d50c <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800d4b6:	f109 0301 	add.w	r3, r9, #1
 800d4ba:	eb08 0204 	add.w	r2, r8, r4
 800d4be:	f80b 2009 	strb.w	r2, [fp, r9]
 800d4c2:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800d4c6:	3401      	adds	r4, #1
 800d4c8:	b2e4      	uxtb	r4, r4
 800d4ca:	2c0f      	cmp	r4, #15
 800d4cc:	d823      	bhi.n	800d516 <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800d4ce:	686b      	ldr	r3, [r5, #4]
 800d4d0:	0072      	lsls	r2, r6, #1
 800d4d2:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800d4d6:	4123      	asrs	r3, r4
 800d4d8:	f013 0f01 	tst.w	r3, #1
 800d4dc:	d0f3      	beq.n	800d4c6 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800d4de:	68a8      	ldr	r0, [r5, #8]
 800d4e0:	eb08 0304 	add.w	r3, r8, r4
 800d4e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d4e8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800d4ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d0e8      	beq.n	800d4c6 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d4f4:	782b      	ldrb	r3, [r5, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1c9      	bne.n	800d48e <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800d4fa:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d0c6      	beq.n	800d48e <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800d500:	5a9b      	ldrh	r3, [r3, r2]
 800d502:	4123      	asrs	r3, r4
 800d504:	f013 0f01 	tst.w	r3, #1
 800d508:	d1c1      	bne.n	800d48e <RegionCommonCountNbOfEnabledChannels+0x18>
 800d50a:	e7dc      	b.n	800d4c6 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800d50c:	f10a 0a01 	add.w	sl, sl, #1
 800d510:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800d514:	e7d7      	b.n	800d4c6 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d516:	f108 0810 	add.w	r8, r8, #16
 800d51a:	fa5f f888 	uxtb.w	r8, r8
 800d51e:	3601      	adds	r6, #1
 800d520:	b2f6      	uxtb	r6, r6
 800d522:	8a2b      	ldrh	r3, [r5, #16]
 800d524:	fa1f f288 	uxth.w	r2, r8
 800d528:	429a      	cmp	r2, r3
 800d52a:	d201      	bcs.n	800d530 <RegionCommonCountNbOfEnabledChannels+0xba>
        for( uint8_t j = 0; j < 16; j++ )
 800d52c:	2400      	movs	r4, #0
 800d52e:	e7cc      	b.n	800d4ca <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800d530:	9b00      	ldr	r3, [sp, #0]
 800d532:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800d536:	9b01      	ldr	r3, [sp, #4]
 800d538:	f883 a000 	strb.w	sl, [r3]
}
 800d53c:	b003      	add	sp, #12
 800d53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d542 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800d542:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d546:	b085      	sub	sp, #20
 800d548:	4604      	mov	r4, r0
 800d54a:	460f      	mov	r7, r1
 800d54c:	4616      	mov	r6, r2
 800d54e:	461d      	mov	r5, r3
 800d550:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800d554:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800d558:	6840      	ldr	r0, [r0, #4]
 800d55a:	f004 f821 	bl	80115a0 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	1a1b      	subs	r3, r3, r0
 800d562:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800d566:	2301      	movs	r3, #1
 800d568:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800d56c:	2300      	movs	r3, #0
 800d56e:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d570:	6863      	ldr	r3, [r4, #4]
 800d572:	b113      	cbz	r3, 800d57a <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800d574:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d576:	4283      	cmp	r3, r0
 800d578:	d81e      	bhi.n	800d5b8 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800d57a:	2300      	movs	r3, #0
 800d57c:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d57e:	69e3      	ldr	r3, [r4, #28]
 800d580:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800d584:	781f      	ldrb	r7, [r3, #0]
 800d586:	69a3      	ldr	r3, [r4, #24]
 800d588:	9303      	str	r3, [sp, #12]
 800d58a:	ab01      	add	r3, sp, #4
 800d58c:	f104 020c 	add.w	r2, r4, #12
 800d590:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d594:	e883 0003 	stmia.w	r3, {r0, r1}
 800d598:	7d23      	ldrb	r3, [r4, #20]
 800d59a:	9300      	str	r3, [sp, #0]
 800d59c:	7a23      	ldrb	r3, [r4, #8]
 800d59e:	7a62      	ldrb	r2, [r4, #9]
 800d5a0:	4661      	mov	r1, ip
 800d5a2:	4638      	mov	r0, r7
 800d5a4:	f7ff fe0a 	bl	800d1bc <RegionCommonUpdateBandTimeOff>
 800d5a8:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800d5ac:	4643      	mov	r3, r8
 800d5ae:	462a      	mov	r2, r5
 800d5b0:	4631      	mov	r1, r6
 800d5b2:	69e0      	ldr	r0, [r4, #28]
 800d5b4:	f7ff ff5f 	bl	800d476 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800d5b8:	782b      	ldrb	r3, [r5, #0]
 800d5ba:	b923      	cbnz	r3, 800d5c6 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800d5bc:	f898 3000 	ldrb.w	r3, [r8]
 800d5c0:	b13b      	cbz	r3, 800d5d2 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800d5c2:	200b      	movs	r0, #11
 800d5c4:	e002      	b.n	800d5cc <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800d5cc:	b005      	add	sp, #20
 800d5ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800d5d2:	200c      	movs	r0, #12
 800d5d4:	e7fa      	b.n	800d5cc <RegionCommonIdentifyChannels+0x8a>

0800d5d6 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800d5d6:	b570      	push	{r4, r5, r6, lr}
 800d5d8:	b082      	sub	sp, #8
 800d5da:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800d5dc:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800d5e0:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800d5e4:	42a6      	cmp	r6, r4
 800d5e6:	d011      	beq.n	800d60c <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800d5e8:	3c01      	subs	r4, #1
 800d5ea:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800d5ec:	42a6      	cmp	r6, r4
 800d5ee:	d00e      	beq.n	800d60e <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800d5f0:	68ab      	ldr	r3, [r5, #8]
 800d5f2:	9301      	str	r3, [sp, #4]
 800d5f4:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	4633      	mov	r3, r6
 800d5fc:	4622      	mov	r2, r4
 800d5fe:	6869      	ldr	r1, [r5, #4]
 800d600:	78e8      	ldrb	r0, [r5, #3]
 800d602:	f7ff fd48 	bl	800d096 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800d606:	2800      	cmp	r0, #0
 800d608:	d0ee      	beq.n	800d5e8 <RegionCommonGetNextLowerTxDr+0x12>
 800d60a:	e000      	b.n	800d60e <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800d60c:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800d60e:	4620      	mov	r0, r4
 800d610:	b002      	add	sp, #8
 800d612:	bd70      	pop	{r4, r5, r6, pc}

0800d614 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800d614:	4288      	cmp	r0, r1
 800d616:	bfb8      	it	lt
 800d618:	4608      	movlt	r0, r1
 800d61a:	4770      	bx	lr

0800d61c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800d61c:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800d620:	4a05      	ldr	r2, [pc, #20]	; (800d638 <RegionCommonGetBandwidth+0x1c>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d004      	beq.n	800d630 <RegionCommonGetBandwidth+0x14>
 800d626:	4a05      	ldr	r2, [pc, #20]	; (800d63c <RegionCommonGetBandwidth+0x20>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d103      	bne.n	800d634 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800d62c:	2002      	movs	r0, #2
 800d62e:	4770      	bx	lr
            return 1;
 800d630:	2001      	movs	r0, #1
 800d632:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800d634:	2000      	movs	r0, #0
    }
}
 800d636:	4770      	bx	lr
 800d638:	0003d090 	.word	0x0003d090
 800d63c:	0007a120 	.word	0x0007a120

0800d640 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800d640:	b500      	push	{lr}
 800d642:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800d644:	2805      	cmp	r0, #5
 800d646:	d80e      	bhi.n	800d666 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800d648:	9202      	str	r2, [sp, #8]
 800d64a:	9101      	str	r1, [sp, #4]
 800d64c:	4b0a      	ldr	r3, [pc, #40]	; (800d678 <RegionCommonRxConfigPrint+0x38>)
 800d64e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d652:	9300      	str	r3, [sp, #0]
 800d654:	4b09      	ldr	r3, [pc, #36]	; (800d67c <RegionCommonRxConfigPrint+0x3c>)
 800d656:	2201      	movs	r2, #1
 800d658:	2100      	movs	r1, #0
 800d65a:	2002      	movs	r0, #2
 800d65c:	f003 fc84 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800d660:	b005      	add	sp, #20
 800d662:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d666:	9201      	str	r2, [sp, #4]
 800d668:	9100      	str	r1, [sp, #0]
 800d66a:	4b05      	ldr	r3, [pc, #20]	; (800d680 <RegionCommonRxConfigPrint+0x40>)
 800d66c:	2201      	movs	r2, #1
 800d66e:	2100      	movs	r1, #0
 800d670:	2002      	movs	r0, #2
 800d672:	f003 fc79 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 800d676:	e7f3      	b.n	800d660 <RegionCommonRxConfigPrint+0x20>
 800d678:	08012378 	.word	0x08012378
 800d67c:	08012310 	.word	0x08012310
 800d680:	08012330 	.word	0x08012330

0800d684 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800d684:	b500      	push	{lr}
 800d686:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d688:	9101      	str	r1, [sp, #4]
 800d68a:	9000      	str	r0, [sp, #0]
 800d68c:	4b04      	ldr	r3, [pc, #16]	; (800d6a0 <RegionCommonTxConfigPrint+0x1c>)
 800d68e:	2201      	movs	r2, #1
 800d690:	2100      	movs	r1, #0
 800d692:	2002      	movs	r0, #2
 800d694:	f003 fc68 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 800d698:	b003      	add	sp, #12
 800d69a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d69e:	bf00      	nop
 800d6a0:	0801234c 	.word	0x0801234c

0800d6a4 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800d6a4:	b538      	push	{r3, r4, r5, lr}
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800d6aa:	4b1b      	ldr	r3, [pc, #108]	; (800d718 <VerifyRfFreq+0x74>)
 800d6ac:	6a1b      	ldr	r3, [r3, #32]
 800d6ae:	4798      	blx	r3
 800d6b0:	b130      	cbz	r0, 800d6c0 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800d6b2:	4b1a      	ldr	r3, [pc, #104]	; (800d71c <VerifyRfFreq+0x78>)
 800d6b4:	4423      	add	r3, r4
 800d6b6:	4a1a      	ldr	r2, [pc, #104]	; (800d720 <VerifyRfFreq+0x7c>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d802      	bhi.n	800d6c2 <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800d6bc:	2302      	movs	r3, #2
 800d6be:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800d6c0:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800d6c2:	4b18      	ldr	r3, [pc, #96]	; (800d724 <VerifyRfFreq+0x80>)
 800d6c4:	4423      	add	r3, r4
 800d6c6:	4a18      	ldr	r2, [pc, #96]	; (800d728 <VerifyRfFreq+0x84>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d802      	bhi.n	800d6d2 <VerifyRfFreq+0x2e>
        *band = 0;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	702b      	strb	r3, [r5, #0]
 800d6d0:	e7f6      	b.n	800d6c0 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800d6d2:	4b16      	ldr	r3, [pc, #88]	; (800d72c <VerifyRfFreq+0x88>)
 800d6d4:	4423      	add	r3, r4
 800d6d6:	4a16      	ldr	r2, [pc, #88]	; (800d730 <VerifyRfFreq+0x8c>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d802      	bhi.n	800d6e2 <VerifyRfFreq+0x3e>
        *band = 1;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	702b      	strb	r3, [r5, #0]
 800d6e0:	e7ee      	b.n	800d6c0 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800d6e2:	4b14      	ldr	r3, [pc, #80]	; (800d734 <VerifyRfFreq+0x90>)
 800d6e4:	4423      	add	r3, r4
 800d6e6:	4a14      	ldr	r2, [pc, #80]	; (800d738 <VerifyRfFreq+0x94>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d802      	bhi.n	800d6f2 <VerifyRfFreq+0x4e>
        *band = 5;
 800d6ec:	2305      	movs	r3, #5
 800d6ee:	702b      	strb	r3, [r5, #0]
 800d6f0:	e7e6      	b.n	800d6c0 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800d6f2:	4b12      	ldr	r3, [pc, #72]	; (800d73c <VerifyRfFreq+0x98>)
 800d6f4:	4423      	add	r3, r4
 800d6f6:	4a12      	ldr	r2, [pc, #72]	; (800d740 <VerifyRfFreq+0x9c>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d802      	bhi.n	800d702 <VerifyRfFreq+0x5e>
        *band = 3;
 800d6fc:	2303      	movs	r3, #3
 800d6fe:	702b      	strb	r3, [r5, #0]
 800d700:	e7de      	b.n	800d6c0 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800d702:	4b10      	ldr	r3, [pc, #64]	; (800d744 <VerifyRfFreq+0xa0>)
 800d704:	4423      	add	r3, r4
 800d706:	4a10      	ldr	r2, [pc, #64]	; (800d748 <VerifyRfFreq+0xa4>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d802      	bhi.n	800d712 <VerifyRfFreq+0x6e>
        *band = 4;
 800d70c:	2304      	movs	r3, #4
 800d70e:	702b      	strb	r3, [r5, #0]
 800d710:	e7d6      	b.n	800d6c0 <VerifyRfFreq+0x1c>
        return false;
 800d712:	2000      	movs	r0, #0
 800d714:	e7d4      	b.n	800d6c0 <VerifyRfFreq+0x1c>
 800d716:	bf00      	nop
 800d718:	08012954 	.word	0x08012954
 800d71c:	cc8faa40 	.word	0xcc8faa40
 800d720:	001e847f 	.word	0x001e847f
 800d724:	cc7125c0 	.word	0xcc7125c0
 800d728:	002dc6c0 	.word	0x002dc6c0
 800d72c:	cc435eff 	.word	0xcc435eff
 800d730:	000927bf 	.word	0x000927bf
 800d734:	cc38b0a0 	.word	0xcc38b0a0
 800d738:	0007a120 	.word	0x0007a120
 800d73c:	cc2e0240 	.word	0xcc2e0240
 800d740:	0003d090 	.word	0x0003d090
 800d744:	cc296e60 	.word	0xcc296e60
 800d748:	000493e0 	.word	0x000493e0

0800d74c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800d74c:	b570      	push	{r4, r5, r6, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	4605      	mov	r5, r0
 800d752:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800d754:	4b13      	ldr	r3, [pc, #76]	; (800d7a4 <GetTimeOnAir+0x58>)
 800d756:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800d758:	4913      	ldr	r1, [pc, #76]	; (800d7a8 <GetTimeOnAir+0x5c>)
 800d75a:	f7ff ff5f 	bl	800d61c <RegionCommonGetBandwidth>
 800d75e:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800d760:	2d07      	cmp	r5, #7
 800d762:	d00e      	beq.n	800d782 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800d764:	4b11      	ldr	r3, [pc, #68]	; (800d7ac <GetTimeOnAir+0x60>)
 800d766:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d768:	2001      	movs	r0, #1
 800d76a:	9003      	str	r0, [sp, #12]
 800d76c:	b2e4      	uxtb	r4, r4
 800d76e:	9402      	str	r4, [sp, #8]
 800d770:	2300      	movs	r3, #0
 800d772:	9301      	str	r3, [sp, #4]
 800d774:	2308      	movs	r3, #8
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	4603      	mov	r3, r0
 800d77a:	4632      	mov	r2, r6
 800d77c:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800d77e:	b004      	add	sp, #16
 800d780:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800d782:	4b0a      	ldr	r3, [pc, #40]	; (800d7ac <GetTimeOnAir+0x60>)
 800d784:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d786:	2301      	movs	r3, #1
 800d788:	9303      	str	r3, [sp, #12]
 800d78a:	b2e4      	uxtb	r4, r4
 800d78c:	9402      	str	r4, [sp, #8]
 800d78e:	2000      	movs	r0, #0
 800d790:	9001      	str	r0, [sp, #4]
 800d792:	2305      	movs	r3, #5
 800d794:	9300      	str	r3, [sp, #0]
 800d796:	4603      	mov	r3, r0
 800d798:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d79c:	fb06 f202 	mul.w	r2, r6, r2
 800d7a0:	47a8      	blx	r5
 800d7a2:	e7ec      	b.n	800d77e <GetTimeOnAir+0x32>
 800d7a4:	080123b0 	.word	0x080123b0
 800d7a8:	08012390 	.word	0x08012390
 800d7ac:	08012954 	.word	0x08012954

0800d7b0 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800d7b0:	b500      	push	{lr}
 800d7b2:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800d7b8:	7803      	ldrb	r3, [r0, #0]
 800d7ba:	3b0b      	subs	r3, #11
 800d7bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d7be:	d830      	bhi.n	800d822 <RegionEU868GetPhyParam+0x72>
 800d7c0:	e8df f003 	tbb	[pc, r3]
 800d7c4:	403a3734 	.word	0x403a3734
 800d7c8:	514d4946 	.word	0x514d4946
 800d7cc:	615d5955 	.word	0x615d5955
 800d7d0:	6d2f6a2f 	.word	0x6d2f6a2f
 800d7d4:	2f7c7973 	.word	0x2f7c7973
 800d7d8:	1884802f 	.word	0x1884802f
 800d7dc:	2f2f2f2f 	.word	0x2f2f2f2f
 800d7e0:	2f2f2f2f 	.word	0x2f2f2f2f
 800d7e4:	2f2f2f2f 	.word	0x2f2f2f2f
 800d7e8:	918a872f 	.word	0x918a872f
 800d7ec:	97942f2f 	.word	0x97942f2f
 800d7f0:	9a2f      	.short	0x9a2f
 800d7f2:	a0          	.byte	0xa0
 800d7f3:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800d7f4:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d7f8:	f88d 3004 	strb.w	r3, [sp, #4]
 800d7fc:	2307      	movs	r3, #7
 800d7fe:	f88d 3005 	strb.w	r3, [sp, #5]
 800d802:	2300      	movs	r3, #0
 800d804:	f88d 3006 	strb.w	r3, [sp, #6]
 800d808:	2310      	movs	r3, #16
 800d80a:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800d80e:	4b41      	ldr	r3, [pc, #260]	; (800d914 <RegionEU868GetPhyParam+0x164>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d816:	9202      	str	r2, [sp, #8]
 800d818:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800d81a:	a801      	add	r0, sp, #4
 800d81c:	f7ff fedb 	bl	800d5d6 <RegionCommonGetNextLowerTxDr>
 800d820:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800d822:	9804      	ldr	r0, [sp, #16]
 800d824:	9005      	str	r0, [sp, #20]
}
 800d826:	b007      	add	sp, #28
 800d828:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800d82c:	2340      	movs	r3, #64	; 0x40
 800d82e:	9304      	str	r3, [sp, #16]
            break;
 800d830:	e7f7      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800d832:	2320      	movs	r3, #32
 800d834:	9304      	str	r3, [sp, #16]
            break;
 800d836:	e7f4      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800d838:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d83c:	4a36      	ldr	r2, [pc, #216]	; (800d918 <RegionEU868GetPhyParam+0x168>)
 800d83e:	5cd3      	ldrb	r3, [r2, r3]
 800d840:	9304      	str	r3, [sp, #16]
            break;
 800d842:	e7ee      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800d844:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d848:	4a34      	ldr	r2, [pc, #208]	; (800d91c <RegionEU868GetPhyParam+0x16c>)
 800d84a:	5cd3      	ldrb	r3, [r2, r3]
 800d84c:	9304      	str	r3, [sp, #16]
            break;
 800d84e:	e7e8      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800d850:	2301      	movs	r3, #1
 800d852:	9304      	str	r3, [sp, #16]
            break;
 800d854:	e7e5      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800d856:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d85a:	9304      	str	r3, [sp, #16]
            break;
 800d85c:	e7e1      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800d85e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d862:	9304      	str	r3, [sp, #16]
            break;
 800d864:	e7dd      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800d866:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d86a:	9304      	str	r3, [sp, #16]
            break;
 800d86c:	e7d9      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800d86e:	f241 3388 	movw	r3, #5000	; 0x1388
 800d872:	9304      	str	r3, [sp, #16]
            break;
 800d874:	e7d5      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800d876:	f241 7370 	movw	r3, #6000	; 0x1770
 800d87a:	9304      	str	r3, [sp, #16]
            break;
 800d87c:	e7d1      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800d87e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d882:	9304      	str	r3, [sp, #16]
            break;
 800d884:	e7cd      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800d886:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d88a:	4825      	ldr	r0, [pc, #148]	; (800d920 <RegionEU868GetPhyParam+0x170>)
 800d88c:	f001 fc82 	bl	800f194 <randr>
 800d890:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800d894:	9004      	str	r0, [sp, #16]
            break;
 800d896:	e7c4      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800d898:	4b22      	ldr	r3, [pc, #136]	; (800d924 <RegionEU868GetPhyParam+0x174>)
 800d89a:	9304      	str	r3, [sp, #16]
            break;
 800d89c:	e7c1      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d89e:	4b1d      	ldr	r3, [pc, #116]	; (800d914 <RegionEU868GetPhyParam+0x164>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800d8a6:	9304      	str	r3, [sp, #16]
            break;
 800d8a8:	e7bb      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800d8aa:	4b1a      	ldr	r3, [pc, #104]	; (800d914 <RegionEU868GetPhyParam+0x164>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800d8b2:	9304      	str	r3, [sp, #16]
            break;
 800d8b4:	e7b5      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800d8b6:	2310      	movs	r3, #16
 800d8b8:	9304      	str	r3, [sp, #16]
            break;
 800d8ba:	e7b2      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800d8bc:	4b15      	ldr	r3, [pc, #84]	; (800d914 <RegionEU868GetPhyParam+0x164>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	9304      	str	r3, [sp, #16]
            break;
 800d8c2:	e7ae      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800d8c4:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800d8c8:	9304      	str	r3, [sp, #16]
            break;
 800d8ca:	e7aa      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800d8cc:	4b16      	ldr	r3, [pc, #88]	; (800d928 <RegionEU868GetPhyParam+0x178>)
 800d8ce:	9304      	str	r3, [sp, #16]
            break;
 800d8d0:	e7a7      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800d8d2:	4b14      	ldr	r3, [pc, #80]	; (800d924 <RegionEU868GetPhyParam+0x174>)
 800d8d4:	9304      	str	r3, [sp, #16]
            break;
 800d8d6:	e7a4      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800d8d8:	2311      	movs	r3, #17
 800d8da:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800d8de:	2302      	movs	r3, #2
 800d8e0:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800d8e4:	e79d      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800d8e6:	2303      	movs	r3, #3
 800d8e8:	9304      	str	r3, [sp, #16]
            break;
 800d8ea:	e79a      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800d8ec:	4b0d      	ldr	r3, [pc, #52]	; (800d924 <RegionEU868GetPhyParam+0x174>)
 800d8ee:	9304      	str	r3, [sp, #16]
            break;
 800d8f0:	e797      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800d8f2:	2303      	movs	r3, #3
 800d8f4:	9304      	str	r3, [sp, #16]
            break;
 800d8f6:	e794      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800d8f8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d8fc:	4a0b      	ldr	r2, [pc, #44]	; (800d92c <RegionEU868GetPhyParam+0x17c>)
 800d8fe:	5cd3      	ldrb	r3, [r2, r3]
 800d900:	9304      	str	r3, [sp, #16]
            break;
 800d902:	e78e      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800d904:	490a      	ldr	r1, [pc, #40]	; (800d930 <RegionEU868GetPhyParam+0x180>)
 800d906:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800d90a:	f7ff fe87 	bl	800d61c <RegionCommonGetBandwidth>
 800d90e:	9004      	str	r0, [sp, #16]
            break;
 800d910:	e787      	b.n	800d822 <RegionEU868GetPhyParam+0x72>
 800d912:	bf00      	nop
 800d914:	20000c70 	.word	0x20000c70
 800d918:	080123b8 	.word	0x080123b8
 800d91c:	080123c0 	.word	0x080123c0
 800d920:	fffffc18 	.word	0xfffffc18
 800d924:	33d3e608 	.word	0x33d3e608
 800d928:	4009999a 	.word	0x4009999a
 800d92c:	080123b0 	.word	0x080123b0
 800d930:	08012390 	.word	0x08012390

0800d934 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800d934:	b510      	push	{r4, lr}
 800d936:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800d938:	4b0b      	ldr	r3, [pc, #44]	; (800d968 <RegionEU868SetBandTxDone+0x34>)
 800d93a:	681c      	ldr	r4, [r3, #0]
 800d93c:	4b0b      	ldr	r3, [pc, #44]	; (800d96c <RegionEU868SetBandTxDone+0x38>)
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	7803      	ldrb	r3, [r0, #0]
 800d942:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d946:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d94a:	7a5b      	ldrb	r3, [r3, #9]
 800d94c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800d950:	6903      	ldr	r3, [r0, #16]
 800d952:	9300      	str	r3, [sp, #0]
 800d954:	68c3      	ldr	r3, [r0, #12]
 800d956:	7842      	ldrb	r2, [r0, #1]
 800d958:	6881      	ldr	r1, [r0, #8]
 800d95a:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800d95e:	f7ff fc13 	bl	800d188 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800d962:	b002      	add	sp, #8
 800d964:	bd10      	pop	{r4, pc}
 800d966:	bf00      	nop
 800d968:	20000c6c 	.word	0x20000c6c
 800d96c:	20000c70 	.word	0x20000c70

0800d970 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800d970:	b510      	push	{r4, lr}
 800d972:	b0a4      	sub	sp, #144	; 0x90
 800d974:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800d976:	2290      	movs	r2, #144	; 0x90
 800d978:	2100      	movs	r1, #0
 800d97a:	4668      	mov	r0, sp
 800d97c:	f004 f8a8 	bl	8011ad0 <memset>
 800d980:	2364      	movs	r3, #100	; 0x64
 800d982:	f8ad 3000 	strh.w	r3, [sp]
 800d986:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d98a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d98e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800d992:	210a      	movs	r1, #10
 800d994:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800d998:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800d99c:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800d9a0:	7a23      	ldrb	r3, [r4, #8]
 800d9a2:	2b01      	cmp	r3, #1
 800d9a4:	d031      	beq.n	800da0a <RegionEU868InitDefaults+0x9a>
 800d9a6:	2b02      	cmp	r3, #2
 800d9a8:	d03d      	beq.n	800da26 <RegionEU868InitDefaults+0xb6>
 800d9aa:	b10b      	cbz	r3, 800d9b0 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800d9ac:	b024      	add	sp, #144	; 0x90
 800d9ae:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800d9b0:	6820      	ldr	r0, [r4, #0]
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d0fa      	beq.n	800d9ac <RegionEU868InitDefaults+0x3c>
 800d9b6:	6863      	ldr	r3, [r4, #4]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d0f7      	beq.n	800d9ac <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800d9bc:	4a1f      	ldr	r2, [pc, #124]	; (800da3c <RegionEU868InitDefaults+0xcc>)
 800d9be:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800d9c0:	4c1f      	ldr	r4, [pc, #124]	; (800da40 <RegionEU868InitDefaults+0xd0>)
 800d9c2:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800d9c4:	2290      	movs	r2, #144	; 0x90
 800d9c6:	4669      	mov	r1, sp
 800d9c8:	f001 fbf1 	bl	800f1ae <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800d9cc:	6824      	ldr	r4, [r4, #0]
 800d9ce:	4b1d      	ldr	r3, [pc, #116]	; (800da44 <RegionEU868InitDefaults+0xd4>)
 800d9d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d9d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800d9d8:	f104 0c0c 	add.w	ip, r4, #12
 800d9dc:	f103 020c 	add.w	r2, r3, #12
 800d9e0:	ca07      	ldmia	r2, {r0, r1, r2}
 800d9e2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800d9e6:	f104 0c18 	add.w	ip, r4, #24
 800d9ea:	3318      	adds	r3, #24
 800d9ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d9f0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800d9f4:	2307      	movs	r3, #7
 800d9f6:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 800da00:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 800da04:	f7ff fbb1 	bl	800d16a <RegionCommonChanMaskCopy>
            break;
 800da08:	e7d0      	b.n	800d9ac <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800da0a:	4b0d      	ldr	r3, [pc, #52]	; (800da40 <RegionEU868InitDefaults+0xd0>)
 800da0c:	6818      	ldr	r0, [r3, #0]
 800da0e:	2300      	movs	r3, #0
 800da10:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800da12:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800da14:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800da16:	2201      	movs	r2, #1
 800da18:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800da1c:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800da20:	f7ff fba3 	bl	800d16a <RegionCommonChanMaskCopy>
            break;
 800da24:	e7c2      	b.n	800d9ac <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800da26:	4b06      	ldr	r3, [pc, #24]	; (800da40 <RegionEU868InitDefaults+0xd0>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800da2e:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800da32:	430a      	orrs	r2, r1
 800da34:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800da38:	e7b8      	b.n	800d9ac <RegionEU868InitDefaults+0x3c>
 800da3a:	bf00      	nop
 800da3c:	20000c6c 	.word	0x20000c6c
 800da40:	20000c70 	.word	0x20000c70
 800da44:	08011c74 	.word	0x08011c74

0800da48 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800da48:	b500      	push	{lr}
 800da4a:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800da4c:	290f      	cmp	r1, #15
 800da4e:	d83c      	bhi.n	800daca <RegionEU868Verify+0x82>
 800da50:	e8df f001 	tbb	[pc, r1]
 800da54:	3b3b3b0a 	.word	0x3b3b3b0a
 800da58:	271d133b 	.word	0x271d133b
 800da5c:	3b31313b 	.word	0x3b31313b
 800da60:	083b3b3b 	.word	0x083b3b3b
 800da64:	2001      	movs	r0, #1
 800da66:	e031      	b.n	800dacc <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800da68:	2300      	movs	r3, #0
 800da6a:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800da6e:	f10d 0107 	add.w	r1, sp, #7
 800da72:	6800      	ldr	r0, [r0, #0]
 800da74:	f7ff fe16 	bl	800d6a4 <VerifyRfFreq>
 800da78:	e028      	b.n	800dacc <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800da7a:	2207      	movs	r2, #7
 800da7c:	2100      	movs	r1, #0
 800da7e:	f990 0000 	ldrsb.w	r0, [r0]
 800da82:	f7ff fafe 	bl	800d082 <RegionCommonValueInRange>
 800da86:	3800      	subs	r0, #0
 800da88:	bf18      	it	ne
 800da8a:	2001      	movne	r0, #1
 800da8c:	e01e      	b.n	800dacc <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800da8e:	2205      	movs	r2, #5
 800da90:	2100      	movs	r1, #0
 800da92:	f990 0000 	ldrsb.w	r0, [r0]
 800da96:	f7ff faf4 	bl	800d082 <RegionCommonValueInRange>
 800da9a:	3800      	subs	r0, #0
 800da9c:	bf18      	it	ne
 800da9e:	2001      	movne	r0, #1
 800daa0:	e014      	b.n	800dacc <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800daa2:	2207      	movs	r2, #7
 800daa4:	2100      	movs	r1, #0
 800daa6:	f990 0000 	ldrsb.w	r0, [r0]
 800daaa:	f7ff faea 	bl	800d082 <RegionCommonValueInRange>
 800daae:	3800      	subs	r0, #0
 800dab0:	bf18      	it	ne
 800dab2:	2001      	movne	r0, #1
 800dab4:	e00a      	b.n	800dacc <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800dab6:	2207      	movs	r2, #7
 800dab8:	2100      	movs	r1, #0
 800daba:	f990 0000 	ldrsb.w	r0, [r0]
 800dabe:	f7ff fae0 	bl	800d082 <RegionCommonValueInRange>
 800dac2:	3800      	subs	r0, #0
 800dac4:	bf18      	it	ne
 800dac6:	2001      	movne	r0, #1
 800dac8:	e000      	b.n	800dacc <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800daca:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800dacc:	b003      	add	sp, #12
 800dace:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800dad4 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800dad4:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800dad6:	7903      	ldrb	r3, [r0, #4]
 800dad8:	b11b      	cbz	r3, 800dae2 <RegionEU868ChanMaskSet+0xe>
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d00b      	beq.n	800daf6 <RegionEU868ChanMaskSet+0x22>
 800dade:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800dae0:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800dae2:	4b0a      	ldr	r3, [pc, #40]	; (800db0c <RegionEU868ChanMaskSet+0x38>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2201      	movs	r2, #1
 800dae8:	6801      	ldr	r1, [r0, #0]
 800daea:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800daee:	f7ff fb3c 	bl	800d16a <RegionCommonChanMaskCopy>
    return true;
 800daf2:	2001      	movs	r0, #1
            break;
 800daf4:	e7f4      	b.n	800dae0 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800daf6:	4b05      	ldr	r3, [pc, #20]	; (800db0c <RegionEU868ChanMaskSet+0x38>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2201      	movs	r2, #1
 800dafc:	6801      	ldr	r1, [r0, #0]
 800dafe:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800db02:	f7ff fb32 	bl	800d16a <RegionCommonChanMaskCopy>
    return true;
 800db06:	2001      	movs	r0, #1
            break;
 800db08:	e7ea      	b.n	800dae0 <RegionEU868ChanMaskSet+0xc>
 800db0a:	bf00      	nop
 800db0c:	20000c70 	.word	0x20000c70

0800db10 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800db10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db12:	b083      	sub	sp, #12
 800db14:	460e      	mov	r6, r1
 800db16:	4617      	mov	r7, r2
 800db18:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800db1a:	2807      	cmp	r0, #7
 800db1c:	bfa8      	it	ge
 800db1e:	2007      	movge	r0, #7
 800db20:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800db22:	4913      	ldr	r1, [pc, #76]	; (800db70 <RegionEU868ComputeRxWindowParameters+0x60>)
 800db24:	f7ff fd7a 	bl	800d61c <RegionCommonGetBandwidth>
 800db28:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800db2a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800db2e:	2b07      	cmp	r3, #7
 800db30:	d017      	beq.n	800db62 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800db32:	4a0f      	ldr	r2, [pc, #60]	; (800db70 <RegionEU868ComputeRxWindowParameters+0x60>)
 800db34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800db38:	4a0e      	ldr	r2, [pc, #56]	; (800db74 <RegionEU868ComputeRxWindowParameters+0x64>)
 800db3a:	5cd0      	ldrb	r0, [r2, r3]
 800db3c:	f7ff fc3c 	bl	800d3b8 <RegionCommonComputeSymbolTimeLoRa>
 800db40:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800db42:	4b0d      	ldr	r3, [pc, #52]	; (800db78 <RegionEU868ComputeRxWindowParameters+0x68>)
 800db44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db46:	4798      	blx	r3
 800db48:	4603      	mov	r3, r0
 800db4a:	f104 020c 	add.w	r2, r4, #12
 800db4e:	9201      	str	r2, [sp, #4]
 800db50:	3408      	adds	r4, #8
 800db52:	9400      	str	r4, [sp, #0]
 800db54:	463a      	mov	r2, r7
 800db56:	4631      	mov	r1, r6
 800db58:	4628      	mov	r0, r5
 800db5a:	f7ff fc3b 	bl	800d3d4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800db5e:	b003      	add	sp, #12
 800db60:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800db62:	4a04      	ldr	r2, [pc, #16]	; (800db74 <RegionEU868ComputeRxWindowParameters+0x64>)
 800db64:	5cd0      	ldrb	r0, [r2, r3]
 800db66:	f7ff fc2f 	bl	800d3c8 <RegionCommonComputeSymbolTimeFsk>
 800db6a:	4605      	mov	r5, r0
 800db6c:	e7e9      	b.n	800db42 <RegionEU868ComputeRxWindowParameters+0x32>
 800db6e:	bf00      	nop
 800db70:	08012390 	.word	0x08012390
 800db74:	080123b0 	.word	0x080123b0
 800db78:	08012954 	.word	0x08012954

0800db7c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800db7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db80:	b08a      	sub	sp, #40	; 0x28
 800db82:	4604      	mov	r4, r0
 800db84:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800db86:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800db8a:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800db8e:	4b37      	ldr	r3, [pc, #220]	; (800dc6c <RegionEU868RxConfig+0xf0>)
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	4798      	blx	r3
 800db94:	2800      	cmp	r0, #0
 800db96:	d167      	bne.n	800dc68 <RegionEU868RxConfig+0xec>
 800db98:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800db9a:	7ce3      	ldrb	r3, [r4, #19]
 800db9c:	b983      	cbnz	r3, 800dbc0 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800db9e:	4b34      	ldr	r3, [pc, #208]	; (800dc70 <RegionEU868RxConfig+0xf4>)
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	7823      	ldrb	r3, [r4, #0]
 800dba4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800dba8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800dbac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dbb0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dbb4:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800dbb8:	f1b8 0f00 	cmp.w	r8, #0
 800dbbc:	d100      	bne.n	800dbc0 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800dbbe:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800dbc0:	4b2c      	ldr	r3, [pc, #176]	; (800dc74 <RegionEU868RxConfig+0xf8>)
 800dbc2:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800dbc6:	4b29      	ldr	r3, [pc, #164]	; (800dc6c <RegionEU868RxConfig+0xf0>)
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	4640      	mov	r0, r8
 800dbcc:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800dbce:	2d07      	cmp	r5, #7
 800dbd0:	d02b      	beq.n	800dc2a <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800dbd2:	4b26      	ldr	r3, [pc, #152]	; (800dc6c <RegionEU868RxConfig+0xf0>)
 800dbd4:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800dbd8:	7ca3      	ldrb	r3, [r4, #18]
 800dbda:	9309      	str	r3, [sp, #36]	; 0x24
 800dbdc:	2601      	movs	r6, #1
 800dbde:	9608      	str	r6, [sp, #32]
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	9307      	str	r3, [sp, #28]
 800dbe4:	9306      	str	r3, [sp, #24]
 800dbe6:	9305      	str	r3, [sp, #20]
 800dbe8:	9304      	str	r3, [sp, #16]
 800dbea:	9303      	str	r3, [sp, #12]
 800dbec:	8922      	ldrh	r2, [r4, #8]
 800dbee:	9202      	str	r2, [sp, #8]
 800dbf0:	2208      	movs	r2, #8
 800dbf2:	9201      	str	r2, [sp, #4]
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	4633      	mov	r3, r6
 800dbf8:	464a      	mov	r2, r9
 800dbfa:	78a1      	ldrb	r1, [r4, #2]
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800dc00:	7c63      	ldrb	r3, [r4, #17]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d02d      	beq.n	800dc62 <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800dc06:	4b1c      	ldr	r3, [pc, #112]	; (800dc78 <RegionEU868RxConfig+0xfc>)
 800dc08:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800dc0a:	4b18      	ldr	r3, [pc, #96]	; (800dc6c <RegionEU868RxConfig+0xf0>)
 800dc0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc0e:	310d      	adds	r1, #13
 800dc10:	b2c9      	uxtb	r1, r1
 800dc12:	4630      	mov	r0, r6
 800dc14:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800dc16:	462a      	mov	r2, r5
 800dc18:	4641      	mov	r1, r8
 800dc1a:	7ce0      	ldrb	r0, [r4, #19]
 800dc1c:	f7ff fd10 	bl	800d640 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800dc20:	703d      	strb	r5, [r7, #0]
    return true;
 800dc22:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800dc24:	b00a      	add	sp, #40	; 0x28
 800dc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800dc2a:	4b10      	ldr	r3, [pc, #64]	; (800dc6c <RegionEU868RxConfig+0xf0>)
 800dc2c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800dc30:	7ca3      	ldrb	r3, [r4, #18]
 800dc32:	9309      	str	r3, [sp, #36]	; 0x24
 800dc34:	2000      	movs	r0, #0
 800dc36:	9008      	str	r0, [sp, #32]
 800dc38:	9007      	str	r0, [sp, #28]
 800dc3a:	9006      	str	r0, [sp, #24]
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	9305      	str	r3, [sp, #20]
 800dc40:	9004      	str	r0, [sp, #16]
 800dc42:	9003      	str	r0, [sp, #12]
 800dc44:	8923      	ldrh	r3, [r4, #8]
 800dc46:	9302      	str	r3, [sp, #8]
 800dc48:	2305      	movs	r3, #5
 800dc4a:	9301      	str	r3, [sp, #4]
 800dc4c:	4b0b      	ldr	r3, [pc, #44]	; (800dc7c <RegionEU868RxConfig+0x100>)
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	4603      	mov	r3, r0
 800dc52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dc56:	fb02 f209 	mul.w	r2, r2, r9
 800dc5a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800dc5e:	47d0      	blx	sl
 800dc60:	e7ce      	b.n	800dc00 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800dc62:	4b07      	ldr	r3, [pc, #28]	; (800dc80 <RegionEU868RxConfig+0x104>)
 800dc64:	5d59      	ldrb	r1, [r3, r5]
 800dc66:	e7d0      	b.n	800dc0a <RegionEU868RxConfig+0x8e>
        return false;
 800dc68:	2000      	movs	r0, #0
 800dc6a:	e7db      	b.n	800dc24 <RegionEU868RxConfig+0xa8>
 800dc6c:	08012954 	.word	0x08012954
 800dc70:	20000c70 	.word	0x20000c70
 800dc74:	080123b0 	.word	0x080123b0
 800dc78:	080123c0 	.word	0x080123c0
 800dc7c:	00014585 	.word	0x00014585
 800dc80:	080123b8 	.word	0x080123b8

0800dc84 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800dc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc88:	b08d      	sub	sp, #52	; 0x34
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	460f      	mov	r7, r1
 800dc8e:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800dc90:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dc94:	4a42      	ldr	r2, [pc, #264]	; (800dda0 <RegionEU868TxConfig+0x11c>)
 800dc96:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800dc9a:	4b42      	ldr	r3, [pc, #264]	; (800dda4 <RegionEU868TxConfig+0x120>)
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	4d42      	ldr	r5, [pc, #264]	; (800dda8 <RegionEU868TxConfig+0x124>)
 800dca0:	6829      	ldr	r1, [r5, #0]
 800dca2:	7803      	ldrb	r3, [r0, #0]
 800dca4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dca8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800dcac:	7a4b      	ldrb	r3, [r1, #9]
 800dcae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dcb2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dcb6:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800dcba:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800dcbe:	f7ff fca9 	bl	800d614 <RegionCommonLimitTxPower>
 800dcc2:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800dcc4:	4939      	ldr	r1, [pc, #228]	; (800ddac <RegionEU868TxConfig+0x128>)
 800dcc6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800dcca:	f7ff fca7 	bl	800d61c <RegionCommonGetBandwidth>
 800dcce:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800dcd0:	68a2      	ldr	r2, [r4, #8]
 800dcd2:	6861      	ldr	r1, [r4, #4]
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	f7ff fbb9 	bl	800d44c <RegionCommonComputeTxPower>
 800dcda:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800dcdc:	4b34      	ldr	r3, [pc, #208]	; (800ddb0 <RegionEU868TxConfig+0x12c>)
 800dcde:	68da      	ldr	r2, [r3, #12]
 800dce0:	6829      	ldr	r1, [r5, #0]
 800dce2:	7823      	ldrb	r3, [r4, #0]
 800dce4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dce8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800dcec:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800dcee:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800dcf2:	2b07      	cmp	r3, #7
 800dcf4:	d031      	beq.n	800dd5a <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800dcf6:	4b2e      	ldr	r3, [pc, #184]	; (800ddb0 <RegionEU868TxConfig+0x12c>)
 800dcf8:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800dcfc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800dd00:	9308      	str	r3, [sp, #32]
 800dd02:	2200      	movs	r2, #0
 800dd04:	9207      	str	r2, [sp, #28]
 800dd06:	9206      	str	r2, [sp, #24]
 800dd08:	9205      	str	r2, [sp, #20]
 800dd0a:	2501      	movs	r5, #1
 800dd0c:	9504      	str	r5, [sp, #16]
 800dd0e:	9203      	str	r2, [sp, #12]
 800dd10:	2308      	movs	r3, #8
 800dd12:	9302      	str	r3, [sp, #8]
 800dd14:	9501      	str	r5, [sp, #4]
 800dd16:	f8cd a000 	str.w	sl, [sp]
 800dd1a:	464b      	mov	r3, r9
 800dd1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd1e:	4628      	mov	r0, r5
 800dd20:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800dd22:	4b21      	ldr	r3, [pc, #132]	; (800dda8 <RegionEU868TxConfig+0x124>)
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	7823      	ldrb	r3, [r4, #0]
 800dd28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dd2c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800dd30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800dd34:	f7ff fca6 	bl	800d684 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800dd38:	89a1      	ldrh	r1, [r4, #12]
 800dd3a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800dd3e:	f7ff fd05 	bl	800d74c <GetTimeOnAir>
 800dd42:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800dd46:	4b1a      	ldr	r3, [pc, #104]	; (800ddb0 <RegionEU868TxConfig+0x12c>)
 800dd48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd4a:	7b21      	ldrb	r1, [r4, #12]
 800dd4c:	4628      	mov	r0, r5
 800dd4e:	4798      	blx	r3

    *txPower = txPowerLimited;
 800dd50:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800dd52:	2001      	movs	r0, #1
 800dd54:	b00d      	add	sp, #52	; 0x34
 800dd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800dd5a:	4b15      	ldr	r3, [pc, #84]	; (800ddb0 <RegionEU868TxConfig+0x12c>)
 800dd5c:	69dd      	ldr	r5, [r3, #28]
 800dd5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dd62:	fb03 f30a 	mul.w	r3, r3, sl
 800dd66:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800dd6a:	9208      	str	r2, [sp, #32]
 800dd6c:	f04f 0a00 	mov.w	sl, #0
 800dd70:	f8cd a01c 	str.w	sl, [sp, #28]
 800dd74:	f8cd a018 	str.w	sl, [sp, #24]
 800dd78:	f8cd a014 	str.w	sl, [sp, #20]
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	9204      	str	r2, [sp, #16]
 800dd80:	f8cd a00c 	str.w	sl, [sp, #12]
 800dd84:	2205      	movs	r2, #5
 800dd86:	9202      	str	r2, [sp, #8]
 800dd88:	f8cd a004 	str.w	sl, [sp, #4]
 800dd8c:	9300      	str	r3, [sp, #0]
 800dd8e:	464b      	mov	r3, r9
 800dd90:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800dd94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd96:	4650      	mov	r0, sl
 800dd98:	47a8      	blx	r5
        modem = MODEM_FSK;
 800dd9a:	4655      	mov	r5, sl
 800dd9c:	e7c1      	b.n	800dd22 <RegionEU868TxConfig+0x9e>
 800dd9e:	bf00      	nop
 800dda0:	080123b0 	.word	0x080123b0
 800dda4:	20000c6c 	.word	0x20000c6c
 800dda8:	20000c70 	.word	0x20000c70
 800ddac:	08012390 	.word	0x08012390
 800ddb0:	08012954 	.word	0x08012954

0800ddb4 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800ddb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddb8:	b08f      	sub	sp, #60	; 0x3c
 800ddba:	4605      	mov	r5, r0
 800ddbc:	4689      	mov	r9, r1
 800ddbe:	4690      	mov	r8, r2
 800ddc0:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800ddc2:	2400      	movs	r4, #0
 800ddc4:	940c      	str	r4, [sp, #48]	; 0x30
 800ddc6:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800ddca:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800ddce:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ddd0:	e030      	b.n	800de34 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800ddd2:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800ddd6:	2607      	movs	r6, #7
 800ddd8:	e012      	b.n	800de00 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800ddda:	4a58      	ldr	r2, [pc, #352]	; (800df3c <RegionEU868LinkAdrReq+0x188>)
 800dddc:	6812      	ldr	r2, [r2, #0]
 800ddde:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800dde2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dde6:	b13a      	cbz	r2, 800ddf8 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800dde8:	2201      	movs	r2, #1
 800ddea:	fa02 f20c 	lsl.w	r2, r2, ip
 800ddee:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800ddf2:	430a      	orrs	r2, r1
 800ddf4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800ddf8:	f10c 0c01 	add.w	ip, ip, #1
 800ddfc:	fa5f fc8c 	uxtb.w	ip, ip
 800de00:	f1bc 0f0f 	cmp.w	ip, #15
 800de04:	d816      	bhi.n	800de34 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800de06:	2b06      	cmp	r3, #6
 800de08:	d0e7      	beq.n	800ddda <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800de0a:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800de0e:	fa4e fe0c 	asr.w	lr, lr, ip
 800de12:	f01e 0f01 	tst.w	lr, #1
 800de16:	d0ef      	beq.n	800ddf8 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800de18:	4a48      	ldr	r2, [pc, #288]	; (800df3c <RegionEU868LinkAdrReq+0x188>)
 800de1a:	6812      	ldr	r2, [r2, #0]
 800de1c:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800de20:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800de24:	2a00      	cmp	r2, #0
 800de26:	d1e7      	bne.n	800ddf8 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800de28:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800de2c:	e7e4      	b.n	800ddf8 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800de2e:	2606      	movs	r6, #6
 800de30:	e000      	b.n	800de34 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800de32:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800de34:	7a2b      	ldrb	r3, [r5, #8]
 800de36:	42a3      	cmp	r3, r4
 800de38:	d919      	bls.n	800de6e <RegionEU868LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800de3a:	6868      	ldr	r0, [r5, #4]
 800de3c:	a90c      	add	r1, sp, #48	; 0x30
 800de3e:	4420      	add	r0, r4
 800de40:	f7ff fa44 	bl	800d2cc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800de44:	4603      	mov	r3, r0
 800de46:	b190      	cbz	r0, 800de6e <RegionEU868LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 800de48:	4423      	add	r3, r4
 800de4a:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 800de4c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800de50:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800de54:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800de58:	b90b      	cbnz	r3, 800de5e <RegionEU868LinkAdrReq+0xaa>
 800de5a:	2a00      	cmp	r2, #0
 800de5c:	d0e7      	beq.n	800de2e <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800de5e:	1e5a      	subs	r2, r3, #1
 800de60:	b2d2      	uxtb	r2, r2
 800de62:	2a04      	cmp	r2, #4
 800de64:	d9e5      	bls.n	800de32 <RegionEU868LinkAdrReq+0x7e>
 800de66:	2b06      	cmp	r3, #6
 800de68:	d9b3      	bls.n	800ddd2 <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800de6a:	2606      	movs	r6, #6
 800de6c:	e7e2      	b.n	800de34 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800de6e:	2302      	movs	r3, #2
 800de70:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800de74:	7a6b      	ldrb	r3, [r5, #9]
 800de76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800de7a:	a80a      	add	r0, sp, #40	; 0x28
 800de7c:	f7ff fc98 	bl	800d7b0 <RegionEU868GetPhyParam>
 800de80:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800de82:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800de86:	7aab      	ldrb	r3, [r5, #10]
 800de88:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800de8c:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800de90:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800de94:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800de98:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800de9c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800dea0:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800dea4:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800dea8:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800deac:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800deb0:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800deb4:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800deb8:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800debc:	2310      	movs	r3, #16
 800debe:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800dec2:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800dec6:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800dec8:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800decc:	2307      	movs	r3, #7
 800dece:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800ded2:	4a1a      	ldr	r2, [pc, #104]	; (800df3c <RegionEU868LinkAdrReq+0x188>)
 800ded4:	6812      	ldr	r2, [r2, #0]
 800ded6:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800ded8:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800dedc:	2300      	movs	r3, #0
 800dede:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800dee2:	682b      	ldr	r3, [r5, #0]
 800dee4:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800dee6:	ab0c      	add	r3, sp, #48	; 0x30
 800dee8:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800deec:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800def0:	a801      	add	r0, sp, #4
 800def2:	f7ff fa09 	bl	800d308 <RegionCommonLinkAdrReqVerifyParams>
 800def6:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800def8:	2807      	cmp	r0, #7
 800defa:	d010      	beq.n	800df1e <RegionEU868LinkAdrReq+0x16a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800defc:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800df00:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800df04:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800df08:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800df0c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800df10:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800df12:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800df14:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800df16:	4628      	mov	r0, r5
 800df18:	b00f      	add	sp, #60	; 0x3c
 800df1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800df1e:	4e07      	ldr	r6, [pc, #28]	; (800df3c <RegionEU868LinkAdrReq+0x188>)
 800df20:	6830      	ldr	r0, [r6, #0]
 800df22:	220c      	movs	r2, #12
 800df24:	2100      	movs	r1, #0
 800df26:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800df2a:	f001 f958 	bl	800f1de <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800df2e:	6833      	ldr	r3, [r6, #0]
 800df30:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800df34:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 800df38:	e7e0      	b.n	800defc <RegionEU868LinkAdrReq+0x148>
 800df3a:	bf00      	nop
 800df3c:	20000c70 	.word	0x20000c70

0800df40 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800df40:	b530      	push	{r4, r5, lr}
 800df42:	b083      	sub	sp, #12
 800df44:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800df46:	2300      	movs	r3, #0
 800df48:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800df4c:	f10d 0107 	add.w	r1, sp, #7
 800df50:	6840      	ldr	r0, [r0, #4]
 800df52:	f7ff fba7 	bl	800d6a4 <VerifyRfFreq>
 800df56:	b1a8      	cbz	r0, 800df84 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800df58:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800df5a:	2207      	movs	r2, #7
 800df5c:	2100      	movs	r1, #0
 800df5e:	f994 0000 	ldrsb.w	r0, [r4]
 800df62:	f7ff f88e 	bl	800d082 <RegionCommonValueInRange>
 800df66:	b908      	cbnz	r0, 800df6c <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800df68:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800df6c:	2205      	movs	r2, #5
 800df6e:	2100      	movs	r1, #0
 800df70:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800df74:	f7ff f885 	bl	800d082 <RegionCommonValueInRange>
 800df78:	b908      	cbnz	r0, 800df7e <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800df7a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800df7e:	4628      	mov	r0, r5
 800df80:	b003      	add	sp, #12
 800df82:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800df84:	2506      	movs	r5, #6
 800df86:	e7e8      	b.n	800df5a <RegionEU868RxParamSetupReq+0x1a>

0800df88 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800df88:	f04f 30ff 	mov.w	r0, #4294967295
 800df8c:	4770      	bx	lr
	...

0800df90 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800df90:	b510      	push	{r4, lr}
 800df92:	b082      	sub	sp, #8
    uint8_t status = 0x03;

#if defined( REGION_EU868 )
    uint8_t band = 0;
 800df94:	2300      	movs	r3, #0
 800df96:	f88d 3007 	strb.w	r3, [sp, #7]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800df9a:	7803      	ldrb	r3, [r0, #0]
 800df9c:	2b0f      	cmp	r3, #15
 800df9e:	d902      	bls.n	800dfa6 <RegionEU868DlChannelReq+0x16>
    {
        return 0;
 800dfa0:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800dfa2:	b002      	add	sp, #8
 800dfa4:	bd10      	pop	{r4, pc}
 800dfa6:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800dfa8:	f10d 0107 	add.w	r1, sp, #7
 800dfac:	6840      	ldr	r0, [r0, #4]
 800dfae:	f7ff fb79 	bl	800d6a4 <VerifyRfFreq>
 800dfb2:	b170      	cbz	r0, 800dfd2 <RegionEU868DlChannelReq+0x42>
    uint8_t status = 0x03;
 800dfb4:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800dfb6:	4b0b      	ldr	r3, [pc, #44]	; (800dfe4 <RegionEU868DlChannelReq+0x54>)
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	7823      	ldrb	r3, [r4, #0]
 800dfbc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800dfc0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800dfc4:	b909      	cbnz	r1, 800dfca <RegionEU868DlChannelReq+0x3a>
        status &= 0xFD;
 800dfc6:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    if( status == 0x03 )
 800dfca:	2803      	cmp	r0, #3
 800dfcc:	d003      	beq.n	800dfd6 <RegionEU868DlChannelReq+0x46>
    return status;
 800dfce:	b240      	sxtb	r0, r0
 800dfd0:	e7e7      	b.n	800dfa2 <RegionEU868DlChannelReq+0x12>
        status &= 0xFE;
 800dfd2:	2002      	movs	r0, #2
 800dfd4:	e7ef      	b.n	800dfb6 <RegionEU868DlChannelReq+0x26>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800dfd6:	6861      	ldr	r1, [r4, #4]
 800dfd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dfdc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dfe0:	6051      	str	r1, [r2, #4]
 800dfe2:	e7f4      	b.n	800dfce <RegionEU868DlChannelReq+0x3e>
 800dfe4:	20000c70 	.word	0x20000c70

0800dfe8 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800dfe8:	4770      	bx	lr
	...

0800dfec <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800dfec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfee:	b097      	sub	sp, #92	; 0x5c
 800dff0:	4604      	mov	r4, r0
 800dff2:	460f      	mov	r7, r1
 800dff4:	4616      	mov	r6, r2
 800dff6:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800dff8:	2100      	movs	r1, #0
 800dffa:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800dffe:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800e002:	9111      	str	r1, [sp, #68]	; 0x44
 800e004:	9112      	str	r1, [sp, #72]	; 0x48
 800e006:	9113      	str	r1, [sp, #76]	; 0x4c
 800e008:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800e00a:	2307      	movs	r3, #7
 800e00c:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800e010:	4b34      	ldr	r3, [pc, #208]	; (800e0e4 <RegionEU868NextChannel+0xf8>)
 800e012:	6818      	ldr	r0, [r3, #0]
 800e014:	2201      	movs	r2, #1
 800e016:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800e01a:	f7ff f890 	bl	800d13e <RegionCommonCountChannels>
 800e01e:	b938      	cbnz	r0, 800e030 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800e020:	4b30      	ldr	r3, [pc, #192]	; (800e0e4 <RegionEU868NextChannel+0xf8>)
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800e028:	f043 0307 	orr.w	r3, r3, #7
 800e02c:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800e030:	7a63      	ldrb	r3, [r4, #9]
 800e032:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800e036:	7a23      	ldrb	r3, [r4, #8]
 800e038:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e03c:	4b29      	ldr	r3, [pc, #164]	; (800e0e4 <RegionEU868NextChannel+0xf8>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 800e044:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800e046:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800e048:	4b27      	ldr	r3, [pc, #156]	; (800e0e8 <RegionEU868NextChannel+0xfc>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800e04e:	2310      	movs	r3, #16
 800e050:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800e054:	f10d 030a 	add.w	r3, sp, #10
 800e058:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800e05a:	6823      	ldr	r3, [r4, #0]
 800e05c:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800e05e:	6863      	ldr	r3, [r4, #4]
 800e060:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800e062:	7aa3      	ldrb	r3, [r4, #10]
 800e064:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800e068:	2306      	movs	r3, #6
 800e06a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800e06e:	ab0c      	add	r3, sp, #48	; 0x30
 800e070:	f104 020c 	add.w	r2, r4, #12
 800e074:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e078:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800e07c:	7d23      	ldrb	r3, [r4, #20]
 800e07e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800e082:	8ae1      	ldrh	r1, [r4, #22]
 800e084:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800e088:	f7ff fb60 	bl	800d74c <GetTimeOnAir>
 800e08c:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800e08e:	ab03      	add	r3, sp, #12
 800e090:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800e092:	9601      	str	r6, [sp, #4]
 800e094:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800e098:	9300      	str	r3, [sp, #0]
 800e09a:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800e09e:	aa11      	add	r2, sp, #68	; 0x44
 800e0a0:	4629      	mov	r1, r5
 800e0a2:	a809      	add	r0, sp, #36	; 0x24
 800e0a4:	f7ff fa4d 	bl	800d542 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	b120      	cbz	r0, 800e0b6 <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800e0ac:	280c      	cmp	r0, #12
 800e0ae:	d00f      	beq.n	800e0d0 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	b017      	add	sp, #92	; 0x5c
 800e0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800e0b6:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800e0ba:	3901      	subs	r1, #1
 800e0bc:	f001 f86a 	bl	800f194 <randr>
 800e0c0:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800e0c4:	eb0d 0003 	add.w	r0, sp, r3
 800e0c8:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800e0cc:	703b      	strb	r3, [r7, #0]
 800e0ce:	e7ef      	b.n	800e0b0 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800e0d0:	4b04      	ldr	r3, [pc, #16]	; (800e0e4 <RegionEU868NextChannel+0xf8>)
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800e0d8:	f043 0307 	orr.w	r3, r3, #7
 800e0dc:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 800e0e0:	e7e6      	b.n	800e0b0 <RegionEU868NextChannel+0xc4>
 800e0e2:	bf00      	nop
 800e0e4:	20000c70 	.word	0x20000c70
 800e0e8:	20000c6c 	.word	0x20000c6c

0800e0ec <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800e0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0ee:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800e0f6:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800e0f8:	2d02      	cmp	r5, #2
 800e0fa:	d94e      	bls.n	800e19a <RegionEU868ChannelAdd+0xae>
 800e0fc:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800e0fe:	2d0f      	cmp	r5, #15
 800e100:	d84d      	bhi.n	800e19e <RegionEU868ChannelAdd+0xb2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800e102:	6803      	ldr	r3, [r0, #0]
 800e104:	7a18      	ldrb	r0, [r3, #8]
 800e106:	f340 0003 	sbfx	r0, r0, #0, #4
 800e10a:	2207      	movs	r2, #7
 800e10c:	2100      	movs	r1, #0
 800e10e:	b240      	sxtb	r0, r0
 800e110:	f7fe ffb7 	bl	800d082 <RegionCommonValueInRange>
 800e114:	2800      	cmp	r0, #0
 800e116:	d03c      	beq.n	800e192 <RegionEU868ChannelAdd+0xa6>
    bool drInvalid = false;
 800e118:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800e11a:	6823      	ldr	r3, [r4, #0]
 800e11c:	7a18      	ldrb	r0, [r3, #8]
 800e11e:	f340 1003 	sbfx	r0, r0, #4, #4
 800e122:	2207      	movs	r2, #7
 800e124:	2100      	movs	r1, #0
 800e126:	b240      	sxtb	r0, r0
 800e128:	f7fe ffab 	bl	800d082 <RegionCommonValueInRange>
 800e12c:	b900      	cbnz	r0, 800e130 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800e12e:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800e130:	6820      	ldr	r0, [r4, #0]
 800e132:	7a03      	ldrb	r3, [r0, #8]
 800e134:	f343 0203 	sbfx	r2, r3, #0, #4
 800e138:	b252      	sxtb	r2, r2
 800e13a:	f343 1303 	sbfx	r3, r3, #4, #4
 800e13e:	b25b      	sxtb	r3, r3
 800e140:	429a      	cmp	r2, r3
 800e142:	dd00      	ble.n	800e146 <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800e144:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800e146:	f10d 0107 	add.w	r1, sp, #7
 800e14a:	6800      	ldr	r0, [r0, #0]
 800e14c:	f7ff faaa 	bl	800d6a4 <VerifyRfFreq>
 800e150:	b308      	cbz	r0, 800e196 <RegionEU868ChannelAdd+0xaa>
    bool freqInvalid = false;
 800e152:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800e154:	b106      	cbz	r6, 800e158 <RegionEU868ChannelAdd+0x6c>
 800e156:	bb2b      	cbnz	r3, 800e1a4 <RegionEU868ChannelAdd+0xb8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800e158:	bb36      	cbnz	r6, 800e1a8 <RegionEU868ChannelAdd+0xbc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800e15a:	bb3b      	cbnz	r3, 800e1ac <RegionEU868ChannelAdd+0xc0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800e15c:	4f14      	ldr	r7, [pc, #80]	; (800e1b0 <RegionEU868ChannelAdd+0xc4>)
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	006e      	lsls	r6, r5, #1
 800e162:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800e166:	220c      	movs	r2, #12
 800e168:	6821      	ldr	r1, [r4, #0]
 800e16a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e16e:	f001 f81e 	bl	800f1ae <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800e172:	683a      	ldr	r2, [r7, #0]
 800e174:	442e      	add	r6, r5
 800e176:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e17a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e17e:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800e180:	2301      	movs	r3, #1
 800e182:	40ab      	lsls	r3, r5
 800e184:	f8b2 1480 	ldrh.w	r1, [r2, #1152]	; 0x480
 800e188:	430b      	orrs	r3, r1
 800e18a:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 800e18e:	2000      	movs	r0, #0
 800e190:	e006      	b.n	800e1a0 <RegionEU868ChannelAdd+0xb4>
        drInvalid = true;
 800e192:	2601      	movs	r6, #1
 800e194:	e7c1      	b.n	800e11a <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800e196:	2301      	movs	r3, #1
 800e198:	e7dc      	b.n	800e154 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800e19a:	2006      	movs	r0, #6
 800e19c:	e000      	b.n	800e1a0 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e19e:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800e1a0:	b003      	add	sp, #12
 800e1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800e1a4:	2006      	movs	r0, #6
 800e1a6:	e7fb      	b.n	800e1a0 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800e1a8:	2005      	movs	r0, #5
 800e1aa:	e7f9      	b.n	800e1a0 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800e1ac:	2004      	movs	r0, #4
 800e1ae:	e7f7      	b.n	800e1a0 <RegionEU868ChannelAdd+0xb4>
 800e1b0:	20000c70 	.word	0x20000c70

0800e1b4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800e1b4:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800e1b6:	2902      	cmp	r1, #2
 800e1b8:	d801      	bhi.n	800e1be <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800e1ba:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800e1bc:	4770      	bx	lr
{
 800e1be:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800e1c0:	4b09      	ldr	r3, [pc, #36]	; (800e1e8 <RegionEU868ChannelsRemove+0x34>)
 800e1c2:	6818      	ldr	r0, [r3, #0]
 800e1c4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800e1c8:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800e1cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f840 200c 	str.w	r2, [r0, ip]
 800e1d6:	605a      	str	r2, [r3, #4]
 800e1d8:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800e1da:	2210      	movs	r2, #16
 800e1dc:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800e1e0:	f7fe ff91 	bl	800d106 <RegionCommonChanDisable>
}
 800e1e4:	bd08      	pop	{r3, pc}
 800e1e6:	bf00      	nop
 800e1e8:	20000c70 	.word	0x20000c70

0800e1ec <RegionEU868ApplyCFList>:
{
 800e1ec:	b570      	push	{r4, r5, r6, lr}
 800e1ee:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800e1f0:	2350      	movs	r3, #80	; 0x50
 800e1f2:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800e1f6:	7903      	ldrb	r3, [r0, #4]
 800e1f8:	2b10      	cmp	r3, #16
 800e1fa:	d136      	bne.n	800e26a <RegionEU868ApplyCFList+0x7e>
 800e1fc:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800e1fe:	6803      	ldr	r3, [r0, #0]
 800e200:	7bdd      	ldrb	r5, [r3, #15]
 800e202:	2d00      	cmp	r5, #0
 800e204:	d131      	bne.n	800e26a <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e206:	2403      	movs	r4, #3
 800e208:	e01b      	b.n	800e242 <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800e20a:	6832      	ldr	r2, [r6, #0]
 800e20c:	5d53      	ldrb	r3, [r2, r5]
 800e20e:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800e210:	442a      	add	r2, r5
 800e212:	7851      	ldrb	r1, [r2, #1]
 800e214:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e218:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800e21a:	7892      	ldrb	r2, [r2, #2]
 800e21c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e220:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800e222:	2264      	movs	r2, #100	; 0x64
 800e224:	fb02 f303 	mul.w	r3, r2, r3
 800e228:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800e22a:	2300      	movs	r3, #0
 800e22c:	9304      	str	r3, [sp, #16]
 800e22e:	e011      	b.n	800e254 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800e230:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800e234:	4668      	mov	r0, sp
 800e236:	f7ff ffbd 	bl	800e1b4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e23a:	3503      	adds	r5, #3
 800e23c:	b2ed      	uxtb	r5, r5
 800e23e:	3401      	adds	r4, #1
 800e240:	b2e4      	uxtb	r4, r4
 800e242:	2c0f      	cmp	r4, #15
 800e244:	d811      	bhi.n	800e26a <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800e246:	2c07      	cmp	r4, #7
 800e248:	d9df      	bls.n	800e20a <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800e24a:	2300      	movs	r3, #0
 800e24c:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800e24e:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800e252:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800e254:	9b03      	ldr	r3, [sp, #12]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d0ea      	beq.n	800e230 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800e25a:	ab03      	add	r3, sp, #12
 800e25c:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800e25e:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800e262:	a801      	add	r0, sp, #4
 800e264:	f7ff ff42 	bl	800e0ec <RegionEU868ChannelAdd>
 800e268:	e7e7      	b.n	800e23a <RegionEU868ApplyCFList+0x4e>
}
 800e26a:	b006      	add	sp, #24
 800e26c:	bd70      	pop	{r4, r5, r6, pc}

0800e26e <RegionEU868NewChannelReq>:
{
 800e26e:	b500      	push	{lr}
 800e270:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800e272:	6803      	ldr	r3, [r0, #0]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	b952      	cbnz	r2, 800e28e <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800e278:	7903      	ldrb	r3, [r0, #4]
 800e27a:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800e27e:	a801      	add	r0, sp, #4
 800e280:	f7ff ff98 	bl	800e1b4 <RegionEU868ChannelsRemove>
 800e284:	b1d0      	cbz	r0, 800e2bc <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800e286:	2003      	movs	r0, #3
}
 800e288:	b005      	add	sp, #20
 800e28a:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800e28e:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800e290:	7903      	ldrb	r3, [r0, #4]
 800e292:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800e296:	a802      	add	r0, sp, #8
 800e298:	f7ff ff28 	bl	800e0ec <RegionEU868ChannelAdd>
 800e29c:	2806      	cmp	r0, #6
 800e29e:	d80b      	bhi.n	800e2b8 <RegionEU868NewChannelReq+0x4a>
 800e2a0:	e8df f000 	tbb	[pc, r0]
 800e2a4:	0a0a0a04 	.word	0x0a0a0a04
 800e2a8:	060e      	.short	0x060e
 800e2aa:	08          	.byte	0x08
 800e2ab:	00          	.byte	0x00
 800e2ac:	2003      	movs	r0, #3
 800e2ae:	e7eb      	b.n	800e288 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800e2b0:	2001      	movs	r0, #1
                break;
 800e2b2:	e7e9      	b.n	800e288 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800e2b4:	2000      	movs	r0, #0
                break;
 800e2b6:	e7e7      	b.n	800e288 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800e2b8:	2000      	movs	r0, #0
                break;
 800e2ba:	e7e5      	b.n	800e288 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800e2bc:	2000      	movs	r0, #0
 800e2be:	e7e3      	b.n	800e288 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800e2c0:	2002      	movs	r0, #2
 800e2c2:	e7e1      	b.n	800e288 <RegionEU868NewChannelReq+0x1a>

0800e2c4 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800e2c4:	b538      	push	{r3, r4, r5, lr}
 800e2c6:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800e2c8:	4b12      	ldr	r3, [pc, #72]	; (800e314 <RegionEU868SetContinuousWave+0x50>)
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	4d12      	ldr	r5, [pc, #72]	; (800e318 <RegionEU868SetContinuousWave+0x54>)
 800e2ce:	6829      	ldr	r1, [r5, #0]
 800e2d0:	7803      	ldrb	r3, [r0, #0]
 800e2d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e2d6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e2da:	7a4b      	ldrb	r3, [r1, #9]
 800e2dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e2e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e2e4:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e2e8:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e2ec:	f7ff f992 	bl	800d614 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800e2f0:	682a      	ldr	r2, [r5, #0]
 800e2f2:	7823      	ldrb	r3, [r4, #0]
 800e2f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e2f8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800e2fc:	68a2      	ldr	r2, [r4, #8]
 800e2fe:	6861      	ldr	r1, [r4, #4]
 800e300:	f7ff f8a4 	bl	800d44c <RegionCommonComputeTxPower>
 800e304:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800e306:	4b05      	ldr	r3, [pc, #20]	; (800e31c <RegionEU868SetContinuousWave+0x58>)
 800e308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e30a:	89a2      	ldrh	r2, [r4, #12]
 800e30c:	4628      	mov	r0, r5
 800e30e:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800e310:	bd38      	pop	{r3, r4, r5, pc}
 800e312:	bf00      	nop
 800e314:	20000c6c 	.word	0x20000c6c
 800e318:	20000c70 	.word	0x20000c70
 800e31c:	08012954 	.word	0x08012954

0800e320 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800e320:	1a88      	subs	r0, r1, r2
 800e322:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800e324:	2800      	cmp	r0, #0
 800e326:	db01      	blt.n	800e32c <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800e328:	b2c0      	uxtb	r0, r0
 800e32a:	4770      	bx	lr
        datarate = DR_0;
 800e32c:	2000      	movs	r0, #0
 800e32e:	e7fb      	b.n	800e328 <RegionEU868ApplyDrOffset+0x8>

0800e330 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800e330:	b510      	push	{r4, lr}
 800e332:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800e334:	2210      	movs	r2, #16
 800e336:	2100      	movs	r1, #0
 800e338:	30f1      	adds	r0, #241	; 0xf1
 800e33a:	f000 ff50 	bl	800f1de <memset1>
    ctx->M_n = 0;
 800e33e:	2100      	movs	r1, #0
 800e340:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800e344:	22f0      	movs	r2, #240	; 0xf0
 800e346:	4620      	mov	r0, r4
 800e348:	f000 ff49 	bl	800f1de <memset1>
}
 800e34c:	bd10      	pop	{r4, pc}

0800e34e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800e34e:	b508      	push	{r3, lr}
 800e350:	4602      	mov	r2, r0
 800e352:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800e354:	2110      	movs	r1, #16
 800e356:	f000 fb3b 	bl	800e9d0 <lorawan_aes_set_key>
}
 800e35a:	bd08      	pop	{r3, pc}

0800e35c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800e35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e360:	b084      	sub	sp, #16
 800e362:	4604      	mov	r4, r0
 800e364:	460d      	mov	r5, r1
 800e366:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800e368:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d054      	beq.n	800e41a <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800e370:	f1c3 0810 	rsb	r8, r3, #16
 800e374:	4647      	mov	r7, r8
 800e376:	4590      	cmp	r8, r2
 800e378:	bf28      	it	cs
 800e37a:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800e37c:	f200 1001 	addw	r0, r0, #257	; 0x101
 800e380:	b2ba      	uxth	r2, r7
 800e382:	4418      	add	r0, r3
 800e384:	f000 ff13 	bl	800f1ae <memcpy1>
        ctx->M_n += mlen;
 800e388:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800e38c:	443b      	add	r3, r7
 800e38e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800e392:	2b0f      	cmp	r3, #15
 800e394:	d94d      	bls.n	800e432 <AES_CMAC_Update+0xd6>
 800e396:	45b0      	cmp	r8, r6
 800e398:	d24b      	bcs.n	800e432 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800e39a:	2300      	movs	r3, #0
 800e39c:	e008      	b.n	800e3b0 <AES_CMAC_Update+0x54>
 800e39e:	18e2      	adds	r2, r4, r3
 800e3a0:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800e3a4:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800e3a8:	4041      	eors	r1, r0
 800e3aa:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	2b0f      	cmp	r3, #15
 800e3b2:	ddf4      	ble.n	800e39e <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e3b4:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800e3b8:	2210      	movs	r2, #16
 800e3ba:	4641      	mov	r1, r8
 800e3bc:	4668      	mov	r0, sp
 800e3be:	f000 fef6 	bl	800f1ae <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e3c2:	4622      	mov	r2, r4
 800e3c4:	4669      	mov	r1, sp
 800e3c6:	4668      	mov	r0, sp
 800e3c8:	f000 fb86 	bl	800ead8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e3cc:	2210      	movs	r2, #16
 800e3ce:	4669      	mov	r1, sp
 800e3d0:	4640      	mov	r0, r8
 800e3d2:	f000 feec 	bl	800f1ae <memcpy1>

        data += mlen;
 800e3d6:	443d      	add	r5, r7
        len -= mlen;
 800e3d8:	1bf6      	subs	r6, r6, r7
 800e3da:	e01e      	b.n	800e41a <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800e3dc:	eb04 0e03 	add.w	lr, r4, r3
 800e3e0:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800e3e4:	5cea      	ldrb	r2, [r5, r3]
 800e3e6:	ea8c 0c02 	eor.w	ip, ip, r2
 800e3ea:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	2b0f      	cmp	r3, #15
 800e3f2:	ddf3      	ble.n	800e3dc <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e3f4:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800e3f8:	2210      	movs	r2, #16
 800e3fa:	4639      	mov	r1, r7
 800e3fc:	4668      	mov	r0, sp
 800e3fe:	f000 fed6 	bl	800f1ae <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e402:	4622      	mov	r2, r4
 800e404:	4669      	mov	r1, sp
 800e406:	4668      	mov	r0, sp
 800e408:	f000 fb66 	bl	800ead8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e40c:	2210      	movs	r2, #16
 800e40e:	4669      	mov	r1, sp
 800e410:	4638      	mov	r0, r7
 800e412:	f000 fecc 	bl	800f1ae <memcpy1>

        data += 16;
 800e416:	3510      	adds	r5, #16
        len -= 16;
 800e418:	3e10      	subs	r6, #16
    while( len > 16 )
 800e41a:	2e10      	cmp	r6, #16
 800e41c:	d901      	bls.n	800e422 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800e41e:	2300      	movs	r3, #0
 800e420:	e7e6      	b.n	800e3f0 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800e422:	b2b2      	uxth	r2, r6
 800e424:	4629      	mov	r1, r5
 800e426:	f204 1001 	addw	r0, r4, #257	; 0x101
 800e42a:	f000 fec0 	bl	800f1ae <memcpy1>
    ctx->M_n = len;
 800e42e:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800e432:	b004      	add	sp, #16
 800e434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e438 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800e438:	b530      	push	{r4, r5, lr}
 800e43a:	b089      	sub	sp, #36	; 0x24
 800e43c:	4605      	mov	r5, r0
 800e43e:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800e440:	2210      	movs	r2, #16
 800e442:	2100      	movs	r1, #0
 800e444:	eb0d 0002 	add.w	r0, sp, r2
 800e448:	f000 fec9 	bl	800f1de <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800e44c:	4622      	mov	r2, r4
 800e44e:	a904      	add	r1, sp, #16
 800e450:	4608      	mov	r0, r1
 800e452:	f000 fb41 	bl	800ead8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800e456:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	db01      	blt.n	800e462 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800e45e:	2300      	movs	r3, #0
 800e460:	e030      	b.n	800e4c4 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800e462:	2300      	movs	r3, #0
 800e464:	2b0e      	cmp	r3, #14
 800e466:	dc11      	bgt.n	800e48c <AES_CMAC_Final+0x54>
 800e468:	f103 0220 	add.w	r2, r3, #32
 800e46c:	eb0d 0102 	add.w	r1, sp, r2
 800e470:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800e474:	3301      	adds	r3, #1
 800e476:	f103 0220 	add.w	r2, r3, #32
 800e47a:	446a      	add	r2, sp
 800e47c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e480:	09d2      	lsrs	r2, r2, #7
 800e482:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800e486:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e48a:	e7eb      	b.n	800e464 <AES_CMAC_Final+0x2c>
 800e48c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e490:	005b      	lsls	r3, r3, #1
 800e492:	b2db      	uxtb	r3, r3
 800e494:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800e498:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800e49c:	f88d 301f 	strb.w	r3, [sp, #31]
 800e4a0:	e017      	b.n	800e4d2 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800e4a2:	f103 0220 	add.w	r2, r3, #32
 800e4a6:	eb0d 0102 	add.w	r1, sp, r2
 800e4aa:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	f103 0220 	add.w	r2, r3, #32
 800e4b4:	446a      	add	r2, sp
 800e4b6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e4ba:	09d2      	lsrs	r2, r2, #7
 800e4bc:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800e4c0:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e4c4:	2b0e      	cmp	r3, #14
 800e4c6:	ddec      	ble.n	800e4a2 <AES_CMAC_Final+0x6a>
 800e4c8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e4cc:	005b      	lsls	r3, r3, #1
 800e4ce:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800e4d2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800e4d6:	2810      	cmp	r0, #16
 800e4d8:	d014      	beq.n	800e504 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e4da:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	db30      	blt.n	800e544 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	e041      	b.n	800e56a <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800e4e6:	18e1      	adds	r1, r4, r3
 800e4e8:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800e4ec:	f103 0020 	add.w	r0, r3, #32
 800e4f0:	4468      	add	r0, sp
 800e4f2:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800e4f6:	4042      	eors	r2, r0
 800e4f8:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	2b0f      	cmp	r3, #15
 800e500:	ddf1      	ble.n	800e4e6 <AES_CMAC_Final+0xae>
 800e502:	e059      	b.n	800e5b8 <AES_CMAC_Final+0x180>
 800e504:	2300      	movs	r3, #0
 800e506:	e7fa      	b.n	800e4fe <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800e508:	f103 0220 	add.w	r2, r3, #32
 800e50c:	eb0d 0102 	add.w	r1, sp, r2
 800e510:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800e514:	3301      	adds	r3, #1
 800e516:	f103 0220 	add.w	r2, r3, #32
 800e51a:	446a      	add	r2, sp
 800e51c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e520:	09d2      	lsrs	r2, r2, #7
 800e522:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800e526:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e52a:	2b0e      	cmp	r3, #14
 800e52c:	ddec      	ble.n	800e508 <AES_CMAC_Final+0xd0>
 800e52e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e532:	005b      	lsls	r3, r3, #1
 800e534:	b2db      	uxtb	r3, r3
 800e536:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800e53a:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800e53e:	f88d 301f 	strb.w	r3, [sp, #31]
 800e542:	e019      	b.n	800e578 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800e544:	2300      	movs	r3, #0
 800e546:	e7f0      	b.n	800e52a <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800e548:	f103 0220 	add.w	r2, r3, #32
 800e54c:	eb0d 0102 	add.w	r1, sp, r2
 800e550:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800e554:	3301      	adds	r3, #1
 800e556:	f103 0220 	add.w	r2, r3, #32
 800e55a:	446a      	add	r2, sp
 800e55c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e560:	09d2      	lsrs	r2, r2, #7
 800e562:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800e566:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e56a:	2b0e      	cmp	r3, #14
 800e56c:	ddec      	ble.n	800e548 <AES_CMAC_Final+0x110>
 800e56e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e572:	005b      	lsls	r3, r3, #1
 800e574:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e578:	4420      	add	r0, r4
 800e57a:	2380      	movs	r3, #128	; 0x80
 800e57c:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e580:	e003      	b.n	800e58a <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800e582:	4423      	add	r3, r4
 800e584:	2200      	movs	r2, #0
 800e586:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e58a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800e58e:	3301      	adds	r3, #1
 800e590:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800e594:	2b0f      	cmp	r3, #15
 800e596:	d9f4      	bls.n	800e582 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800e598:	2300      	movs	r3, #0
 800e59a:	e00b      	b.n	800e5b4 <AES_CMAC_Final+0x17c>
 800e59c:	18e1      	adds	r1, r4, r3
 800e59e:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800e5a2:	f103 0020 	add.w	r0, r3, #32
 800e5a6:	4468      	add	r0, sp
 800e5a8:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800e5ac:	4042      	eors	r2, r0
 800e5ae:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	2b0f      	cmp	r3, #15
 800e5b6:	ddf1      	ble.n	800e59c <AES_CMAC_Final+0x164>
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	e009      	b.n	800e5d0 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800e5bc:	18e2      	adds	r2, r4, r3
 800e5be:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 800e5c2:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800e5c6:	ea8c 0c01 	eor.w	ip, ip, r1
 800e5ca:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	2b0f      	cmp	r3, #15
 800e5d2:	ddf3      	ble.n	800e5bc <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e5d4:	2210      	movs	r2, #16
 800e5d6:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 800e5da:	4668      	mov	r0, sp
 800e5dc:	f000 fde7 	bl	800f1ae <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e5e0:	4622      	mov	r2, r4
 800e5e2:	4629      	mov	r1, r5
 800e5e4:	4668      	mov	r0, sp
 800e5e6:	f000 fa77 	bl	800ead8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e5ea:	2210      	movs	r2, #16
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	eb0d 0002 	add.w	r0, sp, r2
 800e5f2:	f000 fdf4 	bl	800f1de <memset1>
}
 800e5f6:	b009      	add	sp, #36	; 0x24
 800e5f8:	bd30      	pop	{r4, r5, pc}

0800e5fa <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e5fa:	780b      	ldrb	r3, [r1, #0]
 800e5fc:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e5fe:	784b      	ldrb	r3, [r1, #1]
 800e600:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e602:	788b      	ldrb	r3, [r1, #2]
 800e604:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e606:	78cb      	ldrb	r3, [r1, #3]
 800e608:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e60a:	790b      	ldrb	r3, [r1, #4]
 800e60c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e60e:	794b      	ldrb	r3, [r1, #5]
 800e610:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e612:	798b      	ldrb	r3, [r1, #6]
 800e614:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e616:	79cb      	ldrb	r3, [r1, #7]
 800e618:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e61a:	7a0b      	ldrb	r3, [r1, #8]
 800e61c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e61e:	7a4b      	ldrb	r3, [r1, #9]
 800e620:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e622:	7a8b      	ldrb	r3, [r1, #10]
 800e624:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e626:	7acb      	ldrb	r3, [r1, #11]
 800e628:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e62a:	7b0b      	ldrb	r3, [r1, #12]
 800e62c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e62e:	7b4b      	ldrb	r3, [r1, #13]
 800e630:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e632:	7b8b      	ldrb	r3, [r1, #14]
 800e634:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e636:	7bcb      	ldrb	r3, [r1, #15]
 800e638:	73c3      	strb	r3, [r0, #15]
#endif
}
 800e63a:	4770      	bx	lr

0800e63c <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800e63c:	e004      	b.n	800e648 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e63e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e642:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800e646:	461a      	mov	r2, r3
 800e648:	1e53      	subs	r3, r2, #1
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	2a00      	cmp	r2, #0
 800e64e:	d1f6      	bne.n	800e63e <copy_block_nn+0x2>
}
 800e650:	4770      	bx	lr

0800e652 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e652:	780b      	ldrb	r3, [r1, #0]
 800e654:	7802      	ldrb	r2, [r0, #0]
 800e656:	4053      	eors	r3, r2
 800e658:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e65a:	784b      	ldrb	r3, [r1, #1]
 800e65c:	7842      	ldrb	r2, [r0, #1]
 800e65e:	4053      	eors	r3, r2
 800e660:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e662:	788b      	ldrb	r3, [r1, #2]
 800e664:	7882      	ldrb	r2, [r0, #2]
 800e666:	4053      	eors	r3, r2
 800e668:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e66a:	78cb      	ldrb	r3, [r1, #3]
 800e66c:	78c2      	ldrb	r2, [r0, #3]
 800e66e:	4053      	eors	r3, r2
 800e670:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e672:	790b      	ldrb	r3, [r1, #4]
 800e674:	7902      	ldrb	r2, [r0, #4]
 800e676:	4053      	eors	r3, r2
 800e678:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e67a:	794b      	ldrb	r3, [r1, #5]
 800e67c:	7942      	ldrb	r2, [r0, #5]
 800e67e:	4053      	eors	r3, r2
 800e680:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e682:	798b      	ldrb	r3, [r1, #6]
 800e684:	7982      	ldrb	r2, [r0, #6]
 800e686:	4053      	eors	r3, r2
 800e688:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e68a:	79cb      	ldrb	r3, [r1, #7]
 800e68c:	79c2      	ldrb	r2, [r0, #7]
 800e68e:	4053      	eors	r3, r2
 800e690:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e692:	7a0b      	ldrb	r3, [r1, #8]
 800e694:	7a02      	ldrb	r2, [r0, #8]
 800e696:	4053      	eors	r3, r2
 800e698:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e69a:	7a4b      	ldrb	r3, [r1, #9]
 800e69c:	7a42      	ldrb	r2, [r0, #9]
 800e69e:	4053      	eors	r3, r2
 800e6a0:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e6a2:	7a8b      	ldrb	r3, [r1, #10]
 800e6a4:	7a82      	ldrb	r2, [r0, #10]
 800e6a6:	4053      	eors	r3, r2
 800e6a8:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e6aa:	7acb      	ldrb	r3, [r1, #11]
 800e6ac:	7ac2      	ldrb	r2, [r0, #11]
 800e6ae:	4053      	eors	r3, r2
 800e6b0:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e6b2:	7b0b      	ldrb	r3, [r1, #12]
 800e6b4:	7b02      	ldrb	r2, [r0, #12]
 800e6b6:	4053      	eors	r3, r2
 800e6b8:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e6ba:	7b4b      	ldrb	r3, [r1, #13]
 800e6bc:	7b42      	ldrb	r2, [r0, #13]
 800e6be:	4053      	eors	r3, r2
 800e6c0:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e6c2:	7b8b      	ldrb	r3, [r1, #14]
 800e6c4:	7b82      	ldrb	r2, [r0, #14]
 800e6c6:	4053      	eors	r3, r2
 800e6c8:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e6ca:	7bcb      	ldrb	r3, [r1, #15]
 800e6cc:	7bc2      	ldrb	r2, [r0, #15]
 800e6ce:	4053      	eors	r3, r2
 800e6d0:	73c3      	strb	r3, [r0, #15]
#endif
}
 800e6d2:	4770      	bx	lr

0800e6d4 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e6d4:	780b      	ldrb	r3, [r1, #0]
 800e6d6:	f892 c000 	ldrb.w	ip, [r2]
 800e6da:	ea83 030c 	eor.w	r3, r3, ip
 800e6de:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e6e0:	784b      	ldrb	r3, [r1, #1]
 800e6e2:	f892 c001 	ldrb.w	ip, [r2, #1]
 800e6e6:	ea83 030c 	eor.w	r3, r3, ip
 800e6ea:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e6ec:	788b      	ldrb	r3, [r1, #2]
 800e6ee:	f892 c002 	ldrb.w	ip, [r2, #2]
 800e6f2:	ea83 030c 	eor.w	r3, r3, ip
 800e6f6:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e6f8:	78cb      	ldrb	r3, [r1, #3]
 800e6fa:	f892 c003 	ldrb.w	ip, [r2, #3]
 800e6fe:	ea83 030c 	eor.w	r3, r3, ip
 800e702:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e704:	790b      	ldrb	r3, [r1, #4]
 800e706:	f892 c004 	ldrb.w	ip, [r2, #4]
 800e70a:	ea83 030c 	eor.w	r3, r3, ip
 800e70e:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e710:	794b      	ldrb	r3, [r1, #5]
 800e712:	f892 c005 	ldrb.w	ip, [r2, #5]
 800e716:	ea83 030c 	eor.w	r3, r3, ip
 800e71a:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e71c:	798b      	ldrb	r3, [r1, #6]
 800e71e:	f892 c006 	ldrb.w	ip, [r2, #6]
 800e722:	ea83 030c 	eor.w	r3, r3, ip
 800e726:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e728:	79cb      	ldrb	r3, [r1, #7]
 800e72a:	f892 c007 	ldrb.w	ip, [r2, #7]
 800e72e:	ea83 030c 	eor.w	r3, r3, ip
 800e732:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e734:	7a0b      	ldrb	r3, [r1, #8]
 800e736:	f892 c008 	ldrb.w	ip, [r2, #8]
 800e73a:	ea83 030c 	eor.w	r3, r3, ip
 800e73e:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e740:	7a4b      	ldrb	r3, [r1, #9]
 800e742:	f892 c009 	ldrb.w	ip, [r2, #9]
 800e746:	ea83 030c 	eor.w	r3, r3, ip
 800e74a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e74c:	7a8b      	ldrb	r3, [r1, #10]
 800e74e:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800e752:	ea83 030c 	eor.w	r3, r3, ip
 800e756:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e758:	7acb      	ldrb	r3, [r1, #11]
 800e75a:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800e75e:	ea83 030c 	eor.w	r3, r3, ip
 800e762:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e764:	7b0b      	ldrb	r3, [r1, #12]
 800e766:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800e76a:	ea83 030c 	eor.w	r3, r3, ip
 800e76e:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e770:	7b4b      	ldrb	r3, [r1, #13]
 800e772:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800e776:	ea83 030c 	eor.w	r3, r3, ip
 800e77a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e77c:	7b8b      	ldrb	r3, [r1, #14]
 800e77e:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800e782:	ea83 030c 	eor.w	r3, r3, ip
 800e786:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e788:	7bcb      	ldrb	r3, [r1, #15]
 800e78a:	7bd2      	ldrb	r2, [r2, #15]
 800e78c:	4053      	eors	r3, r2
 800e78e:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e790:	4770      	bx	lr

0800e792 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e792:	b508      	push	{r3, lr}
    xor_block(d, k);
 800e794:	f7ff ff5d 	bl	800e652 <xor_block>
}
 800e798:	bd08      	pop	{r3, pc}
	...

0800e79c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e79c:	7802      	ldrb	r2, [r0, #0]
 800e79e:	4b18      	ldr	r3, [pc, #96]	; (800e800 <shift_sub_rows+0x64>)
 800e7a0:	5c9a      	ldrb	r2, [r3, r2]
 800e7a2:	7002      	strb	r2, [r0, #0]
 800e7a4:	7902      	ldrb	r2, [r0, #4]
 800e7a6:	5c9a      	ldrb	r2, [r3, r2]
 800e7a8:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e7aa:	7a02      	ldrb	r2, [r0, #8]
 800e7ac:	5c9a      	ldrb	r2, [r3, r2]
 800e7ae:	7202      	strb	r2, [r0, #8]
 800e7b0:	7b02      	ldrb	r2, [r0, #12]
 800e7b2:	5c9a      	ldrb	r2, [r3, r2]
 800e7b4:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e7b6:	7842      	ldrb	r2, [r0, #1]
 800e7b8:	7941      	ldrb	r1, [r0, #5]
 800e7ba:	5c59      	ldrb	r1, [r3, r1]
 800e7bc:	7041      	strb	r1, [r0, #1]
 800e7be:	7a41      	ldrb	r1, [r0, #9]
 800e7c0:	5c59      	ldrb	r1, [r3, r1]
 800e7c2:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e7c4:	7b41      	ldrb	r1, [r0, #13]
 800e7c6:	5c59      	ldrb	r1, [r3, r1]
 800e7c8:	7241      	strb	r1, [r0, #9]
 800e7ca:	5c9a      	ldrb	r2, [r3, r2]
 800e7cc:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e7ce:	7882      	ldrb	r2, [r0, #2]
 800e7d0:	7a81      	ldrb	r1, [r0, #10]
 800e7d2:	5c59      	ldrb	r1, [r3, r1]
 800e7d4:	7081      	strb	r1, [r0, #2]
 800e7d6:	5c9a      	ldrb	r2, [r3, r2]
 800e7d8:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e7da:	7982      	ldrb	r2, [r0, #6]
 800e7dc:	7b81      	ldrb	r1, [r0, #14]
 800e7de:	5c59      	ldrb	r1, [r3, r1]
 800e7e0:	7181      	strb	r1, [r0, #6]
 800e7e2:	5c9a      	ldrb	r2, [r3, r2]
 800e7e4:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e7e6:	7bc2      	ldrb	r2, [r0, #15]
 800e7e8:	7ac1      	ldrb	r1, [r0, #11]
 800e7ea:	5c59      	ldrb	r1, [r3, r1]
 800e7ec:	73c1      	strb	r1, [r0, #15]
 800e7ee:	79c1      	ldrb	r1, [r0, #7]
 800e7f0:	5c59      	ldrb	r1, [r3, r1]
 800e7f2:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e7f4:	78c1      	ldrb	r1, [r0, #3]
 800e7f6:	5c59      	ldrb	r1, [r3, r1]
 800e7f8:	71c1      	strb	r1, [r0, #7]
 800e7fa:	5c9b      	ldrb	r3, [r3, r2]
 800e7fc:	70c3      	strb	r3, [r0, #3]
}
 800e7fe:	4770      	bx	lr
 800e800:	080125c8 	.word	0x080125c8

0800e804 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e808:	b084      	sub	sp, #16
 800e80a:	4604      	mov	r4, r0
    block_copy(st, dt);
 800e80c:	4601      	mov	r1, r0
 800e80e:	4668      	mov	r0, sp
 800e810:	f7ff fef3 	bl	800e5fa <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e814:	f89d c000 	ldrb.w	ip, [sp]
 800e818:	4b6a      	ldr	r3, [pc, #424]	; (800e9c4 <mix_sub_columns+0x1c0>)
 800e81a:	f813 000c 	ldrb.w	r0, [r3, ip]
 800e81e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800e822:	4a69      	ldr	r2, [pc, #420]	; (800e9c8 <mix_sub_columns+0x1c4>)
 800e824:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e828:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800e82c:	4967      	ldr	r1, [pc, #412]	; (800e9cc <mix_sub_columns+0x1c8>)
 800e82e:	f811 500e 	ldrb.w	r5, [r1, lr]
 800e832:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800e836:	5dce      	ldrb	r6, [r1, r7]
 800e838:	ea80 0009 	eor.w	r0, r0, r9
 800e83c:	4068      	eors	r0, r5
 800e83e:	4070      	eors	r0, r6
 800e840:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e842:	f811 000c 	ldrb.w	r0, [r1, ip]
 800e846:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e84a:	f812 900e 	ldrb.w	r9, [r2, lr]
 800e84e:	ea80 0a0a 	eor.w	sl, r0, sl
 800e852:	ea89 090a 	eor.w	r9, r9, sl
 800e856:	ea86 0609 	eor.w	r6, r6, r9
 800e85a:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e85c:	f811 8008 	ldrb.w	r8, [r1, r8]
 800e860:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800e864:	5dd6      	ldrb	r6, [r2, r7]
 800e866:	ea80 0008 	eor.w	r0, r0, r8
 800e86a:	ea8e 0000 	eor.w	r0, lr, r0
 800e86e:	4070      	eors	r0, r6
 800e870:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e872:	f812 600c 	ldrb.w	r6, [r2, ip]
 800e876:	5dd8      	ldrb	r0, [r3, r7]
 800e878:	ea86 0608 	eor.w	r6, r6, r8
 800e87c:	4075      	eors	r5, r6
 800e87e:	4068      	eors	r0, r5
 800e880:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e882:	f89d c004 	ldrb.w	ip, [sp, #4]
 800e886:	f813 000c 	ldrb.w	r0, [r3, ip]
 800e88a:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800e88e:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e892:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800e896:	f811 500e 	ldrb.w	r5, [r1, lr]
 800e89a:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800e89e:	5dce      	ldrb	r6, [r1, r7]
 800e8a0:	ea80 0009 	eor.w	r0, r0, r9
 800e8a4:	4068      	eors	r0, r5
 800e8a6:	4070      	eors	r0, r6
 800e8a8:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e8aa:	f811 000c 	ldrb.w	r0, [r1, ip]
 800e8ae:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e8b2:	f812 900e 	ldrb.w	r9, [r2, lr]
 800e8b6:	ea80 0a0a 	eor.w	sl, r0, sl
 800e8ba:	ea89 090a 	eor.w	r9, r9, sl
 800e8be:	ea86 0609 	eor.w	r6, r6, r9
 800e8c2:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e8c4:	f811 8008 	ldrb.w	r8, [r1, r8]
 800e8c8:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800e8cc:	5dd6      	ldrb	r6, [r2, r7]
 800e8ce:	ea80 0008 	eor.w	r0, r0, r8
 800e8d2:	ea8e 0000 	eor.w	r0, lr, r0
 800e8d6:	4070      	eors	r0, r6
 800e8d8:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e8da:	f812 600c 	ldrb.w	r6, [r2, ip]
 800e8de:	5dd8      	ldrb	r0, [r3, r7]
 800e8e0:	ea86 0608 	eor.w	r6, r6, r8
 800e8e4:	4075      	eors	r5, r6
 800e8e6:	4068      	eors	r0, r5
 800e8e8:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e8ea:	f89d c008 	ldrb.w	ip, [sp, #8]
 800e8ee:	f813 000c 	ldrb.w	r0, [r3, ip]
 800e8f2:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800e8f6:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e8fa:	f89d e002 	ldrb.w	lr, [sp, #2]
 800e8fe:	f811 500e 	ldrb.w	r5, [r1, lr]
 800e902:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800e906:	5dce      	ldrb	r6, [r1, r7]
 800e908:	ea80 0009 	eor.w	r0, r0, r9
 800e90c:	4068      	eors	r0, r5
 800e90e:	4070      	eors	r0, r6
 800e910:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e912:	f811 000c 	ldrb.w	r0, [r1, ip]
 800e916:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e91a:	f812 900e 	ldrb.w	r9, [r2, lr]
 800e91e:	ea80 0a0a 	eor.w	sl, r0, sl
 800e922:	ea89 090a 	eor.w	r9, r9, sl
 800e926:	ea86 0609 	eor.w	r6, r6, r9
 800e92a:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e92c:	f811 8008 	ldrb.w	r8, [r1, r8]
 800e930:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800e934:	5dd6      	ldrb	r6, [r2, r7]
 800e936:	ea80 0008 	eor.w	r0, r0, r8
 800e93a:	ea8e 0000 	eor.w	r0, lr, r0
 800e93e:	4070      	eors	r0, r6
 800e940:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e942:	f812 600c 	ldrb.w	r6, [r2, ip]
 800e946:	5dd8      	ldrb	r0, [r3, r7]
 800e948:	ea86 0608 	eor.w	r6, r6, r8
 800e94c:	4075      	eors	r5, r6
 800e94e:	4068      	eors	r0, r5
 800e950:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e952:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800e956:	5d98      	ldrb	r0, [r3, r6]
 800e958:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800e95c:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e960:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800e964:	f811 c007 	ldrb.w	ip, [r1, r7]
 800e968:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800e96c:	f811 e005 	ldrb.w	lr, [r1, r5]
 800e970:	ea80 0009 	eor.w	r0, r0, r9
 800e974:	ea8c 0000 	eor.w	r0, ip, r0
 800e978:	ea8e 0000 	eor.w	r0, lr, r0
 800e97c:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e97e:	5d88      	ldrb	r0, [r1, r6]
 800e980:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e984:	f812 9007 	ldrb.w	r9, [r2, r7]
 800e988:	ea80 0a0a 	eor.w	sl, r0, sl
 800e98c:	ea89 090a 	eor.w	r9, r9, sl
 800e990:	ea8e 0e09 	eor.w	lr, lr, r9
 800e994:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e998:	f811 1008 	ldrb.w	r1, [r1, r8]
 800e99c:	f813 e007 	ldrb.w	lr, [r3, r7]
 800e9a0:	5d57      	ldrb	r7, [r2, r5]
 800e9a2:	4048      	eors	r0, r1
 800e9a4:	ea8e 0000 	eor.w	r0, lr, r0
 800e9a8:	4078      	eors	r0, r7
 800e9aa:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e9ac:	5d92      	ldrb	r2, [r2, r6]
 800e9ae:	5d5b      	ldrb	r3, [r3, r5]
 800e9b0:	4051      	eors	r1, r2
 800e9b2:	ea8c 0c01 	eor.w	ip, ip, r1
 800e9b6:	ea83 030c 	eor.w	r3, r3, ip
 800e9ba:	73e3      	strb	r3, [r4, #15]
  }
 800e9bc:	b004      	add	sp, #16
 800e9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9c2:	bf00      	nop
 800e9c4:	080123c8 	.word	0x080123c8
 800e9c8:	080124c8 	.word	0x080124c8
 800e9cc:	080125c8 	.word	0x080125c8

0800e9d0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9d4:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800e9d6:	f1a1 0310 	sub.w	r3, r1, #16
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b10      	cmp	r3, #16
 800e9de:	d806      	bhi.n	800e9ee <lorawan_aes_set_key+0x1e>
 800e9e0:	460d      	mov	r5, r1
 800e9e2:	4a3b      	ldr	r2, [pc, #236]	; (800ead0 <lorawan_aes_set_key+0x100>)
 800e9e4:	fa22 f303 	lsr.w	r3, r2, r3
 800e9e8:	f013 0f01 	tst.w	r3, #1
 800e9ec:	d105      	bne.n	800e9fa <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 800e9f4:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800e9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800e9fa:	460a      	mov	r2, r1
 800e9fc:	4601      	mov	r1, r0
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f7ff fe1c 	bl	800e63c <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ea04:	f105 031c 	add.w	r3, r5, #28
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	009b      	lsls	r3, r3, #2
 800ea0c:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800ea10:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ea14:	3b01      	subs	r3, #1
 800ea16:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ea1a:	462b      	mov	r3, r5
 800ea1c:	f04f 0c01 	mov.w	ip, #1
 800ea20:	e023      	b.n	800ea6a <lorawan_aes_set_key+0x9a>
        else if( keylen > 24 && cc % keylen == 16 )
 800ea22:	2d18      	cmp	r5, #24
 800ea24:	d901      	bls.n	800ea2a <lorawan_aes_set_key+0x5a>
 800ea26:	2a10      	cmp	r2, #16
 800ea28:	d048      	beq.n	800eabc <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 800ea2a:	1b5a      	subs	r2, r3, r5
 800ea2c:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ea2e:	f814 9002 	ldrb.w	r9, [r4, r2]
 800ea32:	ea89 0808 	eor.w	r8, r9, r8
 800ea36:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ea3a:	f102 0801 	add.w	r8, r2, #1
 800ea3e:	f814 8008 	ldrb.w	r8, [r4, r8]
 800ea42:	f100 0901 	add.w	r9, r0, #1
 800ea46:	ea88 0707 	eor.w	r7, r8, r7
 800ea4a:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ea4e:	1c97      	adds	r7, r2, #2
 800ea50:	5de7      	ldrb	r7, [r4, r7]
 800ea52:	f100 0802 	add.w	r8, r0, #2
 800ea56:	407e      	eors	r6, r7
 800ea58:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ea5c:	3203      	adds	r2, #3
 800ea5e:	5ca6      	ldrb	r6, [r4, r2]
 800ea60:	1cc2      	adds	r2, r0, #3
 800ea62:	4071      	eors	r1, r6
 800ea64:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ea66:	3304      	adds	r3, #4
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	4573      	cmp	r3, lr
 800ea6c:	d22d      	bcs.n	800eaca <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 800ea6e:	4618      	mov	r0, r3
 800ea70:	1f1a      	subs	r2, r3, #4
 800ea72:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800ea76:	1eda      	subs	r2, r3, #3
 800ea78:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800ea7a:	1e9a      	subs	r2, r3, #2
 800ea7c:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800ea7e:	1e5a      	subs	r2, r3, #1
 800ea80:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800ea82:	fbb3 f2f5 	udiv	r2, r3, r5
 800ea86:	fb05 3212 	mls	r2, r5, r2, r3
 800ea8a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800ea8e:	d1c8      	bne.n	800ea22 <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 800ea90:	4a10      	ldr	r2, [pc, #64]	; (800ead4 <lorawan_aes_set_key+0x104>)
 800ea92:	f812 9007 	ldrb.w	r9, [r2, r7]
 800ea96:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800ea9a:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800ea9c:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800ea9e:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800eaa2:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800eaa6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800eaaa:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800eaae:	b2d2      	uxtb	r2, r2
 800eab0:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 800eab4:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 800eab8:	46c8      	mov	r8, r9
 800eaba:	e7b6      	b.n	800ea2a <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 800eabc:	4a05      	ldr	r2, [pc, #20]	; (800ead4 <lorawan_aes_set_key+0x104>)
 800eabe:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800eac2:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800eac4:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800eac6:	5c51      	ldrb	r1, [r2, r1]
 800eac8:	e7af      	b.n	800ea2a <lorawan_aes_set_key+0x5a>
    return 0;
 800eaca:	2000      	movs	r0, #0
 800eacc:	e793      	b.n	800e9f6 <lorawan_aes_set_key+0x26>
 800eace:	bf00      	nop
 800ead0:	00010101 	.word	0x00010101
 800ead4:	080125c8 	.word	0x080125c8

0800ead8 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800ead8:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 800eadc:	b31b      	cbz	r3, 800eb26 <lorawan_aes_encrypt+0x4e>
{
 800eade:	b570      	push	{r4, r5, r6, lr}
 800eae0:	b084      	sub	sp, #16
 800eae2:	460e      	mov	r6, r1
 800eae4:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800eae6:	4601      	mov	r1, r0
 800eae8:	4668      	mov	r0, sp
 800eaea:	f7ff fdf3 	bl	800e6d4 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800eaee:	2401      	movs	r4, #1
 800eaf0:	e009      	b.n	800eb06 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800eaf2:	4668      	mov	r0, sp
 800eaf4:	f7ff fe86 	bl	800e804 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800eaf8:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800eafc:	4668      	mov	r0, sp
 800eafe:	f7ff fe48 	bl	800e792 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800eb02:	3401      	adds	r4, #1
 800eb04:	b2e4      	uxtb	r4, r4
 800eb06:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 800eb0a:	42a3      	cmp	r3, r4
 800eb0c:	d8f1      	bhi.n	800eaf2 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800eb0e:	4668      	mov	r0, sp
 800eb10:	f7ff fe44 	bl	800e79c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800eb14:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800eb18:	4669      	mov	r1, sp
 800eb1a:	4630      	mov	r0, r6
 800eb1c:	f7ff fdda 	bl	800e6d4 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800eb20:	2000      	movs	r0, #0
}
 800eb22:	b004      	add	sp, #16
 800eb24:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800eb26:	20ff      	movs	r0, #255	; 0xff
}
 800eb28:	4770      	bx	lr
	...

0800eb2c <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	2b0a      	cmp	r3, #10
 800eb30:	d817      	bhi.n	800eb62 <GetKeyByID+0x36>
{
 800eb32:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800eb34:	4a0c      	ldr	r2, [pc, #48]	; (800eb68 <GetKeyByID+0x3c>)
 800eb36:	6814      	ldr	r4, [r2, #0]
 800eb38:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800eb3c:	4422      	add	r2, r4
 800eb3e:	7e12      	ldrb	r2, [r2, #24]
 800eb40:	4282      	cmp	r2, r0
 800eb42:	d006      	beq.n	800eb52 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eb44:	3301      	adds	r3, #1
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	2b0a      	cmp	r3, #10
 800eb4a:	d9f3      	bls.n	800eb34 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eb4c:	2003      	movs	r0, #3
}
 800eb4e:	bc10      	pop	{r4}
 800eb50:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800eb52:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800eb56:	f10c 0c18 	add.w	ip, ip, #24
 800eb5a:	4464      	add	r4, ip
 800eb5c:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800eb5e:	2000      	movs	r0, #0
 800eb60:	e7f5      	b.n	800eb4e <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eb62:	2003      	movs	r0, #3
}
 800eb64:	4770      	bx	lr
 800eb66:	bf00      	nop
 800eb68:	20000c74 	.word	0x20000c74

0800eb6c <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800eb6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb70:	b0cc      	sub	sp, #304	; 0x130
 800eb72:	9d52      	ldr	r5, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800eb74:	b3a9      	cbz	r1, 800ebe2 <ComputeCmac+0x76>
 800eb76:	4607      	mov	r7, r0
 800eb78:	4616      	mov	r6, r2
 800eb7a:	461c      	mov	r4, r3
 800eb7c:	4688      	mov	r8, r1
 800eb7e:	b395      	cbz	r5, 800ebe6 <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800eb80:	a802      	add	r0, sp, #8
 800eb82:	f7ff fbd5 	bl	800e330 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800eb86:	a901      	add	r1, sp, #4
 800eb88:	4620      	mov	r0, r4
 800eb8a:	f7ff ffcf 	bl	800eb2c <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800eb8e:	4604      	mov	r4, r0
 800eb90:	b118      	cbz	r0, 800eb9a <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800eb92:	4620      	mov	r0, r4
 800eb94:	b04c      	add	sp, #304	; 0x130
 800eb96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800eb9a:	9901      	ldr	r1, [sp, #4]
 800eb9c:	3101      	adds	r1, #1
 800eb9e:	a802      	add	r0, sp, #8
 800eba0:	f7ff fbd5 	bl	800e34e <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800eba4:	b127      	cbz	r7, 800ebb0 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800eba6:	2210      	movs	r2, #16
 800eba8:	4639      	mov	r1, r7
 800ebaa:	a802      	add	r0, sp, #8
 800ebac:	f7ff fbd6 	bl	800e35c <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ebb0:	4632      	mov	r2, r6
 800ebb2:	4641      	mov	r1, r8
 800ebb4:	a802      	add	r0, sp, #8
 800ebb6:	f7ff fbd1 	bl	800e35c <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ebba:	a902      	add	r1, sp, #8
 800ebbc:	a848      	add	r0, sp, #288	; 0x120
 800ebbe:	f7ff fc3b 	bl	800e438 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800ebc2:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 800ebc6:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 800ebca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ebce:	f89d 2122 	ldrb.w	r2, [sp, #290]	; 0x122
 800ebd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ebd6:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 800ebda:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ebde:	602b      	str	r3, [r5, #0]
 800ebe0:	e7d7      	b.n	800eb92 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800ebe2:	2402      	movs	r4, #2
 800ebe4:	e7d5      	b.n	800eb92 <ComputeCmac+0x26>
 800ebe6:	2402      	movs	r4, #2
 800ebe8:	e7d3      	b.n	800eb92 <ComputeCmac+0x26>
	...

0800ebec <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 800ebec:	b140      	cbz	r0, 800ec00 <SecureElementInit+0x14>
{
 800ebee:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800ebf0:	4a04      	ldr	r2, [pc, #16]	; (800ec04 <SecureElementInit+0x18>)
 800ebf2:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800ebf4:	22d8      	movs	r2, #216	; 0xd8
 800ebf6:	4904      	ldr	r1, [pc, #16]	; (800ec08 <SecureElementInit+0x1c>)
 800ebf8:	f000 fad9 	bl	800f1ae <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800ebfc:	2000      	movs	r0, #0
}
 800ebfe:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ec00:	2002      	movs	r0, #2
}
 800ec02:	4770      	bx	lr
 800ec04:	20000c74 	.word	0x20000c74
 800ec08:	0803e500 	.word	0x0803e500

0800ec0c <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	2b0a      	cmp	r3, #10
 800ec10:	d817      	bhi.n	800ec42 <SecureElementGetKeyByID+0x36>
{
 800ec12:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ec14:	4a0c      	ldr	r2, [pc, #48]	; (800ec48 <SecureElementGetKeyByID+0x3c>)
 800ec16:	6814      	ldr	r4, [r2, #0]
 800ec18:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800ec1c:	4422      	add	r2, r4
 800ec1e:	7e12      	ldrb	r2, [r2, #24]
 800ec20:	4282      	cmp	r2, r0
 800ec22:	d006      	beq.n	800ec32 <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ec24:	3301      	adds	r3, #1
 800ec26:	b2db      	uxtb	r3, r3
 800ec28:	2b0a      	cmp	r3, #10
 800ec2a:	d9f3      	bls.n	800ec14 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ec2c:	2003      	movs	r0, #3
}
 800ec2e:	bc10      	pop	{r4}
 800ec30:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800ec32:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800ec36:	f10c 0c18 	add.w	ip, ip, #24
 800ec3a:	4464      	add	r4, ip
 800ec3c:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ec3e:	2000      	movs	r0, #0
 800ec40:	e7f5      	b.n	800ec2e <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ec42:	2003      	movs	r0, #3
}
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	20000c74 	.word	0x20000c74

0800ec4c <PrintKey>:
{
 800ec4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec50:	b099      	sub	sp, #100	; 0x64
 800ec52:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800ec54:	a917      	add	r1, sp, #92	; 0x5c
 800ec56:	f7ff ffd9 	bl	800ec0c <SecureElementGetKeyByID>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d042      	beq.n	800ece6 <PrintKey+0x9a>
}
 800ec60:	b019      	add	sp, #100	; 0x64
 800ec62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 800ec66:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800ec6a:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 800ec6e:	689b      	ldr	r3, [r3, #8]
 800ec70:	9313      	str	r3, [sp, #76]	; 0x4c
 800ec72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec74:	785a      	ldrb	r2, [r3, #1]
 800ec76:	9214      	str	r2, [sp, #80]	; 0x50
 800ec78:	7899      	ldrb	r1, [r3, #2]
 800ec7a:	9115      	str	r1, [sp, #84]	; 0x54
 800ec7c:	78da      	ldrb	r2, [r3, #3]
 800ec7e:	7919      	ldrb	r1, [r3, #4]
 800ec80:	7958      	ldrb	r0, [r3, #5]
 800ec82:	799c      	ldrb	r4, [r3, #6]
 800ec84:	79dd      	ldrb	r5, [r3, #7]
 800ec86:	7a1e      	ldrb	r6, [r3, #8]
 800ec88:	7a5f      	ldrb	r7, [r3, #9]
 800ec8a:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800ec8e:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800ec92:	f893 800c 	ldrb.w	r8, [r3, #12]
 800ec96:	f893 900d 	ldrb.w	r9, [r3, #13]
 800ec9a:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800ec9e:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800eca2:	7c1b      	ldrb	r3, [r3, #16]
 800eca4:	9310      	str	r3, [sp, #64]	; 0x40
 800eca6:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 800ecaa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ecae:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800ecb2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800ecb6:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800ecba:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800ecbe:	9709      	str	r7, [sp, #36]	; 0x24
 800ecc0:	9608      	str	r6, [sp, #32]
 800ecc2:	9507      	str	r5, [sp, #28]
 800ecc4:	9406      	str	r4, [sp, #24]
 800ecc6:	9005      	str	r0, [sp, #20]
 800ecc8:	9104      	str	r1, [sp, #16]
 800ecca:	9203      	str	r2, [sp, #12]
 800eccc:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ecce:	9102      	str	r1, [sp, #8]
 800ecd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ecd2:	9201      	str	r2, [sp, #4]
 800ecd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecd6:	9300      	str	r3, [sp, #0]
 800ecd8:	4b09      	ldr	r3, [pc, #36]	; (800ed00 <PrintKey+0xb4>)
 800ecda:	2200      	movs	r2, #0
 800ecdc:	4611      	mov	r1, r2
 800ecde:	2002      	movs	r0, #2
 800ece0:	f002 f942 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800ece4:	e7bc      	b.n	800ec60 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ece6:	2b0a      	cmp	r3, #10
 800ece8:	d8ba      	bhi.n	800ec60 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 800ecea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ecee:	4905      	ldr	r1, [pc, #20]	; (800ed04 <PrintKey+0xb8>)
 800ecf0:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 800ecf4:	42a2      	cmp	r2, r4
 800ecf6:	d0b6      	beq.n	800ec66 <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	e7f3      	b.n	800ece6 <PrintKey+0x9a>
 800ecfe:	bf00      	nop
 800ed00:	080126c8 	.word	0x080126c8
 800ed04:	08012860 	.word	0x08012860

0800ed08 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 800ed08:	2b0b      	cmp	r3, #11
 800ed0a:	d80a      	bhi.n	800ed22 <SecureElementComputeAesCmac+0x1a>
{
 800ed0c:	b500      	push	{lr}
 800ed0e:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800ed10:	f8dd c010 	ldr.w	ip, [sp, #16]
 800ed14:	f8cd c000 	str.w	ip, [sp]
 800ed18:	f7ff ff28 	bl	800eb6c <ComputeCmac>
}
 800ed1c:	b003      	add	sp, #12
 800ed1e:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ed22:	2003      	movs	r0, #3
}
 800ed24:	4770      	bx	lr

0800ed26 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800ed26:	b190      	cbz	r0, 800ed4e <SecureElementVerifyAesCmac+0x28>
{
 800ed28:	b510      	push	{r4, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	468c      	mov	ip, r1
 800ed2e:	4614      	mov	r4, r2
 800ed30:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800ed32:	2000      	movs	r0, #0
 800ed34:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800ed36:	aa03      	add	r2, sp, #12
 800ed38:	9200      	str	r2, [sp, #0]
 800ed3a:	4662      	mov	r2, ip
 800ed3c:	f7ff ff16 	bl	800eb6c <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ed40:	b918      	cbnz	r0, 800ed4a <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800ed42:	9b03      	ldr	r3, [sp, #12]
 800ed44:	42a3      	cmp	r3, r4
 800ed46:	d000      	beq.n	800ed4a <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800ed48:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800ed4a:	b004      	add	sp, #16
 800ed4c:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ed4e:	2002      	movs	r0, #2
}
 800ed50:	4770      	bx	lr

0800ed52 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800ed52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed56:	b0be      	sub	sp, #248	; 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800ed58:	b348      	cbz	r0, 800edae <SecureElementAesEncrypt+0x5c>
 800ed5a:	460d      	mov	r5, r1
 800ed5c:	4614      	mov	r4, r2
 800ed5e:	461e      	mov	r6, r3
 800ed60:	4607      	mov	r7, r0
 800ed62:	b33b      	cbz	r3, 800edb4 <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800ed64:	f011 0f0f 	tst.w	r1, #15
 800ed68:	d127      	bne.n	800edba <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800ed6a:	22f0      	movs	r2, #240	; 0xf0
 800ed6c:	2100      	movs	r1, #0
 800ed6e:	a801      	add	r0, sp, #4
 800ed70:	f000 fa35 	bl	800f1de <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800ed74:	4669      	mov	r1, sp
 800ed76:	4620      	mov	r0, r4
 800ed78:	f7ff fed8 	bl	800eb2c <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ed7c:	4680      	mov	r8, r0
 800ed7e:	b118      	cbz	r0, 800ed88 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800ed80:	4640      	mov	r0, r8
 800ed82:	b03e      	add	sp, #248	; 0xf8
 800ed84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800ed88:	aa01      	add	r2, sp, #4
 800ed8a:	2110      	movs	r1, #16
 800ed8c:	9800      	ldr	r0, [sp, #0]
 800ed8e:	3001      	adds	r0, #1
 800ed90:	f7ff fe1e 	bl	800e9d0 <lorawan_aes_set_key>
        uint8_t block = 0;
 800ed94:	4644      	mov	r4, r8
        while( size != 0 )
 800ed96:	e007      	b.n	800eda8 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800ed98:	aa01      	add	r2, sp, #4
 800ed9a:	1931      	adds	r1, r6, r4
 800ed9c:	1938      	adds	r0, r7, r4
 800ed9e:	f7ff fe9b 	bl	800ead8 <lorawan_aes_encrypt>
            block = block + 16;
 800eda2:	3410      	adds	r4, #16
 800eda4:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 800eda6:	3d10      	subs	r5, #16
        while( size != 0 )
 800eda8:	2d00      	cmp	r5, #0
 800edaa:	d1f5      	bne.n	800ed98 <SecureElementAesEncrypt+0x46>
 800edac:	e7e8      	b.n	800ed80 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800edae:	f04f 0802 	mov.w	r8, #2
 800edb2:	e7e5      	b.n	800ed80 <SecureElementAesEncrypt+0x2e>
 800edb4:	f04f 0802 	mov.w	r8, #2
 800edb8:	e7e2      	b.n	800ed80 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800edba:	f04f 0805 	mov.w	r8, #5
 800edbe:	e7df      	b.n	800ed80 <SecureElementAesEncrypt+0x2e>

0800edc0 <SecureElementSetKey>:
{
 800edc0:	b530      	push	{r4, r5, lr}
 800edc2:	b085      	sub	sp, #20
    if( key == NULL )
 800edc4:	2900      	cmp	r1, #0
 800edc6:	d038      	beq.n	800ee3a <SecureElementSetKey+0x7a>
 800edc8:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800edca:	2300      	movs	r3, #0
 800edcc:	2b0a      	cmp	r3, #10
 800edce:	d830      	bhi.n	800ee32 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800edd0:	4a1b      	ldr	r2, [pc, #108]	; (800ee40 <SecureElementSetKey+0x80>)
 800edd2:	6811      	ldr	r1, [r2, #0]
 800edd4:	461c      	mov	r4, r3
 800edd6:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800edda:	440a      	add	r2, r1
 800eddc:	7e12      	ldrb	r2, [r2, #24]
 800edde:	4282      	cmp	r2, r0
 800ede0:	d002      	beq.n	800ede8 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ede2:	3301      	adds	r3, #1
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	e7f1      	b.n	800edcc <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 800ede8:	280d      	cmp	r0, #13
 800edea:	d00a      	beq.n	800ee02 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800edec:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 800edf0:	3418      	adds	r4, #24
 800edf2:	1908      	adds	r0, r1, r4
 800edf4:	2210      	movs	r2, #16
 800edf6:	4661      	mov	r1, ip
 800edf8:	3001      	adds	r0, #1
 800edfa:	f000 f9d8 	bl	800f1ae <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800edfe:	2500      	movs	r5, #0
 800ee00:	e018      	b.n	800ee34 <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800ee02:	2300      	movs	r3, #0
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	9301      	str	r3, [sp, #4]
 800ee08:	9302      	str	r3, [sp, #8]
 800ee0a:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800ee0c:	466b      	mov	r3, sp
 800ee0e:	220c      	movs	r2, #12
 800ee10:	2110      	movs	r1, #16
 800ee12:	4660      	mov	r0, ip
 800ee14:	f7ff ff9d 	bl	800ed52 <SecureElementAesEncrypt>
 800ee18:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800ee1a:	4b09      	ldr	r3, [pc, #36]	; (800ee40 <SecureElementSetKey+0x80>)
 800ee1c:	6818      	ldr	r0, [r3, #0]
 800ee1e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800ee22:	3418      	adds	r4, #24
 800ee24:	4420      	add	r0, r4
 800ee26:	2210      	movs	r2, #16
 800ee28:	4669      	mov	r1, sp
 800ee2a:	3001      	adds	r0, #1
 800ee2c:	f000 f9bf 	bl	800f1ae <memcpy1>
                return retval;
 800ee30:	e000      	b.n	800ee34 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ee32:	2503      	movs	r5, #3
}
 800ee34:	4628      	mov	r0, r5
 800ee36:	b005      	add	sp, #20
 800ee38:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ee3a:	2502      	movs	r5, #2
 800ee3c:	e7fa      	b.n	800ee34 <SecureElementSetKey+0x74>
 800ee3e:	bf00      	nop
 800ee40:	20000c74 	.word	0x20000c74

0800ee44 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800ee44:	b1d0      	cbz	r0, 800ee7c <SecureElementDeriveAndStoreKey+0x38>
{
 800ee46:	b510      	push	{r4, lr}
 800ee48:	b084      	sub	sp, #16
 800ee4a:	4614      	mov	r4, r2
 800ee4c:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800ee4e:	2a0c      	cmp	r2, #12
 800ee50:	d101      	bne.n	800ee56 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800ee52:	290b      	cmp	r1, #11
 800ee54:	d114      	bne.n	800ee80 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800ee56:	2300      	movs	r3, #0
 800ee58:	9300      	str	r3, [sp, #0]
 800ee5a:	9301      	str	r3, [sp, #4]
 800ee5c:	9302      	str	r3, [sp, #8]
 800ee5e:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800ee60:	466b      	mov	r3, sp
 800ee62:	460a      	mov	r2, r1
 800ee64:	2110      	movs	r1, #16
 800ee66:	4660      	mov	r0, ip
 800ee68:	f7ff ff73 	bl	800ed52 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ee6c:	b108      	cbz	r0, 800ee72 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ee6e:	b004      	add	sp, #16
 800ee70:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800ee72:	4669      	mov	r1, sp
 800ee74:	4620      	mov	r0, r4
 800ee76:	f7ff ffa3 	bl	800edc0 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ee7a:	e7f8      	b.n	800ee6e <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800ee7c:	2002      	movs	r0, #2
}
 800ee7e:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ee80:	2003      	movs	r0, #3
 800ee82:	e7f4      	b.n	800ee6e <SecureElementDeriveAndStoreKey+0x2a>

0800ee84 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800ee84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee86:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800ee8a:	9c07      	ldr	r4, [sp, #28]
 800ee8c:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800ee8e:	b35b      	cbz	r3, 800eee8 <SecureElementProcessJoinAccept+0x64>
 800ee90:	461f      	mov	r7, r3
 800ee92:	b35c      	cbz	r4, 800eeec <SecureElementProcessJoinAccept+0x68>
 800ee94:	b366      	cbz	r6, 800eef0 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800ee96:	2d21      	cmp	r5, #33	; 0x21
 800ee98:	d82c      	bhi.n	800eef4 <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800ee9a:	462a      	mov	r2, r5
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	4620      	mov	r0, r4
 800eea0:	f000 f985 	bl	800f1ae <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800eea4:	1c63      	adds	r3, r4, #1
 800eea6:	2201      	movs	r2, #1
 800eea8:	1e69      	subs	r1, r5, #1
 800eeaa:	18b8      	adds	r0, r7, r2
 800eeac:	f7ff ff51 	bl	800ed52 <SecureElementAesEncrypt>
 800eeb0:	bb10      	cbnz	r0, 800eef8 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800eeb2:	7ae3      	ldrb	r3, [r4, #11]
 800eeb4:	09db      	lsrs	r3, r3, #7
 800eeb6:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800eeb8:	1961      	adds	r1, r4, r5
 800eeba:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 800eebe:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800eec2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800eec6:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 800eeca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800eece:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 800eed2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800eed6:	b98b      	cbnz	r3, 800eefc <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800eed8:	2301      	movs	r3, #1
 800eeda:	1f29      	subs	r1, r5, #4
 800eedc:	4620      	mov	r0, r4
 800eede:	f7ff ff22 	bl	800ed26 <SecureElementVerifyAesCmac>
 800eee2:	b140      	cbz	r0, 800eef6 <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800eee4:	2001      	movs	r0, #1
 800eee6:	e006      	b.n	800eef6 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 800eee8:	2002      	movs	r0, #2
 800eeea:	e004      	b.n	800eef6 <SecureElementProcessJoinAccept+0x72>
 800eeec:	2002      	movs	r0, #2
 800eeee:	e002      	b.n	800eef6 <SecureElementProcessJoinAccept+0x72>
 800eef0:	2002      	movs	r0, #2
 800eef2:	e000      	b.n	800eef6 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800eef4:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800eef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800eef8:	2007      	movs	r0, #7
 800eefa:	e7fc      	b.n	800eef6 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800eefc:	2004      	movs	r0, #4
 800eefe:	e7fa      	b.n	800eef6 <SecureElementProcessJoinAccept+0x72>

0800ef00 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
    if( randomNum == NULL )
 800ef00:	b138      	cbz	r0, 800ef12 <SecureElementRandomNumber+0x12>
{
 800ef02:	b510      	push	{r4, lr}
 800ef04:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 800ef06:	4b04      	ldr	r3, [pc, #16]	; (800ef18 <SecureElementRandomNumber+0x18>)
 800ef08:	695b      	ldr	r3, [r3, #20]
 800ef0a:	4798      	blx	r3
 800ef0c:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 800ef0e:	2000      	movs	r0, #0
}
 800ef10:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ef12:	2002      	movs	r0, #2
}
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop
 800ef18:	08012954 	.word	0x08012954

0800ef1c <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 800ef1c:	b140      	cbz	r0, 800ef30 <SecureElementSetDevEui+0x14>
{
 800ef1e:	b508      	push	{r3, lr}
 800ef20:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800ef22:	2208      	movs	r2, #8
 800ef24:	4b03      	ldr	r3, [pc, #12]	; (800ef34 <SecureElementSetDevEui+0x18>)
 800ef26:	6818      	ldr	r0, [r3, #0]
 800ef28:	f000 f941 	bl	800f1ae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ef2c:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ef2e:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ef30:	2002      	movs	r0, #2
}
 800ef32:	4770      	bx	lr
 800ef34:	20000c74 	.word	0x20000c74

0800ef38 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 800ef38:	b138      	cbz	r0, 800ef4a <SecureElementGetDevEui+0x12>
{
 800ef3a:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800ef3c:	2208      	movs	r2, #8
 800ef3e:	4904      	ldr	r1, [pc, #16]	; (800ef50 <SecureElementGetDevEui+0x18>)
 800ef40:	6809      	ldr	r1, [r1, #0]
 800ef42:	f000 f934 	bl	800f1ae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ef46:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ef48:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ef4a:	2002      	movs	r0, #2
}
 800ef4c:	4770      	bx	lr
 800ef4e:	bf00      	nop
 800ef50:	20000c74 	.word	0x20000c74

0800ef54 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 800ef54:	b148      	cbz	r0, 800ef6a <SecureElementSetJoinEui+0x16>
{
 800ef56:	b508      	push	{r3, lr}
 800ef58:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800ef5a:	4b05      	ldr	r3, [pc, #20]	; (800ef70 <SecureElementSetJoinEui+0x1c>)
 800ef5c:	6818      	ldr	r0, [r3, #0]
 800ef5e:	2208      	movs	r2, #8
 800ef60:	4410      	add	r0, r2
 800ef62:	f000 f924 	bl	800f1ae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ef66:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ef68:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ef6a:	2002      	movs	r0, #2
}
 800ef6c:	4770      	bx	lr
 800ef6e:	bf00      	nop
 800ef70:	20000c74 	.word	0x20000c74

0800ef74 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 800ef74:	b140      	cbz	r0, 800ef88 <SecureElementGetJoinEui+0x14>
{
 800ef76:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800ef78:	4a04      	ldr	r2, [pc, #16]	; (800ef8c <SecureElementGetJoinEui+0x18>)
 800ef7a:	6811      	ldr	r1, [r2, #0]
 800ef7c:	2208      	movs	r2, #8
 800ef7e:	4411      	add	r1, r2
 800ef80:	f000 f915 	bl	800f1ae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ef84:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ef86:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ef88:	2002      	movs	r0, #2
}
 800ef8a:	4770      	bx	lr
 800ef8c:	20000c74 	.word	0x20000c74

0800ef90 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800ef90:	2802      	cmp	r0, #2
 800ef92:	d004      	beq.n	800ef9e <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800ef94:	4b04      	ldr	r3, [pc, #16]	; (800efa8 <SecureElementSetDevAddr+0x18>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800ef9a:	2000      	movs	r0, #0
 800ef9c:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800ef9e:	4b02      	ldr	r3, [pc, #8]	; (800efa8 <SecureElementSetDevAddr+0x18>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	6119      	str	r1, [r3, #16]
 800efa4:	e7f9      	b.n	800ef9a <SecureElementSetDevAddr+0xa>
 800efa6:	bf00      	nop
 800efa8:	20000c74 	.word	0x20000c74

0800efac <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 800efac:	b169      	cbz	r1, 800efca <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800efae:	2802      	cmp	r0, #2
 800efb0:	d005      	beq.n	800efbe <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800efb2:	4a07      	ldr	r2, [pc, #28]	; (800efd0 <SecureElementGetDevAddr+0x24>)
 800efb4:	6812      	ldr	r2, [r2, #0]
 800efb6:	6952      	ldr	r2, [r2, #20]
 800efb8:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800efba:	2000      	movs	r0, #0
 800efbc:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800efbe:	4a04      	ldr	r2, [pc, #16]	; (800efd0 <SecureElementGetDevAddr+0x24>)
 800efc0:	6812      	ldr	r2, [r2, #0]
 800efc2:	6912      	ldr	r2, [r2, #16]
 800efc4:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 800efc6:	2000      	movs	r0, #0
 800efc8:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 800efca:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800efcc:	4770      	bx	lr
 800efce:	bf00      	nop
 800efd0:	20000c74 	.word	0x20000c74

0800efd4 <SecureElementInitMcuID>:
{
 800efd4:	b530      	push	{r4, r5, lr}
 800efd6:	b085      	sub	sp, #20
 800efd8:	4605      	mov	r5, r0
 800efda:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 800efdc:	2300      	movs	r3, #0
 800efde:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 800efe0:	a802      	add	r0, sp, #8
 800efe2:	f7ff ffa9 	bl	800ef38 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800efe6:	a901      	add	r1, sp, #4
 800efe8:	2001      	movs	r0, #1
 800efea:	f7ff ffdf 	bl	800efac <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 800efee:	b195      	cbz	r5, 800f016 <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800eff0:	2300      	movs	r3, #0
 800eff2:	2b07      	cmp	r3, #7
 800eff4:	d808      	bhi.n	800f008 <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 800eff6:	f103 0210 	add.w	r2, r3, #16
 800effa:	446a      	add	r2, sp
 800effc:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800f000:	b9aa      	cbnz	r2, 800f02e <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f002:	3301      	adds	r3, #1
 800f004:	b2db      	uxtb	r3, r3
 800f006:	e7f4      	b.n	800eff2 <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 800f008:	2300      	movs	r3, #0
        if( id_init == false )
 800f00a:	b923      	cbnz	r3, 800f016 <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 800f00c:	a802      	add	r0, sp, #8
 800f00e:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 800f010:	a802      	add	r0, sp, #8
 800f012:	f7ff ff83 	bl	800ef1c <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800f016:	b13c      	cbz	r4, 800f028 <SecureElementInitMcuID+0x54>
 800f018:	9b01      	ldr	r3, [sp, #4]
 800f01a:	b92b      	cbnz	r3, 800f028 <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 800f01c:	a801      	add	r0, sp, #4
 800f01e:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800f020:	9901      	ldr	r1, [sp, #4]
 800f022:	2001      	movs	r0, #1
 800f024:	f7ff ffb4 	bl	800ef90 <SecureElementSetDevAddr>
}
 800f028:	2000      	movs	r0, #0
 800f02a:	b005      	add	sp, #20
 800f02c:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 800f02e:	2301      	movs	r3, #1
 800f030:	e7eb      	b.n	800f00a <SecureElementInitMcuID+0x36>
	...

0800f034 <PrintIds>:
{
 800f034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f036:	b08f      	sub	sp, #60	; 0x3c
 800f038:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 800f03a:	2400      	movs	r4, #0
 800f03c:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 800f03e:	a80a      	add	r0, sp, #40	; 0x28
 800f040:	f7ff ff7a 	bl	800ef38 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800f044:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800f048:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800f04c:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 800f050:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 800f054:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 800f058:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
 800f05c:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 800f060:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
 800f064:	f8cd e01c 	str.w	lr, [sp, #28]
 800f068:	f8cd c018 	str.w	ip, [sp, #24]
 800f06c:	9705      	str	r7, [sp, #20]
 800f06e:	9604      	str	r6, [sp, #16]
 800f070:	9003      	str	r0, [sp, #12]
 800f072:	9102      	str	r1, [sp, #8]
 800f074:	9201      	str	r2, [sp, #4]
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	4b20      	ldr	r3, [pc, #128]	; (800f0fc <PrintIds+0xc8>)
 800f07a:	4622      	mov	r2, r4
 800f07c:	4621      	mov	r1, r4
 800f07e:	2002      	movs	r0, #2
 800f080:	f001 ff72 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 800f084:	a80c      	add	r0, sp, #48	; 0x30
 800f086:	f7ff ff75 	bl	800ef74 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800f08a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f08e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800f092:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 800f096:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800f09a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800f09e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
 800f0a2:	f89d c036 	ldrb.w	ip, [sp, #54]	; 0x36
 800f0a6:	f89d e037 	ldrb.w	lr, [sp, #55]	; 0x37
 800f0aa:	f8cd e01c 	str.w	lr, [sp, #28]
 800f0ae:	f8cd c018 	str.w	ip, [sp, #24]
 800f0b2:	9705      	str	r7, [sp, #20]
 800f0b4:	9604      	str	r6, [sp, #16]
 800f0b6:	9003      	str	r0, [sp, #12]
 800f0b8:	9102      	str	r1, [sp, #8]
 800f0ba:	9201      	str	r2, [sp, #4]
 800f0bc:	9300      	str	r3, [sp, #0]
 800f0be:	4b10      	ldr	r3, [pc, #64]	; (800f100 <PrintIds+0xcc>)
 800f0c0:	4622      	mov	r2, r4
 800f0c2:	4621      	mov	r1, r4
 800f0c4:	2002      	movs	r0, #2
 800f0c6:	f001 ff4f 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 800f0ca:	a909      	add	r1, sp, #36	; 0x24
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	f7ff ff6d 	bl	800efac <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800f0d2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800f0d6:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800f0da:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 800f0de:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 800f0e2:	9003      	str	r0, [sp, #12]
 800f0e4:	9102      	str	r1, [sp, #8]
 800f0e6:	9201      	str	r2, [sp, #4]
 800f0e8:	9300      	str	r3, [sp, #0]
 800f0ea:	4b06      	ldr	r3, [pc, #24]	; (800f104 <PrintIds+0xd0>)
 800f0ec:	4622      	mov	r2, r4
 800f0ee:	4621      	mov	r1, r4
 800f0f0:	2002      	movs	r0, #2
 800f0f2:	f001 ff39 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 800f0f6:	b00f      	add	sp, #60	; 0x3c
 800f0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	08012724 	.word	0x08012724
 800f100:	08012764 	.word	0x08012764
 800f104:	080127a4 	.word	0x080127a4

0800f108 <SecureElementPrintKeys>:
{
 800f108:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 800f10a:	2000      	movs	r0, #0
 800f10c:	f7ff fd9e 	bl	800ec4c <PrintKey>
    PrintKey( NWK_KEY );
 800f110:	2001      	movs	r0, #1
 800f112:	f7ff fd9b 	bl	800ec4c <PrintKey>
    PrintKey( APP_S_KEY );
 800f116:	2009      	movs	r0, #9
 800f118:	f7ff fd98 	bl	800ec4c <PrintKey>
    PrintKey( NWK_S_KEY );
 800f11c:	2008      	movs	r0, #8
 800f11e:	f7ff fd95 	bl	800ec4c <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 800f122:	2000      	movs	r0, #0
 800f124:	f7ff ff86 	bl	800f034 <PrintIds>
}
 800f128:	2000      	movs	r0, #0
 800f12a:	bd08      	pop	{r3, pc}

0800f12c <SecureElementPrintSessionKeys>:
{
 800f12c:	b510      	push	{r4, lr}
 800f12e:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 800f130:	200b      	movs	r0, #11
 800f132:	f7ff fd8b 	bl	800ec4c <PrintKey>
    PrintKey( MC_KE_KEY );
 800f136:	200c      	movs	r0, #12
 800f138:	f7ff fd88 	bl	800ec4c <PrintKey>
    PrintKey( APP_S_KEY );
 800f13c:	2009      	movs	r0, #9
 800f13e:	f7ff fd85 	bl	800ec4c <PrintKey>
    PrintKey( NWK_S_KEY );
 800f142:	2008      	movs	r0, #8
 800f144:	f7ff fd82 	bl	800ec4c <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 800f148:	200a      	movs	r0, #10
 800f14a:	f7ff fd7f 	bl	800ec4c <PrintKey>
    PrintIds( mode );
 800f14e:	4620      	mov	r0, r4
 800f150:	f7ff ff70 	bl	800f034 <PrintIds>
}
 800f154:	2000      	movs	r0, #0
 800f156:	bd10      	pop	{r4, pc}

0800f158 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800f158:	4b09      	ldr	r3, [pc, #36]	; (800f180 <rand1+0x28>)
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	4909      	ldr	r1, [pc, #36]	; (800f184 <rand1+0x2c>)
 800f15e:	f243 0039 	movw	r0, #12345	; 0x3039
 800f162:	fb01 0002 	mla	r0, r1, r2, r0
 800f166:	6018      	str	r0, [r3, #0]
 800f168:	2303      	movs	r3, #3
 800f16a:	fba3 2300 	umull	r2, r3, r3, r0
 800f16e:	1ac2      	subs	r2, r0, r3
 800f170:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800f174:	0f9b      	lsrs	r3, r3, #30
 800f176:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800f17a:	1ac0      	subs	r0, r0, r3
 800f17c:	4770      	bx	lr
 800f17e:	bf00      	nop
 800f180:	20000108 	.word	0x20000108
 800f184:	41c64e6d 	.word	0x41c64e6d

0800f188 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800f188:	4b01      	ldr	r3, [pc, #4]	; (800f190 <srand1+0x8>)
 800f18a:	6018      	str	r0, [r3, #0]
}
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop
 800f190:	20000108 	.word	0x20000108

0800f194 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800f194:	b538      	push	{r3, r4, r5, lr}
 800f196:	4605      	mov	r5, r0
 800f198:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800f19a:	f7ff ffdd 	bl	800f158 <rand1>
 800f19e:	1b61      	subs	r1, r4, r5
 800f1a0:	3101      	adds	r1, #1
 800f1a2:	fb90 f3f1 	sdiv	r3, r0, r1
 800f1a6:	fb01 0013 	mls	r0, r1, r3, r0
}
 800f1aa:	4428      	add	r0, r5
 800f1ac:	bd38      	pop	{r3, r4, r5, pc}

0800f1ae <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800f1ae:	e004      	b.n	800f1ba <memcpy1+0xc>
    {
        *dst++ = *src++;
 800f1b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1b4:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	1e53      	subs	r3, r2, #1
 800f1bc:	b29b      	uxth	r3, r3
 800f1be:	2a00      	cmp	r2, #0
 800f1c0:	d1f6      	bne.n	800f1b0 <memcpy1+0x2>
    }
}
 800f1c2:	4770      	bx	lr

0800f1c4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800f1c4:	1e53      	subs	r3, r2, #1
 800f1c6:	4418      	add	r0, r3
    while( size-- )
 800f1c8:	e004      	b.n	800f1d4 <memcpyr+0x10>
    {
        *dst-- = *src++;
 800f1ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1ce:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	1e53      	subs	r3, r2, #1
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	2a00      	cmp	r2, #0
 800f1da:	d1f6      	bne.n	800f1ca <memcpyr+0x6>
    }
}
 800f1dc:	4770      	bx	lr

0800f1de <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800f1de:	e002      	b.n	800f1e6 <memset1+0x8>
    {
        *dst++ = value;
 800f1e0:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	1e53      	subs	r3, r2, #1
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	2a00      	cmp	r2, #0
 800f1ec:	d1f8      	bne.n	800f1e0 <memset1+0x2>
    }
}
 800f1ee:	4770      	bx	lr

0800f1f0 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800f1f0:	b1f0      	cbz	r0, 800f230 <Crc32+0x40>
{
 800f1f2:	b510      	push	{r4, lr}
 800f1f4:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800f1f6:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 800f1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f1fe:	e00e      	b.n	800f21e <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800f200:	f340 0c00 	sbfx	ip, r0, #0, #1
 800f204:	4a0b      	ldr	r2, [pc, #44]	; (800f234 <Crc32+0x44>)
 800f206:	ea0c 0202 	and.w	r2, ip, r2
 800f20a:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800f20e:	3301      	adds	r3, #1
 800f210:	b29b      	uxth	r3, r3
 800f212:	2b07      	cmp	r3, #7
 800f214:	d9f4      	bls.n	800f200 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 800f216:	f10e 0e01 	add.w	lr, lr, #1
 800f21a:	fa1f fe8e 	uxth.w	lr, lr
 800f21e:	458e      	cmp	lr, r1
 800f220:	d204      	bcs.n	800f22c <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 800f222:	f814 300e 	ldrb.w	r3, [r4, lr]
 800f226:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800f228:	2300      	movs	r3, #0
 800f22a:	e7f2      	b.n	800f212 <Crc32+0x22>
        }
    }

    return ~crc;
 800f22c:	43c0      	mvns	r0, r0
}
 800f22e:	bd10      	pop	{r4, pc}
        return 0;
 800f230:	2000      	movs	r0, #0
}
 800f232:	4770      	bx	lr
 800f234:	edb88320 	.word	0xedb88320

0800f238 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800f238:	2001      	movs	r0, #1
 800f23a:	4770      	bx	lr

0800f23c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800f23c:	280a      	cmp	r0, #10
 800f23e:	d807      	bhi.n	800f250 <RadioGetLoRaBandwidthInHz+0x14>
 800f240:	e8df f000 	tbb	[pc, r0]
 800f244:	17110b20 	.word	0x17110b20
 800f248:	061e1c1a 	.word	0x061e1c1a
 800f24c:	0e08      	.short	0x0e08
 800f24e:	14          	.byte	0x14
 800f24f:	00          	.byte	0x00
 800f250:	2000      	movs	r0, #0
 800f252:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800f254:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 800f258:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800f25a:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 800f25e:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800f260:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 800f264:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800f266:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800f26a:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800f26c:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 800f270:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800f272:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 800f276:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800f278:	4804      	ldr	r0, [pc, #16]	; (800f28c <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800f27a:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800f27c:	4804      	ldr	r0, [pc, #16]	; (800f290 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800f27e:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800f280:	4804      	ldr	r0, [pc, #16]	; (800f294 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800f282:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800f284:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop
 800f28c:	0001e848 	.word	0x0001e848
 800f290:	0003d090 	.word	0x0003d090
 800f294:	0007a120 	.word	0x0007a120

0800f298 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f298:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 800f29c:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f29e:	b953      	cbnz	r3, 800f2b6 <RadioGetGfskTimeOnAirNumerator+0x1e>
 800f2a0:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 800f2a2:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f2a4:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f2a6:	b141      	cbz	r1, 800f2ba <RadioGetGfskTimeOnAirNumerator+0x22>
 800f2a8:	2302      	movs	r3, #2
 800f2aa:	f89d 0000 	ldrb.w	r0, [sp]
 800f2ae:	4418      	add	r0, r3
}
 800f2b0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800f2b4:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	e7f3      	b.n	800f2a2 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	e7f5      	b.n	800f2aa <RadioGetGfskTimeOnAirNumerator+0x12>

0800f2be <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f2be:	b570      	push	{r4, r5, r6, lr}
 800f2c0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800f2c4:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800f2c8:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800f2ca:	f1a1 0c05 	sub.w	ip, r1, #5
 800f2ce:	f1bc 0f01 	cmp.w	ip, #1
 800f2d2:	d931      	bls.n	800f338 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f2d4:	b918      	cbnz	r0, 800f2de <RadioGetLoRaTimeOnAirNumerator+0x20>
 800f2d6:	f1a1 060b 	sub.w	r6, r1, #11
 800f2da:	2e01      	cmp	r6, #1
 800f2dc:	d934      	bls.n	800f348 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 800f2de:	2801      	cmp	r0, #1
 800f2e0:	d02e      	beq.n	800f340 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 800f2e2:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f2e4:	f89d c014 	ldrb.w	ip, [sp, #20]
 800f2e8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800f2ec:	b385      	cbz	r5, 800f350 <RadioGetLoRaTimeOnAirNumerator+0x92>
 800f2ee:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f2f0:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 800f2f2:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800f2f4:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800f2f8:	b364      	cbz	r4, 800f354 <RadioGetLoRaTimeOnAirNumerator+0x96>
 800f2fa:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 800f2fe:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800f300:	2906      	cmp	r1, #6
 800f302:	d904      	bls.n	800f30e <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800f304:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800f308:	b10e      	cbz	r6, 800f30e <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800f30a:	1e88      	subs	r0, r1, #2
 800f30c:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800f30e:	f1bc 0f00 	cmp.w	ip, #0
 800f312:	db22      	blt.n	800f35a <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800f314:	4484      	add	ip, r0
 800f316:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f31a:	fb9c fcf0 	sdiv	ip, ip, r0
 800f31e:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800f322:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800f326:	2906      	cmp	r1, #6
 800f328:	d801      	bhi.n	800f32e <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 800f32a:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800f32e:	0080      	lsls	r0, r0, #2
 800f330:	3001      	adds	r0, #1
 800f332:	3902      	subs	r1, #2
}
 800f334:	4088      	lsls	r0, r1
 800f336:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800f338:	2b0b      	cmp	r3, #11
 800f33a:	d8cb      	bhi.n	800f2d4 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800f33c:	230c      	movs	r3, #12
 800f33e:	e7c9      	b.n	800f2d4 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f340:	290c      	cmp	r1, #12
 800f342:	d003      	beq.n	800f34c <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 800f344:	2600      	movs	r6, #0
 800f346:	e7cd      	b.n	800f2e4 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800f348:	2601      	movs	r6, #1
 800f34a:	e7cb      	b.n	800f2e4 <RadioGetLoRaTimeOnAirNumerator+0x26>
 800f34c:	2601      	movs	r6, #1
 800f34e:	e7c9      	b.n	800f2e4 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800f350:	2000      	movs	r0, #0
 800f352:	e7cd      	b.n	800f2f0 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 800f354:	f04f 0e14 	mov.w	lr, #20
 800f358:	e7d1      	b.n	800f2fe <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 800f35a:	f04f 0c00 	mov.w	ip, #0
 800f35e:	e7d9      	b.n	800f314 <RadioGetLoRaTimeOnAirNumerator+0x56>

0800f360 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800f360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f362:	b085      	sub	sp, #20
 800f364:	460e      	mov	r6, r1
 800f366:	4615      	mov	r5, r2
 800f368:	4619      	mov	r1, r3
 800f36a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800f36e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800f372:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800f376:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800f37a:	b148      	cbz	r0, 800f390 <RadioTimeOnAir+0x30>
 800f37c:	2801      	cmp	r0, #1
 800f37e:	d012      	beq.n	800f3a6 <RadioTimeOnAir+0x46>
 800f380:	2501      	movs	r5, #1
 800f382:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800f384:	442c      	add	r4, r5
 800f386:	1e60      	subs	r0, r4, #1
}
 800f388:	fbb0 f0f5 	udiv	r0, r0, r5
 800f38c:	b005      	add	sp, #20
 800f38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800f390:	f8cd c004 	str.w	ip, [sp, #4]
 800f394:	9700      	str	r7, [sp, #0]
 800f396:	4628      	mov	r0, r5
 800f398:	f7ff ff7e 	bl	800f298 <RadioGetGfskTimeOnAirNumerator>
 800f39c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f3a0:	fb03 f400 	mul.w	r4, r3, r0
        break;
 800f3a4:	e7ee      	b.n	800f384 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800f3a6:	f8cd c008 	str.w	ip, [sp, #8]
 800f3aa:	9701      	str	r7, [sp, #4]
 800f3ac:	9300      	str	r3, [sp, #0]
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	460a      	mov	r2, r1
 800f3b2:	4629      	mov	r1, r5
 800f3b4:	4630      	mov	r0, r6
 800f3b6:	f7ff ff82 	bl	800f2be <RadioGetLoRaTimeOnAirNumerator>
 800f3ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f3be:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800f3c2:	4b03      	ldr	r3, [pc, #12]	; (800f3d0 <RadioTimeOnAir+0x70>)
 800f3c4:	5d98      	ldrb	r0, [r3, r6]
 800f3c6:	f7ff ff39 	bl	800f23c <RadioGetLoRaBandwidthInHz>
 800f3ca:	4605      	mov	r5, r0
        break;
 800f3cc:	e7da      	b.n	800f384 <RadioTimeOnAir+0x24>
 800f3ce:	bf00      	nop
 800f3d0:	08012950 	.word	0x08012950

0800f3d4 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800f3d4:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800f3d6:	4b05      	ldr	r3, [pc, #20]	; (800f3ec <RadioOnTxTimeoutProcess+0x18>)
 800f3d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f3dc:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f3de:	4b04      	ldr	r3, [pc, #16]	; (800f3f0 <RadioOnTxTimeoutProcess+0x1c>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	b113      	cbz	r3, 800f3ea <RadioOnTxTimeoutProcess+0x16>
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	b103      	cbz	r3, 800f3ea <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 800f3e8:	4798      	blx	r3
    }
}
 800f3ea:	bd08      	pop	{r3, pc}
 800f3ec:	48000400 	.word	0x48000400
 800f3f0:	20000d78 	.word	0x20000d78

0800f3f4 <RadioOnTxTimeoutIrq>:
{
 800f3f4:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800f3f6:	f7ff ffed 	bl	800f3d4 <RadioOnTxTimeoutProcess>
}
 800f3fa:	bd08      	pop	{r3, pc}

0800f3fc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800f3fc:	b508      	push	{r3, lr}
 800f3fe:	4b05      	ldr	r3, [pc, #20]	; (800f414 <RadioOnRxTimeoutProcess+0x18>)
 800f400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f404:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f406:	4b04      	ldr	r3, [pc, #16]	; (800f418 <RadioOnRxTimeoutProcess+0x1c>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	b113      	cbz	r3, 800f412 <RadioOnRxTimeoutProcess+0x16>
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	b103      	cbz	r3, 800f412 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 800f410:	4798      	blx	r3
    }
}
 800f412:	bd08      	pop	{r3, pc}
 800f414:	48000400 	.word	0x48000400
 800f418:	20000d78 	.word	0x20000d78

0800f41c <RadioOnRxTimeoutIrq>:
{
 800f41c:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800f41e:	f7ff ffed 	bl	800f3fc <RadioOnRxTimeoutProcess>
}
 800f422:	bd08      	pop	{r3, pc}

0800f424 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800f424:	f04f 30ff 	mov.w	r0, #4294967295
 800f428:	4770      	bx	lr

0800f42a <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800f42a:	f04f 30ff 	mov.w	r0, #4294967295
 800f42e:	4770      	bx	lr

0800f430 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 800f430:	2001      	movs	r0, #1
 800f432:	4770      	bx	lr

0800f434 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 800f434:	2001      	movs	r0, #1
 800f436:	4770      	bx	lr

0800f438 <RadioWrite>:
{
 800f438:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800f43a:	f000 fe37 	bl	80100ac <SUBGRF_WriteRegister>
}
 800f43e:	bd08      	pop	{r3, pc}

0800f440 <RadioTxCw>:
{
 800f440:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800f442:	f001 fbcf 	bl	8010be4 <SUBGRF_SetRfTxPower>
 800f446:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800f448:	210e      	movs	r1, #14
 800f44a:	f640 101f 	movw	r0, #2335	; 0x91f
 800f44e:	f000 fe2d 	bl	80100ac <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800f452:	2101      	movs	r1, #1
 800f454:	4620      	mov	r0, r4
 800f456:	f001 fbb1 	bl	8010bbc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800f45a:	f000 fff7 	bl	801044c <SUBGRF_SetTxContinuousWave>
}
 800f45e:	bd10      	pop	{r4, pc}

0800f460 <RadioTxPrbs>:
{
 800f460:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800f462:	2101      	movs	r1, #1
 800f464:	4b07      	ldr	r3, [pc, #28]	; (800f484 <RadioTxPrbs+0x24>)
 800f466:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800f46a:	f001 fba7 	bl	8010bbc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800f46e:	212d      	movs	r1, #45	; 0x2d
 800f470:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800f474:	f7ff ffe0 	bl	800f438 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800f478:	f000 ffef 	bl	801045a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800f47c:	4802      	ldr	r0, [pc, #8]	; (800f488 <RadioTxPrbs+0x28>)
 800f47e:	f000 ff25 	bl	80102cc <SUBGRF_SetTx>
}
 800f482:	bd08      	pop	{r3, pc}
 800f484:	20000d94 	.word	0x20000d94
 800f488:	000fffff 	.word	0x000fffff

0800f48c <RadioSetRxDutyCycle>:
{
 800f48c:	b570      	push	{r4, r5, r6, lr}
 800f48e:	4604      	mov	r4, r0
 800f490:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800f492:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 800f496:	4e09      	ldr	r6, [pc, #36]	; (800f4bc <RadioSetRxDutyCycle+0x30>)
 800f498:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f49a:	2300      	movs	r3, #0
 800f49c:	461a      	mov	r2, r3
 800f49e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f4a2:	4608      	mov	r0, r1
 800f4a4:	f001 f8a5 	bl	80105f2 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f4a8:	2100      	movs	r1, #0
 800f4aa:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800f4ae:	f001 fb85 	bl	8010bbc <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800f4b2:	4629      	mov	r1, r5
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f000 ff99 	bl	80103ec <SUBGRF_SetRxDutyCycle>
}
 800f4ba:	bd70      	pop	{r4, r5, r6, pc}
 800f4bc:	20000d94 	.word	0x20000d94

0800f4c0 <RadioRxBoosted>:
{
 800f4c0:	b538      	push	{r3, r4, r5, lr}
 800f4c2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 800f4c4:	f001 fc69 	bl	8010d9a <RFW_Is_Init>
 800f4c8:	2801      	cmp	r0, #1
 800f4ca:	d019      	beq.n	800f500 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	f240 2162 	movw	r1, #610	; 0x262
 800f4d4:	4608      	mov	r0, r1
 800f4d6:	f001 f88c 	bl	80105f2 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800f4da:	b9a4      	cbnz	r4, 800f506 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800f4dc:	4c11      	ldr	r4, [pc, #68]	; (800f524 <RadioRxBoosted+0x64>)
 800f4de:	2100      	movs	r1, #0
 800f4e0:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800f4e2:	4b11      	ldr	r3, [pc, #68]	; (800f528 <RadioRxBoosted+0x68>)
 800f4e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f4e8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f4ea:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800f4ee:	f001 fb65 	bl	8010bbc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800f4f2:	7863      	ldrb	r3, [r4, #1]
 800f4f4:	b183      	cbz	r3, 800f518 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800f4f6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800f4fa:	f000 ff59 	bl	80103b0 <SUBGRF_SetRxBoosted>
}
 800f4fe:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800f500:	f001 fc53 	bl	8010daa <RFW_ReceiveInit>
 800f504:	e7e9      	b.n	800f4da <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f506:	4d09      	ldr	r5, [pc, #36]	; (800f52c <RadioRxBoosted+0x6c>)
 800f508:	4621      	mov	r1, r4
 800f50a:	4628      	mov	r0, r5
 800f50c:	f002 f91e 	bl	801174c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800f510:	4628      	mov	r0, r5
 800f512:	f002 f8d5 	bl	80116c0 <UTIL_TIMER_Start>
 800f516:	e7e1      	b.n	800f4dc <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800f518:	4b02      	ldr	r3, [pc, #8]	; (800f524 <RadioRxBoosted+0x64>)
 800f51a:	6898      	ldr	r0, [r3, #8]
 800f51c:	0180      	lsls	r0, r0, #6
 800f51e:	f000 ff47 	bl	80103b0 <SUBGRF_SetRxBoosted>
}
 800f522:	e7ec      	b.n	800f4fe <RadioRxBoosted+0x3e>
 800f524:	20000d94 	.word	0x20000d94
 800f528:	48000400 	.word	0x48000400
 800f52c:	20000d7c 	.word	0x20000d7c

0800f530 <RadioStandby>:
{
 800f530:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800f532:	2000      	movs	r0, #0
 800f534:	f000 feb0 	bl	8010298 <SUBGRF_SetStandby>
}
 800f538:	bd08      	pop	{r3, pc}

0800f53a <RadioRead>:
{
 800f53a:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800f53c:	f000 fdc6 	bl	80100cc <SUBGRF_ReadRegister>
}
 800f540:	bd08      	pop	{r3, pc}

0800f542 <RadioGetStatus>:
{
 800f542:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800f544:	f000 fda6 	bl	8010094 <SUBGRF_GetOperatingMode>
 800f548:	2805      	cmp	r0, #5
 800f54a:	d007      	beq.n	800f55c <RadioGetStatus+0x1a>
 800f54c:	2807      	cmp	r0, #7
 800f54e:	d007      	beq.n	800f560 <RadioGetStatus+0x1e>
 800f550:	2804      	cmp	r0, #4
 800f552:	d001      	beq.n	800f558 <RadioGetStatus+0x16>
            return RF_IDLE;
 800f554:	2000      	movs	r0, #0
}
 800f556:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800f558:	2002      	movs	r0, #2
 800f55a:	e7fc      	b.n	800f556 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800f55c:	2001      	movs	r0, #1
 800f55e:	e7fa      	b.n	800f556 <RadioGetStatus+0x14>
            return RF_CAD;
 800f560:	2003      	movs	r0, #3
 800f562:	e7f8      	b.n	800f556 <RadioGetStatus+0x14>

0800f564 <RadioIrqProcess>:
{
 800f564:	b530      	push	{r4, r5, lr}
 800f566:	b083      	sub	sp, #12
    uint8_t size = 0;
 800f568:	2300      	movs	r3, #0
 800f56a:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800f56e:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 800f570:	4ba5      	ldr	r3, [pc, #660]	; (800f808 <RadioIrqProcess+0x2a4>)
 800f572:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800f576:	2b20      	cmp	r3, #32
 800f578:	d829      	bhi.n	800f5ce <RadioIrqProcess+0x6a>
 800f57a:	b21a      	sxth	r2, r3
 800f57c:	2a00      	cmp	r2, #0
 800f57e:	f000 8140 	beq.w	800f802 <RadioIrqProcess+0x29e>
 800f582:	3b01      	subs	r3, #1
 800f584:	2b1f      	cmp	r3, #31
 800f586:	f200 813c 	bhi.w	800f802 <RadioIrqProcess+0x29e>
 800f58a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f58e:	0063      	.short	0x0063
 800f590:	013a007f 	.word	0x013a007f
 800f594:	013a00f7 	.word	0x013a00f7
 800f598:	013a013a 	.word	0x013a013a
 800f59c:	013a0127 	.word	0x013a0127
 800f5a0:	013a013a 	.word	0x013a013a
 800f5a4:	013a013a 	.word	0x013a013a
 800f5a8:	013a013a 	.word	0x013a013a
 800f5ac:	013a0134 	.word	0x013a0134
 800f5b0:	013a013a 	.word	0x013a013a
 800f5b4:	013a013a 	.word	0x013a013a
 800f5b8:	013a013a 	.word	0x013a013a
 800f5bc:	013a013a 	.word	0x013a013a
 800f5c0:	013a013a 	.word	0x013a013a
 800f5c4:	013a013a 	.word	0x013a013a
 800f5c8:	013a013a 	.word	0x013a013a
 800f5cc:	0155      	.short	0x0155
 800f5ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5d2:	f000 80b3 	beq.w	800f73c <RadioIrqProcess+0x1d8>
 800f5d6:	d928      	bls.n	800f62a <RadioIrqProcess+0xc6>
 800f5d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5dc:	f040 8111 	bne.w	800f802 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800f5e0:	4b8a      	ldr	r3, [pc, #552]	; (800f80c <RadioIrqProcess+0x2a8>)
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	2002      	movs	r0, #2
 800f5e8:	f001 fcbe 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800f5ec:	f000 fd52 	bl	8010094 <SUBGRF_GetOperatingMode>
 800f5f0:	2804      	cmp	r0, #4
 800f5f2:	f000 80b0 	beq.w	800f756 <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800f5f6:	f000 fd4d 	bl	8010094 <SUBGRF_GetOperatingMode>
 800f5fa:	2805      	cmp	r0, #5
 800f5fc:	f040 8101 	bne.w	800f802 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 800f600:	4b83      	ldr	r3, [pc, #524]	; (800f810 <RadioIrqProcess+0x2ac>)
 800f602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f606:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 800f608:	4882      	ldr	r0, [pc, #520]	; (800f814 <RadioIrqProcess+0x2b0>)
 800f60a:	f001 ffff 	bl	801160c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800f60e:	2000      	movs	r0, #0
 800f610:	f000 fe42 	bl	8010298 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f614:	4b80      	ldr	r3, [pc, #512]	; (800f818 <RadioIrqProcess+0x2b4>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	f000 80f2 	beq.w	800f802 <RadioIrqProcess+0x29e>
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	2b00      	cmp	r3, #0
 800f622:	f000 80ee 	beq.w	800f802 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800f626:	4798      	blx	r3
 800f628:	e0eb      	b.n	800f802 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 800f62a:	2b40      	cmp	r3, #64	; 0x40
 800f62c:	f000 811d 	beq.w	800f86a <RadioIrqProcess+0x306>
 800f630:	2b80      	cmp	r3, #128	; 0x80
 800f632:	f040 80e6 	bne.w	800f802 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800f636:	2000      	movs	r0, #0
 800f638:	f000 fe2e 	bl	8010298 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f63c:	4b76      	ldr	r3, [pc, #472]	; (800f818 <RadioIrqProcess+0x2b4>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	f000 80de 	beq.w	800f802 <RadioIrqProcess+0x29e>
 800f646:	699b      	ldr	r3, [r3, #24]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	f000 80da 	beq.w	800f802 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 800f64e:	2000      	movs	r0, #0
 800f650:	4798      	blx	r3
 800f652:	e0d6      	b.n	800f802 <RadioIrqProcess+0x29e>
 800f654:	4b6e      	ldr	r3, [pc, #440]	; (800f810 <RadioIrqProcess+0x2ac>)
 800f656:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f65a:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 800f65c:	486f      	ldr	r0, [pc, #444]	; (800f81c <RadioIrqProcess+0x2b8>)
 800f65e:	f001 ffd5 	bl	801160c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800f662:	2000      	movs	r0, #0
 800f664:	f000 fe18 	bl	8010298 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800f668:	f001 fb99 	bl	8010d9e <RFW_Is_LongPacketModeEnabled>
 800f66c:	2801      	cmp	r0, #1
 800f66e:	d00a      	beq.n	800f686 <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800f670:	4b69      	ldr	r3, [pc, #420]	; (800f818 <RadioIrqProcess+0x2b4>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	f000 80c4 	beq.w	800f802 <RadioIrqProcess+0x29e>
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	f000 80c0 	beq.w	800f802 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 800f682:	4798      	blx	r3
 800f684:	e0bd      	b.n	800f802 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 800f686:	f001 fb93 	bl	8010db0 <RFW_DeInit_TxLongPacket>
 800f68a:	e7f1      	b.n	800f670 <RadioIrqProcess+0x10c>
 800f68c:	4b60      	ldr	r3, [pc, #384]	; (800f810 <RadioIrqProcess+0x2ac>)
 800f68e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f692:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 800f694:	485f      	ldr	r0, [pc, #380]	; (800f814 <RadioIrqProcess+0x2b0>)
 800f696:	f001 ffb9 	bl	801160c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800f69a:	4b5b      	ldr	r3, [pc, #364]	; (800f808 <RadioIrqProcess+0x2a4>)
 800f69c:	785b      	ldrb	r3, [r3, #1]
 800f69e:	b303      	cbz	r3, 800f6e2 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800f6a0:	22ff      	movs	r2, #255	; 0xff
 800f6a2:	f10d 0107 	add.w	r1, sp, #7
 800f6a6:	485e      	ldr	r0, [pc, #376]	; (800f820 <RadioIrqProcess+0x2bc>)
 800f6a8:	f001 fa32 	bl	8010b10 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800f6ac:	485d      	ldr	r0, [pc, #372]	; (800f824 <RadioIrqProcess+0x2c0>)
 800f6ae:	f001 fa49 	bl	8010b44 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800f6b2:	4b59      	ldr	r3, [pc, #356]	; (800f818 <RadioIrqProcess+0x2b4>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	f000 80a3 	beq.w	800f802 <RadioIrqProcess+0x29e>
 800f6bc:	689c      	ldr	r4, [r3, #8]
 800f6be:	2c00      	cmp	r4, #0
 800f6c0:	f000 809f 	beq.w	800f802 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 800f6c4:	4b50      	ldr	r3, [pc, #320]	; (800f808 <RadioIrqProcess+0x2a4>)
 800f6c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f6ca:	2b01      	cmp	r3, #1
 800f6cc:	d11d      	bne.n	800f70a <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800f6ce:	4a4e      	ldr	r2, [pc, #312]	; (800f808 <RadioIrqProcess+0x2a4>)
 800f6d0:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 800f6d4:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 800f6d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f6dc:	4850      	ldr	r0, [pc, #320]	; (800f820 <RadioIrqProcess+0x2bc>)
 800f6de:	47a0      	blx	r4
                break;
 800f6e0:	e08f      	b.n	800f802 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f6e2:	2000      	movs	r0, #0
 800f6e4:	f000 fdd8 	bl	8010298 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800f6e8:	2100      	movs	r1, #0
 800f6ea:	f640 1002 	movw	r0, #2306	; 0x902
 800f6ee:	f000 fcdd 	bl	80100ac <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800f6f2:	f640 1044 	movw	r0, #2372	; 0x944
 800f6f6:	f000 fce9 	bl	80100cc <SUBGRF_ReadRegister>
 800f6fa:	f040 0102 	orr.w	r1, r0, #2
 800f6fe:	b2c9      	uxtb	r1, r1
 800f700:	f640 1044 	movw	r0, #2372	; 0x944
 800f704:	f000 fcd2 	bl	80100ac <SUBGRF_WriteRegister>
 800f708:	e7ca      	b.n	800f6a0 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800f70a:	4c3f      	ldr	r4, [pc, #252]	; (800f808 <RadioIrqProcess+0x2a4>)
 800f70c:	4669      	mov	r1, sp
 800f70e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800f710:	f001 faf8 	bl	8010d04 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800f714:	4b40      	ldr	r3, [pc, #256]	; (800f818 <RadioIrqProcess+0x2b4>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	689d      	ldr	r5, [r3, #8]
 800f71a:	9b00      	ldr	r3, [sp, #0]
 800f71c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f720:	4a41      	ldr	r2, [pc, #260]	; (800f828 <RadioIrqProcess+0x2c4>)
 800f722:	fb82 1203 	smull	r1, r2, r2, r3
 800f726:	17db      	asrs	r3, r3, #31
 800f728:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800f72c:	b25b      	sxtb	r3, r3
 800f72e:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 800f732:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f736:	483a      	ldr	r0, [pc, #232]	; (800f820 <RadioIrqProcess+0x2bc>)
 800f738:	47a8      	blx	r5
                break;
 800f73a:	e062      	b.n	800f802 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800f73c:	2000      	movs	r0, #0
 800f73e:	f000 fdab 	bl	8010298 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f742:	4b35      	ldr	r3, [pc, #212]	; (800f818 <RadioIrqProcess+0x2b4>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d05b      	beq.n	800f802 <RadioIrqProcess+0x29e>
 800f74a:	699b      	ldr	r3, [r3, #24]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d058      	beq.n	800f802 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 800f750:	2001      	movs	r0, #1
 800f752:	4798      	blx	r3
 800f754:	e055      	b.n	800f802 <RadioIrqProcess+0x29e>
 800f756:	4b2e      	ldr	r3, [pc, #184]	; (800f810 <RadioIrqProcess+0x2ac>)
 800f758:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f75c:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 800f75e:	482f      	ldr	r0, [pc, #188]	; (800f81c <RadioIrqProcess+0x2b8>)
 800f760:	f001 ff54 	bl	801160c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800f764:	2000      	movs	r0, #0
 800f766:	f000 fd97 	bl	8010298 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f76a:	4b2b      	ldr	r3, [pc, #172]	; (800f818 <RadioIrqProcess+0x2b4>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d047      	beq.n	800f802 <RadioIrqProcess+0x29e>
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d044      	beq.n	800f802 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 800f778:	4798      	blx	r3
 800f77a:	e042      	b.n	800f802 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800f77c:	4b2b      	ldr	r3, [pc, #172]	; (800f82c <RadioIrqProcess+0x2c8>)
 800f77e:	2201      	movs	r2, #1
 800f780:	2100      	movs	r1, #0
 800f782:	2002      	movs	r0, #2
 800f784:	f001 fbf0 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800f788:	4b1f      	ldr	r3, [pc, #124]	; (800f808 <RadioIrqProcess+0x2a4>)
 800f78a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800f78c:	b3c9      	cbz	r1, 800f802 <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800f78e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800f792:	f640 1003 	movw	r0, #2307	; 0x903
 800f796:	f7ff fe4f 	bl	800f438 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800f79a:	4c1b      	ldr	r4, [pc, #108]	; (800f808 <RadioIrqProcess+0x2a4>)
 800f79c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800f7a0:	f640 1004 	movw	r0, #2308	; 0x904
 800f7a4:	f7ff fe48 	bl	800f438 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800f7a8:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 800f7ac:	f640 1005 	movw	r0, #2309	; 0x905
 800f7b0:	f7ff fe42 	bl	800f438 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800f7b4:	f640 1002 	movw	r0, #2306	; 0x902
 800f7b8:	f7ff febf 	bl	800f53a <RadioRead>
 800f7bc:	f040 0101 	orr.w	r1, r0, #1
 800f7c0:	b2c9      	uxtb	r1, r1
 800f7c2:	f640 1002 	movw	r0, #2306	; 0x902
 800f7c6:	f7ff fe37 	bl	800f438 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f7ce:	4613      	mov	r3, r2
 800f7d0:	f240 2162 	movw	r1, #610	; 0x262
 800f7d4:	4608      	mov	r0, r1
 800f7d6:	f000 ff0c 	bl	80105f2 <SUBGRF_SetDioIrqParams>
 800f7da:	e012      	b.n	800f802 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800f7dc:	4b14      	ldr	r3, [pc, #80]	; (800f830 <RadioIrqProcess+0x2cc>)
 800f7de:	2201      	movs	r2, #1
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	2002      	movs	r0, #2
 800f7e4:	f001 fbc0 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800f7e8:	f001 fad7 	bl	8010d9a <RFW_Is_Init>
 800f7ec:	2801      	cmp	r0, #1
 800f7ee:	d108      	bne.n	800f802 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 800f7f0:	f001 fadf 	bl	8010db2 <RFW_ReceivePayload>
 800f7f4:	e005      	b.n	800f802 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800f7f6:	4b0f      	ldr	r3, [pc, #60]	; (800f834 <RadioIrqProcess+0x2d0>)
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	2100      	movs	r1, #0
 800f7fc:	2002      	movs	r0, #2
 800f7fe:	f001 fbb3 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
}
 800f802:	b003      	add	sp, #12
 800f804:	bd30      	pop	{r4, r5, pc}
 800f806:	bf00      	nop
 800f808:	20000d94 	.word	0x20000d94
 800f80c:	080128e4 	.word	0x080128e4
 800f810:	48000400 	.word	0x48000400
 800f814:	20000d7c 	.word	0x20000d7c
 800f818:	20000d78 	.word	0x20000d78
 800f81c:	20000df0 	.word	0x20000df0
 800f820:	20000c78 	.word	0x20000c78
 800f824:	20000db8 	.word	0x20000db8
 800f828:	10624dd3 	.word	0x10624dd3
 800f82c:	080128f8 	.word	0x080128f8
 800f830:	08012904 	.word	0x08012904
 800f834:	08012910 	.word	0x08012910
        TimerStop( &RxTimeoutTimer );
 800f838:	4817      	ldr	r0, [pc, #92]	; (800f898 <RadioIrqProcess+0x334>)
 800f83a:	f001 fee7 	bl	801160c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800f83e:	4b17      	ldr	r3, [pc, #92]	; (800f89c <RadioIrqProcess+0x338>)
 800f840:	785b      	ldrb	r3, [r3, #1]
 800f842:	b173      	cbz	r3, 800f862 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f844:	4b16      	ldr	r3, [pc, #88]	; (800f8a0 <RadioIrqProcess+0x33c>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d0da      	beq.n	800f802 <RadioIrqProcess+0x29e>
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d0d7      	beq.n	800f802 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 800f852:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800f854:	4b13      	ldr	r3, [pc, #76]	; (800f8a4 <RadioIrqProcess+0x340>)
 800f856:	2201      	movs	r2, #1
 800f858:	2100      	movs	r1, #0
 800f85a:	2002      	movs	r0, #2
 800f85c:	f001 fb84 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
 800f860:	e7cf      	b.n	800f802 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f862:	2000      	movs	r0, #0
 800f864:	f000 fd18 	bl	8010298 <SUBGRF_SetStandby>
 800f868:	e7ec      	b.n	800f844 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800f86a:	4b0f      	ldr	r3, [pc, #60]	; (800f8a8 <RadioIrqProcess+0x344>)
 800f86c:	2201      	movs	r2, #1
 800f86e:	2100      	movs	r1, #0
 800f870:	2002      	movs	r0, #2
 800f872:	f001 fb79 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800f876:	4b09      	ldr	r3, [pc, #36]	; (800f89c <RadioIrqProcess+0x338>)
 800f878:	785b      	ldrb	r3, [r3, #1]
 800f87a:	b143      	cbz	r3, 800f88e <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800f87c:	4b08      	ldr	r3, [pc, #32]	; (800f8a0 <RadioIrqProcess+0x33c>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d0be      	beq.n	800f802 <RadioIrqProcess+0x29e>
 800f884:	691b      	ldr	r3, [r3, #16]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d0bb      	beq.n	800f802 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 800f88a:	4798      	blx	r3
}
 800f88c:	e7b9      	b.n	800f802 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f88e:	2000      	movs	r0, #0
 800f890:	f000 fd02 	bl	8010298 <SUBGRF_SetStandby>
 800f894:	e7f2      	b.n	800f87c <RadioIrqProcess+0x318>
 800f896:	bf00      	nop
 800f898:	20000d7c 	.word	0x20000d7c
 800f89c:	20000d94 	.word	0x20000d94
 800f8a0:	20000d78 	.word	0x20000d78
 800f8a4:	0801291c 	.word	0x0801291c
 800f8a8:	08012928 	.word	0x08012928

0800f8ac <RadioOnDioIrq>:
{
 800f8ac:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800f8ae:	4b03      	ldr	r3, [pc, #12]	; (800f8bc <RadioOnDioIrq+0x10>)
 800f8b0:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 800f8b4:	f7ff fe56 	bl	800f564 <RadioIrqProcess>
}
 800f8b8:	bd08      	pop	{r3, pc}
 800f8ba:	bf00      	nop
 800f8bc:	20000d94 	.word	0x20000d94

0800f8c0 <RadioGetWakeupTime>:
{
 800f8c0:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800f8c2:	f001 f9a6 	bl	8010c12 <SUBGRF_GetRadioWakeUpTime>
}
 800f8c6:	3003      	adds	r0, #3
 800f8c8:	bd08      	pop	{r3, pc}
	...

0800f8cc <RadioSetMaxPayloadLength>:
{
 800f8cc:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800f8ce:	2801      	cmp	r0, #1
 800f8d0:	d004      	beq.n	800f8dc <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800f8d2:	4b0a      	ldr	r3, [pc, #40]	; (800f8fc <RadioSetMaxPayloadLength+0x30>)
 800f8d4:	7d5b      	ldrb	r3, [r3, #21]
 800f8d6:	2b01      	cmp	r3, #1
 800f8d8:	d008      	beq.n	800f8ec <RadioSetMaxPayloadLength+0x20>
}
 800f8da:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800f8dc:	4b08      	ldr	r3, [pc, #32]	; (800f900 <RadioSetMaxPayloadLength+0x34>)
 800f8de:	7019      	strb	r1, [r3, #0]
 800f8e0:	4806      	ldr	r0, [pc, #24]	; (800f8fc <RadioSetMaxPayloadLength+0x30>)
 800f8e2:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f8e4:	300e      	adds	r0, #14
 800f8e6:	f001 f853 	bl	8010990 <SUBGRF_SetPacketParams>
 800f8ea:	e7f6      	b.n	800f8da <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800f8ec:	4b04      	ldr	r3, [pc, #16]	; (800f900 <RadioSetMaxPayloadLength+0x34>)
 800f8ee:	7019      	strb	r1, [r3, #0]
 800f8f0:	4802      	ldr	r0, [pc, #8]	; (800f8fc <RadioSetMaxPayloadLength+0x30>)
 800f8f2:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f8f4:	300e      	adds	r0, #14
 800f8f6:	f001 f84b 	bl	8010990 <SUBGRF_SetPacketParams>
}
 800f8fa:	e7ee      	b.n	800f8da <RadioSetMaxPayloadLength+0xe>
 800f8fc:	20000d94 	.word	0x20000d94
 800f900:	2000010c 	.word	0x2000010c

0800f904 <RadioReadRegisters>:
{
 800f904:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800f906:	f000 fc5f 	bl	80101c8 <SUBGRF_ReadRegisters>
}
 800f90a:	bd08      	pop	{r3, pc}

0800f90c <RadioWriteRegisters>:
{
 800f90c:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800f90e:	f000 fc19 	bl	8010144 <SUBGRF_WriteRegisters>
}
 800f912:	bd08      	pop	{r3, pc}

0800f914 <RadioRssi>:
{
 800f914:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800f916:	f001 f8cb 	bl	8010ab0 <SUBGRF_GetRssiInst>
}
 800f91a:	b200      	sxth	r0, r0
 800f91c:	bd08      	pop	{r3, pc}
	...

0800f920 <RadioSetTxContinuousWave>:
{
 800f920:	b538      	push	{r3, r4, r5, lr}
 800f922:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800f924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f928:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 800f92c:	f000 fed4 	bl	80106d8 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800f930:	4628      	mov	r0, r5
 800f932:	f001 f957 	bl	8010be4 <SUBGRF_SetRfTxPower>
 800f936:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800f938:	210e      	movs	r1, #14
 800f93a:	f640 101f 	movw	r0, #2335	; 0x91f
 800f93e:	f000 fbb5 	bl	80100ac <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800f942:	2101      	movs	r1, #1
 800f944:	4628      	mov	r0, r5
 800f946:	f001 f939 	bl	8010bbc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800f94a:	f000 fd7f 	bl	801044c <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800f94e:	4d04      	ldr	r5, [pc, #16]	; (800f960 <RadioSetTxContinuousWave+0x40>)
 800f950:	4621      	mov	r1, r4
 800f952:	4628      	mov	r0, r5
 800f954:	f001 fefa 	bl	801174c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800f958:	4628      	mov	r0, r5
 800f95a:	f001 feb1 	bl	80116c0 <UTIL_TIMER_Start>
}
 800f95e:	bd38      	pop	{r3, r4, r5, pc}
 800f960:	20000df0 	.word	0x20000df0

0800f964 <RadioSetChannel>:
{
 800f964:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800f966:	f000 feb7 	bl	80106d8 <SUBGRF_SetRfFrequency>
}
 800f96a:	bd08      	pop	{r3, pc}

0800f96c <RadioStartCad>:
{
 800f96c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f96e:	2100      	movs	r1, #0
 800f970:	4b07      	ldr	r3, [pc, #28]	; (800f990 <RadioStartCad+0x24>)
 800f972:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800f976:	f001 f921 	bl	8010bbc <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800f97a:	2300      	movs	r3, #0
 800f97c:	461a      	mov	r2, r3
 800f97e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800f982:	4608      	mov	r0, r1
 800f984:	f000 fe35 	bl	80105f2 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800f988:	f000 fd54 	bl	8010434 <SUBGRF_SetCad>
}
 800f98c:	bd08      	pop	{r3, pc}
 800f98e:	bf00      	nop
 800f990:	20000d94 	.word	0x20000d94

0800f994 <RadioRx>:
{
 800f994:	b538      	push	{r3, r4, r5, lr}
 800f996:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 800f998:	f001 f9ff 	bl	8010d9a <RFW_Is_Init>
 800f99c:	2801      	cmp	r0, #1
 800f99e:	d019      	beq.n	800f9d4 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	f240 2162 	movw	r1, #610	; 0x262
 800f9a8:	4608      	mov	r0, r1
 800f9aa:	f000 fe22 	bl	80105f2 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800f9ae:	b9a4      	cbnz	r4, 800f9da <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800f9b0:	4c11      	ldr	r4, [pc, #68]	; (800f9f8 <RadioRx+0x64>)
 800f9b2:	2100      	movs	r1, #0
 800f9b4:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800f9b6:	4b11      	ldr	r3, [pc, #68]	; (800f9fc <RadioRx+0x68>)
 800f9b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f9bc:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f9be:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800f9c2:	f001 f8fb 	bl	8010bbc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800f9c6:	7863      	ldrb	r3, [r4, #1]
 800f9c8:	b183      	cbz	r3, 800f9ec <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800f9ca:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800f9ce:	f000 fc9f 	bl	8010310 <SUBGRF_SetRx>
}
 800f9d2:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 800f9d4:	f001 f9e9 	bl	8010daa <RFW_ReceiveInit>
 800f9d8:	e7e9      	b.n	800f9ae <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f9da:	4d09      	ldr	r5, [pc, #36]	; (800fa00 <RadioRx+0x6c>)
 800f9dc:	4621      	mov	r1, r4
 800f9de:	4628      	mov	r0, r5
 800f9e0:	f001 feb4 	bl	801174c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800f9e4:	4628      	mov	r0, r5
 800f9e6:	f001 fe6b 	bl	80116c0 <UTIL_TIMER_Start>
 800f9ea:	e7e1      	b.n	800f9b0 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800f9ec:	4b02      	ldr	r3, [pc, #8]	; (800f9f8 <RadioRx+0x64>)
 800f9ee:	6898      	ldr	r0, [r3, #8]
 800f9f0:	0180      	lsls	r0, r0, #6
 800f9f2:	f000 fc8d 	bl	8010310 <SUBGRF_SetRx>
}
 800f9f6:	e7ec      	b.n	800f9d2 <RadioRx+0x3e>
 800f9f8:	20000d94 	.word	0x20000d94
 800f9fc:	48000400 	.word	0x48000400
 800fa00:	20000d7c 	.word	0x20000d7c

0800fa04 <RadioSleep>:
{
 800fa04:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800fa06:	f04f 0004 	mov.w	r0, #4
 800fa0a:	f000 fc25 	bl	8010258 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800fa0e:	2002      	movs	r0, #2
 800fa10:	f7f1 fe7e 	bl	8001710 <HAL_Delay>
}
 800fa14:	bd08      	pop	{r3, pc}
	...

0800fa18 <RadioSend>:
{
 800fa18:	b570      	push	{r4, r5, r6, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	4605      	mov	r5, r0
 800fa1e:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800fa20:	2300      	movs	r3, #0
 800fa22:	461a      	mov	r2, r3
 800fa24:	f240 2101 	movw	r1, #513	; 0x201
 800fa28:	4608      	mov	r0, r1
 800fa2a:	f000 fde2 	bl	80105f2 <SUBGRF_SetDioIrqParams>
 800fa2e:	4b3f      	ldr	r3, [pc, #252]	; (800fb2c <RadioSend+0x114>)
 800fa30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fa34:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800fa36:	4e3e      	ldr	r6, [pc, #248]	; (800fb30 <RadioSend+0x118>)
 800fa38:	2101      	movs	r1, #1
 800fa3a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800fa3e:	f001 f8bd 	bl	8010bbc <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800fa42:	7833      	ldrb	r3, [r6, #0]
 800fa44:	2b01      	cmp	r3, #1
 800fa46:	d103      	bne.n	800fa50 <RadioSend+0x38>
 800fa48:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 800fa4c:	2b06      	cmp	r3, #6
 800fa4e:	d012      	beq.n	800fa76 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800fa50:	f640 0089 	movw	r0, #2185	; 0x889
 800fa54:	f000 fb3a 	bl	80100cc <SUBGRF_ReadRegister>
 800fa58:	f040 0104 	orr.w	r1, r0, #4
 800fa5c:	b2c9      	uxtb	r1, r1
 800fa5e:	f640 0089 	movw	r0, #2185	; 0x889
 800fa62:	f000 fb23 	bl	80100ac <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 800fa66:	4b32      	ldr	r3, [pc, #200]	; (800fb30 <RadioSend+0x118>)
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	2b03      	cmp	r3, #3
 800fa6c:	d818      	bhi.n	800faa0 <RadioSend+0x88>
 800fa6e:	e8df f003 	tbb	[pc, r3]
 800fa72:	0d23      	.short	0x0d23
 800fa74:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800fa76:	f640 0089 	movw	r0, #2185	; 0x889
 800fa7a:	f000 fb27 	bl	80100cc <SUBGRF_ReadRegister>
 800fa7e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800fa82:	f640 0089 	movw	r0, #2185	; 0x889
 800fa86:	f000 fb11 	bl	80100ac <SUBGRF_WriteRegister>
 800fa8a:	e7ec      	b.n	800fa66 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800fa8c:	4828      	ldr	r0, [pc, #160]	; (800fb30 <RadioSend+0x118>)
 800fa8e:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fa90:	300e      	adds	r0, #14
 800fa92:	f000 ff7d 	bl	8010990 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800fa96:	2200      	movs	r2, #0
 800fa98:	4621      	mov	r1, r4
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	f000 fc30 	bl	8010300 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800faa0:	4c24      	ldr	r4, [pc, #144]	; (800fb34 <RadioSend+0x11c>)
 800faa2:	4b23      	ldr	r3, [pc, #140]	; (800fb30 <RadioSend+0x118>)
 800faa4:	6859      	ldr	r1, [r3, #4]
 800faa6:	4620      	mov	r0, r4
 800faa8:	f001 fe50 	bl	801174c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800faac:	4620      	mov	r0, r4
 800faae:	f001 fe07 	bl	80116c0 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 800fab2:	2000      	movs	r0, #0
}
 800fab4:	b002      	add	sp, #8
 800fab6:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800fab8:	f001 f96f 	bl	8010d9a <RFW_Is_Init>
 800fabc:	2801      	cmp	r0, #1
 800fabe:	d00a      	beq.n	800fad6 <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800fac0:	481b      	ldr	r0, [pc, #108]	; (800fb30 <RadioSend+0x118>)
 800fac2:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fac4:	300e      	adds	r0, #14
 800fac6:	f000 ff63 	bl	8010990 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800faca:	2200      	movs	r2, #0
 800facc:	4621      	mov	r1, r4
 800face:	4628      	mov	r0, r5
 800fad0:	f000 fc16 	bl	8010300 <SUBGRF_SendPayload>
 800fad4:	e7e4      	b.n	800faa0 <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800fad6:	f10d 0207 	add.w	r2, sp, #7
 800fada:	4621      	mov	r1, r4
 800fadc:	4628      	mov	r0, r5
 800fade:	f001 f961 	bl	8010da4 <RFW_TransmitInit>
 800fae2:	b968      	cbnz	r0, 800fb00 <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800fae4:	4812      	ldr	r0, [pc, #72]	; (800fb30 <RadioSend+0x118>)
 800fae6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800faea:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800faec:	300e      	adds	r0, #14
 800faee:	f000 ff4f 	bl	8010990 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800faf2:	2200      	movs	r2, #0
 800faf4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800faf8:	4628      	mov	r0, r5
 800fafa:	f000 fc01 	bl	8010300 <SUBGRF_SendPayload>
 800fafe:	e7cf      	b.n	800faa0 <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 800fb00:	4b0d      	ldr	r3, [pc, #52]	; (800fb38 <RadioSend+0x120>)
 800fb02:	2201      	movs	r2, #1
 800fb04:	2100      	movs	r1, #0
 800fb06:	2002      	movs	r0, #2
 800fb08:	f001 fa2e 	bl	8010f68 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 800fb0c:	2003      	movs	r0, #3
 800fb0e:	e7d1      	b.n	800fab4 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800fb10:	4807      	ldr	r0, [pc, #28]	; (800fb30 <RadioSend+0x118>)
 800fb12:	2302      	movs	r3, #2
 800fb14:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800fb16:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fb18:	300e      	adds	r0, #14
 800fb1a:	f000 ff39 	bl	8010990 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800fb1e:	2200      	movs	r2, #0
 800fb20:	4621      	mov	r1, r4
 800fb22:	4628      	mov	r0, r5
 800fb24:	f000 fbec 	bl	8010300 <SUBGRF_SendPayload>
            break;
 800fb28:	e7ba      	b.n	800faa0 <RadioSend+0x88>
 800fb2a:	bf00      	nop
 800fb2c:	48000400 	.word	0x48000400
 800fb30:	20000d94 	.word	0x20000d94
 800fb34:	20000df0 	.word	0x20000df0
 800fb38:	08012938 	.word	0x08012938

0800fb3c <RadioRandom>:
{
 800fb3c:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800fb3e:	2300      	movs	r3, #0
 800fb40:	461a      	mov	r2, r3
 800fb42:	4619      	mov	r1, r3
 800fb44:	4618      	mov	r0, r3
 800fb46:	f000 fd54 	bl	80105f2 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 800fb4a:	f000 fbfb 	bl	8010344 <SUBGRF_GetRandom>
}
 800fb4e:	bd08      	pop	{r3, pc}

0800fb50 <RadioSetModem>:
{
 800fb50:	b510      	push	{r4, lr}
 800fb52:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800fb54:	4b14      	ldr	r3, [pc, #80]	; (800fba8 <RadioSetModem+0x58>)
 800fb56:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 800fb58:	f001 f92c 	bl	8010db4 <RFW_SetRadioModem>
    switch( modem )
 800fb5c:	2c01      	cmp	r4, #1
 800fb5e:	d010      	beq.n	800fb82 <RadioSetModem+0x32>
 800fb60:	2c03      	cmp	r4, #3
 800fb62:	d01a      	beq.n	800fb9a <RadioSetModem+0x4a>
 800fb64:	b134      	cbz	r4, 800fb74 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800fb66:	2003      	movs	r0, #3
 800fb68:	f000 fde2 	bl	8010730 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fb6c:	4b0e      	ldr	r3, [pc, #56]	; (800fba8 <RadioSetModem+0x58>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	735a      	strb	r2, [r3, #13]
}
 800fb72:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800fb74:	2000      	movs	r0, #0
 800fb76:	f000 fddb 	bl	8010730 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fb7a:	4b0b      	ldr	r3, [pc, #44]	; (800fba8 <RadioSetModem+0x58>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	735a      	strb	r2, [r3, #13]
        break;
 800fb80:	e7f7      	b.n	800fb72 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800fb82:	2001      	movs	r0, #1
 800fb84:	f000 fdd4 	bl	8010730 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800fb88:	4b07      	ldr	r3, [pc, #28]	; (800fba8 <RadioSetModem+0x58>)
 800fb8a:	7b5a      	ldrb	r2, [r3, #13]
 800fb8c:	7b18      	ldrb	r0, [r3, #12]
 800fb8e:	4282      	cmp	r2, r0
 800fb90:	d0ef      	beq.n	800fb72 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800fb92:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800fb94:	f000 f80a 	bl	800fbac <RadioSetPublicNetwork>
 800fb98:	e7eb      	b.n	800fb72 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800fb9a:	2002      	movs	r0, #2
 800fb9c:	f000 fdc8 	bl	8010730 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fba0:	4b01      	ldr	r3, [pc, #4]	; (800fba8 <RadioSetModem+0x58>)
 800fba2:	2200      	movs	r2, #0
 800fba4:	735a      	strb	r2, [r3, #13]
}
 800fba6:	e7e4      	b.n	800fb72 <RadioSetModem+0x22>
 800fba8:	20000d94 	.word	0x20000d94

0800fbac <RadioSetPublicNetwork>:
{
 800fbac:	b510      	push	{r4, lr}
 800fbae:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800fbb0:	4b0e      	ldr	r3, [pc, #56]	; (800fbec <RadioSetPublicNetwork+0x40>)
 800fbb2:	7318      	strb	r0, [r3, #12]
 800fbb4:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800fbb6:	2001      	movs	r0, #1
 800fbb8:	f7ff ffca 	bl	800fb50 <RadioSetModem>
    if( enable == true )
 800fbbc:	b154      	cbz	r4, 800fbd4 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800fbbe:	2134      	movs	r1, #52	; 0x34
 800fbc0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800fbc4:	f000 fa72 	bl	80100ac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800fbc8:	2144      	movs	r1, #68	; 0x44
 800fbca:	f240 7041 	movw	r0, #1857	; 0x741
 800fbce:	f000 fa6d 	bl	80100ac <SUBGRF_WriteRegister>
}
 800fbd2:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800fbd4:	2114      	movs	r1, #20
 800fbd6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800fbda:	f000 fa67 	bl	80100ac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800fbde:	2124      	movs	r1, #36	; 0x24
 800fbe0:	f240 7041 	movw	r0, #1857	; 0x741
 800fbe4:	f000 fa62 	bl	80100ac <SUBGRF_WriteRegister>
}
 800fbe8:	e7f3      	b.n	800fbd2 <RadioSetPublicNetwork+0x26>
 800fbea:	bf00      	nop
 800fbec:	20000d94 	.word	0x20000d94

0800fbf0 <RadioSetTxConfig>:
{
 800fbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf4:	b083      	sub	sp, #12
 800fbf6:	4604      	mov	r4, r0
 800fbf8:	460e      	mov	r6, r1
 800fbfa:	4617      	mov	r7, r2
 800fbfc:	461d      	mov	r5, r3
 800fbfe:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 800fc02:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 800fc06:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 800fc0a:	f001 f8c5 	bl	8010d98 <RFW_DeInit>
    switch( modem )
 800fc0e:	b1ac      	cbz	r4, 800fc3c <RadioSetTxConfig+0x4c>
 800fc10:	2c01      	cmp	r4, #1
 800fc12:	d05a      	beq.n	800fcca <RadioSetTxConfig+0xda>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800fc14:	4630      	mov	r0, r6
 800fc16:	f000 ffe5 	bl	8010be4 <SUBGRF_SetRfTxPower>
 800fc1a:	4c55      	ldr	r4, [pc, #340]	; (800fd70 <RadioSetTxConfig+0x180>)
 800fc1c:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800fc20:	210e      	movs	r1, #14
 800fc22:	f640 101f 	movw	r0, #2335	; 0x91f
 800fc26:	f000 fa41 	bl	80100ac <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800fc2a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800fc2e:	f001 f8b8 	bl	8010da2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800fc32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc34:	6063      	str	r3, [r4, #4]
}
 800fc36:	b003      	add	sp, #12
 800fc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800fc3c:	4c4c      	ldr	r4, [pc, #304]	; (800fd70 <RadioSetTxConfig+0x180>)
 800fc3e:	f04f 0b00 	mov.w	fp, #0
 800fc42:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800fc46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc48:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800fc4a:	230b      	movs	r3, #11
 800fc4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800fc50:	4628      	mov	r0, r5
 800fc52:	f001 f83f 	bl	8010cd4 <SUBGRF_GetFskBandwidthRegValue>
 800fc56:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800fc5a:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800fc5c:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800fc60:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800fc64:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800fc68:	2304      	movs	r3, #4
 800fc6a:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800fc6c:	2318      	movs	r3, #24
 800fc6e:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800fc70:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800fc74:	f089 0901 	eor.w	r9, r9, #1
 800fc78:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 800fc7c:	f1ba 0f00 	cmp.w	sl, #0
 800fc80:	d01f      	beq.n	800fcc2 <RadioSetTxConfig+0xd2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800fc82:	22f2      	movs	r2, #242	; 0xf2
 800fc84:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800fc86:	4c3a      	ldr	r4, [pc, #232]	; (800fd70 <RadioSetTxConfig+0x180>)
 800fc88:	2301      	movs	r3, #1
 800fc8a:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800fc8c:	f7ff fc50 	bl	800f530 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800fc90:	2000      	movs	r0, #0
 800fc92:	f7ff ff5d 	bl	800fb50 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fc96:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800fc9a:	f000 fdf1 	bl	8010880 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fc9e:	f104 000e 	add.w	r0, r4, #14
 800fca2:	f000 fe75 	bl	8010990 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800fca6:	4a33      	ldr	r2, [pc, #204]	; (800fd74 <RadioSetTxConfig+0x184>)
 800fca8:	466b      	mov	r3, sp
 800fcaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fcae:	e883 0003 	stmia.w	r3, {r0, r1}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f000 fa56 	bl	8010164 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800fcb8:	f240 10ff 	movw	r0, #511	; 0x1ff
 800fcbc:	f000 fa29 	bl	8010112 <SUBGRF_SetWhiteningSeed>
            break;
 800fcc0:	e7a8      	b.n	800fc14 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800fcc2:	4b2b      	ldr	r3, [pc, #172]	; (800fd70 <RadioSetTxConfig+0x180>)
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	75da      	strb	r2, [r3, #23]
 800fcc8:	e7dd      	b.n	800fc86 <RadioSetTxConfig+0x96>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800fcca:	4a29      	ldr	r2, [pc, #164]	; (800fd70 <RadioSetTxConfig+0x180>)
 800fccc:	2301      	movs	r3, #1
 800fcce:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800fcd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800fcda:	4927      	ldr	r1, [pc, #156]	; (800fd78 <RadioSetTxConfig+0x188>)
 800fcdc:	5d49      	ldrb	r1, [r1, r5]
 800fcde:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800fce2:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 800fce6:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800fcea:	b91d      	cbnz	r5, 800fcf4 <RadioSetTxConfig+0x104>
 800fcec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fcee:	3a0b      	subs	r2, #11
 800fcf0:	2a01      	cmp	r2, #1
 800fcf2:	d92c      	bls.n	800fd4e <RadioSetTxConfig+0x15e>
 800fcf4:	2d01      	cmp	r5, #1
 800fcf6:	d027      	beq.n	800fd48 <RadioSetTxConfig+0x158>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800fcf8:	4a1d      	ldr	r2, [pc, #116]	; (800fd70 <RadioSetTxConfig+0x180>)
 800fcfa:	2100      	movs	r1, #0
 800fcfc:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800fd00:	4a1b      	ldr	r2, [pc, #108]	; (800fd70 <RadioSetTxConfig+0x180>)
 800fd02:	2101      	movs	r1, #1
 800fd04:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800fd06:	3b05      	subs	r3, #5
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	428b      	cmp	r3, r1
 800fd0c:	d924      	bls.n	800fd58 <RadioSetTxConfig+0x168>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800fd0e:	4b18      	ldr	r3, [pc, #96]	; (800fd70 <RadioSetTxConfig+0x180>)
 800fd10:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800fd14:	4c16      	ldr	r4, [pc, #88]	; (800fd70 <RadioSetTxConfig+0x180>)
 800fd16:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800fd1a:	4b18      	ldr	r3, [pc, #96]	; (800fd7c <RadioSetTxConfig+0x18c>)
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800fd20:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800fd24:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800fd28:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800fd2c:	f7ff fc00 	bl	800f530 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800fd30:	2001      	movs	r0, #1
 800fd32:	f7ff ff0d 	bl	800fb50 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fd36:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800fd3a:	f000 fda1 	bl	8010880 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fd3e:	f104 000e 	add.w	r0, r4, #14
 800fd42:	f000 fe25 	bl	8010990 <SUBGRF_SetPacketParams>
            break;
 800fd46:	e765      	b.n	800fc14 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800fd48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd4a:	2a0c      	cmp	r2, #12
 800fd4c:	d1d4      	bne.n	800fcf8 <RadioSetTxConfig+0x108>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800fd4e:	4a08      	ldr	r2, [pc, #32]	; (800fd70 <RadioSetTxConfig+0x180>)
 800fd50:	2101      	movs	r1, #1
 800fd52:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800fd56:	e7d3      	b.n	800fd00 <RadioSetTxConfig+0x110>
                if( preambleLen < 12 )
 800fd58:	f1b8 0f0b 	cmp.w	r8, #11
 800fd5c:	d803      	bhi.n	800fd66 <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800fd5e:	4613      	mov	r3, r2
 800fd60:	220c      	movs	r2, #12
 800fd62:	839a      	strh	r2, [r3, #28]
 800fd64:	e7d6      	b.n	800fd14 <RadioSetTxConfig+0x124>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800fd66:	4b02      	ldr	r3, [pc, #8]	; (800fd70 <RadioSetTxConfig+0x180>)
 800fd68:	f8a3 801c 	strh.w	r8, [r3, #28]
 800fd6c:	e7d2      	b.n	800fd14 <RadioSetTxConfig+0x124>
 800fd6e:	bf00      	nop
 800fd70:	20000d94 	.word	0x20000d94
 800fd74:	08011c98 	.word	0x08011c98
 800fd78:	08012950 	.word	0x08012950
 800fd7c:	2000010c 	.word	0x2000010c

0800fd80 <RadioSetRxConfig>:
{
 800fd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd84:	b085      	sub	sp, #20
 800fd86:	4604      	mov	r4, r0
 800fd88:	460d      	mov	r5, r1
 800fd8a:	4616      	mov	r6, r2
 800fd8c:	9301      	str	r3, [sp, #4]
 800fd8e:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 800fd92:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 800fd96:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 800fd9a:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 800fd9e:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 800fda2:	4b73      	ldr	r3, [pc, #460]	; (800ff70 <RadioSetRxConfig+0x1f0>)
 800fda4:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 800fda8:	f000 fff6 	bl	8010d98 <RFW_DeInit>
    if( rxContinuous == true )
 800fdac:	f1b8 0f00 	cmp.w	r8, #0
 800fdb0:	d001      	beq.n	800fdb6 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 800fdb2:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800fdb6:	b14f      	cbz	r7, 800fdcc <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 800fdb8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800fdbc:	4b6d      	ldr	r3, [pc, #436]	; (800ff74 <RadioSetRxConfig+0x1f4>)
 800fdbe:	701a      	strb	r2, [r3, #0]
    switch( modem )
 800fdc0:	b144      	cbz	r4, 800fdd4 <RadioSetRxConfig+0x54>
 800fdc2:	2c01      	cmp	r4, #1
 800fdc4:	d057      	beq.n	800fe76 <RadioSetRxConfig+0xf6>
}
 800fdc6:	b005      	add	sp, #20
 800fdc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800fdcc:	4b69      	ldr	r3, [pc, #420]	; (800ff74 <RadioSetRxConfig+0x1f4>)
 800fdce:	22ff      	movs	r2, #255	; 0xff
 800fdd0:	701a      	strb	r2, [r3, #0]
 800fdd2:	e7f5      	b.n	800fdc0 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800fdd4:	2000      	movs	r0, #0
 800fdd6:	f000 fb47 	bl	8010468 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800fdda:	4c65      	ldr	r4, [pc, #404]	; (800ff70 <RadioSetRxConfig+0x1f0>)
 800fddc:	f04f 0800 	mov.w	r8, #0
 800fde0:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800fde4:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800fde6:	230b      	movs	r3, #11
 800fde8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800fdec:	4628      	mov	r0, r5
 800fdee:	f000 ff71 	bl	8010cd4 <SUBGRF_GetFskBandwidthRegValue>
 800fdf2:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800fdf6:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800fdfa:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800fdfe:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800fe02:	2304      	movs	r3, #4
 800fe04:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800fe06:	2318      	movs	r3, #24
 800fe08:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800fe0a:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800fe0e:	f087 0701 	eor.w	r7, r7, #1
 800fe12:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800fe14:	4b57      	ldr	r3, [pc, #348]	; (800ff74 <RadioSetRxConfig+0x1f4>)
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 800fe1a:	f1bb 0f00 	cmp.w	fp, #0
 800fe1e:	d026      	beq.n	800fe6e <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800fe20:	22f2      	movs	r2, #242	; 0xf2
 800fe22:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800fe24:	4c52      	ldr	r4, [pc, #328]	; (800ff70 <RadioSetRxConfig+0x1f0>)
 800fe26:	2301      	movs	r3, #1
 800fe28:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800fe2a:	f7ff fb81 	bl	800f530 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800fe2e:	2000      	movs	r0, #0
 800fe30:	f7ff fe8e 	bl	800fb50 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fe34:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800fe38:	f000 fd22 	bl	8010880 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fe3c:	f104 000e 	add.w	r0, r4, #14
 800fe40:	f000 fda6 	bl	8010990 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800fe44:	4a4c      	ldr	r2, [pc, #304]	; (800ff78 <RadioSetRxConfig+0x1f8>)
 800fe46:	ab02      	add	r3, sp, #8
 800fe48:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe4c:	e883 0003 	stmia.w	r3, {r0, r1}
 800fe50:	4618      	mov	r0, r3
 800fe52:	f000 f987 	bl	8010164 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800fe56:	f240 10ff 	movw	r0, #511	; 0x1ff
 800fe5a:	f000 f95a 	bl	8010112 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800fe5e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800fe62:	fb03 f30a 	mul.w	r3, r3, sl
 800fe66:	fbb3 f3f6 	udiv	r3, r3, r6
 800fe6a:	60a3      	str	r3, [r4, #8]
            break;
 800fe6c:	e7ab      	b.n	800fdc6 <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800fe6e:	4b40      	ldr	r3, [pc, #256]	; (800ff70 <RadioSetRxConfig+0x1f0>)
 800fe70:	2201      	movs	r2, #1
 800fe72:	75da      	strb	r2, [r3, #23]
 800fe74:	e7d6      	b.n	800fe24 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800fe76:	2000      	movs	r0, #0
 800fe78:	f000 faf6 	bl	8010468 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800fe7c:	4a3c      	ldr	r2, [pc, #240]	; (800ff70 <RadioSetRxConfig+0x1f0>)
 800fe7e:	2301      	movs	r3, #1
 800fe80:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800fe84:	b2f3      	uxtb	r3, r6
 800fe86:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800fe8a:	493c      	ldr	r1, [pc, #240]	; (800ff7c <RadioSetRxConfig+0x1fc>)
 800fe8c:	5d49      	ldrb	r1, [r1, r5]
 800fe8e:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800fe92:	9901      	ldr	r1, [sp, #4]
 800fe94:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800fe98:	b91d      	cbnz	r5, 800fea2 <RadioSetRxConfig+0x122>
 800fe9a:	f1a6 020b 	sub.w	r2, r6, #11
 800fe9e:	2a01      	cmp	r2, #1
 800fea0:	d94b      	bls.n	800ff3a <RadioSetRxConfig+0x1ba>
 800fea2:	2d01      	cmp	r5, #1
 800fea4:	d047      	beq.n	800ff36 <RadioSetRxConfig+0x1b6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800fea6:	4a32      	ldr	r2, [pc, #200]	; (800ff70 <RadioSetRxConfig+0x1f0>)
 800fea8:	2100      	movs	r1, #0
 800feaa:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800feae:	4a30      	ldr	r2, [pc, #192]	; (800ff70 <RadioSetRxConfig+0x1f0>)
 800feb0:	2101      	movs	r1, #1
 800feb2:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800feb4:	3b05      	subs	r3, #5
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	428b      	cmp	r3, r1
 800feba:	d943      	bls.n	800ff44 <RadioSetRxConfig+0x1c4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800febc:	4b2c      	ldr	r3, [pc, #176]	; (800ff70 <RadioSetRxConfig+0x1f0>)
 800febe:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800fec2:	4c2b      	ldr	r4, [pc, #172]	; (800ff70 <RadioSetRxConfig+0x1f0>)
 800fec4:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800fec6:	4b2b      	ldr	r3, [pc, #172]	; (800ff74 <RadioSetRxConfig+0x1f4>)
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800fecc:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800fed0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800fed4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800fed8:	f7ff fb2a 	bl	800f530 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800fedc:	2001      	movs	r0, #1
 800fede:	f7ff fe37 	bl	800fb50 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fee2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800fee6:	f000 fccb 	bl	8010880 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800feea:	f104 000e 	add.w	r0, r4, #14
 800feee:	f000 fd4f 	bl	8010990 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800fef2:	fa5f f08a 	uxtb.w	r0, sl
 800fef6:	f000 fac4 	bl	8010482 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800fefa:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800fefe:	f000 f8e5 	bl	80100cc <SUBGRF_ReadRegister>
 800ff02:	f000 0101 	and.w	r1, r0, #1
 800ff06:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800ff0a:	f000 f8cf 	bl	80100ac <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800ff0e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d021      	beq.n	800ff5a <RadioSetRxConfig+0x1da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800ff16:	f240 7036 	movw	r0, #1846	; 0x736
 800ff1a:	f000 f8d7 	bl	80100cc <SUBGRF_ReadRegister>
 800ff1e:	f040 0104 	orr.w	r1, r0, #4
 800ff22:	b2c9      	uxtb	r1, r1
 800ff24:	f240 7036 	movw	r0, #1846	; 0x736
 800ff28:	f000 f8c0 	bl	80100ac <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800ff2c:	4b10      	ldr	r3, [pc, #64]	; (800ff70 <RadioSetRxConfig+0x1f0>)
 800ff2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff32:	609a      	str	r2, [r3, #8]
}
 800ff34:	e747      	b.n	800fdc6 <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800ff36:	2e0c      	cmp	r6, #12
 800ff38:	d1b5      	bne.n	800fea6 <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800ff3a:	4a0d      	ldr	r2, [pc, #52]	; (800ff70 <RadioSetRxConfig+0x1f0>)
 800ff3c:	2101      	movs	r1, #1
 800ff3e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800ff42:	e7b4      	b.n	800feae <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 800ff44:	f1b9 0f0b 	cmp.w	r9, #11
 800ff48:	d803      	bhi.n	800ff52 <RadioSetRxConfig+0x1d2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	220c      	movs	r2, #12
 800ff4e:	839a      	strh	r2, [r3, #28]
 800ff50:	e7b7      	b.n	800fec2 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800ff52:	4b07      	ldr	r3, [pc, #28]	; (800ff70 <RadioSetRxConfig+0x1f0>)
 800ff54:	f8a3 901c 	strh.w	r9, [r3, #28]
 800ff58:	e7b3      	b.n	800fec2 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800ff5a:	f240 7036 	movw	r0, #1846	; 0x736
 800ff5e:	f000 f8b5 	bl	80100cc <SUBGRF_ReadRegister>
 800ff62:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800ff66:	f240 7036 	movw	r0, #1846	; 0x736
 800ff6a:	f000 f89f 	bl	80100ac <SUBGRF_WriteRegister>
 800ff6e:	e7dd      	b.n	800ff2c <RadioSetRxConfig+0x1ac>
 800ff70:	20000d94 	.word	0x20000d94
 800ff74:	2000010c 	.word	0x2000010c
 800ff78:	08011c98 	.word	0x08011c98
 800ff7c:	08012950 	.word	0x08012950

0800ff80 <RadioIsChannelFree>:
{
 800ff80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff82:	b08b      	sub	sp, #44	; 0x2c
 800ff84:	4604      	mov	r4, r0
 800ff86:	460f      	mov	r7, r1
 800ff88:	4616      	mov	r6, r2
 800ff8a:	461d      	mov	r5, r3
    RadioStandby( );
 800ff8c:	f7ff fad0 	bl	800f530 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 800ff90:	2000      	movs	r0, #0
 800ff92:	f7ff fddd 	bl	800fb50 <RadioSetModem>
    RadioSetChannel( freq );
 800ff96:	4620      	mov	r0, r4
 800ff98:	f7ff fce4 	bl	800f964 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	9309      	str	r3, [sp, #36]	; 0x24
 800ffa0:	2400      	movs	r4, #0
 800ffa2:	9408      	str	r4, [sp, #32]
 800ffa4:	9407      	str	r4, [sp, #28]
 800ffa6:	9406      	str	r4, [sp, #24]
 800ffa8:	9405      	str	r4, [sp, #20]
 800ffaa:	9404      	str	r4, [sp, #16]
 800ffac:	9403      	str	r4, [sp, #12]
 800ffae:	9402      	str	r4, [sp, #8]
 800ffb0:	2303      	movs	r3, #3
 800ffb2:	9301      	str	r3, [sp, #4]
 800ffb4:	9700      	str	r7, [sp, #0]
 800ffb6:	4623      	mov	r3, r4
 800ffb8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ffbc:	4639      	mov	r1, r7
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f7ff fede 	bl	800fd80 <RadioSetRxConfig>
    RadioRx( 0 );
 800ffc4:	4620      	mov	r0, r4
 800ffc6:	f7ff fce5 	bl	800f994 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800ffca:	f7ff fc79 	bl	800f8c0 <RadioGetWakeupTime>
 800ffce:	f7f1 fb9f 	bl	8001710 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800ffd2:	f001 fadb 	bl	801158c <UTIL_TIMER_GetCurrentTime>
 800ffd6:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800ffd8:	4620      	mov	r0, r4
 800ffda:	f001 fae1 	bl	80115a0 <UTIL_TIMER_GetElapsedTime>
 800ffde:	42a8      	cmp	r0, r5
 800ffe0:	d206      	bcs.n	800fff0 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800ffe2:	2000      	movs	r0, #0
 800ffe4:	f7ff fc96 	bl	800f914 <RadioRssi>
        if( rssi > rssiThresh )
 800ffe8:	42b0      	cmp	r0, r6
 800ffea:	ddf5      	ble.n	800ffd8 <RadioIsChannelFree+0x58>
            status = false;
 800ffec:	2400      	movs	r4, #0
 800ffee:	e000      	b.n	800fff2 <RadioIsChannelFree+0x72>
    bool status = true;
 800fff0:	2401      	movs	r4, #1
    RadioStandby( );
 800fff2:	f7ff fa9d 	bl	800f530 <RadioStandby>
}
 800fff6:	4620      	mov	r0, r4
 800fff8:	b00b      	add	sp, #44	; 0x2c
 800fffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fffc <RadioInit>:
{
 800fffc:	b570      	push	{r4, r5, r6, lr}
 800fffe:	b082      	sub	sp, #8
    RadioEvents = events;
 8010000:	4b1d      	ldr	r3, [pc, #116]	; (8010078 <RadioInit+0x7c>)
 8010002:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8010004:	4d1d      	ldr	r5, [pc, #116]	; (801007c <RadioInit+0x80>)
 8010006:	2400      	movs	r4, #0
 8010008:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 801000a:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 801000c:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801000e:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8010010:	481b      	ldr	r0, [pc, #108]	; (8010080 <RadioInit+0x84>)
 8010012:	f000 fb27 	bl	8010664 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8010016:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8010018:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 801001a:	f000 fa53 	bl	80104c4 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801001e:	4621      	mov	r1, r4
 8010020:	4620      	mov	r0, r4
 8010022:	f000 fd27 	bl	8010a74 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8010026:	2204      	movs	r2, #4
 8010028:	4621      	mov	r1, r4
 801002a:	2001      	movs	r0, #1
 801002c:	f000 fb9a 	bl	8010764 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010030:	4623      	mov	r3, r4
 8010032:	4622      	mov	r2, r4
 8010034:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010038:	4608      	mov	r0, r1
 801003a:	f000 fada 	bl	80105f2 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 801003e:	f7ff fce1 	bl	800fa04 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8010042:	4e10      	ldr	r6, [pc, #64]	; (8010084 <RadioInit+0x88>)
 8010044:	9400      	str	r4, [sp, #0]
 8010046:	4b10      	ldr	r3, [pc, #64]	; (8010088 <RadioInit+0x8c>)
 8010048:	4622      	mov	r2, r4
 801004a:	f04f 31ff 	mov.w	r1, #4294967295
 801004e:	4630      	mov	r0, r6
 8010050:	f001 fa7e 	bl	8011550 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8010054:	4d0d      	ldr	r5, [pc, #52]	; (801008c <RadioInit+0x90>)
 8010056:	9400      	str	r4, [sp, #0]
 8010058:	4b0d      	ldr	r3, [pc, #52]	; (8010090 <RadioInit+0x94>)
 801005a:	4622      	mov	r2, r4
 801005c:	f04f 31ff 	mov.w	r1, #4294967295
 8010060:	4628      	mov	r0, r5
 8010062:	f001 fa75 	bl	8011550 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8010066:	4630      	mov	r0, r6
 8010068:	f001 fad0 	bl	801160c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801006c:	4628      	mov	r0, r5
 801006e:	f001 facd 	bl	801160c <UTIL_TIMER_Stop>
}
 8010072:	b002      	add	sp, #8
 8010074:	bd70      	pop	{r4, r5, r6, pc}
 8010076:	bf00      	nop
 8010078:	20000d78 	.word	0x20000d78
 801007c:	20000d94 	.word	0x20000d94
 8010080:	0800f8ad 	.word	0x0800f8ad
 8010084:	20000df0 	.word	0x20000df0
 8010088:	0800f3f5 	.word	0x0800f3f5
 801008c:	20000d7c 	.word	0x20000d7c
 8010090:	0800f41d 	.word	0x0800f41d

08010094 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8010094:	4b01      	ldr	r3, [pc, #4]	; (801009c <SUBGRF_GetOperatingMode+0x8>)
 8010096:	7818      	ldrb	r0, [r3, #0]
 8010098:	4770      	bx	lr
 801009a:	bf00      	nop
 801009c:	20000e0e 	.word	0x20000e0e

080100a0 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 80100a0:	4b01      	ldr	r3, [pc, #4]	; (80100a8 <SUBGRF_GetPacketType+0x8>)
 80100a2:	7818      	ldrb	r0, [r3, #0]
 80100a4:	4770      	bx	lr
 80100a6:	bf00      	nop
 80100a8:	20000e0f 	.word	0x20000e0f

080100ac <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80100ac:	b500      	push	{lr}
 80100ae:	b083      	sub	sp, #12
 80100b0:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80100b4:	2301      	movs	r3, #1
 80100b6:	f10d 0207 	add.w	r2, sp, #7
 80100ba:	4601      	mov	r1, r0
 80100bc:	4802      	ldr	r0, [pc, #8]	; (80100c8 <SUBGRF_WriteRegister+0x1c>)
 80100be:	f7f5 f929 	bl	8005314 <HAL_SUBGHZ_WriteRegisters>
}
 80100c2:	b003      	add	sp, #12
 80100c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80100c8:	200001d4 	.word	0x200001d4

080100cc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80100cc:	b500      	push	{lr}
 80100ce:	b083      	sub	sp, #12
 80100d0:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80100d2:	2301      	movs	r3, #1
 80100d4:	f10d 0207 	add.w	r2, sp, #7
 80100d8:	4803      	ldr	r0, [pc, #12]	; (80100e8 <SUBGRF_ReadRegister+0x1c>)
 80100da:	f7f5 f96b 	bl	80053b4 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 80100de:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80100e2:	b003      	add	sp, #12
 80100e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80100e8:	200001d4 	.word	0x200001d4

080100ec <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80100ec:	b510      	push	{r4, lr}
 80100ee:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80100f0:	f7f2 fa66 	bl	80025c0 <RBI_IsDCDC>
 80100f4:	2801      	cmp	r0, #1
 80100f6:	d000      	beq.n	80100fa <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80100f8:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80100fa:	f640 1023 	movw	r0, #2339	; 0x923
 80100fe:	f7ff ffe5 	bl	80100cc <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8010102:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8010106:	4321      	orrs	r1, r4
 8010108:	f640 1023 	movw	r0, #2339	; 0x923
 801010c:	f7ff ffce 	bl	80100ac <SUBGRF_WriteRegister>
}
 8010110:	e7f2      	b.n	80100f8 <Radio_SMPS_Set+0xc>

08010112 <SUBGRF_SetWhiteningSeed>:
{
 8010112:	b510      	push	{r4, lr}
 8010114:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8010116:	f7ff ffc3 	bl	80100a0 <SUBGRF_GetPacketType>
 801011a:	b100      	cbz	r0, 801011e <SUBGRF_SetWhiteningSeed+0xc>
}
 801011c:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801011e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8010122:	f7ff ffd3 	bl	80100cc <SUBGRF_ReadRegister>
 8010126:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801012a:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801012e:	4301      	orrs	r1, r0
 8010130:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8010134:	f7ff ffba 	bl	80100ac <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8010138:	b2e1      	uxtb	r1, r4
 801013a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801013e:	f7ff ffb5 	bl	80100ac <SUBGRF_WriteRegister>
}
 8010142:	e7eb      	b.n	801011c <SUBGRF_SetWhiteningSeed+0xa>

08010144 <SUBGRF_WriteRegisters>:
{
 8010144:	b510      	push	{r4, lr}
 8010146:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010148:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801014c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801014e:	460a      	mov	r2, r1
 8010150:	4601      	mov	r1, r0
 8010152:	4803      	ldr	r0, [pc, #12]	; (8010160 <SUBGRF_WriteRegisters+0x1c>)
 8010154:	f7f5 f8de 	bl	8005314 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010158:	f384 8810 	msr	PRIMASK, r4
}
 801015c:	bd10      	pop	{r4, pc}
 801015e:	bf00      	nop
 8010160:	200001d4 	.word	0x200001d4

08010164 <SUBGRF_SetSyncWord>:
{
 8010164:	b508      	push	{r3, lr}
 8010166:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8010168:	2208      	movs	r2, #8
 801016a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801016e:	f7ff ffe9 	bl	8010144 <SUBGRF_WriteRegisters>
}
 8010172:	2000      	movs	r0, #0
 8010174:	bd08      	pop	{r3, pc}

08010176 <SUBGRF_SetCrcSeed>:
{
 8010176:	b500      	push	{lr}
 8010178:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801017a:	0a03      	lsrs	r3, r0, #8
 801017c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8010180:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8010184:	f7ff ff8c 	bl	80100a0 <SUBGRF_GetPacketType>
 8010188:	b110      	cbz	r0, 8010190 <SUBGRF_SetCrcSeed+0x1a>
}
 801018a:	b003      	add	sp, #12
 801018c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8010190:	2202      	movs	r2, #2
 8010192:	a901      	add	r1, sp, #4
 8010194:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8010198:	f7ff ffd4 	bl	8010144 <SUBGRF_WriteRegisters>
}
 801019c:	e7f5      	b.n	801018a <SUBGRF_SetCrcSeed+0x14>

0801019e <SUBGRF_SetCrcPolynomial>:
{
 801019e:	b500      	push	{lr}
 80101a0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80101a2:	0a03      	lsrs	r3, r0, #8
 80101a4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80101a8:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80101ac:	f7ff ff78 	bl	80100a0 <SUBGRF_GetPacketType>
 80101b0:	b110      	cbz	r0, 80101b8 <SUBGRF_SetCrcPolynomial+0x1a>
}
 80101b2:	b003      	add	sp, #12
 80101b4:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80101b8:	2202      	movs	r2, #2
 80101ba:	a901      	add	r1, sp, #4
 80101bc:	f240 60be 	movw	r0, #1726	; 0x6be
 80101c0:	f7ff ffc0 	bl	8010144 <SUBGRF_WriteRegisters>
}
 80101c4:	e7f5      	b.n	80101b2 <SUBGRF_SetCrcPolynomial+0x14>
	...

080101c8 <SUBGRF_ReadRegisters>:
{
 80101c8:	b510      	push	{r4, lr}
 80101ca:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101cc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80101d0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80101d2:	460a      	mov	r2, r1
 80101d4:	4601      	mov	r1, r0
 80101d6:	4803      	ldr	r0, [pc, #12]	; (80101e4 <SUBGRF_ReadRegisters+0x1c>)
 80101d8:	f7f5 f8ec 	bl	80053b4 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101dc:	f384 8810 	msr	PRIMASK, r4
}
 80101e0:	bd10      	pop	{r4, pc}
 80101e2:	bf00      	nop
 80101e4:	200001d4 	.word	0x200001d4

080101e8 <SUBGRF_WriteBuffer>:
{
 80101e8:	b510      	push	{r4, lr}
 80101ea:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101ec:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80101f0:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80101f2:	460a      	mov	r2, r1
 80101f4:	4601      	mov	r1, r0
 80101f6:	4803      	ldr	r0, [pc, #12]	; (8010204 <SUBGRF_WriteBuffer+0x1c>)
 80101f8:	f7f5 fa3a 	bl	8005670 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101fc:	f384 8810 	msr	PRIMASK, r4
}
 8010200:	bd10      	pop	{r4, pc}
 8010202:	bf00      	nop
 8010204:	200001d4 	.word	0x200001d4

08010208 <SUBGRF_SetPayload>:
{
 8010208:	b508      	push	{r3, lr}
 801020a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801020c:	4601      	mov	r1, r0
 801020e:	2000      	movs	r0, #0
 8010210:	f7ff ffea 	bl	80101e8 <SUBGRF_WriteBuffer>
}
 8010214:	bd08      	pop	{r3, pc}
	...

08010218 <SUBGRF_ReadBuffer>:
{
 8010218:	b510      	push	{r4, lr}
 801021a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801021c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010220:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8010222:	460a      	mov	r2, r1
 8010224:	4601      	mov	r1, r0
 8010226:	4803      	ldr	r0, [pc, #12]	; (8010234 <SUBGRF_ReadBuffer+0x1c>)
 8010228:	f7f5 fa6c 	bl	8005704 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801022c:	f384 8810 	msr	PRIMASK, r4
}
 8010230:	bd10      	pop	{r4, pc}
 8010232:	bf00      	nop
 8010234:	200001d4 	.word	0x200001d4

08010238 <SUBGRF_WriteCommand>:
{
 8010238:	b510      	push	{r4, lr}
 801023a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801023c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010240:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8010242:	460a      	mov	r2, r1
 8010244:	4601      	mov	r1, r0
 8010246:	4803      	ldr	r0, [pc, #12]	; (8010254 <SUBGRF_WriteCommand+0x1c>)
 8010248:	f7f5 f908 	bl	800545c <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801024c:	f384 8810 	msr	PRIMASK, r4
}
 8010250:	bd10      	pop	{r4, pc}
 8010252:	bf00      	nop
 8010254:	200001d4 	.word	0x200001d4

08010258 <SUBGRF_SetSleep>:
{
 8010258:	b510      	push	{r4, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801025e:	2000      	movs	r0, #0
 8010260:	f7f2 f9a2 	bl	80025a8 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8010264:	2002      	movs	r0, #2
 8010266:	f7ff ff41 	bl	80100ec <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801026a:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801026e:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010272:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8010274:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8010278:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801027a:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801027e:	2201      	movs	r2, #1
 8010280:	f10d 0107 	add.w	r1, sp, #7
 8010284:	2084      	movs	r0, #132	; 0x84
 8010286:	f7ff ffd7 	bl	8010238 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801028a:	4b02      	ldr	r3, [pc, #8]	; (8010294 <SUBGRF_SetSleep+0x3c>)
 801028c:	2200      	movs	r2, #0
 801028e:	701a      	strb	r2, [r3, #0]
}
 8010290:	b002      	add	sp, #8
 8010292:	bd10      	pop	{r4, pc}
 8010294:	20000e0e 	.word	0x20000e0e

08010298 <SUBGRF_SetStandby>:
{
 8010298:	b500      	push	{lr}
 801029a:	b083      	sub	sp, #12
 801029c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80102a0:	2201      	movs	r2, #1
 80102a2:	f10d 0107 	add.w	r1, sp, #7
 80102a6:	2080      	movs	r0, #128	; 0x80
 80102a8:	f7ff ffc6 	bl	8010238 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80102ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80102b0:	b92b      	cbnz	r3, 80102be <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 80102b2:	4b05      	ldr	r3, [pc, #20]	; (80102c8 <SUBGRF_SetStandby+0x30>)
 80102b4:	2201      	movs	r2, #1
 80102b6:	701a      	strb	r2, [r3, #0]
}
 80102b8:	b003      	add	sp, #12
 80102ba:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 80102be:	4b02      	ldr	r3, [pc, #8]	; (80102c8 <SUBGRF_SetStandby+0x30>)
 80102c0:	2202      	movs	r2, #2
 80102c2:	701a      	strb	r2, [r3, #0]
}
 80102c4:	e7f8      	b.n	80102b8 <SUBGRF_SetStandby+0x20>
 80102c6:	bf00      	nop
 80102c8:	20000e0e 	.word	0x20000e0e

080102cc <SUBGRF_SetTx>:
{
 80102cc:	b500      	push	{lr}
 80102ce:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 80102d0:	4b0a      	ldr	r3, [pc, #40]	; (80102fc <SUBGRF_SetTx+0x30>)
 80102d2:	2204      	movs	r2, #4
 80102d4:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80102d6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80102da:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80102de:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80102e2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80102e6:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80102ea:	2203      	movs	r2, #3
 80102ec:	a901      	add	r1, sp, #4
 80102ee:	2083      	movs	r0, #131	; 0x83
 80102f0:	f7ff ffa2 	bl	8010238 <SUBGRF_WriteCommand>
}
 80102f4:	b003      	add	sp, #12
 80102f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80102fa:	bf00      	nop
 80102fc:	20000e0e 	.word	0x20000e0e

08010300 <SUBGRF_SendPayload>:
{
 8010300:	b510      	push	{r4, lr}
 8010302:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8010304:	f7ff ff80 	bl	8010208 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8010308:	4620      	mov	r0, r4
 801030a:	f7ff ffdf 	bl	80102cc <SUBGRF_SetTx>
}
 801030e:	bd10      	pop	{r4, pc}

08010310 <SUBGRF_SetRx>:
{
 8010310:	b500      	push	{lr}
 8010312:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8010314:	4b0a      	ldr	r3, [pc, #40]	; (8010340 <SUBGRF_SetRx+0x30>)
 8010316:	2205      	movs	r2, #5
 8010318:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801031a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801031e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010322:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010326:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801032a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801032e:	2203      	movs	r2, #3
 8010330:	a901      	add	r1, sp, #4
 8010332:	2082      	movs	r0, #130	; 0x82
 8010334:	f7ff ff80 	bl	8010238 <SUBGRF_WriteCommand>
}
 8010338:	b003      	add	sp, #12
 801033a:	f85d fb04 	ldr.w	pc, [sp], #4
 801033e:	bf00      	nop
 8010340:	20000e0e 	.word	0x20000e0e

08010344 <SUBGRF_GetRandom>:
{
 8010344:	b570      	push	{r4, r5, r6, lr}
 8010346:	b082      	sub	sp, #8
    uint32_t number = 0;
 8010348:	2600      	movs	r6, #0
 801034a:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801034c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010350:	f7ff febc 	bl	80100cc <SUBGRF_ReadRegister>
 8010354:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8010356:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 801035a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801035e:	f7ff fea5 	bl	80100ac <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8010362:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8010366:	f7ff feb1 	bl	80100cc <SUBGRF_ReadRegister>
 801036a:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801036c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8010370:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8010374:	f7ff fe9a 	bl	80100ac <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8010378:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801037c:	f7ff ffc8 	bl	8010310 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8010380:	2204      	movs	r2, #4
 8010382:	eb0d 0102 	add.w	r1, sp, r2
 8010386:	f640 0019 	movw	r0, #2073	; 0x819
 801038a:	f7ff ff1d 	bl	80101c8 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 801038e:	4630      	mov	r0, r6
 8010390:	f7ff ff82 	bl	8010298 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8010394:	4629      	mov	r1, r5
 8010396:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801039a:	f7ff fe87 	bl	80100ac <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801039e:	4621      	mov	r1, r4
 80103a0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80103a4:	f7ff fe82 	bl	80100ac <SUBGRF_WriteRegister>
}
 80103a8:	9801      	ldr	r0, [sp, #4]
 80103aa:	b002      	add	sp, #8
 80103ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080103b0 <SUBGRF_SetRxBoosted>:
{
 80103b0:	b510      	push	{r4, lr}
 80103b2:	b082      	sub	sp, #8
 80103b4:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 80103b6:	4b0c      	ldr	r3, [pc, #48]	; (80103e8 <SUBGRF_SetRxBoosted+0x38>)
 80103b8:	2205      	movs	r2, #5
 80103ba:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80103bc:	2197      	movs	r1, #151	; 0x97
 80103be:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80103c2:	f7ff fe73 	bl	80100ac <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80103c6:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80103ca:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80103ce:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80103d2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80103d6:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80103da:	2203      	movs	r2, #3
 80103dc:	a901      	add	r1, sp, #4
 80103de:	2082      	movs	r0, #130	; 0x82
 80103e0:	f7ff ff2a 	bl	8010238 <SUBGRF_WriteCommand>
}
 80103e4:	b002      	add	sp, #8
 80103e6:	bd10      	pop	{r4, pc}
 80103e8:	20000e0e 	.word	0x20000e0e

080103ec <SUBGRF_SetRxDutyCycle>:
{
 80103ec:	b500      	push	{lr}
 80103ee:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80103f0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80103f4:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80103f8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80103fc:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8010400:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8010404:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010408:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801040c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8010410:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8010414:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8010418:	2206      	movs	r2, #6
 801041a:	4669      	mov	r1, sp
 801041c:	2094      	movs	r0, #148	; 0x94
 801041e:	f7ff ff0b 	bl	8010238 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8010422:	4b03      	ldr	r3, [pc, #12]	; (8010430 <SUBGRF_SetRxDutyCycle+0x44>)
 8010424:	2206      	movs	r2, #6
 8010426:	701a      	strb	r2, [r3, #0]
}
 8010428:	b003      	add	sp, #12
 801042a:	f85d fb04 	ldr.w	pc, [sp], #4
 801042e:	bf00      	nop
 8010430:	20000e0e 	.word	0x20000e0e

08010434 <SUBGRF_SetCad>:
{
 8010434:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8010436:	2200      	movs	r2, #0
 8010438:	4611      	mov	r1, r2
 801043a:	20c5      	movs	r0, #197	; 0xc5
 801043c:	f7ff fefc 	bl	8010238 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8010440:	4b01      	ldr	r3, [pc, #4]	; (8010448 <SUBGRF_SetCad+0x14>)
 8010442:	2207      	movs	r2, #7
 8010444:	701a      	strb	r2, [r3, #0]
}
 8010446:	bd08      	pop	{r3, pc}
 8010448:	20000e0e 	.word	0x20000e0e

0801044c <SUBGRF_SetTxContinuousWave>:
{
 801044c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801044e:	2200      	movs	r2, #0
 8010450:	4611      	mov	r1, r2
 8010452:	20d1      	movs	r0, #209	; 0xd1
 8010454:	f7ff fef0 	bl	8010238 <SUBGRF_WriteCommand>
}
 8010458:	bd08      	pop	{r3, pc}

0801045a <SUBGRF_SetTxInfinitePreamble>:
{
 801045a:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801045c:	2200      	movs	r2, #0
 801045e:	4611      	mov	r1, r2
 8010460:	20d2      	movs	r0, #210	; 0xd2
 8010462:	f7ff fee9 	bl	8010238 <SUBGRF_WriteCommand>
}
 8010466:	bd08      	pop	{r3, pc}

08010468 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8010468:	b500      	push	{lr}
 801046a:	b083      	sub	sp, #12
 801046c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8010470:	2201      	movs	r2, #1
 8010472:	f10d 0107 	add.w	r1, sp, #7
 8010476:	209f      	movs	r0, #159	; 0x9f
 8010478:	f7ff fede 	bl	8010238 <SUBGRF_WriteCommand>
}
 801047c:	b003      	add	sp, #12
 801047e:	f85d fb04 	ldr.w	pc, [sp], #4

08010482 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8010482:	b500      	push	{lr}
 8010484:	b083      	sub	sp, #12
 8010486:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801048a:	2201      	movs	r2, #1
 801048c:	f10d 0107 	add.w	r1, sp, #7
 8010490:	20a0      	movs	r0, #160	; 0xa0
 8010492:	f7ff fed1 	bl	8010238 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8010496:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801049a:	2b3f      	cmp	r3, #63	; 0x3f
 801049c:	d90f      	bls.n	80104be <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 801049e:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 80104a0:	2200      	movs	r2, #0
        while( mant > 31 )
 80104a2:	e002      	b.n	80104aa <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 80104a4:	089b      	lsrs	r3, r3, #2
            exp++;
 80104a6:	3201      	adds	r2, #1
 80104a8:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 80104aa:	2b1f      	cmp	r3, #31
 80104ac:	d8fa      	bhi.n	80104a4 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 80104ae:	00d9      	lsls	r1, r3, #3
 80104b0:	b2c9      	uxtb	r1, r1
 80104b2:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80104b4:	b2c9      	uxtb	r1, r1
 80104b6:	f240 7006 	movw	r0, #1798	; 0x706
 80104ba:	f7ff fdf7 	bl	80100ac <SUBGRF_WriteRegister>
}
 80104be:	b003      	add	sp, #12
 80104c0:	f85d fb04 	ldr.w	pc, [sp], #4

080104c4 <SUBGRF_SetRegulatorMode>:
{
 80104c4:	b500      	push	{lr}
 80104c6:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80104c8:	f7f2 f87a 	bl	80025c0 <RBI_IsDCDC>
 80104cc:	2801      	cmp	r0, #1
 80104ce:	d00b      	beq.n	80104e8 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 80104d0:	2300      	movs	r3, #0
 80104d2:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80104d6:	2201      	movs	r2, #1
 80104d8:	f10d 0107 	add.w	r1, sp, #7
 80104dc:	2096      	movs	r0, #150	; 0x96
 80104de:	f7ff feab 	bl	8010238 <SUBGRF_WriteCommand>
}
 80104e2:	b003      	add	sp, #12
 80104e4:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 80104e8:	2301      	movs	r3, #1
 80104ea:	f88d 3007 	strb.w	r3, [sp, #7]
 80104ee:	e7f2      	b.n	80104d6 <SUBGRF_SetRegulatorMode+0x12>

080104f0 <SUBGRF_Calibrate>:
{
 80104f0:	b500      	push	{lr}
 80104f2:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80104f4:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80104f8:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80104fc:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80104fe:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8010502:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8010504:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8010508:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801050a:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801050e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8010510:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8010514:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8010516:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801051a:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801051c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8010520:	2201      	movs	r2, #1
 8010522:	f10d 0107 	add.w	r1, sp, #7
 8010526:	2089      	movs	r0, #137	; 0x89
 8010528:	f7ff fe86 	bl	8010238 <SUBGRF_WriteCommand>
}
 801052c:	b003      	add	sp, #12
 801052e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010534 <SUBGRF_CalibrateImage>:
{
 8010534:	b500      	push	{lr}
 8010536:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8010538:	4b1f      	ldr	r3, [pc, #124]	; (80105b8 <SUBGRF_CalibrateImage+0x84>)
 801053a:	4298      	cmp	r0, r3
 801053c:	d90d      	bls.n	801055a <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 801053e:	23e1      	movs	r3, #225	; 0xe1
 8010540:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8010544:	23e9      	movs	r3, #233	; 0xe9
 8010546:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801054a:	2202      	movs	r2, #2
 801054c:	a901      	add	r1, sp, #4
 801054e:	2098      	movs	r0, #152	; 0x98
 8010550:	f7ff fe72 	bl	8010238 <SUBGRF_WriteCommand>
}
 8010554:	b003      	add	sp, #12
 8010556:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 801055a:	4b18      	ldr	r3, [pc, #96]	; (80105bc <SUBGRF_CalibrateImage+0x88>)
 801055c:	4298      	cmp	r0, r3
 801055e:	d906      	bls.n	801056e <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8010560:	23d7      	movs	r3, #215	; 0xd7
 8010562:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8010566:	23db      	movs	r3, #219	; 0xdb
 8010568:	f88d 3005 	strb.w	r3, [sp, #5]
 801056c:	e7ed      	b.n	801054a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 801056e:	4b14      	ldr	r3, [pc, #80]	; (80105c0 <SUBGRF_CalibrateImage+0x8c>)
 8010570:	4298      	cmp	r0, r3
 8010572:	d906      	bls.n	8010582 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8010574:	23c1      	movs	r3, #193	; 0xc1
 8010576:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 801057a:	23c5      	movs	r3, #197	; 0xc5
 801057c:	f88d 3005 	strb.w	r3, [sp, #5]
 8010580:	e7e3      	b.n	801054a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8010582:	4b10      	ldr	r3, [pc, #64]	; (80105c4 <SUBGRF_CalibrateImage+0x90>)
 8010584:	4298      	cmp	r0, r3
 8010586:	d906      	bls.n	8010596 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8010588:	2375      	movs	r3, #117	; 0x75
 801058a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 801058e:	2381      	movs	r3, #129	; 0x81
 8010590:	f88d 3005 	strb.w	r3, [sp, #5]
 8010594:	e7d9      	b.n	801054a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8010596:	4b0c      	ldr	r3, [pc, #48]	; (80105c8 <SUBGRF_CalibrateImage+0x94>)
 8010598:	4298      	cmp	r0, r3
 801059a:	d906      	bls.n	80105aa <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 801059c:	236b      	movs	r3, #107	; 0x6b
 801059e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 80105a2:	236f      	movs	r3, #111	; 0x6f
 80105a4:	f88d 3005 	strb.w	r3, [sp, #5]
 80105a8:	e7cf      	b.n	801054a <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 80105aa:	2329      	movs	r3, #41	; 0x29
 80105ac:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 80105b0:	232b      	movs	r3, #43	; 0x2b
 80105b2:	f88d 3005 	strb.w	r3, [sp, #5]
 80105b6:	e7c8      	b.n	801054a <SUBGRF_CalibrateImage+0x16>
 80105b8:	35a4e900 	.word	0x35a4e900
 80105bc:	32a9f880 	.word	0x32a9f880
 80105c0:	2de54480 	.word	0x2de54480
 80105c4:	1b6b0b00 	.word	0x1b6b0b00
 80105c8:	1954fc40 	.word	0x1954fc40

080105cc <SUBGRF_SetPaConfig>:
{
 80105cc:	b500      	push	{lr}
 80105ce:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 80105d0:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 80105d4:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 80105d8:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 80105dc:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80105e0:	2204      	movs	r2, #4
 80105e2:	eb0d 0102 	add.w	r1, sp, r2
 80105e6:	2095      	movs	r0, #149	; 0x95
 80105e8:	f7ff fe26 	bl	8010238 <SUBGRF_WriteCommand>
}
 80105ec:	b003      	add	sp, #12
 80105ee:	f85d fb04 	ldr.w	pc, [sp], #4

080105f2 <SUBGRF_SetDioIrqParams>:
{
 80105f2:	b500      	push	{lr}
 80105f4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80105f6:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80105fa:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80105fe:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8010602:	0a08      	lsrs	r0, r1, #8
 8010604:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8010608:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801060c:	0a11      	lsrs	r1, r2, #8
 801060e:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8010612:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8010616:	0a1a      	lsrs	r2, r3, #8
 8010618:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801061c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8010620:	2208      	movs	r2, #8
 8010622:	4669      	mov	r1, sp
 8010624:	4610      	mov	r0, r2
 8010626:	f7ff fe07 	bl	8010238 <SUBGRF_WriteCommand>
}
 801062a:	b003      	add	sp, #12
 801062c:	f85d fb04 	ldr.w	pc, [sp], #4

08010630 <SUBGRF_SetTcxoMode>:
{
 8010630:	b500      	push	{lr}
 8010632:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8010634:	f000 0007 	and.w	r0, r0, #7
 8010638:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801063c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010640:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010644:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8010648:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801064c:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8010650:	2204      	movs	r2, #4
 8010652:	eb0d 0102 	add.w	r1, sp, r2
 8010656:	2097      	movs	r0, #151	; 0x97
 8010658:	f7ff fdee 	bl	8010238 <SUBGRF_WriteCommand>
}
 801065c:	b003      	add	sp, #12
 801065e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010664 <SUBGRF_Init>:
{
 8010664:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8010666:	b108      	cbz	r0, 801066c <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8010668:	4a18      	ldr	r2, [pc, #96]	; (80106cc <SUBGRF_Init+0x68>)
 801066a:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 801066c:	f7f0 ff44 	bl	80014f8 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8010670:	2002      	movs	r0, #2
 8010672:	f7ff fd3b 	bl	80100ec <Radio_SMPS_Set>
    ImageCalibrated = false;
 8010676:	2000      	movs	r0, #0
 8010678:	4b15      	ldr	r3, [pc, #84]	; (80106d0 <SUBGRF_Init+0x6c>)
 801067a:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 801067c:	f7ff fe0c 	bl	8010298 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8010680:	f7f1 ff9a 	bl	80025b8 <RBI_IsTCXO>
 8010684:	2801      	cmp	r0, #1
 8010686:	d014      	beq.n	80106b2 <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8010688:	2120      	movs	r1, #32
 801068a:	f640 1011 	movw	r0, #2321	; 0x911
 801068e:	f7ff fd0d 	bl	80100ac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8010692:	2120      	movs	r1, #32
 8010694:	f640 1012 	movw	r0, #2322	; 0x912
 8010698:	f7ff fd08 	bl	80100ac <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801069c:	210e      	movs	r1, #14
 801069e:	f640 101f 	movw	r0, #2335	; 0x91f
 80106a2:	f7ff fd03 	bl	80100ac <SUBGRF_WriteRegister>
    RBI_Init();
 80106a6:	f7f1 ff7b 	bl	80025a0 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 80106aa:	4b0a      	ldr	r3, [pc, #40]	; (80106d4 <SUBGRF_Init+0x70>)
 80106ac:	2201      	movs	r2, #1
 80106ae:	701a      	strb	r2, [r3, #0]
}
 80106b0:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80106b2:	2140      	movs	r1, #64	; 0x40
 80106b4:	f7ff ffbc 	bl	8010630 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80106b8:	2100      	movs	r1, #0
 80106ba:	f640 1011 	movw	r0, #2321	; 0x911
 80106be:	f7ff fcf5 	bl	80100ac <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 80106c2:	f04f 007f 	mov.w	r0, #127	; 0x7f
 80106c6:	f7ff ff13 	bl	80104f0 <SUBGRF_Calibrate>
 80106ca:	e7e7      	b.n	801069c <SUBGRF_Init+0x38>
 80106cc:	20000e10 	.word	0x20000e10
 80106d0:	20000e0c 	.word	0x20000e0c
 80106d4:	20000e0e 	.word	0x20000e0e

080106d8 <SUBGRF_SetRfFrequency>:
{
 80106d8:	b510      	push	{r4, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 80106de:	4b12      	ldr	r3, [pc, #72]	; (8010728 <SUBGRF_SetRfFrequency+0x50>)
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	b1d3      	cbz	r3, 801071a <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80106e4:	4a11      	ldr	r2, [pc, #68]	; (801072c <SUBGRF_SetRfFrequency+0x54>)
 80106e6:	2300      	movs	r3, #0
 80106e8:	0660      	lsls	r0, r4, #25
 80106ea:	09e1      	lsrs	r1, r4, #7
 80106ec:	f7f0 f8ec 	bl	80008c8 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80106f0:	0e03      	lsrs	r3, r0, #24
 80106f2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80106f6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80106fa:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80106fe:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010702:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8010706:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801070a:	2204      	movs	r2, #4
 801070c:	eb0d 0102 	add.w	r1, sp, r2
 8010710:	2086      	movs	r0, #134	; 0x86
 8010712:	f7ff fd91 	bl	8010238 <SUBGRF_WriteCommand>
}
 8010716:	b002      	add	sp, #8
 8010718:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 801071a:	f7ff ff0b 	bl	8010534 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801071e:	4b02      	ldr	r3, [pc, #8]	; (8010728 <SUBGRF_SetRfFrequency+0x50>)
 8010720:	2201      	movs	r2, #1
 8010722:	701a      	strb	r2, [r3, #0]
 8010724:	e7de      	b.n	80106e4 <SUBGRF_SetRfFrequency+0xc>
 8010726:	bf00      	nop
 8010728:	20000e0c 	.word	0x20000e0c
 801072c:	01e84800 	.word	0x01e84800

08010730 <SUBGRF_SetPacketType>:
{
 8010730:	b500      	push	{lr}
 8010732:	b083      	sub	sp, #12
 8010734:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8010738:	b2c3      	uxtb	r3, r0
 801073a:	4a09      	ldr	r2, [pc, #36]	; (8010760 <SUBGRF_SetPacketType+0x30>)
 801073c:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 801073e:	b143      	cbz	r3, 8010752 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8010740:	2201      	movs	r2, #1
 8010742:	f10d 0107 	add.w	r1, sp, #7
 8010746:	208a      	movs	r0, #138	; 0x8a
 8010748:	f7ff fd76 	bl	8010238 <SUBGRF_WriteCommand>
}
 801074c:	b003      	add	sp, #12
 801074e:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8010752:	2100      	movs	r1, #0
 8010754:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8010758:	f7ff fca8 	bl	80100ac <SUBGRF_WriteRegister>
 801075c:	e7f0      	b.n	8010740 <SUBGRF_SetPacketType+0x10>
 801075e:	bf00      	nop
 8010760:	20000e0f 	.word	0x20000e0f

08010764 <SUBGRF_SetTxParams>:
{
 8010764:	b570      	push	{r4, r5, r6, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	460c      	mov	r4, r1
 801076a:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 801076c:	2801      	cmp	r0, #1
 801076e:	d035      	beq.n	80107dc <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8010770:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8010774:	f7ff fcaa 	bl	80100cc <SUBGRF_ReadRegister>
 8010778:	f040 011e 	orr.w	r1, r0, #30
 801077c:	b2c9      	uxtb	r1, r1
 801077e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8010782:	f7ff fc93 	bl	80100ac <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8010786:	2001      	movs	r0, #1
 8010788:	f7f1 ff1e 	bl	80025c8 <RBI_GetRFOMaxPowerConfig>
 801078c:	4605      	mov	r5, r0
        if (power > max_power)
 801078e:	4284      	cmp	r4, r0
 8010790:	dd00      	ble.n	8010794 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8010792:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8010794:	2d14      	cmp	r5, #20
 8010796:	d054      	beq.n	8010842 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8010798:	2d11      	cmp	r5, #17
 801079a:	d05c      	beq.n	8010856 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 801079c:	2d0e      	cmp	r5, #14
 801079e:	d064      	beq.n	801086a <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80107a0:	2301      	movs	r3, #1
 80107a2:	2200      	movs	r2, #0
 80107a4:	2107      	movs	r1, #7
 80107a6:	2004      	movs	r0, #4
 80107a8:	f7ff ff10 	bl	80105cc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80107ac:	1b64      	subs	r4, r4, r5
 80107ae:	3416      	adds	r4, #22
 80107b0:	b265      	sxtb	r5, r4
        if (power < -9)
 80107b2:	f115 0f09 	cmn.w	r5, #9
 80107b6:	da01      	bge.n	80107bc <SUBGRF_SetTxParams+0x58>
            power = -9;
 80107b8:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80107bc:	2138      	movs	r1, #56	; 0x38
 80107be:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80107c2:	f7ff fc73 	bl	80100ac <SUBGRF_WriteRegister>
    buf[0] = power;
 80107c6:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 80107ca:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80107ce:	2202      	movs	r2, #2
 80107d0:	a901      	add	r1, sp, #4
 80107d2:	208e      	movs	r0, #142	; 0x8e
 80107d4:	f7ff fd30 	bl	8010238 <SUBGRF_WriteCommand>
}
 80107d8:	b002      	add	sp, #8
 80107da:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80107dc:	2000      	movs	r0, #0
 80107de:	f7f1 fef3 	bl	80025c8 <RBI_GetRFOMaxPowerConfig>
 80107e2:	4605      	mov	r5, r0
        if (power >  max_power)
 80107e4:	4284      	cmp	r4, r0
 80107e6:	dd00      	ble.n	80107ea <SUBGRF_SetTxParams+0x86>
          power = max_power;
 80107e8:	b244      	sxtb	r4, r0
        if (max_power == 14)
 80107ea:	2d0e      	cmp	r5, #14
 80107ec:	d015      	beq.n	801081a <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 80107ee:	2d0a      	cmp	r5, #10
 80107f0:	d01d      	beq.n	801082e <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80107f2:	2301      	movs	r3, #1
 80107f4:	461a      	mov	r2, r3
 80107f6:	2100      	movs	r1, #0
 80107f8:	2007      	movs	r0, #7
 80107fa:	f7ff fee7 	bl	80105cc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80107fe:	1b65      	subs	r5, r4, r5
 8010800:	350e      	adds	r5, #14
 8010802:	b26d      	sxtb	r5, r5
        if (power < -17)
 8010804:	f115 0f11 	cmn.w	r5, #17
 8010808:	da01      	bge.n	801080e <SUBGRF_SetTxParams+0xaa>
            power = -17;
 801080a:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801080e:	2118      	movs	r1, #24
 8010810:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8010814:	f7ff fc4a 	bl	80100ac <SUBGRF_WriteRegister>
 8010818:	e7d5      	b.n	80107c6 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801081a:	2301      	movs	r3, #1
 801081c:	461a      	mov	r2, r3
 801081e:	2100      	movs	r1, #0
 8010820:	2004      	movs	r0, #4
 8010822:	f7ff fed3 	bl	80105cc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8010826:	1b65      	subs	r5, r4, r5
 8010828:	350e      	adds	r5, #14
 801082a:	b26d      	sxtb	r5, r5
 801082c:	e7ea      	b.n	8010804 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801082e:	2301      	movs	r3, #1
 8010830:	461a      	mov	r2, r3
 8010832:	2100      	movs	r1, #0
 8010834:	4618      	mov	r0, r3
 8010836:	f7ff fec9 	bl	80105cc <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801083a:	1b65      	subs	r5, r4, r5
 801083c:	350d      	adds	r5, #13
 801083e:	b26d      	sxtb	r5, r5
 8010840:	e7e0      	b.n	8010804 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8010842:	2301      	movs	r3, #1
 8010844:	2200      	movs	r2, #0
 8010846:	2105      	movs	r1, #5
 8010848:	2003      	movs	r0, #3
 801084a:	f7ff febf 	bl	80105cc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801084e:	1b65      	subs	r5, r4, r5
 8010850:	3516      	adds	r5, #22
 8010852:	b26d      	sxtb	r5, r5
 8010854:	e7ad      	b.n	80107b2 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8010856:	2301      	movs	r3, #1
 8010858:	2200      	movs	r2, #0
 801085a:	2103      	movs	r1, #3
 801085c:	2002      	movs	r0, #2
 801085e:	f7ff feb5 	bl	80105cc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8010862:	1b65      	subs	r5, r4, r5
 8010864:	3516      	adds	r5, #22
 8010866:	b26d      	sxtb	r5, r5
 8010868:	e7a3      	b.n	80107b2 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801086a:	2301      	movs	r3, #1
 801086c:	2200      	movs	r2, #0
 801086e:	2102      	movs	r1, #2
 8010870:	4608      	mov	r0, r1
 8010872:	f7ff feab 	bl	80105cc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8010876:	1b65      	subs	r5, r4, r5
 8010878:	350e      	adds	r5, #14
 801087a:	b26d      	sxtb	r5, r5
 801087c:	e799      	b.n	80107b2 <SUBGRF_SetTxParams+0x4e>
	...

08010880 <SUBGRF_SetModulationParams>:
{
 8010880:	b510      	push	{r4, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010886:	4b3e      	ldr	r3, [pc, #248]	; (8010980 <SUBGRF_SetModulationParams+0x100>)
 8010888:	e893 0003 	ldmia.w	r3, {r0, r1}
 801088c:	ab02      	add	r3, sp, #8
 801088e:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8010892:	7820      	ldrb	r0, [r4, #0]
 8010894:	4b3b      	ldr	r3, [pc, #236]	; (8010984 <SUBGRF_SetModulationParams+0x104>)
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	4298      	cmp	r0, r3
 801089a:	d106      	bne.n	80108aa <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 801089c:	7823      	ldrb	r3, [r4, #0]
 801089e:	2b03      	cmp	r3, #3
 80108a0:	d82c      	bhi.n	80108fc <SUBGRF_SetModulationParams+0x7c>
 80108a2:	e8df f003 	tbb	[pc, r3]
 80108a6:	4205      	.short	0x4205
 80108a8:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80108aa:	f7ff ff41 	bl	8010730 <SUBGRF_SetPacketType>
 80108ae:	e7f5      	b.n	801089c <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80108b0:	6862      	ldr	r2, [r4, #4]
 80108b2:	4b35      	ldr	r3, [pc, #212]	; (8010988 <SUBGRF_SetModulationParams+0x108>)
 80108b4:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80108b8:	0c1a      	lsrs	r2, r3, #16
 80108ba:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80108be:	0a1a      	lsrs	r2, r3, #8
 80108c0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80108c4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80108c8:	7b23      	ldrb	r3, [r4, #12]
 80108ca:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80108ce:	7b63      	ldrb	r3, [r4, #13]
 80108d0:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80108d4:	68a1      	ldr	r1, [r4, #8]
 80108d6:	4a2d      	ldr	r2, [pc, #180]	; (801098c <SUBGRF_SetModulationParams+0x10c>)
 80108d8:	2300      	movs	r3, #0
 80108da:	0648      	lsls	r0, r1, #25
 80108dc:	09c9      	lsrs	r1, r1, #7
 80108de:	f7ef fff3 	bl	80008c8 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80108e2:	0c03      	lsrs	r3, r0, #16
 80108e4:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80108e8:	0a03      	lsrs	r3, r0, #8
 80108ea:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 80108ee:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80108f2:	2208      	movs	r2, #8
 80108f4:	4669      	mov	r1, sp
 80108f6:	208b      	movs	r0, #139	; 0x8b
 80108f8:	f7ff fc9e 	bl	8010238 <SUBGRF_WriteCommand>
}
 80108fc:	b002      	add	sp, #8
 80108fe:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8010900:	6922      	ldr	r2, [r4, #16]
 8010902:	4b21      	ldr	r3, [pc, #132]	; (8010988 <SUBGRF_SetModulationParams+0x108>)
 8010904:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010908:	0c1a      	lsrs	r2, r3, #16
 801090a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801090e:	0a1a      	lsrs	r2, r3, #8
 8010910:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010914:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8010918:	7d23      	ldrb	r3, [r4, #20]
 801091a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801091e:	2204      	movs	r2, #4
 8010920:	4669      	mov	r1, sp
 8010922:	208b      	movs	r0, #139	; 0x8b
 8010924:	f7ff fc88 	bl	8010238 <SUBGRF_WriteCommand>
        break;
 8010928:	e7e8      	b.n	80108fc <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801092a:	7e23      	ldrb	r3, [r4, #24]
 801092c:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8010930:	7e63      	ldrb	r3, [r4, #25]
 8010932:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8010936:	7ea3      	ldrb	r3, [r4, #26]
 8010938:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801093c:	7ee3      	ldrb	r3, [r4, #27]
 801093e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010942:	2204      	movs	r2, #4
 8010944:	4669      	mov	r1, sp
 8010946:	208b      	movs	r0, #139	; 0x8b
 8010948:	f7ff fc76 	bl	8010238 <SUBGRF_WriteCommand>
        break;
 801094c:	e7d6      	b.n	80108fc <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801094e:	6862      	ldr	r2, [r4, #4]
 8010950:	4b0d      	ldr	r3, [pc, #52]	; (8010988 <SUBGRF_SetModulationParams+0x108>)
 8010952:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010956:	0c1a      	lsrs	r2, r3, #16
 8010958:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801095c:	0a1a      	lsrs	r2, r3, #8
 801095e:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010962:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8010966:	7b23      	ldrb	r3, [r4, #12]
 8010968:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801096c:	7b63      	ldrb	r3, [r4, #13]
 801096e:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010972:	2205      	movs	r2, #5
 8010974:	4669      	mov	r1, sp
 8010976:	208b      	movs	r0, #139	; 0x8b
 8010978:	f7ff fc5e 	bl	8010238 <SUBGRF_WriteCommand>
}
 801097c:	e7be      	b.n	80108fc <SUBGRF_SetModulationParams+0x7c>
 801097e:	bf00      	nop
 8010980:	08011ca0 	.word	0x08011ca0
 8010984:	20000e0f 	.word	0x20000e0f
 8010988:	3d090000 	.word	0x3d090000
 801098c:	01e84800 	.word	0x01e84800

08010990 <SUBGRF_SetPacketParams>:
{
 8010990:	b510      	push	{r4, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010996:	ab01      	add	r3, sp, #4
 8010998:	4a33      	ldr	r2, [pc, #204]	; (8010a68 <SUBGRF_SetPacketParams+0xd8>)
 801099a:	ca07      	ldmia	r2, {r0, r1, r2}
 801099c:	c303      	stmia	r3!, {r0, r1}
 801099e:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 80109a0:	7820      	ldrb	r0, [r4, #0]
 80109a2:	4b32      	ldr	r3, [pc, #200]	; (8010a6c <SUBGRF_SetPacketParams+0xdc>)
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	4298      	cmp	r0, r3
 80109a8:	d106      	bne.n	80109b8 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 80109aa:	7823      	ldrb	r3, [r4, #0]
 80109ac:	2b03      	cmp	r3, #3
 80109ae:	d82a      	bhi.n	8010a06 <SUBGRF_SetPacketParams+0x76>
 80109b0:	e8df f003 	tbb	[pc, r3]
 80109b4:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 80109b8:	f7ff feba 	bl	8010730 <SUBGRF_SetPacketType>
 80109bc:	e7f5      	b.n	80109aa <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80109be:	7a63      	ldrb	r3, [r4, #9]
 80109c0:	2bf1      	cmp	r3, #241	; 0xf1
 80109c2:	d022      	beq.n	8010a0a <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80109c4:	2bf2      	cmp	r3, #242	; 0xf2
 80109c6:	d02a      	beq.n	8010a1e <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80109c8:	8862      	ldrh	r2, [r4, #2]
 80109ca:	0a11      	lsrs	r1, r2, #8
 80109cc:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80109d0:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80109d4:	7922      	ldrb	r2, [r4, #4]
 80109d6:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80109da:	7962      	ldrb	r2, [r4, #5]
 80109dc:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80109e0:	79a2      	ldrb	r2, [r4, #6]
 80109e2:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80109e6:	79e2      	ldrb	r2, [r4, #7]
 80109e8:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80109ec:	7a22      	ldrb	r2, [r4, #8]
 80109ee:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 80109f2:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80109f6:	7aa3      	ldrb	r3, [r4, #10]
 80109f8:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 80109fc:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80109fe:	a901      	add	r1, sp, #4
 8010a00:	208c      	movs	r0, #140	; 0x8c
 8010a02:	f7ff fc19 	bl	8010238 <SUBGRF_WriteCommand>
}
 8010a06:	b004      	add	sp, #16
 8010a08:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8010a0a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010a0e:	f7ff fbb2 	bl	8010176 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8010a12:	f248 0005 	movw	r0, #32773	; 0x8005
 8010a16:	f7ff fbc2 	bl	801019e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8010a1a:	2302      	movs	r3, #2
 8010a1c:	e7d4      	b.n	80109c8 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8010a1e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8010a22:	f7ff fba8 	bl	8010176 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8010a26:	f241 0021 	movw	r0, #4129	; 0x1021
 8010a2a:	f7ff fbb8 	bl	801019e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8010a2e:	2306      	movs	r3, #6
 8010a30:	e7ca      	b.n	80109c8 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8010a32:	7b23      	ldrb	r3, [r4, #12]
 8010a34:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8010a38:	2201      	movs	r2, #1
        break;
 8010a3a:	e7e0      	b.n	80109fe <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8010a3c:	89e3      	ldrh	r3, [r4, #14]
 8010a3e:	0a1a      	lsrs	r2, r3, #8
 8010a40:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8010a44:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8010a48:	7c23      	ldrb	r3, [r4, #16]
 8010a4a:	4a09      	ldr	r2, [pc, #36]	; (8010a70 <SUBGRF_SetPacketParams+0xe0>)
 8010a4c:	7013      	strb	r3, [r2, #0]
 8010a4e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8010a52:	7c63      	ldrb	r3, [r4, #17]
 8010a54:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8010a58:	7ca3      	ldrb	r3, [r4, #18]
 8010a5a:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8010a5e:	7ce3      	ldrb	r3, [r4, #19]
 8010a60:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8010a64:	2206      	movs	r2, #6
        break;
 8010a66:	e7ca      	b.n	80109fe <SUBGRF_SetPacketParams+0x6e>
 8010a68:	08011ca8 	.word	0x08011ca8
 8010a6c:	20000e0f 	.word	0x20000e0f
 8010a70:	20000e0d 	.word	0x20000e0d

08010a74 <SUBGRF_SetBufferBaseAddress>:
{
 8010a74:	b500      	push	{lr}
 8010a76:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8010a78:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8010a7c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8010a80:	2202      	movs	r2, #2
 8010a82:	a901      	add	r1, sp, #4
 8010a84:	208f      	movs	r0, #143	; 0x8f
 8010a86:	f7ff fbd7 	bl	8010238 <SUBGRF_WriteCommand>
}
 8010a8a:	b003      	add	sp, #12
 8010a8c:	f85d fb04 	ldr.w	pc, [sp], #4

08010a90 <SUBGRF_ReadCommand>:
{
 8010a90:	b510      	push	{r4, lr}
 8010a92:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a94:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010a98:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8010a9a:	460a      	mov	r2, r1
 8010a9c:	4601      	mov	r1, r0
 8010a9e:	4803      	ldr	r0, [pc, #12]	; (8010aac <SUBGRF_ReadCommand+0x1c>)
 8010aa0:	f7f4 fd32 	bl	8005508 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010aa4:	f384 8810 	msr	PRIMASK, r4
}
 8010aa8:	bd10      	pop	{r4, pc}
 8010aaa:	bf00      	nop
 8010aac:	200001d4 	.word	0x200001d4

08010ab0 <SUBGRF_GetRssiInst>:
{
 8010ab0:	b500      	push	{lr}
 8010ab2:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8010ab4:	2201      	movs	r2, #1
 8010ab6:	a901      	add	r1, sp, #4
 8010ab8:	2015      	movs	r0, #21
 8010aba:	f7ff ffe9 	bl	8010a90 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8010abe:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8010ac2:	4240      	negs	r0, r0
}
 8010ac4:	1040      	asrs	r0, r0, #1
 8010ac6:	b003      	add	sp, #12
 8010ac8:	f85d fb04 	ldr.w	pc, [sp], #4

08010acc <SUBGRF_GetRxBufferStatus>:
{
 8010acc:	b530      	push	{r4, r5, lr}
 8010ace:	b083      	sub	sp, #12
 8010ad0:	4605      	mov	r5, r0
 8010ad2:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8010ad4:	2202      	movs	r2, #2
 8010ad6:	a901      	add	r1, sp, #4
 8010ad8:	2013      	movs	r0, #19
 8010ada:	f7ff ffd9 	bl	8010a90 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8010ade:	f7ff fadf 	bl	80100a0 <SUBGRF_GetPacketType>
 8010ae2:	2801      	cmp	r0, #1
 8010ae4:	d007      	beq.n	8010af6 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8010ae6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010aea:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8010aec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010af0:	7023      	strb	r3, [r4, #0]
}
 8010af2:	b003      	add	sp, #12
 8010af4:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8010af6:	4b05      	ldr	r3, [pc, #20]	; (8010b0c <SUBGRF_GetRxBufferStatus+0x40>)
 8010af8:	781b      	ldrb	r3, [r3, #0]
 8010afa:	b2db      	uxtb	r3, r3
 8010afc:	2b01      	cmp	r3, #1
 8010afe:	d1f2      	bne.n	8010ae6 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8010b00:	f240 7002 	movw	r0, #1794	; 0x702
 8010b04:	f7ff fae2 	bl	80100cc <SUBGRF_ReadRegister>
 8010b08:	7028      	strb	r0, [r5, #0]
 8010b0a:	e7ef      	b.n	8010aec <SUBGRF_GetRxBufferStatus+0x20>
 8010b0c:	20000e0d 	.word	0x20000e0d

08010b10 <SUBGRF_GetPayload>:
{
 8010b10:	b570      	push	{r4, r5, r6, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	4606      	mov	r6, r0
 8010b16:	460c      	mov	r4, r1
 8010b18:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8010b20:	f10d 0107 	add.w	r1, sp, #7
 8010b24:	4620      	mov	r0, r4
 8010b26:	f7ff ffd1 	bl	8010acc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8010b2a:	7822      	ldrb	r2, [r4, #0]
 8010b2c:	42aa      	cmp	r2, r5
 8010b2e:	d902      	bls.n	8010b36 <SUBGRF_GetPayload+0x26>
        return 1;
 8010b30:	2001      	movs	r0, #1
}
 8010b32:	b002      	add	sp, #8
 8010b34:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8010b36:	4631      	mov	r1, r6
 8010b38:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010b3c:	f7ff fb6c 	bl	8010218 <SUBGRF_ReadBuffer>
    return 0;
 8010b40:	2000      	movs	r0, #0
 8010b42:	e7f6      	b.n	8010b32 <SUBGRF_GetPayload+0x22>

08010b44 <SUBGRF_GetPacketStatus>:
{
 8010b44:	b510      	push	{r4, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8010b4a:	2203      	movs	r2, #3
 8010b4c:	a901      	add	r1, sp, #4
 8010b4e:	2014      	movs	r0, #20
 8010b50:	f7ff ff9e 	bl	8010a90 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8010b54:	f7ff faa4 	bl	80100a0 <SUBGRF_GetPacketType>
 8010b58:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8010b5a:	b148      	cbz	r0, 8010b70 <SUBGRF_GetPacketStatus+0x2c>
 8010b5c:	2801      	cmp	r0, #1
 8010b5e:	d018      	beq.n	8010b92 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8010b60:	2214      	movs	r2, #20
 8010b62:	2100      	movs	r1, #0
 8010b64:	4620      	mov	r0, r4
 8010b66:	f000 fb20 	bl	80111aa <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8010b6a:	230f      	movs	r3, #15
 8010b6c:	7023      	strb	r3, [r4, #0]
}
 8010b6e:	e00e      	b.n	8010b8e <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8010b70:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010b74:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8010b76:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010b7a:	425b      	negs	r3, r3
 8010b7c:	105b      	asrs	r3, r3, #1
 8010b7e:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8010b80:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010b84:	425b      	negs	r3, r3
 8010b86:	105b      	asrs	r3, r3, #1
 8010b88:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	60a3      	str	r3, [r4, #8]
}
 8010b8e:	b002      	add	sp, #8
 8010b90:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8010b92:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010b96:	425b      	negs	r3, r3
 8010b98:	105b      	asrs	r3, r3, #1
 8010b9a:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8010b9c:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8010ba0:	3302      	adds	r3, #2
 8010ba2:	109b      	asrs	r3, r3, #2
 8010ba4:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8010ba6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010baa:	425b      	negs	r3, r3
 8010bac:	105b      	asrs	r3, r3, #1
 8010bae:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8010bb0:	4b01      	ldr	r3, [pc, #4]	; (8010bb8 <SUBGRF_GetPacketStatus+0x74>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	6123      	str	r3, [r4, #16]
            break;
 8010bb6:	e7ea      	b.n	8010b8e <SUBGRF_GetPacketStatus+0x4a>
 8010bb8:	20000e08 	.word	0x20000e08

08010bbc <SUBGRF_SetSwitch>:
{
 8010bbc:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8010bbe:	2901      	cmp	r1, #1
 8010bc0:	d003      	beq.n	8010bca <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8010bc2:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8010bc4:	f7f1 fcf0 	bl	80025a8 <RBI_ConfigRFSwitch>
}
 8010bc8:	bd10      	pop	{r4, pc}
 8010bca:	4604      	mov	r4, r0
 8010bcc:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8010bce:	2c01      	cmp	r4, #1
 8010bd0:	d003      	beq.n	8010bda <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8010bd2:	2c02      	cmp	r4, #2
 8010bd4:	d1f6      	bne.n	8010bc4 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8010bd6:	2003      	movs	r0, #3
 8010bd8:	e7f4      	b.n	8010bc4 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8010bda:	2004      	movs	r0, #4
 8010bdc:	f7ff fa86 	bl	80100ec <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8010be0:	2002      	movs	r0, #2
 8010be2:	e7f6      	b.n	8010bd2 <SUBGRF_SetSwitch+0x16>

08010be4 <SUBGRF_SetRfTxPower>:
{
 8010be4:	b538      	push	{r3, r4, r5, lr}
 8010be6:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8010be8:	f7f1 fce2 	bl	80025b0 <RBI_GetTxConfig>
    switch (TxConfig)
 8010bec:	b148      	cbz	r0, 8010c02 <SUBGRF_SetRfTxPower+0x1e>
 8010bee:	2802      	cmp	r0, #2
 8010bf0:	d10d      	bne.n	8010c0e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8010bf2:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8010bf4:	2202      	movs	r2, #2
 8010bf6:	4621      	mov	r1, r4
 8010bf8:	4628      	mov	r0, r5
 8010bfa:	f7ff fdb3 	bl	8010764 <SUBGRF_SetTxParams>
}
 8010bfe:	4628      	mov	r0, r5
 8010c00:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8010c02:	2c0f      	cmp	r4, #15
 8010c04:	dc01      	bgt.n	8010c0a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8010c06:	2501      	movs	r5, #1
 8010c08:	e7f4      	b.n	8010bf4 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8010c0a:	2502      	movs	r5, #2
 8010c0c:	e7f2      	b.n	8010bf4 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8010c0e:	2501      	movs	r5, #1
 8010c10:	e7f0      	b.n	8010bf4 <SUBGRF_SetRfTxPower+0x10>

08010c12 <SUBGRF_GetRadioWakeUpTime>:
}
 8010c12:	2001      	movs	r0, #1
 8010c14:	4770      	bx	lr
	...

08010c18 <HAL_SUBGHZ_TxCpltCallback>:
{
 8010c18:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8010c1a:	4b02      	ldr	r3, [pc, #8]	; (8010c24 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	2001      	movs	r0, #1
 8010c20:	4798      	blx	r3
}
 8010c22:	bd08      	pop	{r3, pc}
 8010c24:	20000e10 	.word	0x20000e10

08010c28 <HAL_SUBGHZ_RxCpltCallback>:
{
 8010c28:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8010c2a:	4b02      	ldr	r3, [pc, #8]	; (8010c34 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	2002      	movs	r0, #2
 8010c30:	4798      	blx	r3
}
 8010c32:	bd08      	pop	{r3, pc}
 8010c34:	20000e10 	.word	0x20000e10

08010c38 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8010c38:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8010c3a:	4b02      	ldr	r3, [pc, #8]	; (8010c44 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	2040      	movs	r0, #64	; 0x40
 8010c40:	4798      	blx	r3
}
 8010c42:	bd08      	pop	{r3, pc}
 8010c44:	20000e10 	.word	0x20000e10

08010c48 <HAL_SUBGHZ_CADStatusCallback>:
{
 8010c48:	b508      	push	{r3, lr}
    switch (cadstatus)
 8010c4a:	b111      	cbz	r1, 8010c52 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8010c4c:	2901      	cmp	r1, #1
 8010c4e:	d005      	beq.n	8010c5c <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8010c50:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8010c52:	4b05      	ldr	r3, [pc, #20]	; (8010c68 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	2080      	movs	r0, #128	; 0x80
 8010c58:	4798      	blx	r3
            break;
 8010c5a:	e7f9      	b.n	8010c50 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8010c5c:	4b02      	ldr	r3, [pc, #8]	; (8010c68 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010c64:	4798      	blx	r3
}
 8010c66:	e7f3      	b.n	8010c50 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8010c68:	20000e10 	.word	0x20000e10

08010c6c <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8010c6c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8010c6e:	4b03      	ldr	r3, [pc, #12]	; (8010c7c <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010c76:	4798      	blx	r3
}
 8010c78:	bd08      	pop	{r3, pc}
 8010c7a:	bf00      	nop
 8010c7c:	20000e10 	.word	0x20000e10

08010c80 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8010c80:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8010c82:	4b02      	ldr	r3, [pc, #8]	; (8010c8c <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	2020      	movs	r0, #32
 8010c88:	4798      	blx	r3
}
 8010c8a:	bd08      	pop	{r3, pc}
 8010c8c:	20000e10 	.word	0x20000e10

08010c90 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8010c90:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8010c92:	4b02      	ldr	r3, [pc, #8]	; (8010c9c <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	2004      	movs	r0, #4
 8010c98:	4798      	blx	r3
}
 8010c9a:	bd08      	pop	{r3, pc}
 8010c9c:	20000e10 	.word	0x20000e10

08010ca0 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8010ca0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8010ca2:	4b02      	ldr	r3, [pc, #8]	; (8010cac <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2008      	movs	r0, #8
 8010ca8:	4798      	blx	r3
}
 8010caa:	bd08      	pop	{r3, pc}
 8010cac:	20000e10 	.word	0x20000e10

08010cb0 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8010cb0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8010cb2:	4b02      	ldr	r3, [pc, #8]	; (8010cbc <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	2010      	movs	r0, #16
 8010cb8:	4798      	blx	r3
}
 8010cba:	bd08      	pop	{r3, pc}
 8010cbc:	20000e10 	.word	0x20000e10

08010cc0 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8010cc0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8010cc2:	4b03      	ldr	r3, [pc, #12]	; (8010cd0 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8010cca:	4798      	blx	r3
}
 8010ccc:	bd08      	pop	{r3, pc}
 8010cce:	bf00      	nop
 8010cd0:	20000e10 	.word	0x20000e10

08010cd4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8010cd4:	4601      	mov	r1, r0
 8010cd6:	b188      	cbz	r0, 8010cfc <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010cd8:	2300      	movs	r3, #0
 8010cda:	2b15      	cmp	r3, #21
 8010cdc:	d80d      	bhi.n	8010cfa <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8010cde:	4618      	mov	r0, r3
 8010ce0:	4a07      	ldr	r2, [pc, #28]	; (8010d00 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8010ce2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010ce6:	428a      	cmp	r2, r1
 8010ce8:	d802      	bhi.n	8010cf0 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010cea:	3301      	adds	r3, #1
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	e7f4      	b.n	8010cda <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8010cf0:	4b03      	ldr	r3, [pc, #12]	; (8010d00 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8010cf2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8010cf6:	7918      	ldrb	r0, [r3, #4]
 8010cf8:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8010cfa:	e7fe      	b.n	8010cfa <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8010cfc:	201f      	movs	r0, #31
}
 8010cfe:	4770      	bx	lr
 8010d00:	080129e0 	.word	0x080129e0

08010d04 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8010d04:	b570      	push	{r4, r5, r6, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	4605      	mov	r5, r0
 8010d0a:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8010d0c:	4b1d      	ldr	r3, [pc, #116]	; (8010d84 <SUBGRF_GetCFO+0x80>)
 8010d0e:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8010d10:	f640 0007 	movw	r0, #2055	; 0x807
 8010d14:	f7ff f9da 	bl	80100cc <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8010d18:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8010d1c:	3308      	adds	r3, #8
 8010d1e:	446b      	add	r3, sp
 8010d20:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8010d24:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8010d28:	3301      	adds	r3, #1
 8010d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8010d2e:	4a16      	ldr	r2, [pc, #88]	; (8010d88 <SUBGRF_GetCFO+0x84>)
 8010d30:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8010d34:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8010d38:	2807      	cmp	r0, #7
 8010d3a:	d921      	bls.n	8010d80 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8010d3c:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8010d3e:	fb03 f000 	mul.w	r0, r3, r0
 8010d42:	2803      	cmp	r0, #3
 8010d44:	d800      	bhi.n	8010d48 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8010d46:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8010d48:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8010d4c:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8010d50:	f7ff f9bc 	bl	80100cc <SUBGRF_ReadRegister>
 8010d54:	0206      	lsls	r6, r0, #8
 8010d56:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8010d5a:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8010d5e:	f7ff f9b5 	bl	80100cc <SUBGRF_ReadRegister>
 8010d62:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8010d64:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8010d68:	d003      	beq.n	8010d72 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8010d6a:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8010d6e:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8010d72:	096b      	lsrs	r3, r5, #5
 8010d74:	fb03 f000 	mul.w	r0, r3, r0
 8010d78:	11c0      	asrs	r0, r0, #7
 8010d7a:	6020      	str	r0, [r4, #0]
}
 8010d7c:	b002      	add	sp, #8
 8010d7e:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8010d80:	2302      	movs	r3, #2
 8010d82:	e7dc      	b.n	8010d3e <SUBGRF_GetCFO+0x3a>
 8010d84:	0c0a0804 	.word	0x0c0a0804
 8010d88:	01e84800 	.word	0x01e84800

08010d8c <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8010d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d90:	4770      	bx	lr

08010d92 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8010d92:	f04f 30ff 	mov.w	r0, #4294967295
 8010d96:	4770      	bx	lr

08010d98 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8010d98:	4770      	bx	lr

08010d9a <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8010d9a:	2000      	movs	r0, #0
 8010d9c:	4770      	bx	lr

08010d9e <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8010d9e:	2000      	movs	r0, #0
 8010da0:	4770      	bx	lr

08010da2 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8010da2:	4770      	bx	lr

08010da4 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8010da4:	f04f 30ff 	mov.w	r0, #4294967295
 8010da8:	4770      	bx	lr

08010daa <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8010daa:	f04f 30ff 	mov.w	r0, #4294967295
 8010dae:	4770      	bx	lr

08010db0 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8010db0:	4770      	bx	lr

08010db2 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8010db2:	4770      	bx	lr

08010db4 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8010db4:	4770      	bx	lr
	...

08010db8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8010db8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dba:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010dbe:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8010dc0:	4b1e      	ldr	r3, [pc, #120]	; (8010e3c <TRACE_AllocateBufer+0x84>)
 8010dc2:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8010dc6:	8a1a      	ldrh	r2, [r3, #16]
 8010dc8:	4596      	cmp	lr, r2
 8010dca:	d011      	beq.n	8010df0 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010dcc:	4596      	cmp	lr, r2
 8010dce:	d921      	bls.n	8010e14 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8010dd0:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8010dd4:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8010dd6:	4283      	cmp	r3, r0
 8010dd8:	d81f      	bhi.n	8010e1a <TRACE_AllocateBufer+0x62>
 8010dda:	4282      	cmp	r2, r0
 8010ddc:	d91d      	bls.n	8010e1a <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8010dde:	4b17      	ldr	r3, [pc, #92]	; (8010e3c <TRACE_AllocateBufer+0x84>)
 8010de0:	2401      	movs	r4, #1
 8010de2:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8010de4:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8010de8:	2400      	movs	r4, #0
 8010dea:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8010dec:	4613      	mov	r3, r2
 8010dee:	e014      	b.n	8010e1a <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8010df0:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8010df4:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8010df6:	4298      	cmp	r0, r3
 8010df8:	d30f      	bcc.n	8010e1a <TRACE_AllocateBufer+0x62>
 8010dfa:	4282      	cmp	r2, r0
 8010dfc:	d90d      	bls.n	8010e1a <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8010dfe:	4b0f      	ldr	r3, [pc, #60]	; (8010e3c <TRACE_AllocateBufer+0x84>)
 8010e00:	2401      	movs	r4, #1
 8010e02:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8010e04:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8010e08:	f04f 0e00 	mov.w	lr, #0
 8010e0c:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8010e10:	4613      	mov	r3, r2
 8010e12:	e002      	b.n	8010e1a <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8010e14:	eba2 020e 	sub.w	r2, r2, lr
 8010e18:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8010e1a:	4283      	cmp	r3, r0
 8010e1c:	d90a      	bls.n	8010e34 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8010e1e:	4a07      	ldr	r2, [pc, #28]	; (8010e3c <TRACE_AllocateBufer+0x84>)
 8010e20:	8a53      	ldrh	r3, [r2, #18]
 8010e22:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8010e24:	4403      	add	r3, r0
 8010e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010e2a:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8010e2c:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e2e:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8010e32:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8010e34:	f04f 30ff 	mov.w	r0, #4294967295
 8010e38:	e7f9      	b.n	8010e2e <TRACE_AllocateBufer+0x76>
 8010e3a:	bf00      	nop
 8010e3c:	20001214 	.word	0x20001214

08010e40 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e40:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010e44:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8010e46:	4a03      	ldr	r2, [pc, #12]	; (8010e54 <TRACE_Lock+0x14>)
 8010e48:	8ad3      	ldrh	r3, [r2, #22]
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e4e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8010e52:	4770      	bx	lr
 8010e54:	20001214 	.word	0x20001214

08010e58 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e58:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010e5c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8010e5e:	4a03      	ldr	r2, [pc, #12]	; (8010e6c <TRACE_UnLock+0x14>)
 8010e60:	8ad3      	ldrh	r3, [r2, #22]
 8010e62:	3b01      	subs	r3, #1
 8010e64:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e66:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8010e6a:	4770      	bx	lr
 8010e6c:	20001214 	.word	0x20001214

08010e70 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8010e70:	4b02      	ldr	r3, [pc, #8]	; (8010e7c <TRACE_IsLocked+0xc>)
 8010e72:	8ad8      	ldrh	r0, [r3, #22]
}
 8010e74:	3800      	subs	r0, #0
 8010e76:	bf18      	it	ne
 8010e78:	2001      	movne	r0, #1
 8010e7a:	4770      	bx	lr
 8010e7c:	20001214 	.word	0x20001214

08010e80 <UTIL_ADV_TRACE_Init>:
{
 8010e80:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8010e82:	2218      	movs	r2, #24
 8010e84:	2100      	movs	r1, #0
 8010e86:	4807      	ldr	r0, [pc, #28]	; (8010ea4 <UTIL_ADV_TRACE_Init+0x24>)
 8010e88:	f000 f98f 	bl	80111aa <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8010e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010e90:	2100      	movs	r1, #0
 8010e92:	4805      	ldr	r0, [pc, #20]	; (8010ea8 <UTIL_ADV_TRACE_Init+0x28>)
 8010e94:	f000 f989 	bl	80111aa <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8010e98:	4b04      	ldr	r3, [pc, #16]	; (8010eac <UTIL_ADV_TRACE_Init+0x2c>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	4804      	ldr	r0, [pc, #16]	; (8010eb0 <UTIL_ADV_TRACE_Init+0x30>)
 8010e9e:	4798      	blx	r3
}
 8010ea0:	bd08      	pop	{r3, pc}
 8010ea2:	bf00      	nop
 8010ea4:	20001214 	.word	0x20001214
 8010ea8:	20000e14 	.word	0x20000e14
 8010eac:	08011d18 	.word	0x08011d18
 8010eb0:	08011031 	.word	0x08011031

08010eb4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8010eb4:	4b01      	ldr	r3, [pc, #4]	; (8010ebc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8010eb6:	6058      	str	r0, [r3, #4]
}
 8010eb8:	4770      	bx	lr
 8010eba:	bf00      	nop
 8010ebc:	20001214 	.word	0x20001214

08010ec0 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8010ec0:	4b01      	ldr	r3, [pc, #4]	; (8010ec8 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8010ec2:	7218      	strb	r0, [r3, #8]
}
 8010ec4:	4770      	bx	lr
 8010ec6:	bf00      	nop
 8010ec8:	20001214 	.word	0x20001214

08010ecc <TRACE_Send>:
{
 8010ecc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ece:	f3ef 8310 	mrs	r3, PRIMASK
 8010ed2:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8010ed4:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8010ed6:	f7ff ffcb 	bl	8010e70 <TRACE_IsLocked>
 8010eda:	b118      	cbz	r0, 8010ee4 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010edc:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8010ee0:	2000      	movs	r0, #0
}
 8010ee2:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8010ee4:	f7ff ffac 	bl	8010e40 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8010ee8:	4b1c      	ldr	r3, [pc, #112]	; (8010f5c <TRACE_Send+0x90>)
 8010eea:	8a1a      	ldrh	r2, [r3, #16]
 8010eec:	8a5b      	ldrh	r3, [r3, #18]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d02e      	beq.n	8010f50 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8010ef2:	491a      	ldr	r1, [pc, #104]	; (8010f5c <TRACE_Send+0x90>)
 8010ef4:	7889      	ldrb	r1, [r1, #2]
 8010ef6:	2901      	cmp	r1, #1
 8010ef8:	d017      	beq.n	8010f2a <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8010efa:	4a18      	ldr	r2, [pc, #96]	; (8010f5c <TRACE_Send+0x90>)
 8010efc:	7892      	ldrb	r2, [r2, #2]
 8010efe:	b932      	cbnz	r2, 8010f0e <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010f00:	4a16      	ldr	r2, [pc, #88]	; (8010f5c <TRACE_Send+0x90>)
 8010f02:	8a12      	ldrh	r2, [r2, #16]
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d91e      	bls.n	8010f46 <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8010f08:	1a9b      	subs	r3, r3, r2
 8010f0a:	4a14      	ldr	r2, [pc, #80]	; (8010f5c <TRACE_Send+0x90>)
 8010f0c:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8010f0e:	4e13      	ldr	r6, [pc, #76]	; (8010f5c <TRACE_Send+0x90>)
 8010f10:	8a33      	ldrh	r3, [r6, #16]
 8010f12:	4d13      	ldr	r5, [pc, #76]	; (8010f60 <TRACE_Send+0x94>)
 8010f14:	441d      	add	r5, r3
 8010f16:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8010f1a:	f7f0 fbdf 	bl	80016dc <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8010f1e:	4b11      	ldr	r3, [pc, #68]	; (8010f64 <TRACE_Send+0x98>)
 8010f20:	68db      	ldr	r3, [r3, #12]
 8010f22:	8ab1      	ldrh	r1, [r6, #20]
 8010f24:	4628      	mov	r0, r5
 8010f26:	4798      	blx	r3
 8010f28:	e7db      	b.n	8010ee2 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8010f2a:	480c      	ldr	r0, [pc, #48]	; (8010f5c <TRACE_Send+0x90>)
 8010f2c:	8801      	ldrh	r1, [r0, #0]
 8010f2e:	1a8a      	subs	r2, r1, r2
 8010f30:	b292      	uxth	r2, r2
 8010f32:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8010f34:	2102      	movs	r1, #2
 8010f36:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8010f38:	2100      	movs	r1, #0
 8010f3a:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8010f3c:	2a00      	cmp	r2, #0
 8010f3e:	d1dc      	bne.n	8010efa <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010f40:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010f42:	8201      	strh	r1, [r0, #16]
 8010f44:	e7d9      	b.n	8010efa <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8010f46:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8010f4a:	4b04      	ldr	r3, [pc, #16]	; (8010f5c <TRACE_Send+0x90>)
 8010f4c:	829a      	strh	r2, [r3, #20]
 8010f4e:	e7de      	b.n	8010f0e <TRACE_Send+0x42>
      TRACE_UnLock();
 8010f50:	f7ff ff82 	bl	8010e58 <TRACE_UnLock>
 8010f54:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8010f58:	2000      	movs	r0, #0
}
 8010f5a:	e7c2      	b.n	8010ee2 <TRACE_Send+0x16>
 8010f5c:	20001214 	.word	0x20001214
 8010f60:	20000e14 	.word	0x20000e14
 8010f64:	08011d18 	.word	0x08011d18

08010f68 <UTIL_ADV_TRACE_COND_FSend>:
{
 8010f68:	b408      	push	{r3}
 8010f6a:	b530      	push	{r4, r5, lr}
 8010f6c:	b086      	sub	sp, #24
 8010f6e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8010f70:	2300      	movs	r3, #0
 8010f72:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8010f76:	4b2b      	ldr	r3, [pc, #172]	; (8011024 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010f78:	7a1b      	ldrb	r3, [r3, #8]
 8010f7a:	4283      	cmp	r3, r0
 8010f7c:	d34c      	bcc.n	8011018 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8010f7e:	4b29      	ldr	r3, [pc, #164]	; (8011024 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	4399      	bics	r1, r3
 8010f84:	d14b      	bne.n	801101e <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8010f86:	4b27      	ldr	r3, [pc, #156]	; (8011024 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	b123      	cbz	r3, 8010f96 <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8010f8c:	b11a      	cbz	r2, 8010f96 <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8010f8e:	f10d 0102 	add.w	r1, sp, #2
 8010f92:	a801      	add	r0, sp, #4
 8010f94:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8010f96:	ab0a      	add	r3, sp, #40	; 0x28
 8010f98:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010f9a:	4622      	mov	r2, r4
 8010f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010fa0:	4821      	ldr	r0, [pc, #132]	; (8011028 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8010fa2:	f000 fcd1 	bl	8011948 <tiny_vsnprintf_like>
 8010fa6:	b285      	uxth	r5, r0
  TRACE_Lock();
 8010fa8:	f7ff ff4a 	bl	8010e40 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8010fac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010fb0:	18e8      	adds	r0, r5, r3
 8010fb2:	4669      	mov	r1, sp
 8010fb4:	b280      	uxth	r0, r0
 8010fb6:	f7ff feff 	bl	8010db8 <TRACE_AllocateBufer>
 8010fba:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010fbe:	d026      	beq.n	801100e <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	e00d      	b.n	8010fe0 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8010fc4:	f8bd 2000 	ldrh.w	r2, [sp]
 8010fc8:	f103 0118 	add.w	r1, r3, #24
 8010fcc:	4469      	add	r1, sp
 8010fce:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8010fd2:	4916      	ldr	r1, [pc, #88]	; (801102c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8010fd4:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8010fd6:	3201      	adds	r2, #1
 8010fd8:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8010fdc:	3301      	adds	r3, #1
 8010fde:	b29b      	uxth	r3, r3
 8010fe0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d8ed      	bhi.n	8010fc4 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010fe8:	f8bd 0000 	ldrh.w	r0, [sp]
 8010fec:	9b05      	ldr	r3, [sp, #20]
 8010fee:	4622      	mov	r2, r4
 8010ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010ff4:	4c0d      	ldr	r4, [pc, #52]	; (801102c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8010ff6:	4420      	add	r0, r4
 8010ff8:	f000 fca6 	bl	8011948 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8010ffc:	f7ff ff2c 	bl	8010e58 <TRACE_UnLock>
    return TRACE_Send();
 8011000:	f7ff ff64 	bl	8010ecc <TRACE_Send>
}
 8011004:	b006      	add	sp, #24
 8011006:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801100a:	b001      	add	sp, #4
 801100c:	4770      	bx	lr
  TRACE_UnLock();
 801100e:	f7ff ff23 	bl	8010e58 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8011012:	f06f 0002 	mvn.w	r0, #2
 8011016:	e7f5      	b.n	8011004 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8011018:	f06f 0004 	mvn.w	r0, #4
 801101c:	e7f2      	b.n	8011004 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 801101e:	f06f 0005 	mvn.w	r0, #5
 8011022:	e7ef      	b.n	8011004 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8011024:	20001214 	.word	0x20001214
 8011028:	2000122c 	.word	0x2000122c
 801102c:	20000e14 	.word	0x20000e14

08011030 <TRACE_TxCpltCallback>:
{
 8011030:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011032:	f3ef 8310 	mrs	r3, PRIMASK
 8011036:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8011038:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801103a:	4b26      	ldr	r3, [pc, #152]	; (80110d4 <TRACE_TxCpltCallback+0xa4>)
 801103c:	789b      	ldrb	r3, [r3, #2]
 801103e:	2b02      	cmp	r3, #2
 8011040:	d016      	beq.n	8011070 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8011042:	4a24      	ldr	r2, [pc, #144]	; (80110d4 <TRACE_TxCpltCallback+0xa4>)
 8011044:	8a13      	ldrh	r3, [r2, #16]
 8011046:	8a90      	ldrh	r0, [r2, #20]
 8011048:	4403      	add	r3, r0
 801104a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801104e:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8011050:	4b20      	ldr	r3, [pc, #128]	; (80110d4 <TRACE_TxCpltCallback+0xa4>)
 8011052:	8a1a      	ldrh	r2, [r3, #16]
 8011054:	8a5b      	ldrh	r3, [r3, #18]
 8011056:	429a      	cmp	r2, r3
 8011058:	d003      	beq.n	8011062 <TRACE_TxCpltCallback+0x32>
 801105a:	481e      	ldr	r0, [pc, #120]	; (80110d4 <TRACE_TxCpltCallback+0xa4>)
 801105c:	8ac0      	ldrh	r0, [r0, #22]
 801105e:	2801      	cmp	r0, #1
 8011060:	d00b      	beq.n	801107a <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011062:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8011066:	f7f0 fb3f 	bl	80016e8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801106a:	f7ff fef5 	bl	8010e58 <TRACE_UnLock>
}
 801106e:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8011070:	4b18      	ldr	r3, [pc, #96]	; (80110d4 <TRACE_TxCpltCallback+0xa4>)
 8011072:	2200      	movs	r2, #0
 8011074:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8011076:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8011078:	e7ea      	b.n	8011050 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801107a:	4816      	ldr	r0, [pc, #88]	; (80110d4 <TRACE_TxCpltCallback+0xa4>)
 801107c:	7880      	ldrb	r0, [r0, #2]
 801107e:	2801      	cmp	r0, #1
 8011080:	d014      	beq.n	80110ac <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8011082:	4a14      	ldr	r2, [pc, #80]	; (80110d4 <TRACE_TxCpltCallback+0xa4>)
 8011084:	7892      	ldrb	r2, [r2, #2]
 8011086:	b932      	cbnz	r2, 8011096 <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011088:	4a12      	ldr	r2, [pc, #72]	; (80110d4 <TRACE_TxCpltCallback+0xa4>)
 801108a:	8a12      	ldrh	r2, [r2, #16]
 801108c:	4293      	cmp	r3, r2
 801108e:	d91b      	bls.n	80110c8 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8011090:	1a9b      	subs	r3, r3, r2
 8011092:	4a10      	ldr	r2, [pc, #64]	; (80110d4 <TRACE_TxCpltCallback+0xa4>)
 8011094:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8011096:	4b0f      	ldr	r3, [pc, #60]	; (80110d4 <TRACE_TxCpltCallback+0xa4>)
 8011098:	8a1a      	ldrh	r2, [r3, #16]
 801109a:	480f      	ldr	r0, [pc, #60]	; (80110d8 <TRACE_TxCpltCallback+0xa8>)
 801109c:	4410      	add	r0, r2
 801109e:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80110a2:	4a0e      	ldr	r2, [pc, #56]	; (80110dc <TRACE_TxCpltCallback+0xac>)
 80110a4:	68d2      	ldr	r2, [r2, #12]
 80110a6:	8a99      	ldrh	r1, [r3, #20]
 80110a8:	4790      	blx	r2
 80110aa:	e7e0      	b.n	801106e <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80110ac:	4c09      	ldr	r4, [pc, #36]	; (80110d4 <TRACE_TxCpltCallback+0xa4>)
 80110ae:	8820      	ldrh	r0, [r4, #0]
 80110b0:	1a82      	subs	r2, r0, r2
 80110b2:	b292      	uxth	r2, r2
 80110b4:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80110b6:	2002      	movs	r0, #2
 80110b8:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80110ba:	2000      	movs	r0, #0
 80110bc:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80110be:	2a00      	cmp	r2, #0
 80110c0:	d1df      	bne.n	8011082 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80110c2:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80110c4:	8220      	strh	r0, [r4, #16]
 80110c6:	e7dc      	b.n	8011082 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80110c8:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 80110cc:	4b01      	ldr	r3, [pc, #4]	; (80110d4 <TRACE_TxCpltCallback+0xa4>)
 80110ce:	829a      	strh	r2, [r3, #20]
 80110d0:	e7e1      	b.n	8011096 <TRACE_TxCpltCallback+0x66>
 80110d2:	bf00      	nop
 80110d4:	20001214 	.word	0x20001214
 80110d8:	20000e14 	.word	0x20000e14
 80110dc:	08011d18 	.word	0x08011d18

080110e0 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80110e0:	2300      	movs	r3, #0
 80110e2:	4a02      	ldr	r2, [pc, #8]	; (80110ec <UTIL_LPM_Init+0xc>)
 80110e4:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80110e6:	4a02      	ldr	r2, [pc, #8]	; (80110f0 <UTIL_LPM_Init+0x10>)
 80110e8:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80110ea:	4770      	bx	lr
 80110ec:	20001430 	.word	0x20001430
 80110f0:	2000142c 	.word	0x2000142c

080110f4 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110f4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80110f8:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80110fa:	b141      	cbz	r1, 801110e <UTIL_LPM_SetStopMode+0x1a>
 80110fc:	2901      	cmp	r1, #1
 80110fe:	d103      	bne.n	8011108 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8011100:	4906      	ldr	r1, [pc, #24]	; (801111c <UTIL_LPM_SetStopMode+0x28>)
 8011102:	680a      	ldr	r2, [r1, #0]
 8011104:	4302      	orrs	r2, r0
 8011106:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011108:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801110c:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 801110e:	4903      	ldr	r1, [pc, #12]	; (801111c <UTIL_LPM_SetStopMode+0x28>)
 8011110:	680a      	ldr	r2, [r1, #0]
 8011112:	ea22 0200 	bic.w	r2, r2, r0
 8011116:	600a      	str	r2, [r1, #0]
      break;
 8011118:	e7f6      	b.n	8011108 <UTIL_LPM_SetStopMode+0x14>
 801111a:	bf00      	nop
 801111c:	20001430 	.word	0x20001430

08011120 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011120:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011124:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8011126:	b141      	cbz	r1, 801113a <UTIL_LPM_SetOffMode+0x1a>
 8011128:	2901      	cmp	r1, #1
 801112a:	d103      	bne.n	8011134 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801112c:	4906      	ldr	r1, [pc, #24]	; (8011148 <UTIL_LPM_SetOffMode+0x28>)
 801112e:	680a      	ldr	r2, [r1, #0]
 8011130:	4302      	orrs	r2, r0
 8011132:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011134:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011138:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 801113a:	4903      	ldr	r1, [pc, #12]	; (8011148 <UTIL_LPM_SetOffMode+0x28>)
 801113c:	680a      	ldr	r2, [r1, #0]
 801113e:	ea22 0200 	bic.w	r2, r2, r0
 8011142:	600a      	str	r2, [r1, #0]
      break;
 8011144:	e7f6      	b.n	8011134 <UTIL_LPM_SetOffMode+0x14>
 8011146:	bf00      	nop
 8011148:	2000142c 	.word	0x2000142c

0801114c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801114c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801114e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011152:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8011154:	4b0c      	ldr	r3, [pc, #48]	; (8011188 <UTIL_LPM_EnterLowPower+0x3c>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	b13b      	cbz	r3, 801116a <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801115a:	4d0c      	ldr	r5, [pc, #48]	; (801118c <UTIL_LPM_EnterLowPower+0x40>)
 801115c:	682b      	ldr	r3, [r5, #0]
 801115e:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8011160:	686b      	ldr	r3, [r5, #4]
 8011162:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011164:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8011168:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801116a:	4b09      	ldr	r3, [pc, #36]	; (8011190 <UTIL_LPM_EnterLowPower+0x44>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	b12b      	cbz	r3, 801117c <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8011170:	4d06      	ldr	r5, [pc, #24]	; (801118c <UTIL_LPM_EnterLowPower+0x40>)
 8011172:	68ab      	ldr	r3, [r5, #8]
 8011174:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8011176:	68eb      	ldr	r3, [r5, #12]
 8011178:	4798      	blx	r3
 801117a:	e7f3      	b.n	8011164 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 801117c:	4d03      	ldr	r5, [pc, #12]	; (801118c <UTIL_LPM_EnterLowPower+0x40>)
 801117e:	692b      	ldr	r3, [r5, #16]
 8011180:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8011182:	696b      	ldr	r3, [r5, #20]
 8011184:	4798      	blx	r3
 8011186:	e7ed      	b.n	8011164 <UTIL_LPM_EnterLowPower+0x18>
 8011188:	20001430 	.word	0x20001430
 801118c:	08011cb4 	.word	0x08011cb4
 8011190:	2000142c 	.word	0x2000142c

08011194 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8011194:	e004      	b.n	80111a0 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8011196:	f811 2b01 	ldrb.w	r2, [r1], #1
 801119a:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 801119e:	461a      	mov	r2, r3
 80111a0:	1e53      	subs	r3, r2, #1
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	2a00      	cmp	r2, #0
 80111a6:	d1f6      	bne.n	8011196 <UTIL_MEM_cpy_8+0x2>
    }
}
 80111a8:	4770      	bx	lr

080111aa <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80111aa:	e002      	b.n	80111b2 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 80111ac:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 80111b0:	461a      	mov	r2, r3
 80111b2:	1e53      	subs	r3, r2, #1
 80111b4:	b29b      	uxth	r3, r3
 80111b6:	2a00      	cmp	r2, #0
 80111b8:	d1f8      	bne.n	80111ac <UTIL_MEM_set_8+0x2>
  }
}
 80111ba:	4770      	bx	lr

080111bc <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111bc:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80111c0:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 80111c2:	4a06      	ldr	r2, [pc, #24]	; (80111dc <UTIL_SEQ_SetTask+0x20>)
 80111c4:	6813      	ldr	r3, [r2, #0]
 80111c6:	4303      	orrs	r3, r0
 80111c8:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80111ca:	4a05      	ldr	r2, [pc, #20]	; (80111e0 <UTIL_SEQ_SetTask+0x24>)
 80111cc:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80111d0:	4303      	orrs	r3, r0
 80111d2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80111d6:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80111da:	4770      	bx	lr
 80111dc:	20001458 	.word	0x20001458
 80111e0:	20001450 	.word	0x20001450

080111e4 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80111e4:	4770      	bx	lr

080111e6 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80111e6:	4770      	bx	lr

080111e8 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80111e8:	0c03      	lsrs	r3, r0, #16
 80111ea:	041b      	lsls	r3, r3, #16
 80111ec:	b9b3      	cbnz	r3, 801121c <SEQ_BitPosition+0x34>
 80111ee:	0400      	lsls	r0, r0, #16
 80111f0:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80111f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80111f6:	d102      	bne.n	80111fe <SEQ_BitPosition+0x16>
 80111f8:	3308      	adds	r3, #8
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80111fe:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011202:	d102      	bne.n	801120a <SEQ_BitPosition+0x22>
 8011204:	3304      	adds	r3, #4
 8011206:	b2db      	uxtb	r3, r3
 8011208:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801120a:	0f00      	lsrs	r0, r0, #28
 801120c:	4a04      	ldr	r2, [pc, #16]	; (8011220 <SEQ_BitPosition+0x38>)
 801120e:	5c10      	ldrb	r0, [r2, r0]
 8011210:	4418      	add	r0, r3
 8011212:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8011214:	f1c0 001f 	rsb	r0, r0, #31
}
 8011218:	b2c0      	uxtb	r0, r0
 801121a:	4770      	bx	lr
uint8_t n = 0U;
 801121c:	2300      	movs	r3, #0
 801121e:	e7e8      	b.n	80111f2 <SEQ_BitPosition+0xa>
 8011220:	08012a90 	.word	0x08012a90

08011224 <UTIL_SEQ_Run>:
{
 8011224:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8011226:	4b42      	ldr	r3, [pc, #264]	; (8011330 <UTIL_SEQ_Run+0x10c>)
 8011228:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 801122a:	4020      	ands	r0, r4
 801122c:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 801122e:	4b41      	ldr	r3, [pc, #260]	; (8011334 <UTIL_SEQ_Run+0x110>)
 8011230:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 8011232:	4b41      	ldr	r3, [pc, #260]	; (8011338 <UTIL_SEQ_Run+0x114>)
 8011234:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8011236:	4941      	ldr	r1, [pc, #260]	; (801133c <UTIL_SEQ_Run+0x118>)
 8011238:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 801123a:	4941      	ldr	r1, [pc, #260]	; (8011340 <UTIL_SEQ_Run+0x11c>)
 801123c:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801123e:	e02f      	b.n	80112a0 <UTIL_SEQ_Run+0x7c>
      counter++;
 8011240:	3301      	adds	r3, #1
 8011242:	e034      	b.n	80112ae <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011244:	4d3f      	ldr	r5, [pc, #252]	; (8011344 <UTIL_SEQ_Run+0x120>)
 8011246:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801124a:	6868      	ldr	r0, [r5, #4]
 801124c:	4010      	ands	r0, r2
 801124e:	f7ff ffcb 	bl	80111e8 <SEQ_BitPosition>
 8011252:	4e3d      	ldr	r6, [pc, #244]	; (8011348 <UTIL_SEQ_Run+0x124>)
 8011254:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8011256:	686a      	ldr	r2, [r5, #4]
 8011258:	2301      	movs	r3, #1
 801125a:	fa03 f000 	lsl.w	r0, r3, r0
 801125e:	ea22 0200 	bic.w	r2, r2, r0
 8011262:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011264:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011268:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 801126a:	6832      	ldr	r2, [r6, #0]
 801126c:	fa03 f202 	lsl.w	r2, r3, r2
 8011270:	43d6      	mvns	r6, r2
 8011272:	4d30      	ldr	r5, [pc, #192]	; (8011334 <UTIL_SEQ_Run+0x110>)
 8011274:	6828      	ldr	r0, [r5, #0]
 8011276:	ea20 0202 	bic.w	r2, r0, r2
 801127a:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801127c:	2b00      	cmp	r3, #0
 801127e:	d12d      	bne.n	80112dc <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011280:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8011284:	4b30      	ldr	r3, [pc, #192]	; (8011348 <UTIL_SEQ_Run+0x124>)
 8011286:	681a      	ldr	r2, [r3, #0]
 8011288:	4b30      	ldr	r3, [pc, #192]	; (801134c <UTIL_SEQ_Run+0x128>)
 801128a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801128e:	4798      	blx	r3
    local_taskset = TaskSet;
 8011290:	4b28      	ldr	r3, [pc, #160]	; (8011334 <UTIL_SEQ_Run+0x110>)
 8011292:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 8011294:	4b28      	ldr	r3, [pc, #160]	; (8011338 <UTIL_SEQ_Run+0x114>)
 8011296:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8011298:	4928      	ldr	r1, [pc, #160]	; (801133c <UTIL_SEQ_Run+0x118>)
 801129a:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 801129c:	4928      	ldr	r1, [pc, #160]	; (8011340 <UTIL_SEQ_Run+0x11c>)
 801129e:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80112a0:	4002      	ands	r2, r0
 80112a2:	4d23      	ldr	r5, [pc, #140]	; (8011330 <UTIL_SEQ_Run+0x10c>)
 80112a4:	682d      	ldr	r5, [r5, #0]
 80112a6:	422a      	tst	r2, r5
 80112a8:	d020      	beq.n	80112ec <UTIL_SEQ_Run+0xc8>
 80112aa:	400b      	ands	r3, r1
 80112ac:	d11e      	bne.n	80112ec <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80112ae:	4a25      	ldr	r2, [pc, #148]	; (8011344 <UTIL_SEQ_Run+0x120>)
 80112b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80112b4:	4002      	ands	r2, r0
 80112b6:	422a      	tst	r2, r5
 80112b8:	d0c2      	beq.n	8011240 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80112ba:	4922      	ldr	r1, [pc, #136]	; (8011344 <UTIL_SEQ_Run+0x120>)
 80112bc:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80112c0:	4002      	ands	r2, r0
 80112c2:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80112c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80112c8:	6849      	ldr	r1, [r1, #4]
 80112ca:	4211      	tst	r1, r2
 80112cc:	d1ba      	bne.n	8011244 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80112ce:	491d      	ldr	r1, [pc, #116]	; (8011344 <UTIL_SEQ_Run+0x120>)
 80112d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80112d4:	f04f 30ff 	mov.w	r0, #4294967295
 80112d8:	6048      	str	r0, [r1, #4]
 80112da:	e7b3      	b.n	8011244 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80112dc:	3b01      	subs	r3, #1
 80112de:	4819      	ldr	r0, [pc, #100]	; (8011344 <UTIL_SEQ_Run+0x120>)
 80112e0:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 80112e4:	4032      	ands	r2, r6
 80112e6:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80112ea:	e7c7      	b.n	801127c <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80112ec:	4b16      	ldr	r3, [pc, #88]	; (8011348 <UTIL_SEQ_Run+0x124>)
 80112ee:	f04f 32ff 	mov.w	r2, #4294967295
 80112f2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80112f4:	f7ff ff76 	bl	80111e4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80112f8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80112fc:	b672      	cpsid	i
  local_taskset = TaskSet;
 80112fe:	4b0d      	ldr	r3, [pc, #52]	; (8011334 <UTIL_SEQ_Run+0x110>)
 8011300:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8011302:	4a0d      	ldr	r2, [pc, #52]	; (8011338 <UTIL_SEQ_Run+0x114>)
 8011304:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8011306:	4a0d      	ldr	r2, [pc, #52]	; (801133c <UTIL_SEQ_Run+0x118>)
 8011308:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801130a:	4013      	ands	r3, r2
 801130c:	4a08      	ldr	r2, [pc, #32]	; (8011330 <UTIL_SEQ_Run+0x10c>)
 801130e:	6812      	ldr	r2, [r2, #0]
 8011310:	4213      	tst	r3, r2
 8011312:	d103      	bne.n	801131c <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 8011314:	4b0a      	ldr	r3, [pc, #40]	; (8011340 <UTIL_SEQ_Run+0x11c>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	420b      	tst	r3, r1
 801131a:	d006      	beq.n	801132a <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801131c:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8011320:	f7ff ff61 	bl	80111e6 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8011324:	4b02      	ldr	r3, [pc, #8]	; (8011330 <UTIL_SEQ_Run+0x10c>)
 8011326:	601c      	str	r4, [r3, #0]
}
 8011328:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 801132a:	f7f0 f95d 	bl	80015e8 <UTIL_SEQ_Idle>
 801132e:	e7f5      	b.n	801131c <UTIL_SEQ_Run+0xf8>
 8011330:	20000110 	.word	0x20000110
 8011334:	20001458 	.word	0x20001458
 8011338:	20001438 	.word	0x20001438
 801133c:	20000114 	.word	0x20000114
 8011340:	2000143c 	.word	0x2000143c
 8011344:	20001450 	.word	0x20001450
 8011348:	20001434 	.word	0x20001434
 801134c:	20001440 	.word	0x20001440

08011350 <UTIL_SEQ_RegTask>:
{
 8011350:	b538      	push	{r3, r4, r5, lr}
 8011352:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011354:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011358:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801135a:	f7ff ff45 	bl	80111e8 <SEQ_BitPosition>
 801135e:	4b03      	ldr	r3, [pc, #12]	; (801136c <UTIL_SEQ_RegTask+0x1c>)
 8011360:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011364:	f385 8810 	msr	PRIMASK, r5
}
 8011368:	bd38      	pop	{r3, r4, r5, pc}
 801136a:	bf00      	nop
 801136c:	20001440 	.word	0x20001440

08011370 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8011370:	b082      	sub	sp, #8
 8011372:	b082      	sub	sp, #8
 8011374:	f10d 0c08 	add.w	ip, sp, #8
 8011378:	e90c 0006 	stmdb	ip, {r1, r2}
 801137c:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801137e:	2200      	movs	r2, #0
 8011380:	6002      	str	r2, [r0, #0]
 8011382:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8011384:	440b      	add	r3, r1
 8011386:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8011388:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801138c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8011390:	440a      	add	r2, r1
 8011392:	b291      	uxth	r1, r2
 8011394:	b212      	sxth	r2, r2
 8011396:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8011398:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 801139c:	db04      	blt.n	80113a8 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 801139e:	3301      	adds	r3, #1
 80113a0:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 80113a2:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80113a6:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 80113a8:	b002      	add	sp, #8
 80113aa:	b002      	add	sp, #8
 80113ac:	4770      	bx	lr

080113ae <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80113ae:	b082      	sub	sp, #8
 80113b0:	b082      	sub	sp, #8
 80113b2:	f10d 0c08 	add.w	ip, sp, #8
 80113b6:	e90c 0006 	stmdb	ip, {r1, r2}
 80113ba:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80113bc:	2200      	movs	r2, #0
 80113be:	6002      	str	r2, [r0, #0]
 80113c0:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 80113c2:	1acb      	subs	r3, r1, r3
 80113c4:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80113c6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80113ca:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80113ce:	1a52      	subs	r2, r2, r1
 80113d0:	b291      	uxth	r1, r2
 80113d2:	b212      	sxth	r2, r2
 80113d4:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 80113d6:	2a00      	cmp	r2, #0
 80113d8:	db02      	blt.n	80113e0 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 80113da:	b002      	add	sp, #8
 80113dc:	b002      	add	sp, #8
 80113de:	4770      	bx	lr
    c.Seconds--;
 80113e0:	3b01      	subs	r3, #1
 80113e2:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 80113e4:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80113e8:	8081      	strh	r1, [r0, #4]
  return c;
 80113ea:	e7f6      	b.n	80113da <SysTimeSub+0x2c>

080113ec <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80113ec:	b530      	push	{r4, r5, lr}
 80113ee:	b089      	sub	sp, #36	; 0x24
 80113f0:	ac02      	add	r4, sp, #8
 80113f2:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80113f6:	2300      	movs	r3, #0
 80113f8:	9304      	str	r3, [sp, #16]
 80113fa:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80113fe:	4d0b      	ldr	r5, [pc, #44]	; (801142c <SysTimeSet+0x40>)
 8011400:	692b      	ldr	r3, [r5, #16]
 8011402:	a805      	add	r0, sp, #20
 8011404:	4798      	blx	r3
 8011406:	4603      	mov	r3, r0
 8011408:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801140a:	9a05      	ldr	r2, [sp, #20]
 801140c:	9200      	str	r2, [sp, #0]
 801140e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011412:	a806      	add	r0, sp, #24
 8011414:	f7ff ffcb 	bl	80113ae <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8011418:	682b      	ldr	r3, [r5, #0]
 801141a:	9806      	ldr	r0, [sp, #24]
 801141c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801141e:	68ab      	ldr	r3, [r5, #8]
 8011420:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8011424:	4798      	blx	r3
}
 8011426:	b009      	add	sp, #36	; 0x24
 8011428:	bd30      	pop	{r4, r5, pc}
 801142a:	bf00      	nop
 801142c:	08011cd8 	.word	0x08011cd8

08011430 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8011430:	b530      	push	{r4, r5, lr}
 8011432:	b087      	sub	sp, #28
 8011434:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011436:	2300      	movs	r3, #0
 8011438:	9304      	str	r3, [sp, #16]
 801143a:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801143e:	6003      	str	r3, [r0, #0]
 8011440:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011442:	4d0b      	ldr	r5, [pc, #44]	; (8011470 <SysTimeGet+0x40>)
 8011444:	692b      	ldr	r3, [r5, #16]
 8011446:	a805      	add	r0, sp, #20
 8011448:	4798      	blx	r3
 801144a:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801144c:	68eb      	ldr	r3, [r5, #12]
 801144e:	4798      	blx	r3
 8011450:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011454:	686b      	ldr	r3, [r5, #4]
 8011456:	4798      	blx	r3
 8011458:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801145a:	9b05      	ldr	r3, [sp, #20]
 801145c:	9300      	str	r3, [sp, #0]
 801145e:	9b04      	ldr	r3, [sp, #16]
 8011460:	aa02      	add	r2, sp, #8
 8011462:	ca06      	ldmia	r2, {r1, r2}
 8011464:	4620      	mov	r0, r4
 8011466:	f7ff ff83 	bl	8011370 <SysTimeAdd>

  return sysTime;
}
 801146a:	4620      	mov	r0, r4
 801146c:	b007      	add	sp, #28
 801146e:	bd30      	pop	{r4, r5, pc}
 8011470:	08011cd8 	.word	0x08011cd8

08011474 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8011474:	b530      	push	{r4, r5, lr}
 8011476:	b083      	sub	sp, #12
 8011478:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801147a:	2300      	movs	r3, #0
 801147c:	9300      	str	r3, [sp, #0]
 801147e:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011482:	4b06      	ldr	r3, [pc, #24]	; (801149c <SysTimeGetMcuTime+0x28>)
 8011484:	691b      	ldr	r3, [r3, #16]
 8011486:	466d      	mov	r5, sp
 8011488:	a801      	add	r0, sp, #4
 801148a:	4798      	blx	r3
 801148c:	9000      	str	r0, [sp, #0]

  return calendarTime;
 801148e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011492:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8011496:	4620      	mov	r0, r4
 8011498:	b003      	add	sp, #12
 801149a:	bd30      	pop	{r4, r5, pc}
 801149c:	08011cd8 	.word	0x08011cd8

080114a0 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 80114a0:	b530      	push	{r4, r5, lr}
 80114a2:	b089      	sub	sp, #36	; 0x24
 80114a4:	ac02      	add	r4, sp, #8
 80114a6:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80114aa:	4d0c      	ldr	r5, [pc, #48]	; (80114dc <SysTimeToMs+0x3c>)
 80114ac:	68eb      	ldr	r3, [r5, #12]
 80114ae:	4798      	blx	r3
 80114b0:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80114b4:	686b      	ldr	r3, [r5, #4]
 80114b6:	4798      	blx	r3
 80114b8:	4603      	mov	r3, r0
 80114ba:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 80114bc:	9a07      	ldr	r2, [sp, #28]
 80114be:	9200      	str	r2, [sp, #0]
 80114c0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80114c4:	a804      	add	r0, sp, #16
 80114c6:	f7ff ff72 	bl	80113ae <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 80114ca:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 80114ce:	9a04      	ldr	r2, [sp, #16]
 80114d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80114d4:	fb00 3002 	mla	r0, r0, r2, r3
 80114d8:	b009      	add	sp, #36	; 0x24
 80114da:	bd30      	pop	{r4, r5, pc}
 80114dc:	08011cd8 	.word	0x08011cd8

080114e0 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 80114e0:	b530      	push	{r4, r5, lr}
 80114e2:	b087      	sub	sp, #28
 80114e4:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 80114e6:	4b12      	ldr	r3, [pc, #72]	; (8011530 <SysTimeFromMs+0x50>)
 80114e8:	fba3 2301 	umull	r2, r3, r3, r1
 80114ec:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 80114ee:	9304      	str	r3, [sp, #16]
 80114f0:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80114f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80114f8:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 80114fc:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8011500:	2300      	movs	r3, #0
 8011502:	9302      	str	r3, [sp, #8]
 8011504:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011506:	4d0b      	ldr	r5, [pc, #44]	; (8011534 <SysTimeFromMs+0x54>)
 8011508:	68eb      	ldr	r3, [r5, #12]
 801150a:	4798      	blx	r3
 801150c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011510:	686b      	ldr	r3, [r5, #4]
 8011512:	4798      	blx	r3
 8011514:	4603      	mov	r3, r0
 8011516:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8011518:	9a03      	ldr	r2, [sp, #12]
 801151a:	9200      	str	r2, [sp, #0]
 801151c:	aa06      	add	r2, sp, #24
 801151e:	e912 0006 	ldmdb	r2, {r1, r2}
 8011522:	4620      	mov	r0, r4
 8011524:	f7ff ff24 	bl	8011370 <SysTimeAdd>
}
 8011528:	4620      	mov	r0, r4
 801152a:	b007      	add	sp, #28
 801152c:	bd30      	pop	{r4, r5, pc}
 801152e:	bf00      	nop
 8011530:	10624dd3 	.word	0x10624dd3
 8011534:	08011cd8 	.word	0x08011cd8

08011538 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8011538:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801153a:	4b03      	ldr	r3, [pc, #12]	; (8011548 <UTIL_TIMER_Init+0x10>)
 801153c:	2200      	movs	r2, #0
 801153e:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8011540:	4b02      	ldr	r3, [pc, #8]	; (801154c <UTIL_TIMER_Init+0x14>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	4798      	blx	r3
}
 8011546:	bd08      	pop	{r3, pc}
 8011548:	2000145c 	.word	0x2000145c
 801154c:	08011cec 	.word	0x08011cec

08011550 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8011550:	b1a8      	cbz	r0, 801157e <UTIL_TIMER_Create+0x2e>
{
 8011552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011554:	4617      	mov	r7, r2
 8011556:	461e      	mov	r6, r3
 8011558:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 801155a:	b193      	cbz	r3, 8011582 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 801155c:	2500      	movs	r5, #0
 801155e:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8011560:	4b09      	ldr	r3, [pc, #36]	; (8011588 <UTIL_TIMER_Create+0x38>)
 8011562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011564:	4608      	mov	r0, r1
 8011566:	4798      	blx	r3
 8011568:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 801156a:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 801156c:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 801156e:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8011570:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8011572:	9b06      	ldr	r3, [sp, #24]
 8011574:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8011576:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8011578:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 801157a:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 801157c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 801157e:	2001      	movs	r0, #1
}
 8011580:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8011582:	2001      	movs	r0, #1
 8011584:	e7fa      	b.n	801157c <UTIL_TIMER_Create+0x2c>
 8011586:	bf00      	nop
 8011588:	08011cec 	.word	0x08011cec

0801158c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801158c:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801158e:	4c03      	ldr	r4, [pc, #12]	; (801159c <UTIL_TIMER_GetCurrentTime+0x10>)
 8011590:	69e3      	ldr	r3, [r4, #28]
 8011592:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8011594:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011596:	4798      	blx	r3
}
 8011598:	bd10      	pop	{r4, pc}
 801159a:	bf00      	nop
 801159c:	08011cec 	.word	0x08011cec

080115a0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80115a0:	b570      	push	{r4, r5, r6, lr}
 80115a2:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80115a4:	4d05      	ldr	r5, [pc, #20]	; (80115bc <UTIL_TIMER_GetElapsedTime+0x1c>)
 80115a6:	69eb      	ldr	r3, [r5, #28]
 80115a8:	4798      	blx	r3
 80115aa:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80115ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80115ae:	4630      	mov	r0, r6
 80115b0:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80115b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80115b4:	1a20      	subs	r0, r4, r0
 80115b6:	4798      	blx	r3
}
 80115b8:	bd70      	pop	{r4, r5, r6, pc}
 80115ba:	bf00      	nop
 80115bc:	08011cec 	.word	0x08011cec

080115c0 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80115c0:	4b05      	ldr	r3, [pc, #20]	; (80115d8 <TimerExists+0x18>)
 80115c2:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80115c4:	e000      	b.n	80115c8 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 80115c6:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 80115c8:	b11b      	cbz	r3, 80115d2 <TimerExists+0x12>
    if( cur == TimerObject )
 80115ca:	4283      	cmp	r3, r0
 80115cc:	d1fb      	bne.n	80115c6 <TimerExists+0x6>
      return true;
 80115ce:	2001      	movs	r0, #1
  }
  return false;
}
 80115d0:	4770      	bx	lr
  return false;
 80115d2:	2000      	movs	r0, #0
 80115d4:	4770      	bx	lr
 80115d6:	bf00      	nop
 80115d8:	2000145c 	.word	0x2000145c

080115dc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80115dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115de:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80115e0:	4e09      	ldr	r6, [pc, #36]	; (8011608 <TimerSetTimeout+0x2c>)
 80115e2:	6a33      	ldr	r3, [r6, #32]
 80115e4:	4798      	blx	r3
 80115e6:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 80115e8:	2301      	movs	r3, #1
 80115ea:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80115ec:	6827      	ldr	r7, [r4, #0]
 80115ee:	69b6      	ldr	r6, [r6, #24]
 80115f0:	47b0      	blx	r6
 80115f2:	4428      	add	r0, r5
 80115f4:	4287      	cmp	r7, r0
 80115f6:	d202      	bcs.n	80115fe <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80115f8:	47b0      	blx	r6
 80115fa:	4428      	add	r0, r5
 80115fc:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80115fe:	4b02      	ldr	r3, [pc, #8]	; (8011608 <TimerSetTimeout+0x2c>)
 8011600:	689b      	ldr	r3, [r3, #8]
 8011602:	6820      	ldr	r0, [r4, #0]
 8011604:	4798      	blx	r3
}
 8011606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011608:	08011cec 	.word	0x08011cec

0801160c <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 801160c:	b368      	cbz	r0, 801166a <UTIL_TIMER_Stop+0x5e>
{
 801160e:	b510      	push	{r4, lr}
 8011610:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011612:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011616:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8011618:	4b15      	ldr	r3, [pc, #84]	; (8011670 <UTIL_TIMER_Stop+0x64>)
 801161a:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 801161c:	2301      	movs	r3, #1
 801161e:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8011620:	b1e1      	cbz	r1, 801165c <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8011622:	2300      	movs	r3, #0
 8011624:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8011626:	4288      	cmp	r0, r1
 8011628:	d006      	beq.n	8011638 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801162a:	460b      	mov	r3, r1
        while( cur != NULL )
 801162c:	b1b3      	cbz	r3, 801165c <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 801162e:	4293      	cmp	r3, r2
 8011630:	d011      	beq.n	8011656 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8011632:	4619      	mov	r1, r3
            cur = cur->Next;
 8011634:	695b      	ldr	r3, [r3, #20]
 8011636:	e7f9      	b.n	801162c <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8011638:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 801163a:	6948      	ldr	r0, [r1, #20]
 801163c:	b120      	cbz	r0, 8011648 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 801163e:	4b0c      	ldr	r3, [pc, #48]	; (8011670 <UTIL_TIMER_Stop+0x64>)
 8011640:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8011642:	f7ff ffcb 	bl	80115dc <TimerSetTimeout>
 8011646:	e009      	b.n	801165c <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8011648:	4b0a      	ldr	r3, [pc, #40]	; (8011674 <UTIL_TIMER_Stop+0x68>)
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	4798      	blx	r3
            TimerListHead = NULL;
 801164e:	4b08      	ldr	r3, [pc, #32]	; (8011670 <UTIL_TIMER_Stop+0x64>)
 8011650:	2200      	movs	r2, #0
 8011652:	601a      	str	r2, [r3, #0]
 8011654:	e002      	b.n	801165c <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8011656:	695b      	ldr	r3, [r3, #20]
 8011658:	b123      	cbz	r3, 8011664 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 801165a:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801165c:	f384 8810 	msr	PRIMASK, r4
}
 8011660:	2000      	movs	r0, #0
}
 8011662:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8011664:	2300      	movs	r3, #0
 8011666:	614b      	str	r3, [r1, #20]
 8011668:	e7f8      	b.n	801165c <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 801166a:	2001      	movs	r0, #1
}
 801166c:	4770      	bx	lr
 801166e:	bf00      	nop
 8011670:	2000145c 	.word	0x2000145c
 8011674:	08011cec 	.word	0x08011cec

08011678 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011678:	4b09      	ldr	r3, [pc, #36]	; (80116a0 <TimerInsertTimer+0x28>)
 801167a:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801167c:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 801167e:	e001      	b.n	8011684 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8011680:	461a      	mov	r2, r3
        next = next->Next;
 8011682:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8011684:	6951      	ldr	r1, [r2, #20]
 8011686:	b139      	cbz	r1, 8011698 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8011688:	6819      	ldr	r1, [r3, #0]
 801168a:	f8d0 c000 	ldr.w	ip, [r0]
 801168e:	458c      	cmp	ip, r1
 8011690:	d8f6      	bhi.n	8011680 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8011692:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8011694:	6143      	str	r3, [r0, #20]
        return;
 8011696:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8011698:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 801169a:	2300      	movs	r3, #0
 801169c:	6143      	str	r3, [r0, #20]
}
 801169e:	4770      	bx	lr
 80116a0:	2000145c 	.word	0x2000145c

080116a4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80116a4:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80116a6:	4b05      	ldr	r3, [pc, #20]	; (80116bc <TimerInsertNewHeadTimer+0x18>)
 80116a8:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 80116aa:	b10b      	cbz	r3, 80116b0 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 80116ac:	2200      	movs	r2, #0
 80116ae:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80116b0:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 80116b2:	4b02      	ldr	r3, [pc, #8]	; (80116bc <TimerInsertNewHeadTimer+0x18>)
 80116b4:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 80116b6:	f7ff ff91 	bl	80115dc <TimerSetTimeout>
}
 80116ba:	bd08      	pop	{r3, pc}
 80116bc:	2000145c 	.word	0x2000145c

080116c0 <UTIL_TIMER_Start>:
{
 80116c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80116c2:	2800      	cmp	r0, #0
 80116c4:	d036      	beq.n	8011734 <UTIL_TIMER_Start+0x74>
 80116c6:	4604      	mov	r4, r0
 80116c8:	f7ff ff7a 	bl	80115c0 <TimerExists>
 80116cc:	2800      	cmp	r0, #0
 80116ce:	d134      	bne.n	801173a <UTIL_TIMER_Start+0x7a>
 80116d0:	7a65      	ldrb	r5, [r4, #9]
 80116d2:	2d00      	cmp	r5, #0
 80116d4:	d133      	bne.n	801173e <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116d6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80116da:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 80116dc:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80116de:	4b19      	ldr	r3, [pc, #100]	; (8011744 <UTIL_TIMER_Start+0x84>)
 80116e0:	6a1b      	ldr	r3, [r3, #32]
 80116e2:	4798      	blx	r3
    if( ticks < minValue )
 80116e4:	4287      	cmp	r7, r0
 80116e6:	d300      	bcc.n	80116ea <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 80116e8:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 80116ea:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 80116ec:	2300      	movs	r3, #0
 80116ee:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 80116f0:	2201      	movs	r2, #1
 80116f2:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80116f4:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 80116f6:	4b14      	ldr	r3, [pc, #80]	; (8011748 <UTIL_TIMER_Start+0x88>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	b183      	cbz	r3, 801171e <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80116fc:	4b11      	ldr	r3, [pc, #68]	; (8011744 <UTIL_TIMER_Start+0x84>)
 80116fe:	699b      	ldr	r3, [r3, #24]
 8011700:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8011702:	6823      	ldr	r3, [r4, #0]
 8011704:	4418      	add	r0, r3
 8011706:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8011708:	4b0f      	ldr	r3, [pc, #60]	; (8011748 <UTIL_TIMER_Start+0x88>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	4298      	cmp	r0, r3
 8011710:	d20c      	bcs.n	801172c <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8011712:	4620      	mov	r0, r4
 8011714:	f7ff ffc6 	bl	80116a4 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011718:	f386 8810 	msr	PRIMASK, r6
}
 801171c:	e00b      	b.n	8011736 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 801171e:	4b09      	ldr	r3, [pc, #36]	; (8011744 <UTIL_TIMER_Start+0x84>)
 8011720:	691b      	ldr	r3, [r3, #16]
 8011722:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8011724:	4620      	mov	r0, r4
 8011726:	f7ff ffbd 	bl	80116a4 <TimerInsertNewHeadTimer>
 801172a:	e7f5      	b.n	8011718 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 801172c:	4620      	mov	r0, r4
 801172e:	f7ff ffa3 	bl	8011678 <TimerInsertTimer>
 8011732:	e7f1      	b.n	8011718 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8011734:	2501      	movs	r5, #1
}
 8011736:	4628      	mov	r0, r5
 8011738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 801173a:	2501      	movs	r5, #1
 801173c:	e7fb      	b.n	8011736 <UTIL_TIMER_Start+0x76>
 801173e:	2501      	movs	r5, #1
 8011740:	e7f9      	b.n	8011736 <UTIL_TIMER_Start+0x76>
 8011742:	bf00      	nop
 8011744:	08011cec 	.word	0x08011cec
 8011748:	2000145c 	.word	0x2000145c

0801174c <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 801174c:	b198      	cbz	r0, 8011776 <UTIL_TIMER_SetPeriod+0x2a>
{
 801174e:	b510      	push	{r4, lr}
 8011750:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8011752:	4b0a      	ldr	r3, [pc, #40]	; (801177c <UTIL_TIMER_SetPeriod+0x30>)
 8011754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011756:	4608      	mov	r0, r1
 8011758:	4798      	blx	r3
 801175a:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 801175c:	4620      	mov	r0, r4
 801175e:	f7ff ff2f 	bl	80115c0 <TimerExists>
 8011762:	b908      	cbnz	r0, 8011768 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8011764:	2000      	movs	r0, #0
}
 8011766:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8011768:	4620      	mov	r0, r4
 801176a:	f7ff ff4f 	bl	801160c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801176e:	4620      	mov	r0, r4
 8011770:	f7ff ffa6 	bl	80116c0 <UTIL_TIMER_Start>
 8011774:	e7f7      	b.n	8011766 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8011776:	2001      	movs	r0, #1
}
 8011778:	4770      	bx	lr
 801177a:	bf00      	nop
 801177c:	08011cec 	.word	0x08011cec

08011780 <UTIL_TIMER_IRQ_Handler>:
{
 8011780:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011782:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011786:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8011788:	4c1e      	ldr	r4, [pc, #120]	; (8011804 <UTIL_TIMER_IRQ_Handler+0x84>)
 801178a:	6963      	ldr	r3, [r4, #20]
 801178c:	4798      	blx	r3
 801178e:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8011790:	6923      	ldr	r3, [r4, #16]
 8011792:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8011794:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8011796:	4b1c      	ldr	r3, [pc, #112]	; (8011808 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	b923      	cbnz	r3, 80117a6 <UTIL_TIMER_IRQ_Handler+0x26>
 801179c:	e018      	b.n	80117d0 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 801179e:	2200      	movs	r2, #0
 80117a0:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 80117a2:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 80117a4:	b1a3      	cbz	r3, 80117d0 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 80117a6:	681a      	ldr	r2, [r3, #0]
 80117a8:	42a2      	cmp	r2, r4
 80117aa:	d9f8      	bls.n	801179e <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 80117ac:	1a31      	subs	r1, r6, r0
 80117ae:	440a      	add	r2, r1
 80117b0:	601a      	str	r2, [r3, #0]
 80117b2:	e7f6      	b.n	80117a2 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 80117b4:	4b14      	ldr	r3, [pc, #80]	; (8011808 <UTIL_TIMER_IRQ_Handler+0x88>)
 80117b6:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 80117b8:	6962      	ldr	r2, [r4, #20]
 80117ba:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 80117bc:	2300      	movs	r3, #0
 80117be:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 80117c0:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 80117c2:	68e3      	ldr	r3, [r4, #12]
 80117c4:	6920      	ldr	r0, [r4, #16]
 80117c6:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80117c8:	8963      	ldrh	r3, [r4, #10]
 80117ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117ce:	d012      	beq.n	80117f6 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80117d0:	4b0d      	ldr	r3, [pc, #52]	; (8011808 <UTIL_TIMER_IRQ_Handler+0x88>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	b13b      	cbz	r3, 80117e6 <UTIL_TIMER_IRQ_Handler+0x66>
 80117d6:	681c      	ldr	r4, [r3, #0]
 80117d8:	2c00      	cmp	r4, #0
 80117da:	d0eb      	beq.n	80117b4 <UTIL_TIMER_IRQ_Handler+0x34>
 80117dc:	4b09      	ldr	r3, [pc, #36]	; (8011804 <UTIL_TIMER_IRQ_Handler+0x84>)
 80117de:	699b      	ldr	r3, [r3, #24]
 80117e0:	4798      	blx	r3
 80117e2:	4284      	cmp	r4, r0
 80117e4:	d3e6      	bcc.n	80117b4 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80117e6:	4b08      	ldr	r3, [pc, #32]	; (8011808 <UTIL_TIMER_IRQ_Handler+0x88>)
 80117e8:	6818      	ldr	r0, [r3, #0]
 80117ea:	b108      	cbz	r0, 80117f0 <UTIL_TIMER_IRQ_Handler+0x70>
 80117ec:	7a03      	ldrb	r3, [r0, #8]
 80117ee:	b133      	cbz	r3, 80117fe <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117f0:	f385 8810 	msr	PRIMASK, r5
}
 80117f4:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 80117f6:	4620      	mov	r0, r4
 80117f8:	f7ff ff62 	bl	80116c0 <UTIL_TIMER_Start>
 80117fc:	e7e8      	b.n	80117d0 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 80117fe:	f7ff feed 	bl	80115dc <TimerSetTimeout>
 8011802:	e7f5      	b.n	80117f0 <UTIL_TIMER_IRQ_Handler+0x70>
 8011804:	08011cec 	.word	0x08011cec
 8011808:	2000145c 	.word	0x2000145c

0801180c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801180c:	4601      	mov	r1, r0
  int i = 0;
 801180e:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8011810:	e008      	b.n	8011824 <ee_skip_atoi+0x18>
 8011812:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011816:	1c53      	adds	r3, r2, #1
 8011818:	600b      	str	r3, [r1, #0]
 801181a:	7813      	ldrb	r3, [r2, #0]
 801181c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8011820:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8011824:	680a      	ldr	r2, [r1, #0]
 8011826:	7813      	ldrb	r3, [r2, #0]
 8011828:	3b30      	subs	r3, #48	; 0x30
 801182a:	b2db      	uxtb	r3, r3
 801182c:	2b09      	cmp	r3, #9
 801182e:	d9f0      	bls.n	8011812 <ee_skip_atoi+0x6>
  return i;
}
 8011830:	4770      	bx	lr
	...

08011834 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8011834:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8011838:	b093      	sub	sp, #76	; 0x4c
 801183a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801183c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801183e:	f016 0f40 	tst.w	r6, #64	; 0x40
 8011842:	d110      	bne.n	8011866 <ee_number+0x32>
  char *dig = lower_digits;
 8011844:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8011940 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8011848:	1e9f      	subs	r7, r3, #2
 801184a:	2f22      	cmp	r7, #34	; 0x22
 801184c:	d875      	bhi.n	801193a <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 801184e:	f016 0401 	ands.w	r4, r6, #1
 8011852:	d00b      	beq.n	801186c <ee_number+0x38>
 8011854:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8011858:	f016 0f02 	tst.w	r6, #2
 801185c:	d00f      	beq.n	801187e <ee_number+0x4a>
  {
    if (num < 0)
 801185e:	2a00      	cmp	r2, #0
 8011860:	db07      	blt.n	8011872 <ee_number+0x3e>
  sign = 0;
 8011862:	2700      	movs	r7, #0
 8011864:	e00c      	b.n	8011880 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8011866:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8011944 <ee_number+0x110>
 801186a:	e7ed      	b.n	8011848 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 801186c:	f04f 0e20 	mov.w	lr, #32
 8011870:	e7f2      	b.n	8011858 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8011872:	4252      	negs	r2, r2
      size--;
 8011874:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8011876:	3e01      	subs	r6, #1
 8011878:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 801187a:	272d      	movs	r7, #45	; 0x2d
 801187c:	e000      	b.n	8011880 <ee_number+0x4c>
  sign = 0;
 801187e:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8011880:	bb5a      	cbnz	r2, 80118da <ee_number+0xa6>
    tmp[i++] = '0';
 8011882:	2330      	movs	r3, #48	; 0x30
 8011884:	f88d 3004 	strb.w	r3, [sp, #4]
 8011888:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 801188c:	45ac      	cmp	ip, r5
 801188e:	dd00      	ble.n	8011892 <ee_number+0x5e>
 8011890:	4665      	mov	r5, ip
  size -= precision;
 8011892:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011894:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8011896:	b31c      	cbz	r4, 80118e0 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8011898:	b11f      	cbz	r7, 80118a2 <ee_number+0x6e>
 801189a:	f800 7b01 	strb.w	r7, [r0], #1
 801189e:	3901      	subs	r1, #1
 80118a0:	d007      	beq.n	80118b2 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80118a8:	dd24      	ble.n	80118f4 <ee_number+0xc0>
 80118aa:	f800 eb01 	strb.w	lr, [r0], #1
 80118ae:	3901      	subs	r1, #1
 80118b0:	d1f7      	bne.n	80118a2 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 80118b2:	b013      	add	sp, #76	; 0x4c
 80118b4:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80118b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80118bc:	fb03 2216 	mls	r2, r3, r6, r2
 80118c0:	f81a 8002 	ldrb.w	r8, [sl, r2]
 80118c4:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 80118c8:	446a      	add	r2, sp
 80118ca:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 80118ce:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80118d0:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 80118d4:	2a00      	cmp	r2, #0
 80118d6:	d1ef      	bne.n	80118b8 <ee_number+0x84>
 80118d8:	e7d8      	b.n	801188c <ee_number+0x58>
  i = 0;
 80118da:	f04f 0c00 	mov.w	ip, #0
 80118de:	e7f9      	b.n	80118d4 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80118e6:	ddd7      	ble.n	8011898 <ee_number+0x64>
 80118e8:	2220      	movs	r2, #32
 80118ea:	f800 2b01 	strb.w	r2, [r0], #1
 80118ee:	3901      	subs	r1, #1
 80118f0:	d1f6      	bne.n	80118e0 <ee_number+0xac>
 80118f2:	e7de      	b.n	80118b2 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 80118f4:	4565      	cmp	r5, ip
 80118f6:	f105 35ff 	add.w	r5, r5, #4294967295
 80118fa:	dd05      	ble.n	8011908 <ee_number+0xd4>
 80118fc:	2230      	movs	r2, #48	; 0x30
 80118fe:	f800 2b01 	strb.w	r2, [r0], #1
 8011902:	3901      	subs	r1, #1
 8011904:	d1f6      	bne.n	80118f4 <ee_number+0xc0>
 8011906:	e7d4      	b.n	80118b2 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8011908:	4662      	mov	r2, ip
 801190a:	2a00      	cmp	r2, #0
 801190c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011910:	dd09      	ble.n	8011926 <ee_number+0xf2>
 8011912:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8011916:	446a      	add	r2, sp
 8011918:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 801191c:	f800 2b01 	strb.w	r2, [r0], #1
 8011920:	3901      	subs	r1, #1
 8011922:	d1f1      	bne.n	8011908 <ee_number+0xd4>
 8011924:	e7c5      	b.n	80118b2 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8011926:	2b00      	cmp	r3, #0
 8011928:	f103 33ff 	add.w	r3, r3, #4294967295
 801192c:	ddc1      	ble.n	80118b2 <ee_number+0x7e>
 801192e:	2220      	movs	r2, #32
 8011930:	f800 2b01 	strb.w	r2, [r0], #1
 8011934:	3901      	subs	r1, #1
 8011936:	d1f6      	bne.n	8011926 <ee_number+0xf2>
 8011938:	e7bb      	b.n	80118b2 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 801193a:	2000      	movs	r0, #0
 801193c:	e7b9      	b.n	80118b2 <ee_number+0x7e>
 801193e:	bf00      	nop
 8011940:	08012aa0 	.word	0x08012aa0
 8011944:	08012ac8 	.word	0x08012ac8

08011948 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8011948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801194c:	b087      	sub	sp, #28
 801194e:	9205      	str	r2, [sp, #20]
 8011950:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8011952:	1e0f      	subs	r7, r1, #0
 8011954:	f340 80b8 	ble.w	8011ac8 <tiny_vsnprintf_like+0x180>
 8011958:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801195a:	4604      	mov	r4, r0
 801195c:	e004      	b.n	8011968 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 801195e:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8011962:	9b05      	ldr	r3, [sp, #20]
 8011964:	3301      	adds	r3, #1
 8011966:	9305      	str	r3, [sp, #20]
 8011968:	9905      	ldr	r1, [sp, #20]
 801196a:	780a      	ldrb	r2, [r1, #0]
 801196c:	b922      	cbnz	r2, 8011978 <tiny_vsnprintf_like+0x30>
 801196e:	1ba3      	subs	r3, r4, r6
 8011970:	1e78      	subs	r0, r7, #1
 8011972:	4283      	cmp	r3, r0
 8011974:	f2c0 80a2 	blt.w	8011abc <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8011978:	1ba3      	subs	r3, r4, r6
 801197a:	f107 38ff 	add.w	r8, r7, #4294967295
 801197e:	4543      	cmp	r3, r8
 8011980:	f280 809c 	bge.w	8011abc <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8011984:	2a25      	cmp	r2, #37	; 0x25
 8011986:	d1ea      	bne.n	801195e <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8011988:	1c4b      	adds	r3, r1, #1
 801198a:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 801198c:	784b      	ldrb	r3, [r1, #1]
 801198e:	2b30      	cmp	r3, #48	; 0x30
 8011990:	d020      	beq.n	80119d4 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8011992:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8011996:	3b30      	subs	r3, #48	; 0x30
 8011998:	b2db      	uxtb	r3, r3
 801199a:	2b09      	cmp	r3, #9
 801199c:	d91d      	bls.n	80119da <tiny_vsnprintf_like+0x92>
    field_width = -1;
 801199e:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 80119a2:	9b05      	ldr	r3, [sp, #20]
 80119a4:	781a      	ldrb	r2, [r3, #0]
 80119a6:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 80119aa:	2b20      	cmp	r3, #32
 80119ac:	d867      	bhi.n	8011a7e <tiny_vsnprintf_like+0x136>
 80119ae:	e8df f003 	tbb	[pc, r3]
 80119b2:	664a      	.short	0x664a
 80119b4:	66666666 	.word	0x66666666
 80119b8:	66666666 	.word	0x66666666
 80119bc:	66621e66 	.word	0x66621e66
 80119c0:	62666666 	.word	0x62666666
 80119c4:	66666666 	.word	0x66666666
 80119c8:	66666666 	.word	0x66666666
 80119cc:	19662866 	.word	0x19662866
 80119d0:	6666      	.short	0x6666
 80119d2:	7c          	.byte	0x7c
 80119d3:	00          	.byte	0x00
      flags |= ZEROPAD;
 80119d4:	f04f 0901 	mov.w	r9, #1
 80119d8:	e7dd      	b.n	8011996 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 80119da:	a805      	add	r0, sp, #20
 80119dc:	f7ff ff16 	bl	801180c <ee_skip_atoi>
 80119e0:	4605      	mov	r5, r0
 80119e2:	e7de      	b.n	80119a2 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 80119e4:	230a      	movs	r3, #10
 80119e6:	e031      	b.n	8011a4c <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 80119e8:	2320      	movs	r3, #32
 80119ea:	f804 3b01 	strb.w	r3, [r4], #1
 80119ee:	3d01      	subs	r5, #1
 80119f0:	2d00      	cmp	r5, #0
 80119f2:	dcf9      	bgt.n	80119e8 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 80119f4:	9b04      	ldr	r3, [sp, #16]
 80119f6:	1d1a      	adds	r2, r3, #4
 80119f8:	9204      	str	r2, [sp, #16]
 80119fa:	781b      	ldrb	r3, [r3, #0]
 80119fc:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8011a00:	e7af      	b.n	8011962 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8011a02:	9b04      	ldr	r3, [sp, #16]
 8011a04:	1d1a      	adds	r2, r3, #4
 8011a06:	9204      	str	r2, [sp, #16]
 8011a08:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8011a0c:	f1b8 0f00 	cmp.w	r8, #0
 8011a10:	d003      	beq.n	8011a1a <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8011a12:	4640      	mov	r0, r8
 8011a14:	f7ee fbb0 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8011a18:	e006      	b.n	8011a28 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8011a1a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8011acc <tiny_vsnprintf_like+0x184>
 8011a1e:	e7f8      	b.n	8011a12 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8011a20:	2220      	movs	r2, #32
 8011a22:	f804 2b01 	strb.w	r2, [r4], #1
 8011a26:	461d      	mov	r5, r3
 8011a28:	1e6b      	subs	r3, r5, #1
 8011a2a:	4285      	cmp	r5, r0
 8011a2c:	dcf8      	bgt.n	8011a20 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8011a2e:	2200      	movs	r2, #0
 8011a30:	e006      	b.n	8011a40 <tiny_vsnprintf_like+0xf8>
 8011a32:	4643      	mov	r3, r8
 8011a34:	f813 1b01 	ldrb.w	r1, [r3], #1
 8011a38:	f804 1b01 	strb.w	r1, [r4], #1
 8011a3c:	3201      	adds	r2, #1
 8011a3e:	4698      	mov	r8, r3
 8011a40:	4282      	cmp	r2, r0
 8011a42:	dbf6      	blt.n	8011a32 <tiny_vsnprintf_like+0xea>
 8011a44:	e78d      	b.n	8011962 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8011a46:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8011a4a:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8011a4c:	f019 0f02 	tst.w	r9, #2
 8011a50:	d02f      	beq.n	8011ab2 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8011a52:	9a04      	ldr	r2, [sp, #16]
 8011a54:	1d11      	adds	r1, r2, #4
 8011a56:	9104      	str	r1, [sp, #16]
 8011a58:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8011a5a:	1ba1      	subs	r1, r4, r6
 8011a5c:	f8cd 9008 	str.w	r9, [sp, #8]
 8011a60:	f04f 30ff 	mov.w	r0, #4294967295
 8011a64:	9001      	str	r0, [sp, #4]
 8011a66:	9500      	str	r5, [sp, #0]
 8011a68:	eba8 0101 	sub.w	r1, r8, r1
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	f7ff fee1 	bl	8011834 <ee_number>
 8011a72:	4604      	mov	r4, r0
 8011a74:	e775      	b.n	8011962 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8011a76:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8011a7a:	230a      	movs	r3, #10
 8011a7c:	e7e6      	b.n	8011a4c <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8011a7e:	2a25      	cmp	r2, #37	; 0x25
 8011a80:	d002      	beq.n	8011a88 <tiny_vsnprintf_like+0x140>
 8011a82:	2325      	movs	r3, #37	; 0x25
 8011a84:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8011a88:	1ba3      	subs	r3, r4, r6
 8011a8a:	4598      	cmp	r8, r3
 8011a8c:	dd0f      	ble.n	8011aae <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8011a8e:	9b05      	ldr	r3, [sp, #20]
 8011a90:	781a      	ldrb	r2, [r3, #0]
 8011a92:	b13a      	cbz	r2, 8011aa4 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8011a94:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8011a98:	1ba3      	subs	r3, r4, r6
 8011a9a:	4598      	cmp	r8, r3
 8011a9c:	f73f af61 	bgt.w	8011962 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8011aa0:	230a      	movs	r3, #10
 8011aa2:	e7d3      	b.n	8011a4c <tiny_vsnprintf_like+0x104>
          --fmt;
 8011aa4:	3b01      	subs	r3, #1
 8011aa6:	9305      	str	r3, [sp, #20]
 8011aa8:	e7f6      	b.n	8011a98 <tiny_vsnprintf_like+0x150>
        base = 16;
 8011aaa:	2310      	movs	r3, #16
 8011aac:	e7ce      	b.n	8011a4c <tiny_vsnprintf_like+0x104>
    base = 10;
 8011aae:	230a      	movs	r3, #10
 8011ab0:	e7cc      	b.n	8011a4c <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8011ab2:	9a04      	ldr	r2, [sp, #16]
 8011ab4:	1d11      	adds	r1, r2, #4
 8011ab6:	9104      	str	r1, [sp, #16]
 8011ab8:	6812      	ldr	r2, [r2, #0]
 8011aba:	e7ce      	b.n	8011a5a <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8011abc:	2300      	movs	r3, #0
 8011abe:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8011ac0:	1ba0      	subs	r0, r4, r6
}
 8011ac2:	b007      	add	sp, #28
 8011ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8011ac8:	2000      	movs	r0, #0
 8011aca:	e7fa      	b.n	8011ac2 <tiny_vsnprintf_like+0x17a>
 8011acc:	08012af0 	.word	0x08012af0

08011ad0 <memset>:
 8011ad0:	4402      	add	r2, r0
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	4293      	cmp	r3, r2
 8011ad6:	d100      	bne.n	8011ada <memset+0xa>
 8011ad8:	4770      	bx	lr
 8011ada:	f803 1b01 	strb.w	r1, [r3], #1
 8011ade:	e7f9      	b.n	8011ad4 <memset+0x4>

08011ae0 <__libc_init_array>:
 8011ae0:	b570      	push	{r4, r5, r6, lr}
 8011ae2:	4d0d      	ldr	r5, [pc, #52]	; (8011b18 <__libc_init_array+0x38>)
 8011ae4:	4c0d      	ldr	r4, [pc, #52]	; (8011b1c <__libc_init_array+0x3c>)
 8011ae6:	1b64      	subs	r4, r4, r5
 8011ae8:	10a4      	asrs	r4, r4, #2
 8011aea:	2600      	movs	r6, #0
 8011aec:	42a6      	cmp	r6, r4
 8011aee:	d109      	bne.n	8011b04 <__libc_init_array+0x24>
 8011af0:	4d0b      	ldr	r5, [pc, #44]	; (8011b20 <__libc_init_array+0x40>)
 8011af2:	4c0c      	ldr	r4, [pc, #48]	; (8011b24 <__libc_init_array+0x44>)
 8011af4:	f000 f898 	bl	8011c28 <_init>
 8011af8:	1b64      	subs	r4, r4, r5
 8011afa:	10a4      	asrs	r4, r4, #2
 8011afc:	2600      	movs	r6, #0
 8011afe:	42a6      	cmp	r6, r4
 8011b00:	d105      	bne.n	8011b0e <__libc_init_array+0x2e>
 8011b02:	bd70      	pop	{r4, r5, r6, pc}
 8011b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b08:	4798      	blx	r3
 8011b0a:	3601      	adds	r6, #1
 8011b0c:	e7ee      	b.n	8011aec <__libc_init_array+0xc>
 8011b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b12:	4798      	blx	r3
 8011b14:	3601      	adds	r6, #1
 8011b16:	e7f2      	b.n	8011afe <__libc_init_array+0x1e>
 8011b18:	08012b00 	.word	0x08012b00
 8011b1c:	08012b00 	.word	0x08012b00
 8011b20:	08012b00 	.word	0x08012b00
 8011b24:	08012b04 	.word	0x08012b04

08011b28 <floor>:
 8011b28:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b30:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011b34:	2e13      	cmp	r6, #19
 8011b36:	460b      	mov	r3, r1
 8011b38:	4607      	mov	r7, r0
 8011b3a:	460c      	mov	r4, r1
 8011b3c:	4605      	mov	r5, r0
 8011b3e:	dc32      	bgt.n	8011ba6 <floor+0x7e>
 8011b40:	2e00      	cmp	r6, #0
 8011b42:	da14      	bge.n	8011b6e <floor+0x46>
 8011b44:	a334      	add	r3, pc, #208	; (adr r3, 8011c18 <floor+0xf0>)
 8011b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b4a:	f7ee fb23 	bl	8000194 <__adddf3>
 8011b4e:	2200      	movs	r2, #0
 8011b50:	2300      	movs	r3, #0
 8011b52:	f7ee fd53 	bl	80005fc <__aeabi_dcmpgt>
 8011b56:	b138      	cbz	r0, 8011b68 <floor+0x40>
 8011b58:	2c00      	cmp	r4, #0
 8011b5a:	da56      	bge.n	8011c0a <floor+0xe2>
 8011b5c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011b60:	4325      	orrs	r5, r4
 8011b62:	d055      	beq.n	8011c10 <floor+0xe8>
 8011b64:	4c2e      	ldr	r4, [pc, #184]	; (8011c20 <floor+0xf8>)
 8011b66:	2500      	movs	r5, #0
 8011b68:	4623      	mov	r3, r4
 8011b6a:	462f      	mov	r7, r5
 8011b6c:	e025      	b.n	8011bba <floor+0x92>
 8011b6e:	4a2d      	ldr	r2, [pc, #180]	; (8011c24 <floor+0xfc>)
 8011b70:	fa42 f806 	asr.w	r8, r2, r6
 8011b74:	ea01 0208 	and.w	r2, r1, r8
 8011b78:	4302      	orrs	r2, r0
 8011b7a:	d01e      	beq.n	8011bba <floor+0x92>
 8011b7c:	a326      	add	r3, pc, #152	; (adr r3, 8011c18 <floor+0xf0>)
 8011b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b82:	f7ee fb07 	bl	8000194 <__adddf3>
 8011b86:	2200      	movs	r2, #0
 8011b88:	2300      	movs	r3, #0
 8011b8a:	f7ee fd37 	bl	80005fc <__aeabi_dcmpgt>
 8011b8e:	2800      	cmp	r0, #0
 8011b90:	d0ea      	beq.n	8011b68 <floor+0x40>
 8011b92:	2c00      	cmp	r4, #0
 8011b94:	bfbe      	ittt	lt
 8011b96:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011b9a:	4133      	asrlt	r3, r6
 8011b9c:	18e4      	addlt	r4, r4, r3
 8011b9e:	ea24 0408 	bic.w	r4, r4, r8
 8011ba2:	2500      	movs	r5, #0
 8011ba4:	e7e0      	b.n	8011b68 <floor+0x40>
 8011ba6:	2e33      	cmp	r6, #51	; 0x33
 8011ba8:	dd0b      	ble.n	8011bc2 <floor+0x9a>
 8011baa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011bae:	d104      	bne.n	8011bba <floor+0x92>
 8011bb0:	4602      	mov	r2, r0
 8011bb2:	f7ee faef 	bl	8000194 <__adddf3>
 8011bb6:	4607      	mov	r7, r0
 8011bb8:	460b      	mov	r3, r1
 8011bba:	4638      	mov	r0, r7
 8011bbc:	4619      	mov	r1, r3
 8011bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bc2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8011bc6:	f04f 38ff 	mov.w	r8, #4294967295
 8011bca:	fa28 f802 	lsr.w	r8, r8, r2
 8011bce:	ea10 0f08 	tst.w	r0, r8
 8011bd2:	d0f2      	beq.n	8011bba <floor+0x92>
 8011bd4:	a310      	add	r3, pc, #64	; (adr r3, 8011c18 <floor+0xf0>)
 8011bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bda:	f7ee fadb 	bl	8000194 <__adddf3>
 8011bde:	2200      	movs	r2, #0
 8011be0:	2300      	movs	r3, #0
 8011be2:	f7ee fd0b 	bl	80005fc <__aeabi_dcmpgt>
 8011be6:	2800      	cmp	r0, #0
 8011be8:	d0be      	beq.n	8011b68 <floor+0x40>
 8011bea:	2c00      	cmp	r4, #0
 8011bec:	da0a      	bge.n	8011c04 <floor+0xdc>
 8011bee:	2e14      	cmp	r6, #20
 8011bf0:	d101      	bne.n	8011bf6 <floor+0xce>
 8011bf2:	3401      	adds	r4, #1
 8011bf4:	e006      	b.n	8011c04 <floor+0xdc>
 8011bf6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	40b3      	lsls	r3, r6
 8011bfe:	441d      	add	r5, r3
 8011c00:	42af      	cmp	r7, r5
 8011c02:	d8f6      	bhi.n	8011bf2 <floor+0xca>
 8011c04:	ea25 0508 	bic.w	r5, r5, r8
 8011c08:	e7ae      	b.n	8011b68 <floor+0x40>
 8011c0a:	2500      	movs	r5, #0
 8011c0c:	462c      	mov	r4, r5
 8011c0e:	e7ab      	b.n	8011b68 <floor+0x40>
 8011c10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011c14:	e7a8      	b.n	8011b68 <floor+0x40>
 8011c16:	bf00      	nop
 8011c18:	8800759c 	.word	0x8800759c
 8011c1c:	7e37e43c 	.word	0x7e37e43c
 8011c20:	bff00000 	.word	0xbff00000
 8011c24:	000fffff 	.word	0x000fffff

08011c28 <_init>:
 8011c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c2a:	bf00      	nop
 8011c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c2e:	bc08      	pop	{r3}
 8011c30:	469e      	mov	lr, r3
 8011c32:	4770      	bx	lr

08011c34 <_fini>:
 8011c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c36:	bf00      	nop
 8011c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c3a:	bc08      	pop	{r3}
 8011c3c:	469e      	mov	lr, r3
 8011c3e:	4770      	bx	lr
